This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 08:47:45,506 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 08:47:45,507 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 08:47:45,518 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 08:47:45,518 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 08:47:45,519 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 08:47:45,520 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 08:47:45,521 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 08:47:45,523 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 08:47:45,523 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 08:47:45,524 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 08:47:45,524 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 08:47:45,525 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 08:47:45,525 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 08:47:45,526 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 08:47:45,527 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 08:47:45,527 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 08:47:45,528 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 08:47:45,530 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 08:47:45,531 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 08:47:45,532 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 08:47:45,532 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 08:47:45,534 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 08:47:45,534 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 08:47:45,534 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 08:47:45,535 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 08:47:45,535 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 08:47:45,536 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 08:47:45,536 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 08:47:45,536 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 08:47:45,536 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 08:47:45,537 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 08:47:45,537 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 08:47:45,538 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 08:47:45,539 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 08:47:45,539 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 08:47:45,539 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 08:47:45,539 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 08:47:45,539 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 08:47:45,540 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 08:47:45,541 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 08:47:45,541 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 08:47:45,548 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 08:47:45,548 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 08:47:45,549 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 08:47:45,549 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 08:47:45,549 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 08:47:45,549 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 08:47:45,549 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 08:47:45,549 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 08:47:45,550 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 08:47:45,550 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 08:47:45,550 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 08:47:45,550 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 08:47:45,550 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 08:47:45,550 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 08:47:45,550 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 08:47:45,550 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 08:47:45,550 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 08:47:45,550 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 08:47:45,551 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 08:47:45,551 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 08:47:45,551 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 08:47:45,551 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 08:47:45,551 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 08:47:45,551 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 08:47:45,551 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 08:47:45,551 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 08:47:45,572 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 08:47:45,584 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 08:47:45,586 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 08:47:45,587 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 08:47:45,588 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 08:47:45,588 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transferfrom-fail.bpl
[2020-11-25 08:47:45,588 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transferfrom-fail.bpl'
[2020-11-25 08:47:45,708 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 08:47:45,709 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 08:47:45,709 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 08:47:45,710 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 08:47:45,710 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 08:47:45,727 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:47:45" (1/1) ...
[2020-11-25 08:47:45,728 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:47:45" (1/1) ...
[2020-11-25 08:47:45,782 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:47:45" (1/1) ...
[2020-11-25 08:47:45,784 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:47:45" (1/1) ...
[2020-11-25 08:47:45,819 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:47:45" (1/1) ...
[2020-11-25 08:47:45,842 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:47:45" (1/1) ...
[2020-11-25 08:47:45,858 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:47:45" (1/1) ...
[2020-11-25 08:47:45,879 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 08:47:45,880 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 08:47:45,880 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 08:47:45,882 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 08:47:45,886 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:47:45" (1/1) ...
[2020-11-25 08:47:45,911 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20Pausable.transferFrom(from, to, value), from != to && (value > _balances_ERC20[this][from] || value > _allowances_ERC20[this][from][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20Pausable.transferFrom)))
[2020-11-25 08:47:45,917 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20Pausable.transferFrom(from, to, value), from != to && (value > _balances_ERC20[this][from] || value > _allowances_ERC20[this][from][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20Pausable.transferFrom)))
[2020-11-25 08:47:45,925 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20Pausable.transferFrom(from, to, value), from != to && (value > _balances_ERC20[this][from] || value > _allowances_ERC20[this][from][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20Pausable.transferFrom)))
[2020-11-25 08:47:45,937 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( from_s1061!=to_s1061 && ( ( value_s1061>_balances_ERC20[this][from_s1061] || value_s1061>_allowances_ERC20[this][from_s1061][msg.sender] ) || ( _balances_ERC20[this][to_s1061] + value_s1061 )>=115792089237316195423570985008687907853269984665640564039457584007913129639936 ) ) && value_s1061>=0 ) && value_s1061<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][to_s1061]>=0 ) && _balances_ERC20[this][to_s1061]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][from_s1061]>=0 ) && _balances_ERC20[this][from_s1061]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _allowances_ERC20[this][from_s1061][msg.sender]>=0 ) && _allowances_ERC20[this][from_s1061][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[from_s1061,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>],IdentifierExpression[to_s1061,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]],BinaryExpression[LOGICOR,BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[value_s1061,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s1061,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]],BinaryExpression[COMPGT,IdentifierExpression[value_s1061,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s1061,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]]],BinaryExpression[COMPGEQ,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[to_s1061,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],IdentifierExpression[value_s1061,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]],BinaryExpression[COMPGEQ,IdentifierExpression[value_s1061,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[value_s1061,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[to_s1061,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[to_s1061,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s1061,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s1061,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s1061,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s1061,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 08:47:45,946 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20Pausable.transferFrom(from, to, value), from != to && (value > _balances_ERC20[this][from] || value > _allowances_ERC20[this][from][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20Pausable.transferFrom)))
[2020-11-25 08:47:45,946 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_ERC20Pausable0) ==> ( <>AP(fail_transferFrom_ERC20Pausable0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 08:47:45,967 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:47:45 PropertyContainer
[2020-11-25 08:47:45,967 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 08:47:45,967 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 08:47:45,967 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 08:47:45,967 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 08:47:45,968 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:47:45" (1/2) ...
[2020-11-25 08:47:45,969 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 08:47:45,969 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 08:47:45,996 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:47:45" (2/2) ...
[2020-11-25 08:47:45,996 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 08:47:45,997 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 08:47:45,997 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 08:47:45,997 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 08:47:45,998 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:47:45" (1/2) ...
[2020-11-25 08:47:46,054 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 08:47:46,054 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__success
[2020-11-25 08:47:46,054 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 08:47:46,054 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 08:47:46,054 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 08:47:46,054 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 08:47:46,054 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 08:47:46,055 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 08:47:46,055 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 08:47:46,055 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 08:47:46,055 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 08:47:46,055 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-25 08:47:46,055 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-25 08:47:46,055 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-25 08:47:46,055 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-25 08:47:46,055 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable
[2020-11-25 08:47:46,056 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable
[2020-11-25 08:47:46,056 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable
[2020-11-25 08:47:46,056 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable
[2020-11-25 08:47:46,056 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-25 08:47:46,056 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-25 08:47:46,057 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__success
[2020-11-25 08:47:46,057 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 08:47:46,057 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 08:47:46,057 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 08:47:46,057 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 08:47:46,057 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 08:47:46,057 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 08:47:46,057 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 08:47:46,057 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 08:47:46,057 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 08:47:46,058 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 08:47:46,058 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 08:47:46,058 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 08:47:46,058 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 08:47:46,058 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 08:47:46,058 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 08:47:46,058 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 08:47:46,058 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 08:47:46,058 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 08:47:46,058 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 08:47:46,059 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 08:47:46,059 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 08:47:46,059 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 08:47:46,059 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 08:47:46,059 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 08:47:46,059 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 08:47:46,059 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 08:47:46,059 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 08:47:46,059 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 08:47:46,059 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 08:47:46,060 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 08:47:46,060 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 08:47:46,060 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 08:47:46,060 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 08:47:46,060 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 08:47:46,060 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 08:47:46,060 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 08:47:46,060 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 08:47:46,060 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 08:47:46,060 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 08:47:46,060 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 08:47:46,061 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 08:47:46,061 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 08:47:46,061 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 08:47:46,061 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles
[2020-11-25 08:47:46,061 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles
[2020-11-25 08:47:46,061 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__success
[2020-11-25 08:47:46,061 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__success
[2020-11-25 08:47:46,061 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__success
[2020-11-25 08:47:46,061 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 08:47:46,061 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole
[2020-11-25 08:47:46,062 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole
[2020-11-25 08:47:46,062 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole
[2020-11-25 08:47:46,062 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole
[2020-11-25 08:47:46,062 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole
[2020-11-25 08:47:46,062 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole
[2020-11-25 08:47:46,062 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole
[2020-11-25 08:47:46,062 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole
[2020-11-25 08:47:46,062 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__success
[2020-11-25 08:47:46,062 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__success
[2020-11-25 08:47:46,062 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 08:47:46,063 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-25 08:47:46,063 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-25 08:47:46,063 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-25 08:47:46,063 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-25 08:47:46,063 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-25 08:47:46,063 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-25 08:47:46,063 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-25 08:47:46,063 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-25 08:47:46,063 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 08:47:46,063 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 08:47:46,064 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 08:47:46,064 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 08:47:46,064 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 08:47:46,064 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 08:47:46,064 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 08:47:46,064 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable
[2020-11-25 08:47:46,064 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable
[2020-11-25 08:47:46,064 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 08:47:46,064 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 08:47:46,064 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 08:47:46,064 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 08:47:46,065 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 08:47:46,065 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole
[2020-11-25 08:47:46,065 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole
[2020-11-25 08:47:46,065 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole
[2020-11-25 08:47:46,065 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole
[2020-11-25 08:47:46,065 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole
[2020-11-25 08:47:46,065 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole
[2020-11-25 08:47:46,065 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole
[2020-11-25 08:47:46,065 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole
[2020-11-25 08:47:46,066 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__success
[2020-11-25 08:47:46,066 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__success
[2020-11-25 08:47:46,066 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 08:47:46,066 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 08:47:46,066 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 08:47:46,066 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 08:47:46,066 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 08:47:46,066 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-25 08:47:46,066 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable
[2020-11-25 08:47:46,066 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable
[2020-11-25 08:47:46,067 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable
[2020-11-25 08:47:46,067 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable
[2020-11-25 08:47:46,067 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-25 08:47:46,067 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-25 08:47:46,067 INFO  L130     BoogieDeclarations]: Found specification of procedure Wafl_Wafl_NoBaseCtor__success
[2020-11-25 08:47:46,067 INFO  L130     BoogieDeclarations]: Found specification of procedure Wafl_Wafl
[2020-11-25 08:47:46,067 INFO  L138     BoogieDeclarations]: Found implementation of procedure Wafl_Wafl
[2020-11-25 08:47:46,067 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 08:47:46,067 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 08:47:46,067 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 08:47:46,068 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 08:47:46,068 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__success
[2020-11-25 08:47:46,068 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-25 08:47:46,068 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-25 08:47:46,068 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__success
[2020-11-25 08:47:46,068 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 08:47:46,068 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 08:47:46,068 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-25 08:47:46,068 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-25 08:47:46,069 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 08:47:46,069 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 08:47:46,069 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 08:47:46,069 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 08:47:46,069 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 08:47:46,069 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 08:47:46,069 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Roles
[2020-11-25 08:47:46,069 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Roles
[2020-11-25 08:47:46,069 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_PauserRole
[2020-11-25 08:47:46,069 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_PauserRole
[2020-11-25 08:47:46,070 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-25 08:47:46,070 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-25 08:47:46,070 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Pausable
[2020-11-25 08:47:46,070 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Pausable
[2020-11-25 08:47:46,070 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MinterRole
[2020-11-25 08:47:46,070 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MinterRole
[2020-11-25 08:47:46,070 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Mintable
[2020-11-25 08:47:46,070 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Mintable
[2020-11-25 08:47:46,070 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Burnable
[2020-11-25 08:47:46,070 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Burnable
[2020-11-25 08:47:46,070 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Wafl
[2020-11-25 08:47:46,071 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 08:47:46,071 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 08:47:46,071 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__fail
[2020-11-25 08:47:46,071 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 08:47:46,071 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 08:47:46,071 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 08:47:46,071 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 08:47:46,071 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 08:47:46,071 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 08:47:46,071 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 08:47:46,072 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 08:47:46,072 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 08:47:46,072 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-25 08:47:46,072 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-25 08:47:46,072 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-25 08:47:46,072 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-25 08:47:46,072 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable__success
[2020-11-25 08:47:46,072 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable__fail
[2020-11-25 08:47:46,072 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__success
[2020-11-25 08:47:46,072 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__fail
[2020-11-25 08:47:46,072 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-25 08:47:46,073 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-25 08:47:46,073 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 08:47:46,073 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 08:47:46,073 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 08:47:46,073 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 08:47:46,073 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 08:47:46,073 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 08:47:46,073 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 08:47:46,073 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 08:47:46,073 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 08:47:46,073 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 08:47:46,073 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 08:47:46,074 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 08:47:46,074 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 08:47:46,074 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 08:47:46,074 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 08:47:46,074 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 08:47:46,074 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 08:47:46,074 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 08:47:46,074 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 08:47:46,074 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 08:47:46,074 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 08:47:46,074 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 08:47:46,075 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 08:47:46,075 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 08:47:46,075 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 08:47:46,075 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 08:47:46,075 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 08:47:46,075 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 08:47:46,075 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 08:47:46,075 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 08:47:46,075 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 08:47:46,075 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 08:47:46,075 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 08:47:46,075 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 08:47:46,076 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 08:47:46,076 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 08:47:46,076 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 08:47:46,076 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 08:47:46,076 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__success
[2020-11-25 08:47:46,076 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__fail
[2020-11-25 08:47:46,076 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__fail
[2020-11-25 08:47:46,076 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__fail
[2020-11-25 08:47:46,076 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__fail
[2020-11-25 08:47:46,076 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 08:47:46,076 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__success
[2020-11-25 08:47:46,076 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__fail
[2020-11-25 08:47:46,077 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__success
[2020-11-25 08:47:46,077 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__fail
[2020-11-25 08:47:46,077 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__success
[2020-11-25 08:47:46,077 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__fail
[2020-11-25 08:47:46,077 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__success
[2020-11-25 08:47:46,077 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__fail
[2020-11-25 08:47:46,077 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__fail
[2020-11-25 08:47:46,077 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__fail
[2020-11-25 08:47:46,077 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 08:47:46,077 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-25 08:47:46,077 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-25 08:47:46,078 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-25 08:47:46,078 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-25 08:47:46,078 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-25 08:47:46,078 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-25 08:47:46,078 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-25 08:47:46,078 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-25 08:47:46,078 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 08:47:46,078 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 08:47:46,078 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 08:47:46,078 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 08:47:46,078 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 08:47:46,079 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 08:47:46,079 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 08:47:46,079 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable__success
[2020-11-25 08:47:46,079 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable__fail
[2020-11-25 08:47:46,079 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 08:47:46,079 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 08:47:46,079 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 08:47:46,079 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 08:47:46,079 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 08:47:46,079 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__success
[2020-11-25 08:47:46,079 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__fail
[2020-11-25 08:47:46,080 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__success
[2020-11-25 08:47:46,080 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__fail
[2020-11-25 08:47:46,080 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__success
[2020-11-25 08:47:46,080 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__fail
[2020-11-25 08:47:46,080 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__success
[2020-11-25 08:47:46,080 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__fail
[2020-11-25 08:47:46,080 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__fail
[2020-11-25 08:47:46,080 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 08:47:46,080 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 08:47:46,080 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 08:47:46,080 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 08:47:46,080 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 08:47:46,081 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 08:47:46,081 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-25 08:47:46,081 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-25 08:47:46,081 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-25 08:47:46,081 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__success
[2020-11-25 08:47:46,081 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__fail
[2020-11-25 08:47:46,081 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-25 08:47:46,081 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-25 08:47:46,081 INFO  L130     BoogieDeclarations]: Found specification of procedure Wafl_Wafl_NoBaseCtor__fail
[2020-11-25 08:47:46,081 INFO  L130     BoogieDeclarations]: Found specification of procedure Wafl_Wafl__success
[2020-11-25 08:47:46,081 INFO  L130     BoogieDeclarations]: Found specification of procedure Wafl_Wafl__fail
[2020-11-25 08:47:46,082 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 08:47:46,082 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 08:47:46,082 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 08:47:46,082 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 08:47:46,082 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__fail
[2020-11-25 08:47:46,082 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-25 08:47:46,082 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-25 08:47:46,082 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__fail
[2020-11-25 08:47:46,082 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 08:47:46,082 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 08:47:46,082 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__fail
[2020-11-25 08:47:46,083 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__success
[2020-11-25 08:47:46,083 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 08:47:46,083 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 08:47:46,083 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 08:47:46,083 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 08:47:46,083 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 08:47:46,083 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 08:47:46,083 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 08:47:46,083 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 08:47:46,083 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 08:47:46,083 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 08:47:46,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 08:47:46,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 08:47:46,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 08:47:46,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 08:47:46,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 08:47:46,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 08:47:46,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-25 08:47:46,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-25 08:47:46,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-25 08:47:46,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-25 08:47:46,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable__fail
[2020-11-25 08:47:46,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable__success
[2020-11-25 08:47:46,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__fail
[2020-11-25 08:47:46,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__success
[2020-11-25 08:47:46,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-25 08:47:46,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-25 08:47:46,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 08:47:46,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__success
[2020-11-25 08:47:46,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 08:47:46,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 08:47:46,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 08:47:46,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 08:47:46,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 08:47:46,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 08:47:46,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 08:47:46,086 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 08:47:46,086 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 08:47:46,086 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 08:47:46,086 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 08:47:46,086 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 08:47:46,086 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 08:47:46,086 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 08:47:46,086 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 08:47:46,086 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 08:47:46,086 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 08:47:46,086 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 08:47:46,086 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 08:47:46,086 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 08:47:46,087 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 08:47:46,087 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 08:47:46,087 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 08:47:46,087 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 08:47:46,087 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 08:47:46,087 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 08:47:46,087 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 08:47:46,087 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 08:47:46,087 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 08:47:46,087 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 08:47:46,087 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 08:47:46,088 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 08:47:46,088 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 08:47:46,088 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 08:47:46,088 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 08:47:46,088 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 08:47:46,088 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 08:47:46,088 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 08:47:46,088 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 08:47:46,088 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 08:47:46,088 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 08:47:46,088 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 08:47:46,088 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 08:47:46,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 08:47:46,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 08:47:46,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 08:47:46,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__fail
[2020-11-25 08:47:46,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__success
[2020-11-25 08:47:46,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__fail
[2020-11-25 08:47:46,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__success
[2020-11-25 08:47:46,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__fail
[2020-11-25 08:47:46,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__success
[2020-11-25 08:47:46,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__fail
[2020-11-25 08:47:46,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__success
[2020-11-25 08:47:46,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 08:47:46,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 08:47:46,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__fail
[2020-11-25 08:47:46,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__success
[2020-11-25 08:47:46,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__fail
[2020-11-25 08:47:46,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__success
[2020-11-25 08:47:46,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__fail
[2020-11-25 08:47:46,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__success
[2020-11-25 08:47:46,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__fail
[2020-11-25 08:47:46,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__success
[2020-11-25 08:47:46,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__fail
[2020-11-25 08:47:46,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__success
[2020-11-25 08:47:46,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__fail
[2020-11-25 08:47:46,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__success
[2020-11-25 08:47:46,091 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 08:47:46,091 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 08:47:46,091 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-25 08:47:46,091 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-25 08:47:46,091 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-25 08:47:46,091 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-25 08:47:46,091 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-25 08:47:46,091 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-25 08:47:46,091 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-25 08:47:46,091 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-25 08:47:46,091 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 08:47:46,091 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 08:47:46,091 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 08:47:46,092 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 08:47:46,092 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 08:47:46,092 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 08:47:46,092 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 08:47:46,092 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 08:47:46,092 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable__fail
[2020-11-25 08:47:46,092 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable__success
[2020-11-25 08:47:46,092 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 08:47:46,092 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 08:47:46,092 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 08:47:46,092 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 08:47:46,092 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 08:47:46,092 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 08:47:46,093 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__fail
[2020-11-25 08:47:46,093 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__success
[2020-11-25 08:47:46,093 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__fail
[2020-11-25 08:47:46,093 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__success
[2020-11-25 08:47:46,093 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__fail
[2020-11-25 08:47:46,093 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__success
[2020-11-25 08:47:46,093 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__fail
[2020-11-25 08:47:46,093 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__success
[2020-11-25 08:47:46,093 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__fail
[2020-11-25 08:47:46,093 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__success
[2020-11-25 08:47:46,093 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 08:47:46,093 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__success
[2020-11-25 08:47:46,094 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 08:47:46,094 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 08:47:46,094 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 08:47:46,094 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 08:47:46,094 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 08:47:46,094 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 08:47:46,094 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-25 08:47:46,094 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-25 08:47:46,094 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-25 08:47:46,094 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-25 08:47:46,094 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__fail
[2020-11-25 08:47:46,094 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__success
[2020-11-25 08:47:46,094 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-25 08:47:46,095 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-25 08:47:46,095 INFO  L138     BoogieDeclarations]: Found implementation of procedure Wafl_Wafl_NoBaseCtor__fail
[2020-11-25 08:47:46,095 INFO  L138     BoogieDeclarations]: Found implementation of procedure Wafl_Wafl_NoBaseCtor__success
[2020-11-25 08:47:46,095 INFO  L138     BoogieDeclarations]: Found implementation of procedure Wafl_Wafl__fail
[2020-11-25 08:47:46,095 INFO  L138     BoogieDeclarations]: Found implementation of procedure Wafl_Wafl__success
[2020-11-25 08:47:46,095 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 08:47:46,095 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 08:47:46,095 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 08:47:46,095 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 08:47:46,095 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 08:47:46,095 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 08:47:46,095 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 08:47:46,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 08:47:46,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__fail
[2020-11-25 08:47:46,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__success
[2020-11-25 08:47:46,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-25 08:47:46,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-25 08:47:46,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-25 08:47:46,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-25 08:47:46,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__fail
[2020-11-25 08:47:46,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__success
[2020-11-25 08:47:46,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 08:47:46,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 08:47:46,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-25 08:47:46,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-25 08:47:46,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 08:47:46,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 08:47:46,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 08:47:46,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 08:47:46,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 08:47:46,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 08:47:46,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Roles
[2020-11-25 08:47:46,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Roles
[2020-11-25 08:47:46,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_PauserRole
[2020-11-25 08:47:46,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_PauserRole
[2020-11-25 08:47:46,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-25 08:47:46,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-25 08:47:46,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Pausable
[2020-11-25 08:47:46,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Pausable
[2020-11-25 08:47:46,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MinterRole
[2020-11-25 08:47:46,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MinterRole
[2020-11-25 08:47:46,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Mintable
[2020-11-25 08:47:46,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Mintable
[2020-11-25 08:47:46,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Burnable
[2020-11-25 08:47:46,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Burnable
[2020-11-25 08:47:46,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Wafl
[2020-11-25 08:47:46,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 08:47:46,098 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 08:47:46,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 08:47:46,705 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:47:46,705 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:47:47,490 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 08:47:47,490 INFO  L286             CfgBuilder]: Removed 13 assue(true) statements.
[2020-11-25 08:47:47,493 INFO  L202        PluginConnector]: Adding new model Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:47:47 BoogieIcfgContainer
[2020-11-25 08:47:47,493 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:47:45" (2/2) ...
[2020-11-25 08:47:47,493 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 08:47:47,493 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@12151940 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:47:47, skipping insertion in model container
[2020-11-25 08:47:47,493 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 08:47:47,493 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 08:47:47,493 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 08:47:47,494 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 08:47:47,495 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:47:45" (1/3) ...
[2020-11-25 08:47:47,495 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@4dbc66cb and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:47:47, skipping insertion in model container
[2020-11-25 08:47:47,495 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:47:45" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 08:47:47,528 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:47:47 NWAContainer
[2020-11-25 08:47:47,528 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 08:47:47,528 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 08:47:47,528 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 08:47:47,529 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 08:47:47,529 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:47:47" (3/4) ...
[2020-11-25 08:47:47,530 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@60f5b8a5 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:47:47, skipping insertion in model container
[2020-11-25 08:47:47,530 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:47:47" (4/4) ...
[2020-11-25 08:47:47,532 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 08:47:47,538 INFO  L110   BuchiProductObserver]: Initial RCFG 4155 locations, 6109 edges
[2020-11-25 08:47:47,538 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 08:47:47,554 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 08:47:50,986 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 08:47:51,000 INFO  L110   BuchiProductObserver]: BuchiProgram size 10760 locations, 20065 edges
[2020-11-25 08:47:51,000 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:47:51 BoogieIcfgContainer
[2020-11-25 08:47:51,000 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 08:47:51,000 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 08:47:51,000 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 08:47:51,002 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 08:47:51,002 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:47:51" (1/1) ...
[2020-11-25 08:47:51,208 INFO  L313           BlockEncoder]: Initial Icfg 10760 locations, 20065 edges
[2020-11-25 08:47:51,209 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 08:47:51,209 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 08:47:51,209 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 08:47:51,210 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 08:47:51,230 INFO  L70    emoveInfeasibleEdges]: Removed 291 edges and 29 locations because of local infeasibility
[2020-11-25 08:47:51,246 INFO  L70        RemoveSinkStates]: Removed 222 edges and 139 locations by removing sink states
[2020-11-25 08:47:51,266 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 08:47:51,274 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 08:47:51,280 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 08:47:51,281 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 08:47:51,287 INFO  L313           BlockEncoder]: Encoded RCFG 10540 locations, 19475 edges
[2020-11-25 08:47:51,288 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 08:47:51 BasicIcfg
[2020-11-25 08:47:51,288 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 08:47:51,288 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 08:47:51,288 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 08:47:51,290 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 08:47:51,290 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:47:51,290 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:47:45" (1/6) ...
[2020-11-25 08:47:51,292 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@45fe75d7 and model type Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 08:47:51, skipping insertion in model container
[2020-11-25 08:47:51,292 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:47:51,292 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:47:45" (2/6) ...
[2020-11-25 08:47:51,292 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@45fe75d7 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 08:47:51, skipping insertion in model container
[2020-11-25 08:47:51,292 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:47:51,292 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:47:47" (3/6) ...
[2020-11-25 08:47:51,292 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@45fe75d7 and model type Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 08:47:51, skipping insertion in model container
[2020-11-25 08:47:51,292 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:47:51,292 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:47:47" (4/6) ...
[2020-11-25 08:47:51,293 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@45fe75d7 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 08:47:51, skipping insertion in model container
[2020-11-25 08:47:51,293 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:47:51,293 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:47:51" (5/6) ...
[2020-11-25 08:47:51,293 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@45fe75d7 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 08:47:51, skipping insertion in model container
[2020-11-25 08:47:51,293 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:47:51,293 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 08:47:51" (6/6) ...
[2020-11-25 08:47:51,295 INFO  L404   chiAutomizerObserver]: Analyzing ICFG Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transferfrom-fail.bpl_BEv2
[2020-11-25 08:47:51,330 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 08:47:51,330 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 08:47:51,330 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 08:47:51,330 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 08:47:51,330 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 08:47:51,330 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 08:47:51,330 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 08:47:51,330 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 08:47:51,330 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 08:47:51,410 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10540 states.
[2020-11-25 08:47:51,495 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:47:51,496 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:47:51,496 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:47:51,504 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:47:51,504 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:47:51,504 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 08:47:51,504 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10540 states.
[2020-11-25 08:47:51,546 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:47:51,546 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:47:51,547 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:47:51,548 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:47:51,548 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ERC20Pausable0 := false;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND TRUE   revert
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND TRUE   choice == 27
[L11034]              gas := gas - 21000;
[L11035]  COND FALSE  !(gas >= 0)
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:47:51,563 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:47:51,563 INFO  L82        PathProgramCache]: Analyzing trace with hash 941967355, now seen corresponding path program 1 times
[2020-11-25 08:47:51,569 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:47:51,589 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:47:51,624 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 08:47:51,626 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:47:51,626 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 08:47:52,048 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:47:52,057 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 08:47:52,058 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 08:47:52,059 INFO  L87              Difference]: Start difference. First operand 10540 states. Second operand 3 states.
[2020-11-25 08:47:52,506 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:47:52,506 INFO  L93              Difference]: Finished difference Result 6000 states and 7374 transitions.
[2020-11-25 08:47:52,506 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 08:47:52,507 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6000 states and 7374 transitions.
[2020-11-25 08:47:52,539 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:47:52,574 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6000 states to 6000 states and 7374 transitions.
[2020-11-25 08:47:52,574 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 08:47:52,578 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1373
[2020-11-25 08:47:52,578 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6000 states and 7374 transitions.
[2020-11-25 08:47:52,591 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:47:52,591 INFO  L728         BuchiCegarLoop]: Abstraction has 6000 states and 7374 transitions.
[2020-11-25 08:47:52,609 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6000 states and 7374 transitions.
[2020-11-25 08:47:52,683 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6000 to 6000.
[2020-11-25 08:47:52,683 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6000 states.
[2020-11-25 08:47:52,693 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6000 states to 6000 states and 7374 transitions.
[2020-11-25 08:47:52,694 INFO  L751         BuchiCegarLoop]: Abstraction has 6000 states and 7374 transitions.
[2020-11-25 08:47:52,694 INFO  L631         BuchiCegarLoop]: Abstraction has 6000 states and 7374 transitions.
[2020-11-25 08:47:52,694 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 08:47:52,694 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6000 states and 7374 transitions.
[2020-11-25 08:47:52,706 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:47:52,706 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:47:52,706 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:47:52,708 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:47:52,708 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ERC20Pausable0 := false;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND TRUE   revert
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND TRUE   choice == 18
[L11090]              gas := gas - 21000;
[L11091]  COND TRUE   gas >= 0
[L11092]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1061 != to_s1061 && ((value_s1061 > _balances_ERC20[this][from_s1061] || value_s1061 > _allowances_ERC20[this][from_s1061][msgsender_MSG]) || _balances_ERC20[this][to_s1061] + value_s1061 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC20Pausable0 := true;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2226]               havoc __exception;
[L2227]               revert := false;
[L2228]   COND FALSE  !(__exception)
[L2256]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6430]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6430]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND TRUE   revert
[L2256]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2257]               assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND TRUE   choice == 18
[L11090]              gas := gas - 21000;
[L11091]  COND TRUE   gas >= 0
[L11092]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1061 != to_s1061 && ((value_s1061 > _balances_ERC20[this][from_s1061] || value_s1061 > _allowances_ERC20[this][from_s1061][msgsender_MSG]) || _balances_ERC20[this][to_s1061] + value_s1061 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC20Pausable0 := true;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2226]               havoc __exception;
[L2227]               revert := false;
[L2228]   COND FALSE  !(__exception)
[L2256]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6430]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6430]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND TRUE   revert
[L2256]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2257]               assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:47:52,712 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:47:52,712 INFO  L82        PathProgramCache]: Analyzing trace with hash 651957172, now seen corresponding path program 1 times
[2020-11-25 08:47:52,714 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:47:52,723 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:47:52,745 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 08:47:52,745 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:47:52,745 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 08:47:52,747 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:47:52,747 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 08:47:52,747 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 08:47:52,747 INFO  L87              Difference]: Start difference. First operand 6000 states and 7374 transitions. cyclomatic complexity: 1376 Second operand 3 states.
[2020-11-25 08:47:53,000 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:47:53,000 INFO  L93              Difference]: Finished difference Result 8171 states and 10046 transitions.
[2020-11-25 08:47:53,000 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 08:47:53,000 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8171 states and 10046 transitions.
[2020-11-25 08:47:53,028 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:47:53,069 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8171 states to 8171 states and 10046 transitions.
[2020-11-25 08:47:53,069 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2015
[2020-11-25 08:47:53,071 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2015
[2020-11-25 08:47:53,071 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8171 states and 10046 transitions.
[2020-11-25 08:47:53,080 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:47:53,080 INFO  L728         BuchiCegarLoop]: Abstraction has 8171 states and 10046 transitions.
[2020-11-25 08:47:53,088 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8171 states and 10046 transitions.
[2020-11-25 08:47:53,174 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8171 to 7460.
[2020-11-25 08:47:53,174 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7460 states.
[2020-11-25 08:47:53,187 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7460 states to 7460 states and 9188 transitions.
[2020-11-25 08:47:53,187 INFO  L751         BuchiCegarLoop]: Abstraction has 7460 states and 9188 transitions.
[2020-11-25 08:47:53,187 INFO  L631         BuchiCegarLoop]: Abstraction has 7460 states and 9188 transitions.
[2020-11-25 08:47:53,187 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 08:47:53,187 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7460 states and 9188 transitions.
[2020-11-25 08:47:53,199 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:47:53,199 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:47:53,199 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:47:53,201 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:47:53,201 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ERC20Pausable0 := false;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND TRUE   !(account_s834 != null)
[L5904]               revert := true;
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND TRUE   revert
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND TRUE   revert
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND TRUE   revert
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND TRUE   revert
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND TRUE   revert
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND TRUE   choice == 18
[L11090]              gas := gas - 21000;
[L11091]  COND TRUE   gas >= 0
[L11092]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1061 != to_s1061 && ((value_s1061 > _balances_ERC20[this][from_s1061] || value_s1061 > _allowances_ERC20[this][from_s1061][msgsender_MSG]) || _balances_ERC20[this][to_s1061] + value_s1061 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC20Pausable0 := true;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2226]               havoc __exception;
[L2227]               revert := false;
[L2228]   COND FALSE  !(__exception)
[L2256]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6430]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND TRUE   !!_paused_Pausable[this]
[L9504]               revert := true;
[L6430]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND TRUE   revert
[L2256]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2257]               assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND TRUE   choice == 18
[L11090]              gas := gas - 21000;
[L11091]  COND TRUE   gas >= 0
[L11092]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1061 != to_s1061 && ((value_s1061 > _balances_ERC20[this][from_s1061] || value_s1061 > _allowances_ERC20[this][from_s1061][msgsender_MSG]) || _balances_ERC20[this][to_s1061] + value_s1061 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC20Pausable0 := true;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2226]               havoc __exception;
[L2227]               revert := false;
[L2228]   COND FALSE  !(__exception)
[L2256]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6430]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND TRUE   !!_paused_Pausable[this]
[L9504]               revert := true;
[L6430]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND TRUE   revert
[L2256]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2257]               assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:47:53,205 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:47:53,205 INFO  L82        PathProgramCache]: Analyzing trace with hash -25291579, now seen corresponding path program 1 times
[2020-11-25 08:47:53,206 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:47:53,218 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:47:53,278 INFO  L134       CoverageAnalysis]: Checked inductivity of 36 backedges. 0 proven. 14 refuted. 0 times theorem prover too weak. 22 trivial. 0 not checked.
[2020-11-25 08:47:53,278 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:47:53,278 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-11-25 08:47:53,279 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:47:53,279 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 08:47:53,279 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=73, Unknown=0, NotChecked=0, Total=90
[2020-11-25 08:47:53,279 INFO  L87              Difference]: Start difference. First operand 7460 states and 9188 transitions. cyclomatic complexity: 1730 Second operand 10 states.
[2020-11-25 08:47:53,425 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:47:53,425 INFO  L93              Difference]: Finished difference Result 7520 states and 9283 transitions.
[2020-11-25 08:47:53,425 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 08:47:53,425 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7520 states and 9283 transitions.
[2020-11-25 08:47:53,444 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:47:53,468 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7520 states to 7520 states and 9283 transitions.
[2020-11-25 08:47:53,468 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1902
[2020-11-25 08:47:53,469 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1902
[2020-11-25 08:47:53,469 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7520 states and 9283 transitions.
[2020-11-25 08:47:53,477 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:47:53,477 INFO  L728         BuchiCegarLoop]: Abstraction has 7520 states and 9283 transitions.
[2020-11-25 08:47:53,484 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7520 states and 9283 transitions.
[2020-11-25 08:47:53,566 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7520 to 7504.
[2020-11-25 08:47:53,566 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7504 states.
[2020-11-25 08:47:53,576 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7504 states to 7504 states and 9257 transitions.
[2020-11-25 08:47:53,576 INFO  L751         BuchiCegarLoop]: Abstraction has 7504 states and 9257 transitions.
[2020-11-25 08:47:53,576 INFO  L631         BuchiCegarLoop]: Abstraction has 7504 states and 9257 transitions.
[2020-11-25 08:47:53,576 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 08:47:53,576 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7504 states and 9257 transitions.
[2020-11-25 08:47:53,587 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:47:53,587 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:47:53,587 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:47:53,589 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:47:53,589 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ERC20Pausable0 := false;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5972]   COND FALSE  !(DType[this] == Pausable)
[L5977]   COND TRUE   DType[this] == PauserRole
[L5978]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND TRUE   !!__var_20
[L5853]               revert := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND TRUE   revert
[L5978]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5979]   COND TRUE   revert
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND TRUE   revert
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND TRUE   revert
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND TRUE   choice == 18
[L11090]              gas := gas - 21000;
[L11091]  COND TRUE   gas >= 0
[L11092]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1061 != to_s1061 && ((value_s1061 > _balances_ERC20[this][from_s1061] || value_s1061 > _allowances_ERC20[this][from_s1061][msgsender_MSG]) || _balances_ERC20[this][to_s1061] + value_s1061 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC20Pausable0 := true;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2226]               havoc __exception;
[L2227]               revert := false;
[L2228]   COND FALSE  !(__exception)
[L2256]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6430]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND TRUE   !!_paused_Pausable[this]
[L9504]               revert := true;
[L6430]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND TRUE   revert
[L2256]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2257]               assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND TRUE   choice == 18
[L11090]              gas := gas - 21000;
[L11091]  COND TRUE   gas >= 0
[L11092]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1061 != to_s1061 && ((value_s1061 > _balances_ERC20[this][from_s1061] || value_s1061 > _allowances_ERC20[this][from_s1061][msgsender_MSG]) || _balances_ERC20[this][to_s1061] + value_s1061 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC20Pausable0 := true;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2226]               havoc __exception;
[L2227]               revert := false;
[L2228]   COND FALSE  !(__exception)
[L2256]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6430]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND TRUE   !!_paused_Pausable[this]
[L9504]               revert := true;
[L6430]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND TRUE   revert
[L2256]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2257]               assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:47:53,593 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:47:53,593 INFO  L82        PathProgramCache]: Analyzing trace with hash -909282850, now seen corresponding path program 1 times
[2020-11-25 08:47:53,594 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:47:53,602 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:47:53,644 INFO  L134       CoverageAnalysis]: Checked inductivity of 36 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 36 trivial. 0 not checked.
[2020-11-25 08:47:53,644 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:47:53,644 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 08:47:53,645 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:47:53,645 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 08:47:53,645 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 08:47:53,645 INFO  L87              Difference]: Start difference. First operand 7504 states and 9257 transitions. cyclomatic complexity: 1755 Second operand 3 states.
[2020-11-25 08:47:53,802 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:47:53,803 INFO  L93              Difference]: Finished difference Result 8194 states and 9571 transitions.
[2020-11-25 08:47:53,803 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 08:47:53,803 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8194 states and 9571 transitions.
[2020-11-25 08:47:53,822 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:47:53,843 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8194 states to 7328 states and 8504 transitions.
[2020-11-25 08:47:53,844 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1747
[2020-11-25 08:47:53,845 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1822
[2020-11-25 08:47:53,845 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7328 states and 8504 transitions.
[2020-11-25 08:47:53,850 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:47:53,850 INFO  L728         BuchiCegarLoop]: Abstraction has 7328 states and 8504 transitions.
[2020-11-25 08:47:53,856 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7328 states and 8504 transitions.
[2020-11-25 08:47:53,909 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7328 to 6766.
[2020-11-25 08:47:53,910 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6766 states.
[2020-11-25 08:47:53,918 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6766 states to 6766 states and 7795 transitions.
[2020-11-25 08:47:53,918 INFO  L751         BuchiCegarLoop]: Abstraction has 6766 states and 7795 transitions.
[2020-11-25 08:47:53,918 INFO  L631         BuchiCegarLoop]: Abstraction has 6766 states and 7795 transitions.
[2020-11-25 08:47:53,918 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 08:47:53,918 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6766 states and 7795 transitions.
[2020-11-25 08:47:53,926 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:47:53,926 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:47:53,926 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:47:53,931 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:47:53,931 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ERC20Pausable0 := false;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5972]   COND FALSE  !(DType[this] == Pausable)
[L5977]   COND TRUE   DType[this] == PauserRole
[L5978]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5978]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5979]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5972]   COND FALSE  !(DType[this] == Pausable)
[L5977]   COND TRUE   DType[this] == PauserRole
[L5978]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5978]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5979]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5972]   COND FALSE  !(DType[this] == Pausable)
[L5977]   COND TRUE   DType[this] == PauserRole
[L5978]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5978]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5979]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5972]   COND FALSE  !(DType[this] == Pausable)
[L5977]   COND TRUE   DType[this] == PauserRole
[L5978]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5978]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5979]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND TRUE   choice == 18
[L11090]              gas := gas - 21000;
[L11091]  COND TRUE   gas >= 0
[L11092]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1061 != to_s1061 && ((value_s1061 > _balances_ERC20[this][from_s1061] || value_s1061 > _allowances_ERC20[this][from_s1061][msgsender_MSG]) || _balances_ERC20[this][to_s1061] + value_s1061 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC20Pausable0 := true;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2226]               havoc __exception;
[L2227]               revert := false;
[L2228]   COND FALSE  !(__exception)
[L2256]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6430]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6430]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L6434]   COND FALSE  !(DType[this] == Wafl)
[L6439]   COND TRUE   DType[this] == ERC20Pausable
[L6440]   CALL        call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L5159]   COND TRUE   DType[this] == Wafl
[L5160]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5160]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5161]   COND FALSE  !(revert)
[L5187]   CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5187]   RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L5188]   COND FALSE  !(revert)
[L5191]   COND TRUE   DType[this] == Wafl
[L5192]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5192]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5193]   COND FALSE  !(revert)
[L5219]               __ret_0_ := true;
[L6440]   RET         call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6441]   COND FALSE  !(revert)
[L6447]               __ret_0_ := __var_28;
[L2256]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2257]               assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND TRUE   choice == 18
[L11090]              gas := gas - 21000;
[L11091]  COND TRUE   gas >= 0
[L11092]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1061 != to_s1061 && ((value_s1061 > _balances_ERC20[this][from_s1061] || value_s1061 > _allowances_ERC20[this][from_s1061][msgsender_MSG]) || _balances_ERC20[this][to_s1061] + value_s1061 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC20Pausable0 := true;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2226]               havoc __exception;
[L2227]               revert := false;
[L2228]   COND FALSE  !(__exception)
[L2256]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6430]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6430]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L6434]   COND FALSE  !(DType[this] == Wafl)
[L6439]   COND TRUE   DType[this] == ERC20Pausable
[L6440]   CALL        call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L5159]   COND TRUE   DType[this] == Wafl
[L5160]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5160]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5161]   COND FALSE  !(revert)
[L5187]   CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5187]   RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L5188]   COND FALSE  !(revert)
[L5191]   COND TRUE   DType[this] == Wafl
[L5192]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5192]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5193]   COND FALSE  !(revert)
[L5219]               __ret_0_ := true;
[L6440]   RET         call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6441]   COND FALSE  !(revert)
[L6447]               __ret_0_ := __var_28;
[L2256]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2257]               assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:47:53,939 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:47:53,939 INFO  L82        PathProgramCache]: Analyzing trace with hash -1119440603, now seen corresponding path program 1 times
[2020-11-25 08:47:53,940 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:47:53,958 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:47:54,265 INFO  L134       CoverageAnalysis]: Checked inductivity of 1028 backedges. 0 proven. 36 refuted. 0 times theorem prover too weak. 992 trivial. 0 not checked.
[2020-11-25 08:47:54,265 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:47:54,265 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 08:47:54,266 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:47:54,266 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 08:47:54,266 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 08:47:54,267 INFO  L87              Difference]: Start difference. First operand 6766 states and 7795 transitions. cyclomatic complexity: 1031 Second operand 7 states.
[2020-11-25 08:47:54,510 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:47:54,511 INFO  L93              Difference]: Finished difference Result 6801 states and 7838 transitions.
[2020-11-25 08:47:54,511 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 08:47:54,511 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6801 states and 7838 transitions.
[2020-11-25 08:47:54,526 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:47:54,548 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6801 states to 6772 states and 7802 transitions.
[2020-11-25 08:47:54,548 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1761
[2020-11-25 08:47:54,549 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1761
[2020-11-25 08:47:54,549 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6772 states and 7802 transitions.
[2020-11-25 08:47:54,555 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:47:54,555 INFO  L728         BuchiCegarLoop]: Abstraction has 6772 states and 7802 transitions.
[2020-11-25 08:47:54,561 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6772 states and 7802 transitions.
[2020-11-25 08:47:54,603 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6772 to 6772.
[2020-11-25 08:47:54,603 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6772 states.
[2020-11-25 08:47:54,611 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6772 states to 6772 states and 7802 transitions.
[2020-11-25 08:47:54,611 INFO  L751         BuchiCegarLoop]: Abstraction has 6772 states and 7802 transitions.
[2020-11-25 08:47:54,611 INFO  L631         BuchiCegarLoop]: Abstraction has 6772 states and 7802 transitions.
[2020-11-25 08:47:54,611 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 08:47:54,611 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6772 states and 7802 transitions.
[2020-11-25 08:47:54,619 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:47:54,619 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:47:54,619 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:47:54,624 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:47:54,624 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ERC20Pausable0 := false;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5972]   COND FALSE  !(DType[this] == Pausable)
[L5977]   COND TRUE   DType[this] == PauserRole
[L5978]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5978]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5979]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5972]   COND FALSE  !(DType[this] == Pausable)
[L5977]   COND TRUE   DType[this] == PauserRole
[L5978]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5978]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5979]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5972]   COND FALSE  !(DType[this] == Pausable)
[L5977]   COND TRUE   DType[this] == PauserRole
[L5978]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5978]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5979]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND FALSE  !(DType[this] == Wafl)
[L6652]   COND FALSE  !(DType[this] == ERC20Mintable)
[L6657]   COND TRUE   DType[this] == MinterRole
[L6658]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6658]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6659]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND FALSE  !(DType[this] == Wafl)
[L6652]   COND FALSE  !(DType[this] == ERC20Mintable)
[L6657]   COND TRUE   DType[this] == MinterRole
[L6658]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6658]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6659]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND TRUE   choice == 18
[L11090]              gas := gas - 21000;
[L11091]  COND TRUE   gas >= 0
[L11092]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1061 != to_s1061 && ((value_s1061 > _balances_ERC20[this][from_s1061] || value_s1061 > _allowances_ERC20[this][from_s1061][msgsender_MSG]) || _balances_ERC20[this][to_s1061] + value_s1061 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC20Pausable0 := true;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2226]               havoc __exception;
[L2227]               revert := false;
[L2228]   COND FALSE  !(__exception)
[L2256]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6430]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6430]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L6434]   COND FALSE  !(DType[this] == Wafl)
[L6439]   COND TRUE   DType[this] == ERC20Pausable
[L6440]   CALL        call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L5159]   COND TRUE   DType[this] == Wafl
[L5160]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5160]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5161]   COND FALSE  !(revert)
[L5187]   CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5187]   RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L5188]   COND FALSE  !(revert)
[L5191]   COND TRUE   DType[this] == Wafl
[L5192]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5192]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5193]   COND FALSE  !(revert)
[L5219]               __ret_0_ := true;
[L6440]   RET         call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6441]   COND FALSE  !(revert)
[L6447]               __ret_0_ := __var_28;
[L2256]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2257]               assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND TRUE   choice == 18
[L11090]              gas := gas - 21000;
[L11091]  COND TRUE   gas >= 0
[L11092]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1061 != to_s1061 && ((value_s1061 > _balances_ERC20[this][from_s1061] || value_s1061 > _allowances_ERC20[this][from_s1061][msgsender_MSG]) || _balances_ERC20[this][to_s1061] + value_s1061 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC20Pausable0 := true;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2226]               havoc __exception;
[L2227]               revert := false;
[L2228]   COND FALSE  !(__exception)
[L2256]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6430]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6430]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L6434]   COND FALSE  !(DType[this] == Wafl)
[L6439]   COND TRUE   DType[this] == ERC20Pausable
[L6440]   CALL        call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L5159]   COND TRUE   DType[this] == Wafl
[L5160]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5160]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5161]   COND FALSE  !(revert)
[L5187]   CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5187]   RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L5188]   COND FALSE  !(revert)
[L5191]   COND TRUE   DType[this] == Wafl
[L5192]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5192]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5193]   COND FALSE  !(revert)
[L5219]               __ret_0_ := true;
[L6440]   RET         call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6441]   COND FALSE  !(revert)
[L6447]               __ret_0_ := __var_28;
[L2256]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2257]               assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:47:54,630 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:47:54,630 INFO  L82        PathProgramCache]: Analyzing trace with hash 405666886, now seen corresponding path program 1 times
[2020-11-25 08:47:54,631 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:47:54,645 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:47:54,866 INFO  L134       CoverageAnalysis]: Checked inductivity of 1009 backedges. 6 proven. 31 refuted. 0 times theorem prover too weak. 972 trivial. 0 not checked.
[2020-11-25 08:47:54,866 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:47:54,866 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 08:47:54,867 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:47:54,867 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 08:47:54,867 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 08:47:54,867 INFO  L87              Difference]: Start difference. First operand 6772 states and 7802 transitions. cyclomatic complexity: 1032 Second operand 8 states.
[2020-11-25 08:47:55,066 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:47:55,066 INFO  L93              Difference]: Finished difference Result 6805 states and 7842 transitions.
[2020-11-25 08:47:55,066 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 08:47:55,066 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6805 states and 7842 transitions.
[2020-11-25 08:47:55,078 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:47:55,093 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6805 states to 6779 states and 7810 transitions.
[2020-11-25 08:47:55,093 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1761
[2020-11-25 08:47:55,094 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1761
[2020-11-25 08:47:55,094 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6779 states and 7810 transitions.
[2020-11-25 08:47:55,098 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:47:55,098 INFO  L728         BuchiCegarLoop]: Abstraction has 6779 states and 7810 transitions.
[2020-11-25 08:47:55,103 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6779 states and 7810 transitions.
[2020-11-25 08:47:55,143 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6779 to 6779.
[2020-11-25 08:47:55,143 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6779 states.
[2020-11-25 08:47:55,150 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6779 states to 6779 states and 7810 transitions.
[2020-11-25 08:47:55,150 INFO  L751         BuchiCegarLoop]: Abstraction has 6779 states and 7810 transitions.
[2020-11-25 08:47:55,150 INFO  L631         BuchiCegarLoop]: Abstraction has 6779 states and 7810 transitions.
[2020-11-25 08:47:55,150 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 08:47:55,150 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6779 states and 7810 transitions.
[2020-11-25 08:47:55,158 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:47:55,158 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:47:55,158 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:47:55,160 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:47:55,160 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ERC20Pausable0 := false;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND TRUE   __exception
[L3137]               __tmp__Balance := Balance;
[L3138]               __tmp__DType := DType;
[L3139]               __tmp__Alloc := Alloc;
[L3140]               __tmp__balance_ADDR := balance_ADDR;
[L3141]               __tmp__M_Ref_int := M_Ref_int;
[L3142]               __tmp__sum__balances0 := sum__balances0;
[L3143]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L3144]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3145]               __tmp__sum__allowances1 := sum__allowances1;
[L3146]               __tmp__M_Ref_bool := M_Ref_bool;
[L3147]               __tmp__sum := sum;
[L3148]               __tmp__Length := Length;
[L3149]               __tmp__now := now;
[L3150]               __tmp___owner_Ownable := _owner_Ownable;
[L3151]               __tmp___balances_ERC20 := _balances_ERC20;
[L3152]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L3153]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3154]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3155]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3156]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3157]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3158]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3159]               __tmp___paused_Pausable := _paused_Pausable;
[L3160]               __tmp___minters_MinterRole := _minters_MinterRole;
[L3161]   CALL        call Wafl_Wafl__fail(this, msgsender_MSG, msgvalue_MSG);
[L7113]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L7113]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7114]   COND FALSE  !(revert)
[L7117]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4895]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L4895]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   COND FALSE  !(revert)
[L4899]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4870]               assume msgsender_MSG != null;
[L4871]               __tmp__Balance[this] := 0;
[L4872]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4873]               __tmp__sum__balances0[this] := 0;
[L4874]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4875]               __tmp__sum__allowances1[this] := 0;
[L4876]               __tmp___totalSupply_ERC20[this] := 0;
[L4899]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4900]   COND FALSE  !(revert)
[L7117]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7118]   COND FALSE  !(revert)
[L7121]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5741]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L5741]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5742]   COND FALSE  !(revert)
[L5745]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5714]               assume msgsender_MSG != null;
[L5715]               __tmp__Balance[this] := 0;
[L5716]               __tmp___name_ERC20Detailed[this] := -1545721152;
[L5717]               __tmp___symbol_ERC20Detailed[this] := -1545721152;
[L5718]               __tmp___decimals_ERC20Detailed[this] := 0;
[L5720]               __tmp___name_ERC20Detailed[this] := name_s731;
[L5721]               __tmp___symbol_ERC20Detailed[this] := symbol_s731;
[L5722]               __tmp___decimals_ERC20Detailed[this] := decimals_s731;
[L5745]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5746]   COND FALSE  !(revert)
[L7121]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7122]   COND FALSE  !(revert)
[L7125]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5990]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5915]               assume msgsender_MSG != null;
[L5916]               __tmp__Balance[this] := 0;
[L5918]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4506]               havoc newRef;
[L4507]               assume __tmp__Alloc[newRef] == false;
[L4508]               __tmp__Alloc[newRef] := true;
[L4509]               assume newRef != null;
[L5918]   RET         call __var_23 := FreshRefGenerator__fail();
[L5919]   COND FALSE  !(revert)
[L5922]               __tmp___pausers_PauserRole[this] := __var_23;
[L5924]   COND FALSE  !(__tmp__DType[this] == Wafl)
[L5929]   COND TRUE   __tmp__DType[this] == ERC20Pausable
[L5930]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6145]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5834]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5890]               __var_22 := null;
[L5891]   COND FALSE  !(!(account_s834 != null))
[L5895]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5834]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5835]   COND FALSE  !(revert)
[L5838]   COND FALSE  !(!!__var_20)
[L5842]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6145]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6146]   COND FALSE  !(revert)
[L5930]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5931]   COND FALSE  !(revert)
[L5990]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   COND FALSE  !(revert)
[L7125]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6199]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5990]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5915]               assume msgsender_MSG != null;
[L5916]               __tmp__Balance[this] := 0;
[L5918]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4506]               havoc newRef;
[L4507]               assume __tmp__Alloc[newRef] == false;
[L4508]               __tmp__Alloc[newRef] := true;
[L4509]               assume newRef != null;
[L5918]   RET         call __var_23 := FreshRefGenerator__fail();
[L5919]   COND FALSE  !(revert)
[L5922]               __tmp___pausers_PauserRole[this] := __var_23;
[L5924]   COND FALSE  !(__tmp__DType[this] == Wafl)
[L5929]   COND TRUE   __tmp__DType[this] == ERC20Pausable
[L5930]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6145]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5834]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5890]               __var_22 := null;
[L5891]   COND FALSE  !(!(account_s834 != null))
[L5895]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5834]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5835]   COND FALSE  !(revert)
[L5838]   COND FALSE  !(!!__var_20)
[L5842]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6145]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6146]   COND FALSE  !(revert)
[L5930]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5931]   COND FALSE  !(revert)
[L5990]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   COND FALSE  !(revert)
[L6199]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6200]   COND FALSE  !(revert)
[L6203]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6180]               assume msgsender_MSG != null;
[L6181]               __tmp__Balance[this] := 0;
[L6182]               __tmp___paused_Pausable[this] := false;
[L6184]               __tmp___paused_Pausable[this] := false;
[L6203]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6204]   COND FALSE  !(revert)
[L7129]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7130]   COND FALSE  !(revert)
[L7133]   CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6305]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L6305]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6306]   COND FALSE  !(revert)
[L6309]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4895]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L4895]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   COND FALSE  !(revert)
[L4899]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4870]               assume msgsender_MSG != null;
[L4871]               __tmp__Balance[this] := 0;
[L4872]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4873]               __tmp__sum__balances0[this] := 0;
[L4874]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4875]               __tmp__sum__allowances1[this] := 0;
[L4876]               __tmp___totalSupply_ERC20[this] := 0;
[L4899]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4900]   COND FALSE  !(revert)
[L6309]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6310]   COND FALSE  !(revert)
[L6313]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5990]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5915]               assume msgsender_MSG != null;
[L5916]               __tmp__Balance[this] := 0;
[L5918]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4506]               havoc newRef;
[L4507]               assume __tmp__Alloc[newRef] == false;
[L4508]               __tmp__Alloc[newRef] := true;
[L4509]               assume newRef != null;
[L5918]   RET         call __var_23 := FreshRefGenerator__fail();
[L5919]   COND FALSE  !(revert)
[L5922]               __tmp___pausers_PauserRole[this] := __var_23;
[L5924]   COND FALSE  !(__tmp__DType[this] == Wafl)
[L5929]   COND TRUE   __tmp__DType[this] == ERC20Pausable
[L5930]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6145]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5834]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5890]               __var_22 := null;
[L5891]   COND FALSE  !(!(account_s834 != null))
[L5895]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5834]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5835]   COND FALSE  !(revert)
[L5838]   COND FALSE  !(!!__var_20)
[L5842]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6145]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6146]   COND FALSE  !(revert)
[L5930]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5931]   COND FALSE  !(revert)
[L5990]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   COND FALSE  !(revert)
[L6313]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6314]   COND FALSE  !(revert)
[L6317]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6199]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5990]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5915]               assume msgsender_MSG != null;
[L5916]               __tmp__Balance[this] := 0;
[L5918]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4506]               havoc newRef;
[L4507]               assume __tmp__Alloc[newRef] == false;
[L4508]               __tmp__Alloc[newRef] := true;
[L4509]               assume newRef != null;
[L5918]   RET         call __var_23 := FreshRefGenerator__fail();
[L5919]   COND FALSE  !(revert)
[L5922]               __tmp___pausers_PauserRole[this] := __var_23;
[L5924]   COND FALSE  !(__tmp__DType[this] == Wafl)
[L5929]   COND TRUE   __tmp__DType[this] == ERC20Pausable
[L5930]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6145]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5834]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5890]               __var_22 := null;
[L5891]   COND FALSE  !(!(account_s834 != null))
[L5895]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5834]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5835]   COND FALSE  !(revert)
[L5838]   COND FALSE  !(!!__var_20)
[L5842]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6145]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6146]   COND FALSE  !(revert)
[L5930]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5931]   COND FALSE  !(revert)
[L5990]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   COND FALSE  !(revert)
[L6199]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6200]   COND FALSE  !(revert)
[L6203]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6180]               assume msgsender_MSG != null;
[L6181]               __tmp__Balance[this] := 0;
[L6182]               __tmp___paused_Pausable[this] := false;
[L6184]               __tmp___paused_Pausable[this] := false;
[L6203]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6204]   COND FALSE  !(revert)
[L6317]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6318]   COND FALSE  !(revert)
[L6321]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6290]               assume msgsender_MSG != null;
[L6291]               __tmp__Balance[this] := 0;
[L6321]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6322]   COND FALSE  !(revert)
[L7133]   RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7134]   COND FALSE  !(revert)
[L7137]   CALL        call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6957]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L6957]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6958]   COND FALSE  !(revert)
[L6961]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4895]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L4895]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   COND FALSE  !(revert)
[L4899]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4870]               assume msgsender_MSG != null;
[L4871]               __tmp__Balance[this] := 0;
[L4872]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4873]               __tmp__sum__balances0[this] := 0;
[L4874]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4875]               __tmp__sum__allowances1[this] := 0;
[L4876]               __tmp___totalSupply_ERC20[this] := 0;
[L4899]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4900]   COND FALSE  !(revert)
[L6961]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6962]   COND FALSE  !(revert)
[L6965]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6942]               assume msgsender_MSG != null;
[L6943]               __tmp__Balance[this] := 0;
[L6965]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6966]   COND FALSE  !(revert)
[L7137]   RET         call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7138]   COND FALSE  !(revert)
[L7141]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6670]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6605]               assume msgsender_MSG != null;
[L6606]               __tmp__Balance[this] := 0;
[L6608]   CALL        call __var_36 := FreshRefGenerator__fail();
[L4506]               havoc newRef;
[L4507]               assume __tmp__Alloc[newRef] == false;
[L4508]               __tmp__Alloc[newRef] := true;
[L4509]               assume newRef != null;
[L6608]   RET         call __var_36 := FreshRefGenerator__fail();
[L6609]   COND FALSE  !(revert)
[L6612]               __tmp___minters_MinterRole[this] := __var_36;
[L6614]   COND FALSE  !(__tmp__DType[this] == Wafl)
[L6619]   COND FALSE  !(__tmp__DType[this] == ERC20Mintable)
[L6624]   COND TRUE   __tmp__DType[this] == MinterRole
[L6625]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6805]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L5834]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5890]               __var_22 := null;
[L5891]   COND FALSE  !(!(account_s834 != null))
[L5895]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5834]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5835]   COND FALSE  !(revert)
[L5838]   COND FALSE  !(!!__var_20)
[L5842]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6805]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L6806]   COND FALSE  !(revert)
[L6625]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6626]   COND FALSE  !(revert)
[L6670]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6671]   COND FALSE  !(revert)
[L7141]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7142]   COND FALSE  !(revert)
[L7145]   CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L6855]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6856]   COND FALSE  !(revert)
[L6859]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4895]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L4895]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   COND FALSE  !(revert)
[L4899]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4870]               assume msgsender_MSG != null;
[L4871]               __tmp__Balance[this] := 0;
[L4872]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4873]               __tmp__sum__balances0[this] := 0;
[L4874]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4875]               __tmp__sum__allowances1[this] := 0;
[L4876]               __tmp___totalSupply_ERC20[this] := 0;
[L4899]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4900]   COND FALSE  !(revert)
[L6859]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6860]   COND FALSE  !(revert)
[L6863]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6670]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6605]               assume msgsender_MSG != null;
[L6606]               __tmp__Balance[this] := 0;
[L6608]   CALL        call __var_36 := FreshRefGenerator__fail();
[L4506]               havoc newRef;
[L4507]               assume __tmp__Alloc[newRef] == false;
[L4508]               __tmp__Alloc[newRef] := true;
[L4509]               assume newRef != null;
[L6608]   RET         call __var_36 := FreshRefGenerator__fail();
[L6609]   COND FALSE  !(revert)
[L6612]               __tmp___minters_MinterRole[this] := __var_36;
[L6614]   COND FALSE  !(__tmp__DType[this] == Wafl)
[L6619]   COND FALSE  !(__tmp__DType[this] == ERC20Mintable)
[L6624]   COND TRUE   __tmp__DType[this] == MinterRole
[L6625]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6805]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L5834]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5890]               __var_22 := null;
[L5891]   COND FALSE  !(!(account_s834 != null))
[L5895]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5834]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5835]   COND FALSE  !(revert)
[L5838]   COND FALSE  !(!!__var_20)
[L5842]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6805]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L6806]   COND FALSE  !(revert)
[L6625]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6626]   COND FALSE  !(revert)
[L6670]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6671]   COND FALSE  !(revert)
[L6863]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6864]   COND FALSE  !(revert)
[L6867]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6840]               assume msgsender_MSG != null;
[L6841]               __tmp__Balance[this] := 0;
[L6867]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L7145]   RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7146]   COND FALSE  !(revert)
[L7149]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4709]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4689]               assume msgsender_MSG != null;
[L4690]               __tmp__Balance[this] := 0;
[L4691]               __tmp___owner_Ownable[this] := null;
[L4693]               __tmp___owner_Ownable[this] := msgsender_MSG;
[L4709]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4710]   COND FALSE  !(revert)
[L7149]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7150]   COND FALSE  !(revert)
[L7153]   CALL        call Wafl_Wafl_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7060]               assume msgsender_MSG != null;
[L7061]               __tmp__Balance[this] := 0;
[L7063]   COND TRUE   __tmp__DType[this] == Wafl
[L7064]   CALL        call __var_40 := decimals_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG);
[L5789]               __ret_0_ := __tmp___decimals_ERC20Detailed[this];
[L7064]   RET         call __var_40 := decimals_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG);
[L7065]   COND FALSE  !(revert)
[L7071]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7072]   COND TRUE   __tmp__DType[this] == Wafl
[L7073]   CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5449]               __var_11 := null;
[L5450]   COND FALSE  !(!(account_s587 != null))
[L5454]   CALL        call __var_12 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s587);
[L4565]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4566]   COND FALSE  !(!(c_s26 >= a_s26))
[L4570]               __ret_0_ := c_s26;
[L5454]   RET         call __var_12 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s587);
[L5455]   COND FALSE  !(revert)
[L5458]               __tmp___totalSupply_ERC20[this] := __var_12;
[L5459]   CALL        call __var_13 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s587], amount_s587);
[L4565]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4566]   COND FALSE  !(!(c_s26 >= a_s26))
[L4570]               __ret_0_ := c_s26;
[L5459]   RET         call __var_13 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s587], amount_s587);
[L5460]   COND FALSE  !(revert)
[L5463]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s587];
[L5464]               __tmp___balances_ERC20[this][account_s587] := __var_13;
[L5465]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s587];
[L7073]   RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7074]   COND FALSE  !(revert)
[L7153]   RET         call Wafl_Wafl_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7154]   COND FALSE  !(revert)
[L3161]   RET         call Wafl_Wafl__fail(this, msgsender_MSG, msgvalue_MSG);
[L3162]               assume revert || gas < 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND TRUE   choice == 18
[L11090]              gas := gas - 21000;
[L11091]  COND TRUE   gas >= 0
[L11092]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1061 != to_s1061 && ((value_s1061 > _balances_ERC20[this][from_s1061] || value_s1061 > _allowances_ERC20[this][from_s1061][msgsender_MSG]) || _balances_ERC20[this][to_s1061] + value_s1061 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC20Pausable0 := true;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2226]               havoc __exception;
[L2227]               revert := false;
[L2228]   COND FALSE  !(__exception)
[L2256]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6430]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6430]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L6434]   COND TRUE   DType[this] == Wafl
[L6435]   CALL        call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L5159]   COND TRUE   DType[this] == Wafl
[L5160]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5160]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5161]   COND FALSE  !(revert)
[L5187]   CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5187]   RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L5188]   COND FALSE  !(revert)
[L5191]   COND TRUE   DType[this] == Wafl
[L5192]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5192]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5193]   COND FALSE  !(revert)
[L5219]               __ret_0_ := true;
[L6435]   RET         call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6436]   COND FALSE  !(revert)
[L6447]               __ret_0_ := __var_28;
[L2256]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2257]               assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND TRUE   choice == 18
[L11090]              gas := gas - 21000;
[L11091]  COND TRUE   gas >= 0
[L11092]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1061 != to_s1061 && ((value_s1061 > _balances_ERC20[this][from_s1061] || value_s1061 > _allowances_ERC20[this][from_s1061][msgsender_MSG]) || _balances_ERC20[this][to_s1061] + value_s1061 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC20Pausable0 := true;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2226]               havoc __exception;
[L2227]               revert := false;
[L2228]   COND FALSE  !(__exception)
[L2256]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6430]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6430]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L6434]   COND TRUE   DType[this] == Wafl
[L6435]   CALL        call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L5159]   COND TRUE   DType[this] == Wafl
[L5160]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5160]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5161]   COND FALSE  !(revert)
[L5187]   CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5187]   RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L5188]   COND FALSE  !(revert)
[L5191]   COND TRUE   DType[this] == Wafl
[L5192]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5192]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5193]   COND FALSE  !(revert)
[L5219]               __ret_0_ := true;
[L6435]   RET         call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6436]   COND FALSE  !(revert)
[L6447]               __ret_0_ := __var_28;
[L2256]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2257]               assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:47:55,166 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:47:55,166 INFO  L82        PathProgramCache]: Analyzing trace with hash -2110179914, now seen corresponding path program 1 times
[2020-11-25 08:47:55,167 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:47:55,182 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:47:55,446 INFO  L134       CoverageAnalysis]: Checked inductivity of 975 backedges. 9 proven. 25 refuted. 0 times theorem prover too weak. 941 trivial. 0 not checked.
[2020-11-25 08:47:55,446 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:47:55,446 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [9] total 9
[2020-11-25 08:47:55,447 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:47:55,447 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 08:47:55,447 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 08:47:55,447 INFO  L87              Difference]: Start difference. First operand 6779 states and 7810 transitions. cyclomatic complexity: 1033 Second operand 9 states.
[2020-11-25 08:47:57,358 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:47:57,359 INFO  L93              Difference]: Finished difference Result 9432 states and 11005 transitions.
[2020-11-25 08:47:57,359 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 08:47:57,359 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9432 states and 11005 transitions.
[2020-11-25 08:47:57,380 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 08:47:57,401 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9432 states to 9390 states and 10952 transitions.
[2020-11-25 08:47:57,401 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2442
[2020-11-25 08:47:57,402 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2442
[2020-11-25 08:47:57,402 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9390 states and 10952 transitions.
[2020-11-25 08:47:57,407 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:47:57,408 INFO  L728         BuchiCegarLoop]: Abstraction has 9390 states and 10952 transitions.
[2020-11-25 08:47:57,413 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9390 states and 10952 transitions.
[2020-11-25 08:47:57,462 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9390 to 9284.
[2020-11-25 08:47:57,462 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9284 states.
[2020-11-25 08:47:57,472 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9284 states to 9284 states and 10846 transitions.
[2020-11-25 08:47:57,472 INFO  L751         BuchiCegarLoop]: Abstraction has 9284 states and 10846 transitions.
[2020-11-25 08:47:57,472 INFO  L631         BuchiCegarLoop]: Abstraction has 9284 states and 10846 transitions.
[2020-11-25 08:47:57,472 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 08:47:57,473 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9284 states and 10846 transitions.
[2020-11-25 08:47:57,482 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 08:47:57,482 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:47:57,482 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:47:57,485 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:47:57,485 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ERC20Pausable0 := false;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND TRUE   DType[this] == ERC20Pausable
[L5968]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5968]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5969]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND TRUE   DType[this] == ERC20Pausable
[L5968]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5968]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5969]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND FALSE  !(DType[this] == Wafl)
[L6652]   COND FALSE  !(DType[this] == ERC20Mintable)
[L6657]   COND TRUE   DType[this] == MinterRole
[L6658]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6658]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6659]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND FALSE  !(DType[this] == Wafl)
[L6652]   COND FALSE  !(DType[this] == ERC20Mintable)
[L6657]   COND TRUE   DType[this] == MinterRole
[L6658]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6658]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6659]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND TRUE   choice == 18
[L11090]              gas := gas - 21000;
[L11091]  COND TRUE   gas >= 0
[L11092]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1061 != to_s1061 && ((value_s1061 > _balances_ERC20[this][from_s1061] || value_s1061 > _allowances_ERC20[this][from_s1061][msgsender_MSG]) || _balances_ERC20[this][to_s1061] + value_s1061 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC20Pausable0 := true;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2226]               havoc __exception;
[L2227]               revert := false;
[L2228]   COND FALSE  !(__exception)
[L2256]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6430]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6430]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L6434]   COND TRUE   DType[this] == Wafl
[L6435]   CALL        call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L5159]   COND TRUE   DType[this] == Wafl
[L5160]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5160]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5161]   COND FALSE  !(revert)
[L5187]   CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5187]   RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L5188]   COND FALSE  !(revert)
[L5191]   COND TRUE   DType[this] == Wafl
[L5192]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5192]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5193]   COND FALSE  !(revert)
[L5219]               __ret_0_ := true;
[L6435]   RET         call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6436]   COND FALSE  !(revert)
[L6447]               __ret_0_ := __var_28;
[L2256]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2257]               assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND TRUE   choice == 18
[L11090]              gas := gas - 21000;
[L11091]  COND TRUE   gas >= 0
[L11092]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1061 != to_s1061 && ((value_s1061 > _balances_ERC20[this][from_s1061] || value_s1061 > _allowances_ERC20[this][from_s1061][msgsender_MSG]) || _balances_ERC20[this][to_s1061] + value_s1061 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC20Pausable0 := true;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2226]               havoc __exception;
[L2227]               revert := false;
[L2228]   COND FALSE  !(__exception)
[L2256]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6430]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6430]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L6434]   COND TRUE   DType[this] == Wafl
[L6435]   CALL        call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L5159]   COND TRUE   DType[this] == Wafl
[L5160]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5160]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5161]   COND FALSE  !(revert)
[L5187]   CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5187]   RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L5188]   COND FALSE  !(revert)
[L5191]   COND TRUE   DType[this] == Wafl
[L5192]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5192]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5193]   COND FALSE  !(revert)
[L5219]               __ret_0_ := true;
[L6435]   RET         call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6436]   COND FALSE  !(revert)
[L6447]               __ret_0_ := __var_28;
[L2256]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2257]               assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:47:57,490 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:47:57,491 INFO  L82        PathProgramCache]: Analyzing trace with hash 505164331, now seen corresponding path program 1 times
[2020-11-25 08:47:57,491 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:47:57,507 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:47:57,729 INFO  L134       CoverageAnalysis]: Checked inductivity of 997 backedges. 12 proven. 9 refuted. 0 times theorem prover too weak. 976 trivial. 0 not checked.
[2020-11-25 08:47:57,730 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:47:57,730 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 08:47:57,730 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:47:57,730 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 08:47:57,730 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 08:47:57,730 INFO  L87              Difference]: Start difference. First operand 9284 states and 10846 transitions. cyclomatic complexity: 1566 Second operand 8 states.
[2020-11-25 08:47:57,929 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:47:57,929 INFO  L93              Difference]: Finished difference Result 9323 states and 10893 transitions.
[2020-11-25 08:47:57,929 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 08:47:57,929 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9323 states and 10893 transitions.
[2020-11-25 08:47:57,945 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 08:47:57,964 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9323 states to 9290 states and 10852 transitions.
[2020-11-25 08:47:57,965 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2420
[2020-11-25 08:47:57,966 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2420
[2020-11-25 08:47:57,966 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9290 states and 10852 transitions.
[2020-11-25 08:47:57,971 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:47:57,971 INFO  L728         BuchiCegarLoop]: Abstraction has 9290 states and 10852 transitions.
[2020-11-25 08:47:57,976 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9290 states and 10852 transitions.
[2020-11-25 08:47:58,027 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9290 to 9290.
[2020-11-25 08:47:58,027 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9290 states.
[2020-11-25 08:47:58,038 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9290 states to 9290 states and 10852 transitions.
[2020-11-25 08:47:58,038 INFO  L751         BuchiCegarLoop]: Abstraction has 9290 states and 10852 transitions.
[2020-11-25 08:47:58,038 INFO  L631         BuchiCegarLoop]: Abstraction has 9290 states and 10852 transitions.
[2020-11-25 08:47:58,038 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 08:47:58,038 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9290 states and 10852 transitions.
[2020-11-25 08:47:58,048 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 08:47:58,048 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:47:58,048 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:47:58,050 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:47:58,051 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ERC20Pausable0 := false;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5972]   COND TRUE   DType[this] == Pausable
[L5973]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5973]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5974]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5972]   COND TRUE   DType[this] == Pausable
[L5973]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5973]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5974]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND TRUE   choice == 18
[L11090]              gas := gas - 21000;
[L11091]  COND TRUE   gas >= 0
[L11092]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1061 != to_s1061 && ((value_s1061 > _balances_ERC20[this][from_s1061] || value_s1061 > _allowances_ERC20[this][from_s1061][msgsender_MSG]) || _balances_ERC20[this][to_s1061] + value_s1061 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC20Pausable0 := true;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2226]               havoc __exception;
[L2227]               revert := false;
[L2228]   COND FALSE  !(__exception)
[L2256]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6430]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6430]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L6434]   COND TRUE   DType[this] == Wafl
[L6435]   CALL        call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L5159]   COND TRUE   DType[this] == Wafl
[L5160]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5160]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5161]   COND FALSE  !(revert)
[L5187]   CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5187]   RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L5188]   COND FALSE  !(revert)
[L5191]   COND TRUE   DType[this] == Wafl
[L5192]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5192]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5193]   COND FALSE  !(revert)
[L5219]               __ret_0_ := true;
[L6435]   RET         call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6436]   COND FALSE  !(revert)
[L6447]               __ret_0_ := __var_28;
[L2256]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2257]               assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND TRUE   choice == 18
[L11090]              gas := gas - 21000;
[L11091]  COND TRUE   gas >= 0
[L11092]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1061 != to_s1061 && ((value_s1061 > _balances_ERC20[this][from_s1061] || value_s1061 > _allowances_ERC20[this][from_s1061][msgsender_MSG]) || _balances_ERC20[this][to_s1061] + value_s1061 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC20Pausable0 := true;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2226]               havoc __exception;
[L2227]               revert := false;
[L2228]   COND FALSE  !(__exception)
[L2256]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6430]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6430]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L6434]   COND TRUE   DType[this] == Wafl
[L6435]   CALL        call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L5159]   COND TRUE   DType[this] == Wafl
[L5160]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5160]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5161]   COND FALSE  !(revert)
[L5187]   CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5187]   RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L5188]   COND FALSE  !(revert)
[L5191]   COND TRUE   DType[this] == Wafl
[L5192]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5192]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5193]   COND FALSE  !(revert)
[L5219]               __ret_0_ := true;
[L6435]   RET         call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6436]   COND FALSE  !(revert)
[L6447]               __ret_0_ := __var_28;
[L2256]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2257]               assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:47:58,056 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:47:58,056 INFO  L82        PathProgramCache]: Analyzing trace with hash -1549671019, now seen corresponding path program 1 times
[2020-11-25 08:47:58,057 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:47:58,072 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:47:58,317 INFO  L134       CoverageAnalysis]: Checked inductivity of 996 backedges. 12 proven. 11 refuted. 0 times theorem prover too weak. 973 trivial. 0 not checked.
[2020-11-25 08:47:58,317 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:47:58,317 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 08:47:58,317 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:47:58,317 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 08:47:58,318 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 08:47:58,318 INFO  L87              Difference]: Start difference. First operand 9290 states and 10852 transitions. cyclomatic complexity: 1566 Second operand 8 states.
[2020-11-25 08:47:58,497 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:47:58,497 INFO  L93              Difference]: Finished difference Result 9323 states and 10892 transitions.
[2020-11-25 08:47:58,497 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 08:47:58,497 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9323 states and 10892 transitions.
[2020-11-25 08:47:58,513 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 08:47:58,530 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9323 states to 9290 states and 10851 transitions.
[2020-11-25 08:47:58,531 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2420
[2020-11-25 08:47:58,532 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2420
[2020-11-25 08:47:58,532 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9290 states and 10851 transitions.
[2020-11-25 08:47:58,536 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:47:58,536 INFO  L728         BuchiCegarLoop]: Abstraction has 9290 states and 10851 transitions.
[2020-11-25 08:47:58,542 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9290 states and 10851 transitions.
[2020-11-25 08:47:58,586 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9290 to 9284.
[2020-11-25 08:47:58,586 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9284 states.
[2020-11-25 08:47:58,596 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9284 states to 9284 states and 10845 transitions.
[2020-11-25 08:47:58,596 INFO  L751         BuchiCegarLoop]: Abstraction has 9284 states and 10845 transitions.
[2020-11-25 08:47:58,596 INFO  L631         BuchiCegarLoop]: Abstraction has 9284 states and 10845 transitions.
[2020-11-25 08:47:58,596 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 08:47:58,596 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9284 states and 10845 transitions.
[2020-11-25 08:47:58,605 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 08:47:58,606 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:47:58,606 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:47:58,607 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:47:58,607 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ERC20Pausable0 := false;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND FALSE  !(DType[this] == Wafl)
[L6652]   COND FALSE  !(DType[this] == ERC20Mintable)
[L6657]   COND TRUE   DType[this] == MinterRole
[L6658]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6658]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6659]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND FALSE  !(DType[this] == Wafl)
[L6652]   COND FALSE  !(DType[this] == ERC20Mintable)
[L6657]   COND TRUE   DType[this] == MinterRole
[L6658]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6658]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6659]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND TRUE   choice == 18
[L11090]              gas := gas - 21000;
[L11091]  COND TRUE   gas >= 0
[L11092]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1061 != to_s1061 && ((value_s1061 > _balances_ERC20[this][from_s1061] || value_s1061 > _allowances_ERC20[this][from_s1061][msgsender_MSG]) || _balances_ERC20[this][to_s1061] + value_s1061 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC20Pausable0 := true;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2226]               havoc __exception;
[L2227]               revert := false;
[L2228]   COND FALSE  !(__exception)
[L2256]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6430]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6430]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L6434]   COND TRUE   DType[this] == Wafl
[L6435]   CALL        call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L5159]   COND TRUE   DType[this] == Wafl
[L5160]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5160]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5161]   COND FALSE  !(revert)
[L5187]   CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5187]   RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L5188]   COND FALSE  !(revert)
[L5191]   COND TRUE   DType[this] == Wafl
[L5192]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5192]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5193]   COND FALSE  !(revert)
[L5219]               __ret_0_ := true;
[L6435]   RET         call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6436]   COND FALSE  !(revert)
[L6447]               __ret_0_ := __var_28;
[L2256]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2257]               assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND TRUE   choice == 18
[L11090]              gas := gas - 21000;
[L11091]  COND TRUE   gas >= 0
[L11092]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1061 != to_s1061 && ((value_s1061 > _balances_ERC20[this][from_s1061] || value_s1061 > _allowances_ERC20[this][from_s1061][msgsender_MSG]) || _balances_ERC20[this][to_s1061] + value_s1061 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC20Pausable0 := true;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2226]               havoc __exception;
[L2227]               revert := false;
[L2228]   COND FALSE  !(__exception)
[L2256]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6430]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6430]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L6434]   COND TRUE   DType[this] == Wafl
[L6435]   CALL        call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L5159]   COND TRUE   DType[this] == Wafl
[L5160]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5160]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5161]   COND FALSE  !(revert)
[L5187]   CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5187]   RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L5188]   COND FALSE  !(revert)
[L5191]   COND TRUE   DType[this] == Wafl
[L5192]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5192]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5193]   COND FALSE  !(revert)
[L5219]               __ret_0_ := true;
[L6435]   RET         call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6436]   COND FALSE  !(revert)
[L6447]               __ret_0_ := __var_28;
[L2256]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2257]               assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:47:58,613 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:47:58,613 INFO  L82        PathProgramCache]: Analyzing trace with hash -732335401, now seen corresponding path program 1 times
[2020-11-25 08:47:58,614 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:47:58,634 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:47:58,923 INFO  L134       CoverageAnalysis]: Checked inductivity of 1012 backedges. 0 proven. 9 refuted. 0 times theorem prover too weak. 1003 trivial. 0 not checked.
[2020-11-25 08:47:58,923 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:47:58,923 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 08:47:58,924 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:47:58,924 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 08:47:58,924 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 08:47:58,924 INFO  L87              Difference]: Start difference. First operand 9284 states and 10845 transitions. cyclomatic complexity: 1565 Second operand 7 states.
[2020-11-25 08:47:59,147 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:47:59,147 INFO  L93              Difference]: Finished difference Result 9307 states and 10871 transitions.
[2020-11-25 08:47:59,147 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 08:47:59,147 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9307 states and 10871 transitions.
[2020-11-25 08:47:59,164 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 08:47:59,181 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9307 states to 9290 states and 10851 transitions.
[2020-11-25 08:47:59,181 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2420
[2020-11-25 08:47:59,182 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2420
[2020-11-25 08:47:59,183 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9290 states and 10851 transitions.
[2020-11-25 08:47:59,187 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:47:59,187 INFO  L728         BuchiCegarLoop]: Abstraction has 9290 states and 10851 transitions.
[2020-11-25 08:47:59,192 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9290 states and 10851 transitions.
[2020-11-25 08:47:59,235 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9290 to 9290.
[2020-11-25 08:47:59,235 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9290 states.
[2020-11-25 08:47:59,245 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9290 states to 9290 states and 10851 transitions.
[2020-11-25 08:47:59,245 INFO  L751         BuchiCegarLoop]: Abstraction has 9290 states and 10851 transitions.
[2020-11-25 08:47:59,245 INFO  L631         BuchiCegarLoop]: Abstraction has 9290 states and 10851 transitions.
[2020-11-25 08:47:59,245 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 08:47:59,245 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9290 states and 10851 transitions.
[2020-11-25 08:47:59,255 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 08:47:59,255 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:47:59,255 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:47:59,257 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:47:59,257 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ERC20Pausable0 := false;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND TRUE   __exception
[L3137]               __tmp__Balance := Balance;
[L3138]               __tmp__DType := DType;
[L3139]               __tmp__Alloc := Alloc;
[L3140]               __tmp__balance_ADDR := balance_ADDR;
[L3141]               __tmp__M_Ref_int := M_Ref_int;
[L3142]               __tmp__sum__balances0 := sum__balances0;
[L3143]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L3144]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3145]               __tmp__sum__allowances1 := sum__allowances1;
[L3146]               __tmp__M_Ref_bool := M_Ref_bool;
[L3147]               __tmp__sum := sum;
[L3148]               __tmp__Length := Length;
[L3149]               __tmp__now := now;
[L3150]               __tmp___owner_Ownable := _owner_Ownable;
[L3151]               __tmp___balances_ERC20 := _balances_ERC20;
[L3152]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L3153]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3154]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3155]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3156]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3157]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3158]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3159]               __tmp___paused_Pausable := _paused_Pausable;
[L3160]               __tmp___minters_MinterRole := _minters_MinterRole;
[L3161]   CALL        call Wafl_Wafl__fail(this, msgsender_MSG, msgvalue_MSG);
[L7113]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L7113]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7114]   COND FALSE  !(revert)
[L7117]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4895]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L4895]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   COND FALSE  !(revert)
[L4899]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4870]               assume msgsender_MSG != null;
[L4871]               __tmp__Balance[this] := 0;
[L4872]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4873]               __tmp__sum__balances0[this] := 0;
[L4874]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4875]               __tmp__sum__allowances1[this] := 0;
[L4876]               __tmp___totalSupply_ERC20[this] := 0;
[L4899]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4900]   COND FALSE  !(revert)
[L7117]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7118]   COND FALSE  !(revert)
[L7121]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5741]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L5741]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5742]   COND FALSE  !(revert)
[L5745]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5714]               assume msgsender_MSG != null;
[L5715]               __tmp__Balance[this] := 0;
[L5716]               __tmp___name_ERC20Detailed[this] := -1545721152;
[L5717]               __tmp___symbol_ERC20Detailed[this] := -1545721152;
[L5718]               __tmp___decimals_ERC20Detailed[this] := 0;
[L5720]               __tmp___name_ERC20Detailed[this] := name_s731;
[L5721]               __tmp___symbol_ERC20Detailed[this] := symbol_s731;
[L5722]               __tmp___decimals_ERC20Detailed[this] := decimals_s731;
[L5745]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5746]   COND FALSE  !(revert)
[L7121]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7122]   COND FALSE  !(revert)
[L7125]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5990]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5915]               assume msgsender_MSG != null;
[L5916]               __tmp__Balance[this] := 0;
[L5918]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4506]               havoc newRef;
[L4507]               assume __tmp__Alloc[newRef] == false;
[L4508]               __tmp__Alloc[newRef] := true;
[L4509]               assume newRef != null;
[L5918]   RET         call __var_23 := FreshRefGenerator__fail();
[L5919]   COND FALSE  !(revert)
[L5922]               __tmp___pausers_PauserRole[this] := __var_23;
[L5924]   COND FALSE  !(__tmp__DType[this] == Wafl)
[L5929]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L5934]   COND FALSE  !(__tmp__DType[this] == Pausable)
[L5939]   COND TRUE   __tmp__DType[this] == PauserRole
[L5940]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6145]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5834]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5890]               __var_22 := null;
[L5891]   COND FALSE  !(!(account_s834 != null))
[L5895]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5834]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5835]   COND FALSE  !(revert)
[L5838]   COND FALSE  !(!!__var_20)
[L5842]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6145]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6146]   COND FALSE  !(revert)
[L5940]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5941]   COND FALSE  !(revert)
[L5990]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   COND FALSE  !(revert)
[L7125]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6199]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5990]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5915]               assume msgsender_MSG != null;
[L5916]               __tmp__Balance[this] := 0;
[L5918]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4506]               havoc newRef;
[L4507]               assume __tmp__Alloc[newRef] == false;
[L4508]               __tmp__Alloc[newRef] := true;
[L4509]               assume newRef != null;
[L5918]   RET         call __var_23 := FreshRefGenerator__fail();
[L5919]   COND FALSE  !(revert)
[L5922]               __tmp___pausers_PauserRole[this] := __var_23;
[L5924]   COND FALSE  !(__tmp__DType[this] == Wafl)
[L5929]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L5934]   COND FALSE  !(__tmp__DType[this] == Pausable)
[L5939]   COND TRUE   __tmp__DType[this] == PauserRole
[L5940]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6145]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5834]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5890]               __var_22 := null;
[L5891]   COND FALSE  !(!(account_s834 != null))
[L5895]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5834]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5835]   COND FALSE  !(revert)
[L5838]   COND FALSE  !(!!__var_20)
[L5842]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6145]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6146]   COND FALSE  !(revert)
[L5940]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5941]   COND FALSE  !(revert)
[L5990]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   COND FALSE  !(revert)
[L6199]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6200]   COND FALSE  !(revert)
[L6203]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6180]               assume msgsender_MSG != null;
[L6181]               __tmp__Balance[this] := 0;
[L6182]               __tmp___paused_Pausable[this] := false;
[L6184]               __tmp___paused_Pausable[this] := false;
[L6203]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6204]   COND FALSE  !(revert)
[L7129]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7130]   COND FALSE  !(revert)
[L7133]   CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6305]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L6305]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6306]   COND FALSE  !(revert)
[L6309]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4895]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L4895]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   COND FALSE  !(revert)
[L4899]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4870]               assume msgsender_MSG != null;
[L4871]               __tmp__Balance[this] := 0;
[L4872]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4873]               __tmp__sum__balances0[this] := 0;
[L4874]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4875]               __tmp__sum__allowances1[this] := 0;
[L4876]               __tmp___totalSupply_ERC20[this] := 0;
[L4899]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4900]   COND FALSE  !(revert)
[L6309]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6310]   COND FALSE  !(revert)
[L6313]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5990]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5915]               assume msgsender_MSG != null;
[L5916]               __tmp__Balance[this] := 0;
[L5918]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4506]               havoc newRef;
[L4507]               assume __tmp__Alloc[newRef] == false;
[L4508]               __tmp__Alloc[newRef] := true;
[L4509]               assume newRef != null;
[L5918]   RET         call __var_23 := FreshRefGenerator__fail();
[L5919]   COND FALSE  !(revert)
[L5922]               __tmp___pausers_PauserRole[this] := __var_23;
[L5924]   COND FALSE  !(__tmp__DType[this] == Wafl)
[L5929]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L5934]   COND FALSE  !(__tmp__DType[this] == Pausable)
[L5939]   COND TRUE   __tmp__DType[this] == PauserRole
[L5940]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6145]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5834]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5890]               __var_22 := null;
[L5891]   COND FALSE  !(!(account_s834 != null))
[L5895]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5834]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5835]   COND FALSE  !(revert)
[L5838]   COND FALSE  !(!!__var_20)
[L5842]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6145]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6146]   COND FALSE  !(revert)
[L5940]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5941]   COND FALSE  !(revert)
[L5990]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   COND FALSE  !(revert)
[L6313]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6314]   COND FALSE  !(revert)
[L6317]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6199]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5990]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5915]               assume msgsender_MSG != null;
[L5916]               __tmp__Balance[this] := 0;
[L5918]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4506]               havoc newRef;
[L4507]               assume __tmp__Alloc[newRef] == false;
[L4508]               __tmp__Alloc[newRef] := true;
[L4509]               assume newRef != null;
[L5918]   RET         call __var_23 := FreshRefGenerator__fail();
[L5919]   COND FALSE  !(revert)
[L5922]               __tmp___pausers_PauserRole[this] := __var_23;
[L5924]   COND FALSE  !(__tmp__DType[this] == Wafl)
[L5929]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L5934]   COND FALSE  !(__tmp__DType[this] == Pausable)
[L5939]   COND TRUE   __tmp__DType[this] == PauserRole
[L5940]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6145]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5834]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5890]               __var_22 := null;
[L5891]   COND FALSE  !(!(account_s834 != null))
[L5895]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5834]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5835]   COND FALSE  !(revert)
[L5838]   COND FALSE  !(!!__var_20)
[L5842]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6145]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6146]   COND FALSE  !(revert)
[L5940]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5941]   COND FALSE  !(revert)
[L5990]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   COND FALSE  !(revert)
[L6199]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6200]   COND FALSE  !(revert)
[L6203]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6180]               assume msgsender_MSG != null;
[L6181]               __tmp__Balance[this] := 0;
[L6182]               __tmp___paused_Pausable[this] := false;
[L6184]               __tmp___paused_Pausable[this] := false;
[L6203]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6204]   COND FALSE  !(revert)
[L6317]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6318]   COND FALSE  !(revert)
[L6321]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6290]               assume msgsender_MSG != null;
[L6291]               __tmp__Balance[this] := 0;
[L6321]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6322]   COND FALSE  !(revert)
[L7133]   RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7134]   COND FALSE  !(revert)
[L7137]   CALL        call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6957]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L6957]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6958]   COND FALSE  !(revert)
[L6961]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4895]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L4895]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   COND FALSE  !(revert)
[L4899]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4870]               assume msgsender_MSG != null;
[L4871]               __tmp__Balance[this] := 0;
[L4872]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4873]               __tmp__sum__balances0[this] := 0;
[L4874]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4875]               __tmp__sum__allowances1[this] := 0;
[L4876]               __tmp___totalSupply_ERC20[this] := 0;
[L4899]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4900]   COND FALSE  !(revert)
[L6961]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6962]   COND FALSE  !(revert)
[L6965]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6942]               assume msgsender_MSG != null;
[L6943]               __tmp__Balance[this] := 0;
[L6965]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6966]   COND FALSE  !(revert)
[L7137]   RET         call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7138]   COND FALSE  !(revert)
[L7141]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6670]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6605]               assume msgsender_MSG != null;
[L6606]               __tmp__Balance[this] := 0;
[L6608]   CALL        call __var_36 := FreshRefGenerator__fail();
[L4506]               havoc newRef;
[L4507]               assume __tmp__Alloc[newRef] == false;
[L4508]               __tmp__Alloc[newRef] := true;
[L4509]               assume newRef != null;
[L6608]   RET         call __var_36 := FreshRefGenerator__fail();
[L6609]   COND FALSE  !(revert)
[L6612]               __tmp___minters_MinterRole[this] := __var_36;
[L6614]   COND TRUE   __tmp__DType[this] == Wafl
[L6615]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6805]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L5834]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5890]               __var_22 := null;
[L5891]   COND FALSE  !(!(account_s834 != null))
[L5895]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5834]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5835]   COND FALSE  !(revert)
[L5838]   COND FALSE  !(!!__var_20)
[L5842]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6805]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L6806]   COND FALSE  !(revert)
[L6615]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6616]   COND FALSE  !(revert)
[L6670]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6671]   COND FALSE  !(revert)
[L7141]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7142]   COND FALSE  !(revert)
[L7145]   CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L6855]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6856]   COND FALSE  !(revert)
[L6859]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4895]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L4895]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   COND FALSE  !(revert)
[L4899]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4870]               assume msgsender_MSG != null;
[L4871]               __tmp__Balance[this] := 0;
[L4872]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4873]               __tmp__sum__balances0[this] := 0;
[L4874]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4875]               __tmp__sum__allowances1[this] := 0;
[L4876]               __tmp___totalSupply_ERC20[this] := 0;
[L4899]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4900]   COND FALSE  !(revert)
[L6859]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6860]   COND FALSE  !(revert)
[L6863]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6670]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6605]               assume msgsender_MSG != null;
[L6606]               __tmp__Balance[this] := 0;
[L6608]   CALL        call __var_36 := FreshRefGenerator__fail();
[L4506]               havoc newRef;
[L4507]               assume __tmp__Alloc[newRef] == false;
[L4508]               __tmp__Alloc[newRef] := true;
[L4509]               assume newRef != null;
[L6608]   RET         call __var_36 := FreshRefGenerator__fail();
[L6609]   COND FALSE  !(revert)
[L6612]               __tmp___minters_MinterRole[this] := __var_36;
[L6614]   COND TRUE   __tmp__DType[this] == Wafl
[L6615]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6805]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L5834]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5890]               __var_22 := null;
[L5891]   COND FALSE  !(!(account_s834 != null))
[L5895]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5834]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5835]   COND FALSE  !(revert)
[L5838]   COND FALSE  !(!!__var_20)
[L5842]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6805]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L6806]   COND FALSE  !(revert)
[L6615]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6616]   COND FALSE  !(revert)
[L6670]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6671]   COND FALSE  !(revert)
[L6863]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6864]   COND FALSE  !(revert)
[L6867]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6840]               assume msgsender_MSG != null;
[L6841]               __tmp__Balance[this] := 0;
[L6867]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L7145]   RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7146]   COND FALSE  !(revert)
[L7149]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4709]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4689]               assume msgsender_MSG != null;
[L4690]               __tmp__Balance[this] := 0;
[L4691]               __tmp___owner_Ownable[this] := null;
[L4693]               __tmp___owner_Ownable[this] := msgsender_MSG;
[L4709]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4710]   COND FALSE  !(revert)
[L7149]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7150]   COND FALSE  !(revert)
[L7153]   CALL        call Wafl_Wafl_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7060]               assume msgsender_MSG != null;
[L7061]               __tmp__Balance[this] := 0;
[L7063]   COND TRUE   __tmp__DType[this] == Wafl
[L7064]   CALL        call __var_40 := decimals_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG);
[L5789]               __ret_0_ := __tmp___decimals_ERC20Detailed[this];
[L7064]   RET         call __var_40 := decimals_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG);
[L7065]   COND FALSE  !(revert)
[L7071]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7072]   COND TRUE   __tmp__DType[this] == Wafl
[L7073]   CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5449]               __var_11 := null;
[L5450]   COND FALSE  !(!(account_s587 != null))
[L5454]   CALL        call __var_12 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s587);
[L4565]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4566]   COND FALSE  !(!(c_s26 >= a_s26))
[L4570]               __ret_0_ := c_s26;
[L5454]   RET         call __var_12 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s587);
[L5455]   COND FALSE  !(revert)
[L5458]               __tmp___totalSupply_ERC20[this] := __var_12;
[L5459]   CALL        call __var_13 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s587], amount_s587);
[L4565]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4566]   COND FALSE  !(!(c_s26 >= a_s26))
[L4570]               __ret_0_ := c_s26;
[L5459]   RET         call __var_13 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s587], amount_s587);
[L5460]   COND FALSE  !(revert)
[L5463]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s587];
[L5464]               __tmp___balances_ERC20[this][account_s587] := __var_13;
[L5465]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s587];
[L7073]   RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7074]   COND FALSE  !(revert)
[L7153]   RET         call Wafl_Wafl_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7154]   COND FALSE  !(revert)
[L3161]   RET         call Wafl_Wafl__fail(this, msgsender_MSG, msgvalue_MSG);
[L3162]               assume revert || gas < 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND TRUE   choice == 18
[L11090]              gas := gas - 21000;
[L11091]  COND TRUE   gas >= 0
[L11092]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1061 != to_s1061 && ((value_s1061 > _balances_ERC20[this][from_s1061] || value_s1061 > _allowances_ERC20[this][from_s1061][msgsender_MSG]) || _balances_ERC20[this][to_s1061] + value_s1061 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC20Pausable0 := true;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2226]               havoc __exception;
[L2227]               revert := false;
[L2228]   COND FALSE  !(__exception)
[L2256]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6430]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6430]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L6434]   COND FALSE  !(DType[this] == Wafl)
[L6439]   COND TRUE   DType[this] == ERC20Pausable
[L6440]   CALL        call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L5159]   COND TRUE   DType[this] == Wafl
[L5160]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5160]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5161]   COND FALSE  !(revert)
[L5187]   CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5187]   RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L5188]   COND FALSE  !(revert)
[L5191]   COND TRUE   DType[this] == Wafl
[L5192]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5192]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5193]   COND FALSE  !(revert)
[L5219]               __ret_0_ := true;
[L6440]   RET         call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6441]   COND FALSE  !(revert)
[L6447]               __ret_0_ := __var_28;
[L2256]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2257]               assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND TRUE   choice == 18
[L11090]              gas := gas - 21000;
[L11091]  COND TRUE   gas >= 0
[L11092]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1061 != to_s1061 && ((value_s1061 > _balances_ERC20[this][from_s1061] || value_s1061 > _allowances_ERC20[this][from_s1061][msgsender_MSG]) || _balances_ERC20[this][to_s1061] + value_s1061 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC20Pausable0 := true;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2226]               havoc __exception;
[L2227]               revert := false;
[L2228]   COND FALSE  !(__exception)
[L2256]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6430]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6430]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L6434]   COND FALSE  !(DType[this] == Wafl)
[L6439]   COND TRUE   DType[this] == ERC20Pausable
[L6440]   CALL        call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L5159]   COND TRUE   DType[this] == Wafl
[L5160]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5160]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5161]   COND FALSE  !(revert)
[L5187]   CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5187]   RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L5188]   COND FALSE  !(revert)
[L5191]   COND TRUE   DType[this] == Wafl
[L5192]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5192]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5193]   COND FALSE  !(revert)
[L5219]               __ret_0_ := true;
[L6440]   RET         call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6441]   COND FALSE  !(revert)
[L6447]               __ret_0_ := __var_28;
[L2256]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2257]               assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:47:59,263 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:47:59,263 INFO  L82        PathProgramCache]: Analyzing trace with hash -195522688, now seen corresponding path program 1 times
[2020-11-25 08:47:59,264 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:47:59,275 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:47:59,491 INFO  L134       CoverageAnalysis]: Checked inductivity of 985 backedges. 9 proven. 34 refuted. 0 times theorem prover too weak. 942 trivial. 0 not checked.
[2020-11-25 08:47:59,491 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:47:59,491 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-11-25 08:47:59,492 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:47:59,492 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 08:47:59,492 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=18, Invalid=72, Unknown=0, NotChecked=0, Total=90
[2020-11-25 08:47:59,492 INFO  L87              Difference]: Start difference. First operand 9290 states and 10851 transitions. cyclomatic complexity: 1565 Second operand 10 states.
[2020-11-25 08:48:01,238 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:48:01,239 INFO  L93              Difference]: Finished difference Result 9440 states and 11012 transitions.
[2020-11-25 08:48:01,239 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-11-25 08:48:01,239 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9440 states and 11012 transitions.
[2020-11-25 08:48:01,259 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 08:48:01,277 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9440 states to 9411 states and 10974 transitions.
[2020-11-25 08:48:01,278 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2442
[2020-11-25 08:48:01,279 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2442
[2020-11-25 08:48:01,279 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9411 states and 10974 transitions.
[2020-11-25 08:48:01,284 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:48:01,284 INFO  L728         BuchiCegarLoop]: Abstraction has 9411 states and 10974 transitions.
[2020-11-25 08:48:01,289 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9411 states and 10974 transitions.
[2020-11-25 08:48:01,329 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9411 to 9290.
[2020-11-25 08:48:01,329 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9290 states.
[2020-11-25 08:48:01,339 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9290 states to 9290 states and 10851 transitions.
[2020-11-25 08:48:01,339 INFO  L751         BuchiCegarLoop]: Abstraction has 9290 states and 10851 transitions.
[2020-11-25 08:48:01,339 INFO  L631         BuchiCegarLoop]: Abstraction has 9290 states and 10851 transitions.
[2020-11-25 08:48:01,339 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 08:48:01,339 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9290 states and 10851 transitions.
[2020-11-25 08:48:01,349 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 08:48:01,349 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:48:01,349 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:48:01,351 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:48:01,351 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ERC20Pausable0 := false;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND TRUE   __exception
[L3137]               __tmp__Balance := Balance;
[L3138]               __tmp__DType := DType;
[L3139]               __tmp__Alloc := Alloc;
[L3140]               __tmp__balance_ADDR := balance_ADDR;
[L3141]               __tmp__M_Ref_int := M_Ref_int;
[L3142]               __tmp__sum__balances0 := sum__balances0;
[L3143]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L3144]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3145]               __tmp__sum__allowances1 := sum__allowances1;
[L3146]               __tmp__M_Ref_bool := M_Ref_bool;
[L3147]               __tmp__sum := sum;
[L3148]               __tmp__Length := Length;
[L3149]               __tmp__now := now;
[L3150]               __tmp___owner_Ownable := _owner_Ownable;
[L3151]               __tmp___balances_ERC20 := _balances_ERC20;
[L3152]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L3153]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3154]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3155]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3156]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3157]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3158]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3159]               __tmp___paused_Pausable := _paused_Pausable;
[L3160]               __tmp___minters_MinterRole := _minters_MinterRole;
[L3161]   CALL        call Wafl_Wafl__fail(this, msgsender_MSG, msgvalue_MSG);
[L7113]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L7113]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7114]   COND FALSE  !(revert)
[L7117]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4895]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L4895]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   COND FALSE  !(revert)
[L4899]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4870]               assume msgsender_MSG != null;
[L4871]               __tmp__Balance[this] := 0;
[L4872]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4873]               __tmp__sum__balances0[this] := 0;
[L4874]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4875]               __tmp__sum__allowances1[this] := 0;
[L4876]               __tmp___totalSupply_ERC20[this] := 0;
[L4899]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4900]   COND FALSE  !(revert)
[L7117]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7118]   COND FALSE  !(revert)
[L7121]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5741]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L5741]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5742]   COND FALSE  !(revert)
[L5745]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5714]               assume msgsender_MSG != null;
[L5715]               __tmp__Balance[this] := 0;
[L5716]               __tmp___name_ERC20Detailed[this] := -1545721152;
[L5717]               __tmp___symbol_ERC20Detailed[this] := -1545721152;
[L5718]               __tmp___decimals_ERC20Detailed[this] := 0;
[L5720]               __tmp___name_ERC20Detailed[this] := name_s731;
[L5721]               __tmp___symbol_ERC20Detailed[this] := symbol_s731;
[L5722]               __tmp___decimals_ERC20Detailed[this] := decimals_s731;
[L5745]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5746]   COND FALSE  !(revert)
[L7121]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7122]   COND FALSE  !(revert)
[L7125]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5990]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5915]               assume msgsender_MSG != null;
[L5916]               __tmp__Balance[this] := 0;
[L5918]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4506]               havoc newRef;
[L4507]               assume __tmp__Alloc[newRef] == false;
[L4508]               __tmp__Alloc[newRef] := true;
[L4509]               assume newRef != null;
[L5918]   RET         call __var_23 := FreshRefGenerator__fail();
[L5919]   COND FALSE  !(revert)
[L5922]               __tmp___pausers_PauserRole[this] := __var_23;
[L5924]   COND FALSE  !(__tmp__DType[this] == Wafl)
[L5929]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L5934]   COND TRUE   __tmp__DType[this] == Pausable
[L5935]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6145]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5834]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5890]               __var_22 := null;
[L5891]   COND FALSE  !(!(account_s834 != null))
[L5895]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5834]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5835]   COND FALSE  !(revert)
[L5838]   COND FALSE  !(!!__var_20)
[L5842]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6145]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6146]   COND FALSE  !(revert)
[L5935]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5936]   COND FALSE  !(revert)
[L5990]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   COND FALSE  !(revert)
[L7125]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6199]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5990]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5915]               assume msgsender_MSG != null;
[L5916]               __tmp__Balance[this] := 0;
[L5918]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4506]               havoc newRef;
[L4507]               assume __tmp__Alloc[newRef] == false;
[L4508]               __tmp__Alloc[newRef] := true;
[L4509]               assume newRef != null;
[L5918]   RET         call __var_23 := FreshRefGenerator__fail();
[L5919]   COND FALSE  !(revert)
[L5922]               __tmp___pausers_PauserRole[this] := __var_23;
[L5924]   COND FALSE  !(__tmp__DType[this] == Wafl)
[L5929]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L5934]   COND TRUE   __tmp__DType[this] == Pausable
[L5935]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6145]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5834]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5890]               __var_22 := null;
[L5891]   COND FALSE  !(!(account_s834 != null))
[L5895]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5834]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5835]   COND FALSE  !(revert)
[L5838]   COND FALSE  !(!!__var_20)
[L5842]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6145]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6146]   COND FALSE  !(revert)
[L5935]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5936]   COND FALSE  !(revert)
[L5990]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   COND FALSE  !(revert)
[L6199]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6200]   COND FALSE  !(revert)
[L6203]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6180]               assume msgsender_MSG != null;
[L6181]               __tmp__Balance[this] := 0;
[L6182]               __tmp___paused_Pausable[this] := false;
[L6184]               __tmp___paused_Pausable[this] := false;
[L6203]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6204]   COND FALSE  !(revert)
[L7129]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7130]   COND FALSE  !(revert)
[L7133]   CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6305]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L6305]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6306]   COND FALSE  !(revert)
[L6309]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4895]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L4895]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   COND FALSE  !(revert)
[L4899]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4870]               assume msgsender_MSG != null;
[L4871]               __tmp__Balance[this] := 0;
[L4872]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4873]               __tmp__sum__balances0[this] := 0;
[L4874]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4875]               __tmp__sum__allowances1[this] := 0;
[L4876]               __tmp___totalSupply_ERC20[this] := 0;
[L4899]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4900]   COND FALSE  !(revert)
[L6309]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6310]   COND FALSE  !(revert)
[L6313]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5990]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5915]               assume msgsender_MSG != null;
[L5916]               __tmp__Balance[this] := 0;
[L5918]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4506]               havoc newRef;
[L4507]               assume __tmp__Alloc[newRef] == false;
[L4508]               __tmp__Alloc[newRef] := true;
[L4509]               assume newRef != null;
[L5918]   RET         call __var_23 := FreshRefGenerator__fail();
[L5919]   COND FALSE  !(revert)
[L5922]               __tmp___pausers_PauserRole[this] := __var_23;
[L5924]   COND FALSE  !(__tmp__DType[this] == Wafl)
[L5929]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L5934]   COND TRUE   __tmp__DType[this] == Pausable
[L5935]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6145]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5834]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5890]               __var_22 := null;
[L5891]   COND FALSE  !(!(account_s834 != null))
[L5895]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5834]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5835]   COND FALSE  !(revert)
[L5838]   COND FALSE  !(!!__var_20)
[L5842]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6145]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6146]   COND FALSE  !(revert)
[L5935]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5936]   COND FALSE  !(revert)
[L5990]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   COND FALSE  !(revert)
[L6313]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6314]   COND FALSE  !(revert)
[L6317]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6199]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5990]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5915]               assume msgsender_MSG != null;
[L5916]               __tmp__Balance[this] := 0;
[L5918]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4506]               havoc newRef;
[L4507]               assume __tmp__Alloc[newRef] == false;
[L4508]               __tmp__Alloc[newRef] := true;
[L4509]               assume newRef != null;
[L5918]   RET         call __var_23 := FreshRefGenerator__fail();
[L5919]   COND FALSE  !(revert)
[L5922]               __tmp___pausers_PauserRole[this] := __var_23;
[L5924]   COND FALSE  !(__tmp__DType[this] == Wafl)
[L5929]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L5934]   COND TRUE   __tmp__DType[this] == Pausable
[L5935]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6145]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5834]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5890]               __var_22 := null;
[L5891]   COND FALSE  !(!(account_s834 != null))
[L5895]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5834]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5835]   COND FALSE  !(revert)
[L5838]   COND FALSE  !(!!__var_20)
[L5842]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6145]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6146]   COND FALSE  !(revert)
[L5935]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5936]   COND FALSE  !(revert)
[L5990]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   COND FALSE  !(revert)
[L6199]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6200]   COND FALSE  !(revert)
[L6203]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6180]               assume msgsender_MSG != null;
[L6181]               __tmp__Balance[this] := 0;
[L6182]               __tmp___paused_Pausable[this] := false;
[L6184]               __tmp___paused_Pausable[this] := false;
[L6203]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6204]   COND FALSE  !(revert)
[L6317]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6318]   COND FALSE  !(revert)
[L6321]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6290]               assume msgsender_MSG != null;
[L6291]               __tmp__Balance[this] := 0;
[L6321]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6322]   COND FALSE  !(revert)
[L7133]   RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7134]   COND FALSE  !(revert)
[L7137]   CALL        call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6957]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L6957]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6958]   COND FALSE  !(revert)
[L6961]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4895]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L4895]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   COND FALSE  !(revert)
[L4899]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4870]               assume msgsender_MSG != null;
[L4871]               __tmp__Balance[this] := 0;
[L4872]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4873]               __tmp__sum__balances0[this] := 0;
[L4874]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4875]               __tmp__sum__allowances1[this] := 0;
[L4876]               __tmp___totalSupply_ERC20[this] := 0;
[L4899]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4900]   COND FALSE  !(revert)
[L6961]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6962]   COND FALSE  !(revert)
[L6965]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6942]               assume msgsender_MSG != null;
[L6943]               __tmp__Balance[this] := 0;
[L6965]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6966]   COND FALSE  !(revert)
[L7137]   RET         call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7138]   COND FALSE  !(revert)
[L7141]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6670]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6605]               assume msgsender_MSG != null;
[L6606]               __tmp__Balance[this] := 0;
[L6608]   CALL        call __var_36 := FreshRefGenerator__fail();
[L4506]               havoc newRef;
[L4507]               assume __tmp__Alloc[newRef] == false;
[L4508]               __tmp__Alloc[newRef] := true;
[L4509]               assume newRef != null;
[L6608]   RET         call __var_36 := FreshRefGenerator__fail();
[L6609]   COND FALSE  !(revert)
[L6612]               __tmp___minters_MinterRole[this] := __var_36;
[L6614]   COND TRUE   __tmp__DType[this] == Wafl
[L6615]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6805]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L5834]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5890]               __var_22 := null;
[L5891]   COND FALSE  !(!(account_s834 != null))
[L5895]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5834]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5835]   COND FALSE  !(revert)
[L5838]   COND FALSE  !(!!__var_20)
[L5842]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6805]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L6806]   COND FALSE  !(revert)
[L6615]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6616]   COND FALSE  !(revert)
[L6670]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6671]   COND FALSE  !(revert)
[L7141]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7142]   COND FALSE  !(revert)
[L7145]   CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L6855]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6856]   COND FALSE  !(revert)
[L6859]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4895]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L4895]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   COND FALSE  !(revert)
[L4899]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4870]               assume msgsender_MSG != null;
[L4871]               __tmp__Balance[this] := 0;
[L4872]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4873]               __tmp__sum__balances0[this] := 0;
[L4874]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4875]               __tmp__sum__allowances1[this] := 0;
[L4876]               __tmp___totalSupply_ERC20[this] := 0;
[L4899]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4900]   COND FALSE  !(revert)
[L6859]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6860]   COND FALSE  !(revert)
[L6863]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6670]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6605]               assume msgsender_MSG != null;
[L6606]               __tmp__Balance[this] := 0;
[L6608]   CALL        call __var_36 := FreshRefGenerator__fail();
[L4506]               havoc newRef;
[L4507]               assume __tmp__Alloc[newRef] == false;
[L4508]               __tmp__Alloc[newRef] := true;
[L4509]               assume newRef != null;
[L6608]   RET         call __var_36 := FreshRefGenerator__fail();
[L6609]   COND FALSE  !(revert)
[L6612]               __tmp___minters_MinterRole[this] := __var_36;
[L6614]   COND TRUE   __tmp__DType[this] == Wafl
[L6615]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6805]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L5834]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5890]               __var_22 := null;
[L5891]   COND FALSE  !(!(account_s834 != null))
[L5895]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5834]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5835]   COND FALSE  !(revert)
[L5838]   COND FALSE  !(!!__var_20)
[L5842]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6805]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L6806]   COND FALSE  !(revert)
[L6615]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6616]   COND FALSE  !(revert)
[L6670]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6671]   COND FALSE  !(revert)
[L6863]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6864]   COND FALSE  !(revert)
[L6867]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6840]               assume msgsender_MSG != null;
[L6841]               __tmp__Balance[this] := 0;
[L6867]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L7145]   RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7146]   COND FALSE  !(revert)
[L7149]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4709]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4689]               assume msgsender_MSG != null;
[L4690]               __tmp__Balance[this] := 0;
[L4691]               __tmp___owner_Ownable[this] := null;
[L4693]               __tmp___owner_Ownable[this] := msgsender_MSG;
[L4709]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4710]   COND FALSE  !(revert)
[L7149]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7150]   COND FALSE  !(revert)
[L7153]   CALL        call Wafl_Wafl_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7060]               assume msgsender_MSG != null;
[L7061]               __tmp__Balance[this] := 0;
[L7063]   COND TRUE   __tmp__DType[this] == Wafl
[L7064]   CALL        call __var_40 := decimals_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG);
[L5789]               __ret_0_ := __tmp___decimals_ERC20Detailed[this];
[L7064]   RET         call __var_40 := decimals_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG);
[L7065]   COND FALSE  !(revert)
[L7071]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7072]   COND TRUE   __tmp__DType[this] == Wafl
[L7073]   CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5449]               __var_11 := null;
[L5450]   COND FALSE  !(!(account_s587 != null))
[L5454]   CALL        call __var_12 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s587);
[L4565]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4566]   COND FALSE  !(!(c_s26 >= a_s26))
[L4570]               __ret_0_ := c_s26;
[L5454]   RET         call __var_12 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s587);
[L5455]   COND FALSE  !(revert)
[L5458]               __tmp___totalSupply_ERC20[this] := __var_12;
[L5459]   CALL        call __var_13 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s587], amount_s587);
[L4565]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4566]   COND FALSE  !(!(c_s26 >= a_s26))
[L4570]               __ret_0_ := c_s26;
[L5459]   RET         call __var_13 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s587], amount_s587);
[L5460]   COND FALSE  !(revert)
[L5463]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s587];
[L5464]               __tmp___balances_ERC20[this][account_s587] := __var_13;
[L5465]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s587];
[L7073]   RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7074]   COND FALSE  !(revert)
[L7153]   RET         call Wafl_Wafl_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7154]   COND FALSE  !(revert)
[L3161]   RET         call Wafl_Wafl__fail(this, msgsender_MSG, msgvalue_MSG);
[L3162]               assume revert || gas < 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND TRUE   choice == 18
[L11090]              gas := gas - 21000;
[L11091]  COND TRUE   gas >= 0
[L11092]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1061 != to_s1061 && ((value_s1061 > _balances_ERC20[this][from_s1061] || value_s1061 > _allowances_ERC20[this][from_s1061][msgsender_MSG]) || _balances_ERC20[this][to_s1061] + value_s1061 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC20Pausable0 := true;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2226]               havoc __exception;
[L2227]               revert := false;
[L2228]   COND FALSE  !(__exception)
[L2256]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6430]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6430]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L6434]   COND FALSE  !(DType[this] == Wafl)
[L6439]   COND TRUE   DType[this] == ERC20Pausable
[L6440]   CALL        call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L5159]   COND TRUE   DType[this] == Wafl
[L5160]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5160]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5161]   COND FALSE  !(revert)
[L5187]   CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5187]   RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L5188]   COND FALSE  !(revert)
[L5191]   COND TRUE   DType[this] == Wafl
[L5192]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5192]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5193]   COND FALSE  !(revert)
[L5219]               __ret_0_ := true;
[L6440]   RET         call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6441]   COND FALSE  !(revert)
[L6447]               __ret_0_ := __var_28;
[L2256]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2257]               assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND TRUE   choice == 18
[L11090]              gas := gas - 21000;
[L11091]  COND TRUE   gas >= 0
[L11092]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1061 != to_s1061 && ((value_s1061 > _balances_ERC20[this][from_s1061] || value_s1061 > _allowances_ERC20[this][from_s1061][msgsender_MSG]) || _balances_ERC20[this][to_s1061] + value_s1061 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC20Pausable0 := true;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2226]               havoc __exception;
[L2227]               revert := false;
[L2228]   COND FALSE  !(__exception)
[L2256]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6430]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6430]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L6434]   COND FALSE  !(DType[this] == Wafl)
[L6439]   COND TRUE   DType[this] == ERC20Pausable
[L6440]   CALL        call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L5159]   COND TRUE   DType[this] == Wafl
[L5160]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5160]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5161]   COND FALSE  !(revert)
[L5187]   CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5187]   RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L5188]   COND FALSE  !(revert)
[L5191]   COND TRUE   DType[this] == Wafl
[L5192]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5192]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5193]   COND FALSE  !(revert)
[L5219]               __ret_0_ := true;
[L6440]   RET         call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6441]   COND FALSE  !(revert)
[L6447]               __ret_0_ := __var_28;
[L2256]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2257]               assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:48:01,356 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:48:01,356 INFO  L82        PathProgramCache]: Analyzing trace with hash -2067562126, now seen corresponding path program 1 times
[2020-11-25 08:48:01,357 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:48:01,368 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:48:01,563 INFO  L134       CoverageAnalysis]: Checked inductivity of 979 backedges. 9 proven. 31 refuted. 0 times theorem prover too weak. 939 trivial. 0 not checked.
[2020-11-25 08:48:01,563 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:48:01,563 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-11-25 08:48:01,564 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:48:01,564 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 08:48:01,564 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=18, Invalid=72, Unknown=0, NotChecked=0, Total=90
[2020-11-25 08:48:01,564 INFO  L87              Difference]: Start difference. First operand 9290 states and 10851 transitions. cyclomatic complexity: 1565 Second operand 10 states.
[2020-11-25 08:48:03,492 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:48:03,492 INFO  L93              Difference]: Finished difference Result 9438 states and 11010 transitions.
[2020-11-25 08:48:03,493 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-11-25 08:48:03,493 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9438 states and 11010 transitions.
[2020-11-25 08:48:03,512 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 08:48:03,529 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9438 states to 9409 states and 10972 transitions.
[2020-11-25 08:48:03,529 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2442
[2020-11-25 08:48:03,530 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2442
[2020-11-25 08:48:03,530 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9409 states and 10972 transitions.
[2020-11-25 08:48:03,535 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:48:03,535 INFO  L728         BuchiCegarLoop]: Abstraction has 9409 states and 10972 transitions.
[2020-11-25 08:48:03,540 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9409 states and 10972 transitions.
[2020-11-25 08:48:03,578 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9409 to 9290.
[2020-11-25 08:48:03,578 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9290 states.
[2020-11-25 08:48:03,588 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9290 states to 9290 states and 10851 transitions.
[2020-11-25 08:48:03,588 INFO  L751         BuchiCegarLoop]: Abstraction has 9290 states and 10851 transitions.
[2020-11-25 08:48:03,588 INFO  L631         BuchiCegarLoop]: Abstraction has 9290 states and 10851 transitions.
[2020-11-25 08:48:03,588 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 08:48:03,588 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9290 states and 10851 transitions.
[2020-11-25 08:48:03,597 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 08:48:03,597 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:48:03,597 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:48:03,599 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:48:03,599 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ERC20Pausable0 := false;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5972]   COND TRUE   DType[this] == Pausable
[L5973]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5973]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5974]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND TRUE   choice == 18
[L11090]              gas := gas - 21000;
[L11091]  COND TRUE   gas >= 0
[L11092]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1061 != to_s1061 && ((value_s1061 > _balances_ERC20[this][from_s1061] || value_s1061 > _allowances_ERC20[this][from_s1061][msgsender_MSG]) || _balances_ERC20[this][to_s1061] + value_s1061 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC20Pausable0 := true;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2226]               havoc __exception;
[L2227]               revert := false;
[L2228]   COND FALSE  !(__exception)
[L2256]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6430]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6430]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L6434]   COND TRUE   DType[this] == Wafl
[L6435]   CALL        call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L5159]   COND TRUE   DType[this] == Wafl
[L5160]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5160]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5161]   COND FALSE  !(revert)
[L5187]   CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5187]   RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L5188]   COND FALSE  !(revert)
[L5191]   COND TRUE   DType[this] == Wafl
[L5192]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5192]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5193]   COND FALSE  !(revert)
[L5219]               __ret_0_ := true;
[L6435]   RET         call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6436]   COND FALSE  !(revert)
[L6447]               __ret_0_ := __var_28;
[L2256]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2257]               assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND TRUE   choice == 18
[L11090]              gas := gas - 21000;
[L11091]  COND TRUE   gas >= 0
[L11092]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1061 != to_s1061 && ((value_s1061 > _balances_ERC20[this][from_s1061] || value_s1061 > _allowances_ERC20[this][from_s1061][msgsender_MSG]) || _balances_ERC20[this][to_s1061] + value_s1061 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC20Pausable0 := true;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2226]               havoc __exception;
[L2227]               revert := false;
[L2228]   COND FALSE  !(__exception)
[L2256]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6430]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6430]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L6434]   COND TRUE   DType[this] == Wafl
[L6435]   CALL        call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L5159]   COND TRUE   DType[this] == Wafl
[L5160]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5160]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5161]   COND FALSE  !(revert)
[L5187]   CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5187]   RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L5188]   COND FALSE  !(revert)
[L5191]   COND TRUE   DType[this] == Wafl
[L5192]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5192]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5193]   COND FALSE  !(revert)
[L5219]               __ret_0_ := true;
[L6435]   RET         call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6436]   COND FALSE  !(revert)
[L6447]               __ret_0_ := __var_28;
[L2256]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2257]               assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:48:03,604 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:48:03,604 INFO  L82        PathProgramCache]: Analyzing trace with hash 223649126, now seen corresponding path program 2 times
[2020-11-25 08:48:03,605 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:48:03,619 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:48:03,804 INFO  L134       CoverageAnalysis]: Checked inductivity of 998 backedges. 25 proven. 0 refuted. 0 times theorem prover too weak. 973 trivial. 0 not checked.
[2020-11-25 08:48:03,804 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:48:03,805 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 08:48:03,805 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:48:03,805 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 08:48:03,805 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 08:48:03,805 INFO  L87              Difference]: Start difference. First operand 9290 states and 10851 transitions. cyclomatic complexity: 1565 Second operand 9 states.
[2020-11-25 08:48:04,083 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:48:04,083 INFO  L93              Difference]: Finished difference Result 9320 states and 10886 transitions.
[2020-11-25 08:48:04,083 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 08:48:04,084 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9320 states and 10886 transitions.
[2020-11-25 08:48:04,105 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 08:48:04,127 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9320 states to 9262 states and 10816 transitions.
[2020-11-25 08:48:04,127 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2420
[2020-11-25 08:48:04,128 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2420
[2020-11-25 08:48:04,128 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9262 states and 10816 transitions.
[2020-11-25 08:48:04,133 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:48:04,133 INFO  L728         BuchiCegarLoop]: Abstraction has 9262 states and 10816 transitions.
[2020-11-25 08:48:04,138 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9262 states and 10816 transitions.
[2020-11-25 08:48:04,189 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9262 to 9262.
[2020-11-25 08:48:04,189 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9262 states.
[2020-11-25 08:48:04,201 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9262 states to 9262 states and 10816 transitions.
[2020-11-25 08:48:04,201 INFO  L751         BuchiCegarLoop]: Abstraction has 9262 states and 10816 transitions.
[2020-11-25 08:48:04,201 INFO  L631         BuchiCegarLoop]: Abstraction has 9262 states and 10816 transitions.
[2020-11-25 08:48:04,201 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 08:48:04,202 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9262 states and 10816 transitions.
[2020-11-25 08:48:04,236 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 08:48:04,236 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:48:04,237 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:48:04,240 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:48:04,240 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ERC20Pausable0 := false;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND TRUE   choice == 18
[L11090]              gas := gas - 21000;
[L11091]  COND TRUE   gas >= 0
[L11092]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1061 != to_s1061 && ((value_s1061 > _balances_ERC20[this][from_s1061] || value_s1061 > _allowances_ERC20[this][from_s1061][msgsender_MSG]) || _balances_ERC20[this][to_s1061] + value_s1061 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC20Pausable0 := true;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2226]               havoc __exception;
[L2227]               revert := false;
[L2228]   COND FALSE  !(__exception)
[L2256]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6430]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6430]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L6434]   COND TRUE   DType[this] == Wafl
[L6435]   CALL        call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L5159]   COND TRUE   DType[this] == Wafl
[L5160]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5160]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5161]   COND FALSE  !(revert)
[L5187]   CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5187]   RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L5188]   COND FALSE  !(revert)
[L5191]   COND TRUE   DType[this] == Wafl
[L5192]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5192]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5193]   COND FALSE  !(revert)
[L5219]               __ret_0_ := true;
[L6435]   RET         call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6436]   COND FALSE  !(revert)
[L6447]               __ret_0_ := __var_28;
[L2256]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2257]               assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND TRUE   choice == 18
[L11090]              gas := gas - 21000;
[L11091]  COND TRUE   gas >= 0
[L11092]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1061 != to_s1061 && ((value_s1061 > _balances_ERC20[this][from_s1061] || value_s1061 > _allowances_ERC20[this][from_s1061][msgsender_MSG]) || _balances_ERC20[this][to_s1061] + value_s1061 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC20Pausable0 := true;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2226]               havoc __exception;
[L2227]               revert := false;
[L2228]   COND FALSE  !(__exception)
[L2256]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6430]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6430]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L6434]   COND TRUE   DType[this] == Wafl
[L6435]   CALL        call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L5159]   COND TRUE   DType[this] == Wafl
[L5160]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5160]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5161]   COND FALSE  !(revert)
[L5187]   CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5187]   RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L5188]   COND FALSE  !(revert)
[L5191]   COND TRUE   DType[this] == Wafl
[L5192]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5192]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5193]   COND FALSE  !(revert)
[L5219]               __ret_0_ := true;
[L6435]   RET         call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6436]   COND FALSE  !(revert)
[L6447]               __ret_0_ := __var_28;
[L2256]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2257]               assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:48:04,259 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:48:04,259 INFO  L82        PathProgramCache]: Analyzing trace with hash -1742852745, now seen corresponding path program 1 times
[2020-11-25 08:48:04,260 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:48:04,285 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:48:04,609 INFO  L134       CoverageAnalysis]: Checked inductivity of 1010 backedges. 28 proven. 0 refuted. 0 times theorem prover too weak. 982 trivial. 0 not checked.
[2020-11-25 08:48:04,610 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:48:04,610 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [15] imperfect sequences [] total 15
[2020-11-25 08:48:04,610 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:48:04,610 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-25 08:48:04,610 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=30, Invalid=210, Unknown=0, NotChecked=0, Total=240
[2020-11-25 08:48:04,611 INFO  L87              Difference]: Start difference. First operand 9262 states and 10816 transitions. cyclomatic complexity: 1558 Second operand 16 states.
[2020-11-25 08:48:10,292 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:48:10,292 INFO  L93              Difference]: Finished difference Result 9385 states and 10958 transitions.
[2020-11-25 08:48:10,293 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-11-25 08:48:10,293 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9385 states and 10958 transitions.
[2020-11-25 08:48:10,309 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 08:48:10,326 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9385 states to 9385 states and 10958 transitions.
[2020-11-25 08:48:10,326 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2452
[2020-11-25 08:48:10,327 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2452
[2020-11-25 08:48:10,327 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9385 states and 10958 transitions.
[2020-11-25 08:48:10,332 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:48:10,332 INFO  L728         BuchiCegarLoop]: Abstraction has 9385 states and 10958 transitions.
[2020-11-25 08:48:10,337 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9385 states and 10958 transitions.
[2020-11-25 08:48:10,377 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9385 to 9078.
[2020-11-25 08:48:10,377 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9078 states.
[2020-11-25 08:48:10,387 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9078 states to 9078 states and 10569 transitions.
[2020-11-25 08:48:10,387 INFO  L751         BuchiCegarLoop]: Abstraction has 9078 states and 10569 transitions.
[2020-11-25 08:48:10,387 INFO  L631         BuchiCegarLoop]: Abstraction has 9078 states and 10569 transitions.
[2020-11-25 08:48:10,387 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-25 08:48:10,387 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9078 states and 10569 transitions.
[2020-11-25 08:48:10,396 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:48:10,396 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:48:10,396 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:48:10,397 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:48:10,397 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ERC20Pausable0 := false;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND TRUE   __exception
[L3137]               __tmp__Balance := Balance;
[L3138]               __tmp__DType := DType;
[L3139]               __tmp__Alloc := Alloc;
[L3140]               __tmp__balance_ADDR := balance_ADDR;
[L3141]               __tmp__M_Ref_int := M_Ref_int;
[L3142]               __tmp__sum__balances0 := sum__balances0;
[L3143]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L3144]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3145]               __tmp__sum__allowances1 := sum__allowances1;
[L3146]               __tmp__M_Ref_bool := M_Ref_bool;
[L3147]               __tmp__sum := sum;
[L3148]               __tmp__Length := Length;
[L3149]               __tmp__now := now;
[L3150]               __tmp___owner_Ownable := _owner_Ownable;
[L3151]               __tmp___balances_ERC20 := _balances_ERC20;
[L3152]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L3153]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3154]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3155]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3156]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3157]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3158]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3159]               __tmp___paused_Pausable := _paused_Pausable;
[L3160]               __tmp___minters_MinterRole := _minters_MinterRole;
[L3161]   CALL        call Wafl_Wafl__fail(this, msgsender_MSG, msgvalue_MSG);
[L7113]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L7113]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7114]   COND FALSE  !(revert)
[L7117]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4895]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L4895]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   COND FALSE  !(revert)
[L4899]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4870]               assume msgsender_MSG != null;
[L4871]               __tmp__Balance[this] := 0;
[L4872]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4873]               __tmp__sum__balances0[this] := 0;
[L4874]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4875]               __tmp__sum__allowances1[this] := 0;
[L4876]               __tmp___totalSupply_ERC20[this] := 0;
[L4899]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4900]   COND FALSE  !(revert)
[L7117]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7118]   COND FALSE  !(revert)
[L7121]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5741]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L5741]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5742]   COND FALSE  !(revert)
[L5745]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5714]               assume msgsender_MSG != null;
[L5715]               __tmp__Balance[this] := 0;
[L5716]               __tmp___name_ERC20Detailed[this] := -1545721152;
[L5717]               __tmp___symbol_ERC20Detailed[this] := -1545721152;
[L5718]               __tmp___decimals_ERC20Detailed[this] := 0;
[L5720]               __tmp___name_ERC20Detailed[this] := name_s731;
[L5721]               __tmp___symbol_ERC20Detailed[this] := symbol_s731;
[L5722]               __tmp___decimals_ERC20Detailed[this] := decimals_s731;
[L5745]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5746]   COND FALSE  !(revert)
[L7121]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7122]   COND FALSE  !(revert)
[L7125]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5990]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5915]               assume msgsender_MSG != null;
[L5916]               __tmp__Balance[this] := 0;
[L5918]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4506]               havoc newRef;
[L4507]               assume __tmp__Alloc[newRef] == false;
[L4508]               __tmp__Alloc[newRef] := true;
[L4509]               assume newRef != null;
[L5918]   RET         call __var_23 := FreshRefGenerator__fail();
[L5919]   COND FALSE  !(revert)
[L5922]               __tmp___pausers_PauserRole[this] := __var_23;
[L5924]   COND TRUE   __tmp__DType[this] == Wafl
[L5925]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6145]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5834]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5890]               __var_22 := null;
[L5891]   COND FALSE  !(!(account_s834 != null))
[L5895]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5834]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5835]   COND FALSE  !(revert)
[L5838]   COND FALSE  !(!!__var_20)
[L5842]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6145]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6146]   COND FALSE  !(revert)
[L5925]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5926]   COND FALSE  !(revert)
[L5990]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   COND FALSE  !(revert)
[L7125]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6199]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5990]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5915]               assume msgsender_MSG != null;
[L5916]               __tmp__Balance[this] := 0;
[L5918]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4506]               havoc newRef;
[L4507]               assume __tmp__Alloc[newRef] == false;
[L4508]               __tmp__Alloc[newRef] := true;
[L4509]               assume newRef != null;
[L5918]   RET         call __var_23 := FreshRefGenerator__fail();
[L5919]   COND FALSE  !(revert)
[L5922]               __tmp___pausers_PauserRole[this] := __var_23;
[L5924]   COND TRUE   __tmp__DType[this] == Wafl
[L5925]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6145]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5834]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5890]               __var_22 := null;
[L5891]   COND FALSE  !(!(account_s834 != null))
[L5895]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5834]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5835]   COND FALSE  !(revert)
[L5838]   COND FALSE  !(!!__var_20)
[L5842]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6145]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6146]   COND FALSE  !(revert)
[L5925]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5926]   COND FALSE  !(revert)
[L5990]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   COND FALSE  !(revert)
[L6199]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6200]   COND FALSE  !(revert)
[L6203]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6180]               assume msgsender_MSG != null;
[L6181]               __tmp__Balance[this] := 0;
[L6182]               __tmp___paused_Pausable[this] := false;
[L6184]               __tmp___paused_Pausable[this] := false;
[L6203]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6204]   COND FALSE  !(revert)
[L7129]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7130]   COND FALSE  !(revert)
[L7133]   CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6305]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L6305]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6306]   COND FALSE  !(revert)
[L6309]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4895]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L4895]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   COND FALSE  !(revert)
[L4899]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4870]               assume msgsender_MSG != null;
[L4871]               __tmp__Balance[this] := 0;
[L4872]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4873]               __tmp__sum__balances0[this] := 0;
[L4874]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4875]               __tmp__sum__allowances1[this] := 0;
[L4876]               __tmp___totalSupply_ERC20[this] := 0;
[L4899]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4900]   COND FALSE  !(revert)
[L6309]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6310]   COND FALSE  !(revert)
[L6313]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5990]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5915]               assume msgsender_MSG != null;
[L5916]               __tmp__Balance[this] := 0;
[L5918]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4506]               havoc newRef;
[L4507]               assume __tmp__Alloc[newRef] == false;
[L4508]               __tmp__Alloc[newRef] := true;
[L4509]               assume newRef != null;
[L5918]   RET         call __var_23 := FreshRefGenerator__fail();
[L5919]   COND FALSE  !(revert)
[L5922]               __tmp___pausers_PauserRole[this] := __var_23;
[L5924]   COND FALSE  !(__tmp__DType[this] == Wafl)
[L5929]   COND TRUE   __tmp__DType[this] == ERC20Pausable
[L5930]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6145]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5834]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5890]               __var_22 := null;
[L5891]   COND FALSE  !(!(account_s834 != null))
[L5895]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5834]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5835]   COND FALSE  !(revert)
[L5838]   COND FALSE  !(!!__var_20)
[L5842]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6145]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6146]   COND FALSE  !(revert)
[L5930]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5931]   COND FALSE  !(revert)
[L5990]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   COND FALSE  !(revert)
[L6313]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6314]   COND FALSE  !(revert)
[L6317]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6199]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5990]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5915]               assume msgsender_MSG != null;
[L5916]               __tmp__Balance[this] := 0;
[L5918]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4506]               havoc newRef;
[L4507]               assume __tmp__Alloc[newRef] == false;
[L4508]               __tmp__Alloc[newRef] := true;
[L4509]               assume newRef != null;
[L5918]   RET         call __var_23 := FreshRefGenerator__fail();
[L5919]   COND FALSE  !(revert)
[L5922]               __tmp___pausers_PauserRole[this] := __var_23;
[L5924]   COND TRUE   __tmp__DType[this] == Wafl
[L5925]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6145]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5834]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5890]               __var_22 := null;
[L5891]   COND FALSE  !(!(account_s834 != null))
[L5895]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5834]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5835]   COND FALSE  !(revert)
[L5838]   COND FALSE  !(!!__var_20)
[L5842]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6145]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6146]   COND FALSE  !(revert)
[L5925]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5926]   COND FALSE  !(revert)
[L5990]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   COND FALSE  !(revert)
[L6199]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6200]   COND FALSE  !(revert)
[L6203]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6180]               assume msgsender_MSG != null;
[L6181]               __tmp__Balance[this] := 0;
[L6182]               __tmp___paused_Pausable[this] := false;
[L6184]               __tmp___paused_Pausable[this] := false;
[L6203]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6204]   COND FALSE  !(revert)
[L6317]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6318]   COND FALSE  !(revert)
[L6321]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6290]               assume msgsender_MSG != null;
[L6291]               __tmp__Balance[this] := 0;
[L6321]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6322]   COND FALSE  !(revert)
[L7133]   RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7134]   COND FALSE  !(revert)
[L7137]   CALL        call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6957]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L6957]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6958]   COND FALSE  !(revert)
[L6961]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4895]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L4895]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   COND FALSE  !(revert)
[L4899]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4870]               assume msgsender_MSG != null;
[L4871]               __tmp__Balance[this] := 0;
[L4872]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4873]               __tmp__sum__balances0[this] := 0;
[L4874]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4875]               __tmp__sum__allowances1[this] := 0;
[L4876]               __tmp___totalSupply_ERC20[this] := 0;
[L4899]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4900]   COND FALSE  !(revert)
[L6961]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6962]   COND FALSE  !(revert)
[L6965]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6942]               assume msgsender_MSG != null;
[L6943]               __tmp__Balance[this] := 0;
[L6965]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6966]   COND FALSE  !(revert)
[L7137]   RET         call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7138]   COND FALSE  !(revert)
[L7141]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6670]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6605]               assume msgsender_MSG != null;
[L6606]               __tmp__Balance[this] := 0;
[L6608]   CALL        call __var_36 := FreshRefGenerator__fail();
[L4506]               havoc newRef;
[L4507]               assume __tmp__Alloc[newRef] == false;
[L4508]               __tmp__Alloc[newRef] := true;
[L4509]               assume newRef != null;
[L6608]   RET         call __var_36 := FreshRefGenerator__fail();
[L6609]   COND FALSE  !(revert)
[L6612]               __tmp___minters_MinterRole[this] := __var_36;
[L6614]   COND FALSE  !(__tmp__DType[this] == Wafl)
[L6619]   COND FALSE  !(__tmp__DType[this] == ERC20Mintable)
[L6624]   COND TRUE   __tmp__DType[this] == MinterRole
[L6625]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6805]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L5834]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5890]               __var_22 := null;
[L5891]   COND FALSE  !(!(account_s834 != null))
[L5895]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5834]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5835]   COND FALSE  !(revert)
[L5838]   COND FALSE  !(!!__var_20)
[L5842]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6805]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L6806]   COND FALSE  !(revert)
[L6625]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6626]   COND FALSE  !(revert)
[L6670]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6671]   COND FALSE  !(revert)
[L7141]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7142]   COND FALSE  !(revert)
[L7145]   CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L6855]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6856]   COND FALSE  !(revert)
[L6859]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4895]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L4895]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   COND FALSE  !(revert)
[L4899]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4870]               assume msgsender_MSG != null;
[L4871]               __tmp__Balance[this] := 0;
[L4872]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4873]               __tmp__sum__balances0[this] := 0;
[L4874]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4875]               __tmp__sum__allowances1[this] := 0;
[L4876]               __tmp___totalSupply_ERC20[this] := 0;
[L4899]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4900]   COND FALSE  !(revert)
[L6859]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6860]   COND FALSE  !(revert)
[L6863]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6670]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6605]               assume msgsender_MSG != null;
[L6606]               __tmp__Balance[this] := 0;
[L6608]   CALL        call __var_36 := FreshRefGenerator__fail();
[L4506]               havoc newRef;
[L4507]               assume __tmp__Alloc[newRef] == false;
[L4508]               __tmp__Alloc[newRef] := true;
[L4509]               assume newRef != null;
[L6608]   RET         call __var_36 := FreshRefGenerator__fail();
[L6609]   COND FALSE  !(revert)
[L6612]               __tmp___minters_MinterRole[this] := __var_36;
[L6614]   COND FALSE  !(__tmp__DType[this] == Wafl)
[L6619]   COND FALSE  !(__tmp__DType[this] == ERC20Mintable)
[L6624]   COND TRUE   __tmp__DType[this] == MinterRole
[L6625]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6805]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L5834]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5890]               __var_22 := null;
[L5891]   COND FALSE  !(!(account_s834 != null))
[L5895]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5834]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5835]   COND FALSE  !(revert)
[L5838]   COND FALSE  !(!!__var_20)
[L5842]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6805]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L6806]   COND FALSE  !(revert)
[L6625]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6626]   COND FALSE  !(revert)
[L6670]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6671]   COND FALSE  !(revert)
[L6863]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6864]   COND FALSE  !(revert)
[L6867]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6840]               assume msgsender_MSG != null;
[L6841]               __tmp__Balance[this] := 0;
[L6867]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L7145]   RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7146]   COND FALSE  !(revert)
[L7149]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4709]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4689]               assume msgsender_MSG != null;
[L4690]               __tmp__Balance[this] := 0;
[L4691]               __tmp___owner_Ownable[this] := null;
[L4693]               __tmp___owner_Ownable[this] := msgsender_MSG;
[L4709]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4710]   COND FALSE  !(revert)
[L7149]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7150]   COND FALSE  !(revert)
[L7153]   CALL        call Wafl_Wafl_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7060]               assume msgsender_MSG != null;
[L7061]               __tmp__Balance[this] := 0;
[L7063]   COND TRUE   __tmp__DType[this] == Wafl
[L7064]   CALL        call __var_40 := decimals_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG);
[L5789]               __ret_0_ := __tmp___decimals_ERC20Detailed[this];
[L7064]   RET         call __var_40 := decimals_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG);
[L7065]   COND FALSE  !(revert)
[L7071]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7072]   COND TRUE   __tmp__DType[this] == Wafl
[L7073]   CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5449]               __var_11 := null;
[L5450]   COND FALSE  !(!(account_s587 != null))
[L5454]   CALL        call __var_12 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s587);
[L4565]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4566]   COND FALSE  !(!(c_s26 >= a_s26))
[L4570]               __ret_0_ := c_s26;
[L5454]   RET         call __var_12 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s587);
[L5455]   COND FALSE  !(revert)
[L5458]               __tmp___totalSupply_ERC20[this] := __var_12;
[L5459]   CALL        call __var_13 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s587], amount_s587);
[L4565]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4566]   COND FALSE  !(!(c_s26 >= a_s26))
[L4570]               __ret_0_ := c_s26;
[L5459]   RET         call __var_13 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s587], amount_s587);
[L5460]   COND FALSE  !(revert)
[L5463]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s587];
[L5464]               __tmp___balances_ERC20[this][account_s587] := __var_13;
[L5465]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s587];
[L7073]   RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7074]   COND FALSE  !(revert)
[L7153]   RET         call Wafl_Wafl_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7154]   COND FALSE  !(revert)
[L3161]   RET         call Wafl_Wafl__fail(this, msgsender_MSG, msgvalue_MSG);
[L3162]               assume revert || gas < 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND TRUE   choice == 18
[L11090]              gas := gas - 21000;
[L11091]  COND TRUE   gas >= 0
[L11092]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1061 != to_s1061 && ((value_s1061 > _balances_ERC20[this][from_s1061] || value_s1061 > _allowances_ERC20[this][from_s1061][msgsender_MSG]) || _balances_ERC20[this][to_s1061] + value_s1061 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC20Pausable0 := true;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2226]               havoc __exception;
[L2227]               revert := false;
[L2228]   COND FALSE  !(__exception)
[L2256]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6430]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6430]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L6434]   COND FALSE  !(DType[this] == Wafl)
[L6439]   COND TRUE   DType[this] == ERC20Pausable
[L6440]   CALL        call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L5159]   COND TRUE   DType[this] == Wafl
[L5160]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5160]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5161]   COND FALSE  !(revert)
[L5187]   CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5187]   RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L5188]   COND FALSE  !(revert)
[L5191]   COND TRUE   DType[this] == Wafl
[L5192]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5192]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5193]   COND FALSE  !(revert)
[L5219]               __ret_0_ := true;
[L6440]   RET         call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6441]   COND FALSE  !(revert)
[L6447]               __ret_0_ := __var_28;
[L2256]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2257]               assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND TRUE   choice == 27
[L11034]              gas := gas - 21000;
[L11035]  COND FALSE  !(gas >= 0)
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:48:10,402 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:48:10,402 INFO  L82        PathProgramCache]: Analyzing trace with hash -472057617, now seen corresponding path program 1 times
[2020-11-25 08:48:10,403 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:48:10,416 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:48:10,609 INFO  L134       CoverageAnalysis]: Checked inductivity of 957 backedges. 12 proven. 6 refuted. 0 times theorem prover too weak. 939 trivial. 0 not checked.
[2020-11-25 08:48:10,609 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:48:10,609 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [9] total 9
[2020-11-25 08:48:10,610 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:48:10,610 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 08:48:10,610 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 08:48:10,610 INFO  L87              Difference]: Start difference. First operand 9078 states and 10569 transitions. cyclomatic complexity: 1497 Second operand 9 states.
[2020-11-25 08:48:12,593 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:48:12,593 INFO  L93              Difference]: Finished difference Result 9223 states and 10722 transitions.
[2020-11-25 08:48:12,593 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 08:48:12,593 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9223 states and 10722 transitions.
[2020-11-25 08:48:12,613 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:48:12,632 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9223 states to 9190 states and 10681 transitions.
[2020-11-25 08:48:12,632 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2329
[2020-11-25 08:48:12,633 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2329
[2020-11-25 08:48:12,633 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9190 states and 10681 transitions.
[2020-11-25 08:48:12,638 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:48:12,638 INFO  L728         BuchiCegarLoop]: Abstraction has 9190 states and 10681 transitions.
[2020-11-25 08:48:12,643 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9190 states and 10681 transitions.
[2020-11-25 08:48:12,713 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9190 to 9084.
[2020-11-25 08:48:12,713 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9084 states.
[2020-11-25 08:48:12,723 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9084 states to 9084 states and 10575 transitions.
[2020-11-25 08:48:12,723 INFO  L751         BuchiCegarLoop]: Abstraction has 9084 states and 10575 transitions.
[2020-11-25 08:48:12,723 INFO  L631         BuchiCegarLoop]: Abstraction has 9084 states and 10575 transitions.
[2020-11-25 08:48:12,723 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-25 08:48:12,723 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9084 states and 10575 transitions.
[2020-11-25 08:48:12,733 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:48:12,733 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:48:12,733 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:48:12,735 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:48:12,735 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ERC20Pausable0 := false;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND TRUE   choice == 19
[L11083]              gas := gas - 21000;
[L11084]  COND TRUE   gas >= 0
[L11085]              assume value_s1079 >= 0 && value_s1079 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11086]              assume msgvalue_MSG == 0;
[L11087]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s1079, value_s1079);
[L2292]               havoc __exception;
[L2293]               revert := false;
[L2294]   COND FALSE  !(__exception)
[L2322]   CALL        call __ret_0_ := approve~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, spender_s1079, value_s1079);
[L6480]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6480]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6481]   COND FALSE  !(revert)
[L6484]   COND TRUE   DType[this] == Wafl
[L6485]   CALL        call __var_30 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s1079, value_s1079);
[L5057]   COND TRUE   DType[this] == Wafl
[L5058]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s399, value_s399);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5058]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s399, value_s399);
[L5059]   COND FALSE  !(revert)
[L5085]               __ret_0_ := true;
[L6485]   RET         call __var_30 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s1079, value_s1079);
[L6486]   COND FALSE  !(revert)
[L6497]               __ret_0_ := __var_30;
[L2322]   RET         call __ret_0_ := approve~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, spender_s1079, value_s1079);
[L2323]               assume !revert && gas >= 0;
[L11087]  RET         call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s1079, value_s1079);
[L11221]  RET         call CorralChoice_Wafl(this);
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND TRUE   choice == 18
[L11090]              gas := gas - 21000;
[L11091]  COND TRUE   gas >= 0
[L11092]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1061 != to_s1061 && ((value_s1061 > _balances_ERC20[this][from_s1061] || value_s1061 > _allowances_ERC20[this][from_s1061][msgsender_MSG]) || _balances_ERC20[this][to_s1061] + value_s1061 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC20Pausable0 := true;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2226]               havoc __exception;
[L2227]               revert := false;
[L2228]   COND FALSE  !(__exception)
[L2256]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6430]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6430]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L6434]   COND TRUE   DType[this] == Wafl
[L6435]   CALL        call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L5159]   COND TRUE   DType[this] == Wafl
[L5160]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5160]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5161]   COND FALSE  !(revert)
[L5187]   CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5187]   RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L5188]   COND FALSE  !(revert)
[L5191]   COND TRUE   DType[this] == Wafl
[L5192]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5192]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5193]   COND FALSE  !(revert)
[L5219]               __ret_0_ := true;
[L6435]   RET         call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6436]   COND FALSE  !(revert)
[L6447]               __ret_0_ := __var_28;
[L2256]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2257]               assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND TRUE   choice == 18
[L11090]              gas := gas - 21000;
[L11091]  COND TRUE   gas >= 0
[L11092]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1061 != to_s1061 && ((value_s1061 > _balances_ERC20[this][from_s1061] || value_s1061 > _allowances_ERC20[this][from_s1061][msgsender_MSG]) || _balances_ERC20[this][to_s1061] + value_s1061 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC20Pausable0 := true;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2226]               havoc __exception;
[L2227]               revert := false;
[L2228]   COND FALSE  !(__exception)
[L2256]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6430]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6430]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L6434]   COND TRUE   DType[this] == Wafl
[L6435]   CALL        call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L5159]   COND TRUE   DType[this] == Wafl
[L5160]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5160]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5161]   COND FALSE  !(revert)
[L5187]   CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5187]   RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L5188]   COND FALSE  !(revert)
[L5191]   COND TRUE   DType[this] == Wafl
[L5192]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5192]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5193]   COND FALSE  !(revert)
[L5219]               __ret_0_ := true;
[L6435]   RET         call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6436]   COND FALSE  !(revert)
[L6447]               __ret_0_ := __var_28;
[L2256]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2257]               assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:48:12,755 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:48:12,756 INFO  L82        PathProgramCache]: Analyzing trace with hash 1013961358, now seen corresponding path program 1 times
[2020-11-25 08:48:12,756 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:48:12,784 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:48:13,358 INFO  L134       CoverageAnalysis]: Checked inductivity of 1089 backedges. 30 proven. 0 refuted. 0 times theorem prover too weak. 1059 trivial. 0 not checked.
[2020-11-25 08:48:13,358 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:48:13,358 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [23] imperfect sequences [] total 23
[2020-11-25 08:48:13,359 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:48:13,359 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 24 interpolants.
[2020-11-25 08:48:13,359 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=59, Invalid=493, Unknown=0, NotChecked=0, Total=552
[2020-11-25 08:48:13,359 INFO  L87              Difference]: Start difference. First operand 9084 states and 10575 transitions. cyclomatic complexity: 1497 Second operand 24 states.
[2020-11-25 08:48:22,448 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:48:22,448 INFO  L93              Difference]: Finished difference Result 9164 states and 10691 transitions.
[2020-11-25 08:48:22,448 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 24 states. 
[2020-11-25 08:48:22,448 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9164 states and 10691 transitions.
[2020-11-25 08:48:22,465 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:48:22,481 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9164 states to 9164 states and 10691 transitions.
[2020-11-25 08:48:22,481 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2324
[2020-11-25 08:48:22,482 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2324
[2020-11-25 08:48:22,482 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9164 states and 10691 transitions.
[2020-11-25 08:48:22,487 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:48:22,487 INFO  L728         BuchiCegarLoop]: Abstraction has 9164 states and 10691 transitions.
[2020-11-25 08:48:22,492 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9164 states and 10691 transitions.
[2020-11-25 08:48:22,533 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9164 to 9118.
[2020-11-25 08:48:22,533 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9118 states.
[2020-11-25 08:48:22,542 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9118 states to 9118 states and 10631 transitions.
[2020-11-25 08:48:22,542 INFO  L751         BuchiCegarLoop]: Abstraction has 9118 states and 10631 transitions.
[2020-11-25 08:48:22,542 INFO  L631         BuchiCegarLoop]: Abstraction has 9118 states and 10631 transitions.
[2020-11-25 08:48:22,542 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-11-25 08:48:22,542 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9118 states and 10631 transitions.
[2020-11-25 08:48:22,551 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:48:22,551 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:48:22,551 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:48:22,552 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:48:22,552 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ERC20Pausable0 := false;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND TRUE   __exception
[L3137]               __tmp__Balance := Balance;
[L3138]               __tmp__DType := DType;
[L3139]               __tmp__Alloc := Alloc;
[L3140]               __tmp__balance_ADDR := balance_ADDR;
[L3141]               __tmp__M_Ref_int := M_Ref_int;
[L3142]               __tmp__sum__balances0 := sum__balances0;
[L3143]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L3144]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3145]               __tmp__sum__allowances1 := sum__allowances1;
[L3146]               __tmp__M_Ref_bool := M_Ref_bool;
[L3147]               __tmp__sum := sum;
[L3148]               __tmp__Length := Length;
[L3149]               __tmp__now := now;
[L3150]               __tmp___owner_Ownable := _owner_Ownable;
[L3151]               __tmp___balances_ERC20 := _balances_ERC20;
[L3152]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L3153]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3154]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3155]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3156]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3157]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3158]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3159]               __tmp___paused_Pausable := _paused_Pausable;
[L3160]               __tmp___minters_MinterRole := _minters_MinterRole;
[L3161]   CALL        call Wafl_Wafl__fail(this, msgsender_MSG, msgvalue_MSG);
[L7113]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L7113]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7114]   COND FALSE  !(revert)
[L7117]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4895]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L4895]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   COND FALSE  !(revert)
[L4899]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4870]               assume msgsender_MSG != null;
[L4871]               __tmp__Balance[this] := 0;
[L4872]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4873]               __tmp__sum__balances0[this] := 0;
[L4874]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4875]               __tmp__sum__allowances1[this] := 0;
[L4876]               __tmp___totalSupply_ERC20[this] := 0;
[L4899]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4900]   COND FALSE  !(revert)
[L7117]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7118]   COND FALSE  !(revert)
[L7121]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5741]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L5741]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5742]   COND FALSE  !(revert)
[L5745]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5714]               assume msgsender_MSG != null;
[L5715]               __tmp__Balance[this] := 0;
[L5716]               __tmp___name_ERC20Detailed[this] := -1545721152;
[L5717]               __tmp___symbol_ERC20Detailed[this] := -1545721152;
[L5718]               __tmp___decimals_ERC20Detailed[this] := 0;
[L5720]               __tmp___name_ERC20Detailed[this] := name_s731;
[L5721]               __tmp___symbol_ERC20Detailed[this] := symbol_s731;
[L5722]               __tmp___decimals_ERC20Detailed[this] := decimals_s731;
[L5745]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5746]   COND FALSE  !(revert)
[L7121]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7122]   COND FALSE  !(revert)
[L7125]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5990]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5915]               assume msgsender_MSG != null;
[L5916]               __tmp__Balance[this] := 0;
[L5918]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4506]               havoc newRef;
[L4507]               assume __tmp__Alloc[newRef] == false;
[L4508]               __tmp__Alloc[newRef] := true;
[L4509]               assume newRef != null;
[L5918]   RET         call __var_23 := FreshRefGenerator__fail();
[L5919]   COND FALSE  !(revert)
[L5922]               __tmp___pausers_PauserRole[this] := __var_23;
[L5924]   COND TRUE   __tmp__DType[this] == Wafl
[L5925]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6145]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5834]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5890]               __var_22 := null;
[L5891]   COND FALSE  !(!(account_s834 != null))
[L5895]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5834]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5835]   COND FALSE  !(revert)
[L5838]   COND FALSE  !(!!__var_20)
[L5842]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6145]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6146]   COND FALSE  !(revert)
[L5925]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5926]   COND FALSE  !(revert)
[L5990]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   COND FALSE  !(revert)
[L7125]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6199]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5990]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5915]               assume msgsender_MSG != null;
[L5916]               __tmp__Balance[this] := 0;
[L5918]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4506]               havoc newRef;
[L4507]               assume __tmp__Alloc[newRef] == false;
[L4508]               __tmp__Alloc[newRef] := true;
[L4509]               assume newRef != null;
[L5918]   RET         call __var_23 := FreshRefGenerator__fail();
[L5919]   COND FALSE  !(revert)
[L5922]               __tmp___pausers_PauserRole[this] := __var_23;
[L5924]   COND TRUE   __tmp__DType[this] == Wafl
[L5925]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6145]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5834]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5890]               __var_22 := null;
[L5891]   COND FALSE  !(!(account_s834 != null))
[L5895]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5834]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5835]   COND FALSE  !(revert)
[L5838]   COND FALSE  !(!!__var_20)
[L5842]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6145]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6146]   COND FALSE  !(revert)
[L5925]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5926]   COND FALSE  !(revert)
[L5990]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   COND FALSE  !(revert)
[L6199]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6200]   COND FALSE  !(revert)
[L6203]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6180]               assume msgsender_MSG != null;
[L6181]               __tmp__Balance[this] := 0;
[L6182]               __tmp___paused_Pausable[this] := false;
[L6184]               __tmp___paused_Pausable[this] := false;
[L6203]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6204]   COND FALSE  !(revert)
[L7129]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7130]   COND FALSE  !(revert)
[L7133]   CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6305]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L6305]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6306]   COND FALSE  !(revert)
[L6309]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4895]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L4895]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   COND FALSE  !(revert)
[L4899]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4870]               assume msgsender_MSG != null;
[L4871]               __tmp__Balance[this] := 0;
[L4872]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4873]               __tmp__sum__balances0[this] := 0;
[L4874]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4875]               __tmp__sum__allowances1[this] := 0;
[L4876]               __tmp___totalSupply_ERC20[this] := 0;
[L4899]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4900]   COND FALSE  !(revert)
[L6309]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6310]   COND FALSE  !(revert)
[L6313]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5990]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5915]               assume msgsender_MSG != null;
[L5916]               __tmp__Balance[this] := 0;
[L5918]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4506]               havoc newRef;
[L4507]               assume __tmp__Alloc[newRef] == false;
[L4508]               __tmp__Alloc[newRef] := true;
[L4509]               assume newRef != null;
[L5918]   RET         call __var_23 := FreshRefGenerator__fail();
[L5919]   COND FALSE  !(revert)
[L5922]               __tmp___pausers_PauserRole[this] := __var_23;
[L5924]   COND FALSE  !(__tmp__DType[this] == Wafl)
[L5929]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L5934]   COND FALSE  !(__tmp__DType[this] == Pausable)
[L5939]   COND TRUE   __tmp__DType[this] == PauserRole
[L5940]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6145]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5834]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5890]               __var_22 := null;
[L5891]   COND FALSE  !(!(account_s834 != null))
[L5895]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5834]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5835]   COND FALSE  !(revert)
[L5838]   COND FALSE  !(!!__var_20)
[L5842]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6145]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6146]   COND FALSE  !(revert)
[L5940]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5941]   COND FALSE  !(revert)
[L5990]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   COND FALSE  !(revert)
[L6313]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6314]   COND FALSE  !(revert)
[L6317]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6199]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5990]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5915]               assume msgsender_MSG != null;
[L5916]               __tmp__Balance[this] := 0;
[L5918]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4506]               havoc newRef;
[L4507]               assume __tmp__Alloc[newRef] == false;
[L4508]               __tmp__Alloc[newRef] := true;
[L4509]               assume newRef != null;
[L5918]   RET         call __var_23 := FreshRefGenerator__fail();
[L5919]   COND FALSE  !(revert)
[L5922]               __tmp___pausers_PauserRole[this] := __var_23;
[L5924]   COND FALSE  !(__tmp__DType[this] == Wafl)
[L5929]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L5934]   COND FALSE  !(__tmp__DType[this] == Pausable)
[L5939]   COND TRUE   __tmp__DType[this] == PauserRole
[L5940]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6145]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5834]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5890]               __var_22 := null;
[L5891]   COND FALSE  !(!(account_s834 != null))
[L5895]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5834]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5835]   COND FALSE  !(revert)
[L5838]   COND FALSE  !(!!__var_20)
[L5842]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6145]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6146]   COND FALSE  !(revert)
[L5940]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5941]   COND FALSE  !(revert)
[L5990]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   COND FALSE  !(revert)
[L6199]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6200]   COND FALSE  !(revert)
[L6203]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6180]               assume msgsender_MSG != null;
[L6181]               __tmp__Balance[this] := 0;
[L6182]               __tmp___paused_Pausable[this] := false;
[L6184]               __tmp___paused_Pausable[this] := false;
[L6203]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6204]   COND FALSE  !(revert)
[L6317]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6318]   COND FALSE  !(revert)
[L6321]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6290]               assume msgsender_MSG != null;
[L6291]               __tmp__Balance[this] := 0;
[L6321]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6322]   COND FALSE  !(revert)
[L7133]   RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7134]   COND FALSE  !(revert)
[L7137]   CALL        call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6957]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L6957]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6958]   COND FALSE  !(revert)
[L6961]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4895]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L4895]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   COND FALSE  !(revert)
[L4899]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4870]               assume msgsender_MSG != null;
[L4871]               __tmp__Balance[this] := 0;
[L4872]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4873]               __tmp__sum__balances0[this] := 0;
[L4874]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4875]               __tmp__sum__allowances1[this] := 0;
[L4876]               __tmp___totalSupply_ERC20[this] := 0;
[L4899]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4900]   COND FALSE  !(revert)
[L6961]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6962]   COND FALSE  !(revert)
[L6965]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6942]               assume msgsender_MSG != null;
[L6943]               __tmp__Balance[this] := 0;
[L6965]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6966]   COND FALSE  !(revert)
[L7137]   RET         call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7138]   COND FALSE  !(revert)
[L7141]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6670]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6605]               assume msgsender_MSG != null;
[L6606]               __tmp__Balance[this] := 0;
[L6608]   CALL        call __var_36 := FreshRefGenerator__fail();
[L4506]               havoc newRef;
[L4507]               assume __tmp__Alloc[newRef] == false;
[L4508]               __tmp__Alloc[newRef] := true;
[L4509]               assume newRef != null;
[L6608]   RET         call __var_36 := FreshRefGenerator__fail();
[L6609]   COND FALSE  !(revert)
[L6612]               __tmp___minters_MinterRole[this] := __var_36;
[L6614]   COND FALSE  !(__tmp__DType[this] == Wafl)
[L6619]   COND FALSE  !(__tmp__DType[this] == ERC20Mintable)
[L6624]   COND TRUE   __tmp__DType[this] == MinterRole
[L6625]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6805]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L5834]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5890]               __var_22 := null;
[L5891]   COND FALSE  !(!(account_s834 != null))
[L5895]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5834]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5835]   COND FALSE  !(revert)
[L5838]   COND FALSE  !(!!__var_20)
[L5842]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6805]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L6806]   COND FALSE  !(revert)
[L6625]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6626]   COND FALSE  !(revert)
[L6670]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6671]   COND FALSE  !(revert)
[L7141]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7142]   COND FALSE  !(revert)
[L7145]   CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L6855]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6856]   COND FALSE  !(revert)
[L6859]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4895]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L4895]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   COND FALSE  !(revert)
[L4899]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4870]               assume msgsender_MSG != null;
[L4871]               __tmp__Balance[this] := 0;
[L4872]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4873]               __tmp__sum__balances0[this] := 0;
[L4874]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4875]               __tmp__sum__allowances1[this] := 0;
[L4876]               __tmp___totalSupply_ERC20[this] := 0;
[L4899]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4900]   COND FALSE  !(revert)
[L6859]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6860]   COND FALSE  !(revert)
[L6863]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6670]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6605]               assume msgsender_MSG != null;
[L6606]               __tmp__Balance[this] := 0;
[L6608]   CALL        call __var_36 := FreshRefGenerator__fail();
[L4506]               havoc newRef;
[L4507]               assume __tmp__Alloc[newRef] == false;
[L4508]               __tmp__Alloc[newRef] := true;
[L4509]               assume newRef != null;
[L6608]   RET         call __var_36 := FreshRefGenerator__fail();
[L6609]   COND FALSE  !(revert)
[L6612]               __tmp___minters_MinterRole[this] := __var_36;
[L6614]   COND FALSE  !(__tmp__DType[this] == Wafl)
[L6619]   COND FALSE  !(__tmp__DType[this] == ERC20Mintable)
[L6624]   COND TRUE   __tmp__DType[this] == MinterRole
[L6625]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6805]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L5834]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5890]               __var_22 := null;
[L5891]   COND FALSE  !(!(account_s834 != null))
[L5895]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5834]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5835]   COND FALSE  !(revert)
[L5838]   COND FALSE  !(!!__var_20)
[L5842]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6805]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L6806]   COND FALSE  !(revert)
[L6625]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6626]   COND FALSE  !(revert)
[L6670]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6671]   COND FALSE  !(revert)
[L6863]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6864]   COND FALSE  !(revert)
[L6867]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6840]               assume msgsender_MSG != null;
[L6841]               __tmp__Balance[this] := 0;
[L6867]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L7145]   RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7146]   COND FALSE  !(revert)
[L7149]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4709]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4689]               assume msgsender_MSG != null;
[L4690]               __tmp__Balance[this] := 0;
[L4691]               __tmp___owner_Ownable[this] := null;
[L4693]               __tmp___owner_Ownable[this] := msgsender_MSG;
[L4709]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4710]   COND FALSE  !(revert)
[L7149]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7150]   COND FALSE  !(revert)
[L7153]   CALL        call Wafl_Wafl_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7060]               assume msgsender_MSG != null;
[L7061]               __tmp__Balance[this] := 0;
[L7063]   COND TRUE   __tmp__DType[this] == Wafl
[L7064]   CALL        call __var_40 := decimals_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG);
[L5789]               __ret_0_ := __tmp___decimals_ERC20Detailed[this];
[L7064]   RET         call __var_40 := decimals_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG);
[L7065]   COND FALSE  !(revert)
[L7071]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7072]   COND TRUE   __tmp__DType[this] == Wafl
[L7073]   CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5449]               __var_11 := null;
[L5450]   COND FALSE  !(!(account_s587 != null))
[L5454]   CALL        call __var_12 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s587);
[L4565]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4566]   COND FALSE  !(!(c_s26 >= a_s26))
[L4570]               __ret_0_ := c_s26;
[L5454]   RET         call __var_12 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s587);
[L5455]   COND FALSE  !(revert)
[L5458]               __tmp___totalSupply_ERC20[this] := __var_12;
[L5459]   CALL        call __var_13 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s587], amount_s587);
[L4565]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4566]   COND FALSE  !(!(c_s26 >= a_s26))
[L4570]               __ret_0_ := c_s26;
[L5459]   RET         call __var_13 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s587], amount_s587);
[L5460]   COND FALSE  !(revert)
[L5463]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s587];
[L5464]               __tmp___balances_ERC20[this][account_s587] := __var_13;
[L5465]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s587];
[L7073]   RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7074]   COND FALSE  !(revert)
[L7153]   RET         call Wafl_Wafl_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7154]   COND FALSE  !(revert)
[L3161]   RET         call Wafl_Wafl__fail(this, msgsender_MSG, msgvalue_MSG);
[L3162]               assume revert || gas < 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND TRUE   choice == 18
[L11090]              gas := gas - 21000;
[L11091]  COND TRUE   gas >= 0
[L11092]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1061 != to_s1061 && ((value_s1061 > _balances_ERC20[this][from_s1061] || value_s1061 > _allowances_ERC20[this][from_s1061][msgsender_MSG]) || _balances_ERC20[this][to_s1061] + value_s1061 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC20Pausable0 := true;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2226]               havoc __exception;
[L2227]               revert := false;
[L2228]   COND FALSE  !(__exception)
[L2256]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6430]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6430]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L6434]   COND FALSE  !(DType[this] == Wafl)
[L6439]   COND TRUE   DType[this] == ERC20Pausable
[L6440]   CALL        call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L5159]   COND TRUE   DType[this] == Wafl
[L5160]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5160]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5161]   COND FALSE  !(revert)
[L5187]   CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5187]   RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L5188]   COND FALSE  !(revert)
[L5191]   COND TRUE   DType[this] == Wafl
[L5192]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5192]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5193]   COND FALSE  !(revert)
[L5219]               __ret_0_ := true;
[L6440]   RET         call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6441]   COND FALSE  !(revert)
[L6447]               __ret_0_ := __var_28;
[L2256]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2257]               assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND TRUE   choice == 27
[L11034]              gas := gas - 21000;
[L11035]  COND FALSE  !(gas >= 0)
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:48:22,557 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:48:22,557 INFO  L82        PathProgramCache]: Analyzing trace with hash 1411310534, now seen corresponding path program 1 times
[2020-11-25 08:48:22,558 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:48:22,571 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:48:22,766 INFO  L134       CoverageAnalysis]: Checked inductivity of 956 backedges. 12 proven. 12 refuted. 0 times theorem prover too weak. 932 trivial. 0 not checked.
[2020-11-25 08:48:22,766 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:48:22,766 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [9] total 9
[2020-11-25 08:48:22,767 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:48:22,767 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 08:48:22,767 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 08:48:22,767 INFO  L87              Difference]: Start difference. First operand 9118 states and 10631 transitions. cyclomatic complexity: 1523 Second operand 9 states.
[2020-11-25 08:48:24,662 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:48:24,662 INFO  L93              Difference]: Finished difference Result 9257 states and 10777 transitions.
[2020-11-25 08:48:24,662 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 08:48:24,663 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9257 states and 10777 transitions.
[2020-11-25 08:48:24,699 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:48:24,725 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9257 states to 9224 states and 10736 transitions.
[2020-11-25 08:48:24,725 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2338
[2020-11-25 08:48:24,727 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2338
[2020-11-25 08:48:24,727 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9224 states and 10736 transitions.
[2020-11-25 08:48:24,733 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:48:24,733 INFO  L728         BuchiCegarLoop]: Abstraction has 9224 states and 10736 transitions.
[2020-11-25 08:48:24,740 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9224 states and 10736 transitions.
[2020-11-25 08:48:24,801 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9224 to 9112.
[2020-11-25 08:48:24,801 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9112 states.
[2020-11-25 08:48:24,815 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9112 states to 9112 states and 10624 transitions.
[2020-11-25 08:48:24,816 INFO  L751         BuchiCegarLoop]: Abstraction has 9112 states and 10624 transitions.
[2020-11-25 08:48:24,816 INFO  L631         BuchiCegarLoop]: Abstraction has 9112 states and 10624 transitions.
[2020-11-25 08:48:24,816 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-11-25 08:48:24,816 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9112 states and 10624 transitions.
[2020-11-25 08:48:24,829 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:48:24,829 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:48:24,829 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:48:24,831 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:48:24,832 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ERC20Pausable0 := false;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND TRUE   __exception
[L3137]               __tmp__Balance := Balance;
[L3138]               __tmp__DType := DType;
[L3139]               __tmp__Alloc := Alloc;
[L3140]               __tmp__balance_ADDR := balance_ADDR;
[L3141]               __tmp__M_Ref_int := M_Ref_int;
[L3142]               __tmp__sum__balances0 := sum__balances0;
[L3143]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L3144]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3145]               __tmp__sum__allowances1 := sum__allowances1;
[L3146]               __tmp__M_Ref_bool := M_Ref_bool;
[L3147]               __tmp__sum := sum;
[L3148]               __tmp__Length := Length;
[L3149]               __tmp__now := now;
[L3150]               __tmp___owner_Ownable := _owner_Ownable;
[L3151]               __tmp___balances_ERC20 := _balances_ERC20;
[L3152]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L3153]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3154]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3155]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3156]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3157]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3158]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3159]               __tmp___paused_Pausable := _paused_Pausable;
[L3160]               __tmp___minters_MinterRole := _minters_MinterRole;
[L3161]   CALL        call Wafl_Wafl__fail(this, msgsender_MSG, msgvalue_MSG);
[L7113]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L7113]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7114]   COND FALSE  !(revert)
[L7117]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4895]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L4895]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   COND FALSE  !(revert)
[L4899]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4870]               assume msgsender_MSG != null;
[L4871]               __tmp__Balance[this] := 0;
[L4872]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4873]               __tmp__sum__balances0[this] := 0;
[L4874]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4875]               __tmp__sum__allowances1[this] := 0;
[L4876]               __tmp___totalSupply_ERC20[this] := 0;
[L4899]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4900]   COND FALSE  !(revert)
[L7117]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7118]   COND FALSE  !(revert)
[L7121]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5741]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L5741]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5742]   COND FALSE  !(revert)
[L5745]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5714]               assume msgsender_MSG != null;
[L5715]               __tmp__Balance[this] := 0;
[L5716]               __tmp___name_ERC20Detailed[this] := -1545721152;
[L5717]               __tmp___symbol_ERC20Detailed[this] := -1545721152;
[L5718]               __tmp___decimals_ERC20Detailed[this] := 0;
[L5720]               __tmp___name_ERC20Detailed[this] := name_s731;
[L5721]               __tmp___symbol_ERC20Detailed[this] := symbol_s731;
[L5722]               __tmp___decimals_ERC20Detailed[this] := decimals_s731;
[L5745]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5746]   COND FALSE  !(revert)
[L7121]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7122]   COND FALSE  !(revert)
[L7125]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5990]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5915]               assume msgsender_MSG != null;
[L5916]               __tmp__Balance[this] := 0;
[L5918]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4506]               havoc newRef;
[L4507]               assume __tmp__Alloc[newRef] == false;
[L4508]               __tmp__Alloc[newRef] := true;
[L4509]               assume newRef != null;
[L5918]   RET         call __var_23 := FreshRefGenerator__fail();
[L5919]   COND FALSE  !(revert)
[L5922]               __tmp___pausers_PauserRole[this] := __var_23;
[L5924]   COND TRUE   __tmp__DType[this] == Wafl
[L5925]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6145]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5834]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5890]               __var_22 := null;
[L5891]   COND FALSE  !(!(account_s834 != null))
[L5895]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5834]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5835]   COND FALSE  !(revert)
[L5838]   COND FALSE  !(!!__var_20)
[L5842]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6145]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6146]   COND FALSE  !(revert)
[L5925]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5926]   COND FALSE  !(revert)
[L5990]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   COND FALSE  !(revert)
[L7125]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6199]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5990]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5915]               assume msgsender_MSG != null;
[L5916]               __tmp__Balance[this] := 0;
[L5918]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4506]               havoc newRef;
[L4507]               assume __tmp__Alloc[newRef] == false;
[L4508]               __tmp__Alloc[newRef] := true;
[L4509]               assume newRef != null;
[L5918]   RET         call __var_23 := FreshRefGenerator__fail();
[L5919]   COND FALSE  !(revert)
[L5922]               __tmp___pausers_PauserRole[this] := __var_23;
[L5924]   COND TRUE   __tmp__DType[this] == Wafl
[L5925]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6145]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5834]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5890]               __var_22 := null;
[L5891]   COND FALSE  !(!(account_s834 != null))
[L5895]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5834]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5835]   COND FALSE  !(revert)
[L5838]   COND FALSE  !(!!__var_20)
[L5842]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6145]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6146]   COND FALSE  !(revert)
[L5925]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5926]   COND FALSE  !(revert)
[L5990]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   COND FALSE  !(revert)
[L6199]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6200]   COND FALSE  !(revert)
[L6203]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6180]               assume msgsender_MSG != null;
[L6181]               __tmp__Balance[this] := 0;
[L6182]               __tmp___paused_Pausable[this] := false;
[L6184]               __tmp___paused_Pausable[this] := false;
[L6203]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6204]   COND FALSE  !(revert)
[L7129]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7130]   COND FALSE  !(revert)
[L7133]   CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6305]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L6305]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6306]   COND FALSE  !(revert)
[L6309]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4895]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L4895]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   COND FALSE  !(revert)
[L4899]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4870]               assume msgsender_MSG != null;
[L4871]               __tmp__Balance[this] := 0;
[L4872]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4873]               __tmp__sum__balances0[this] := 0;
[L4874]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4875]               __tmp__sum__allowances1[this] := 0;
[L4876]               __tmp___totalSupply_ERC20[this] := 0;
[L4899]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4900]   COND FALSE  !(revert)
[L6309]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6310]   COND FALSE  !(revert)
[L6313]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5990]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5915]               assume msgsender_MSG != null;
[L5916]               __tmp__Balance[this] := 0;
[L5918]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4506]               havoc newRef;
[L4507]               assume __tmp__Alloc[newRef] == false;
[L4508]               __tmp__Alloc[newRef] := true;
[L4509]               assume newRef != null;
[L5918]   RET         call __var_23 := FreshRefGenerator__fail();
[L5919]   COND FALSE  !(revert)
[L5922]               __tmp___pausers_PauserRole[this] := __var_23;
[L5924]   COND TRUE   __tmp__DType[this] == Wafl
[L5925]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6145]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5834]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5890]               __var_22 := null;
[L5891]   COND FALSE  !(!(account_s834 != null))
[L5895]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5834]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5835]   COND FALSE  !(revert)
[L5838]   COND FALSE  !(!!__var_20)
[L5842]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6145]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6146]   COND FALSE  !(revert)
[L5925]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5926]   COND FALSE  !(revert)
[L5990]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   COND FALSE  !(revert)
[L6313]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6314]   COND FALSE  !(revert)
[L6317]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6199]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5990]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5915]               assume msgsender_MSG != null;
[L5916]               __tmp__Balance[this] := 0;
[L5918]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4506]               havoc newRef;
[L4507]               assume __tmp__Alloc[newRef] == false;
[L4508]               __tmp__Alloc[newRef] := true;
[L4509]               assume newRef != null;
[L5918]   RET         call __var_23 := FreshRefGenerator__fail();
[L5919]   COND FALSE  !(revert)
[L5922]               __tmp___pausers_PauserRole[this] := __var_23;
[L5924]   COND FALSE  !(__tmp__DType[this] == Wafl)
[L5929]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L5934]   COND FALSE  !(__tmp__DType[this] == Pausable)
[L5939]   COND TRUE   __tmp__DType[this] == PauserRole
[L5940]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6145]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5834]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5890]               __var_22 := null;
[L5891]   COND FALSE  !(!(account_s834 != null))
[L5895]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5834]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5835]   COND FALSE  !(revert)
[L5838]   COND FALSE  !(!!__var_20)
[L5842]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6145]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6146]   COND FALSE  !(revert)
[L5940]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5941]   COND FALSE  !(revert)
[L5990]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   COND FALSE  !(revert)
[L6199]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6200]   COND FALSE  !(revert)
[L6203]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6180]               assume msgsender_MSG != null;
[L6181]               __tmp__Balance[this] := 0;
[L6182]               __tmp___paused_Pausable[this] := false;
[L6184]               __tmp___paused_Pausable[this] := false;
[L6203]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6204]   COND FALSE  !(revert)
[L6317]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6318]   COND FALSE  !(revert)
[L6321]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6290]               assume msgsender_MSG != null;
[L6291]               __tmp__Balance[this] := 0;
[L6321]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6322]   COND FALSE  !(revert)
[L7133]   RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7134]   COND FALSE  !(revert)
[L7137]   CALL        call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6957]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L6957]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6958]   COND FALSE  !(revert)
[L6961]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4895]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L4895]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   COND FALSE  !(revert)
[L4899]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4870]               assume msgsender_MSG != null;
[L4871]               __tmp__Balance[this] := 0;
[L4872]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4873]               __tmp__sum__balances0[this] := 0;
[L4874]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4875]               __tmp__sum__allowances1[this] := 0;
[L4876]               __tmp___totalSupply_ERC20[this] := 0;
[L4899]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4900]   COND FALSE  !(revert)
[L6961]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6962]   COND FALSE  !(revert)
[L6965]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6942]               assume msgsender_MSG != null;
[L6943]               __tmp__Balance[this] := 0;
[L6965]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6966]   COND FALSE  !(revert)
[L7137]   RET         call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7138]   COND FALSE  !(revert)
[L7141]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6670]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6605]               assume msgsender_MSG != null;
[L6606]               __tmp__Balance[this] := 0;
[L6608]   CALL        call __var_36 := FreshRefGenerator__fail();
[L4506]               havoc newRef;
[L4507]               assume __tmp__Alloc[newRef] == false;
[L4508]               __tmp__Alloc[newRef] := true;
[L4509]               assume newRef != null;
[L6608]   RET         call __var_36 := FreshRefGenerator__fail();
[L6609]   COND FALSE  !(revert)
[L6612]               __tmp___minters_MinterRole[this] := __var_36;
[L6614]   COND FALSE  !(__tmp__DType[this] == Wafl)
[L6619]   COND FALSE  !(__tmp__DType[this] == ERC20Mintable)
[L6624]   COND TRUE   __tmp__DType[this] == MinterRole
[L6625]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6805]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L5834]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5890]               __var_22 := null;
[L5891]   COND FALSE  !(!(account_s834 != null))
[L5895]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5834]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5835]   COND FALSE  !(revert)
[L5838]   COND FALSE  !(!!__var_20)
[L5842]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6805]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L6806]   COND FALSE  !(revert)
[L6625]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6626]   COND FALSE  !(revert)
[L6670]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6671]   COND FALSE  !(revert)
[L7141]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7142]   COND FALSE  !(revert)
[L7145]   CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L6855]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6856]   COND FALSE  !(revert)
[L6859]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4895]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L4895]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   COND FALSE  !(revert)
[L4899]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4870]               assume msgsender_MSG != null;
[L4871]               __tmp__Balance[this] := 0;
[L4872]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4873]               __tmp__sum__balances0[this] := 0;
[L4874]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4875]               __tmp__sum__allowances1[this] := 0;
[L4876]               __tmp___totalSupply_ERC20[this] := 0;
[L4899]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4900]   COND FALSE  !(revert)
[L6859]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6860]   COND FALSE  !(revert)
[L6863]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6670]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6605]               assume msgsender_MSG != null;
[L6606]               __tmp__Balance[this] := 0;
[L6608]   CALL        call __var_36 := FreshRefGenerator__fail();
[L4506]               havoc newRef;
[L4507]               assume __tmp__Alloc[newRef] == false;
[L4508]               __tmp__Alloc[newRef] := true;
[L4509]               assume newRef != null;
[L6608]   RET         call __var_36 := FreshRefGenerator__fail();
[L6609]   COND FALSE  !(revert)
[L6612]               __tmp___minters_MinterRole[this] := __var_36;
[L6614]   COND FALSE  !(__tmp__DType[this] == Wafl)
[L6619]   COND FALSE  !(__tmp__DType[this] == ERC20Mintable)
[L6624]   COND TRUE   __tmp__DType[this] == MinterRole
[L6625]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6805]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L5834]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5890]               __var_22 := null;
[L5891]   COND FALSE  !(!(account_s834 != null))
[L5895]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5834]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5835]   COND FALSE  !(revert)
[L5838]   COND FALSE  !(!!__var_20)
[L5842]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6805]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L6806]   COND FALSE  !(revert)
[L6625]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6626]   COND FALSE  !(revert)
[L6670]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6671]   COND FALSE  !(revert)
[L6863]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6864]   COND FALSE  !(revert)
[L6867]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6840]               assume msgsender_MSG != null;
[L6841]               __tmp__Balance[this] := 0;
[L6867]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L7145]   RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7146]   COND FALSE  !(revert)
[L7149]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4709]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4689]               assume msgsender_MSG != null;
[L4690]               __tmp__Balance[this] := 0;
[L4691]               __tmp___owner_Ownable[this] := null;
[L4693]               __tmp___owner_Ownable[this] := msgsender_MSG;
[L4709]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4710]   COND FALSE  !(revert)
[L7149]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7150]   COND FALSE  !(revert)
[L7153]   CALL        call Wafl_Wafl_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7060]               assume msgsender_MSG != null;
[L7061]               __tmp__Balance[this] := 0;
[L7063]   COND TRUE   __tmp__DType[this] == Wafl
[L7064]   CALL        call __var_40 := decimals_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG);
[L5789]               __ret_0_ := __tmp___decimals_ERC20Detailed[this];
[L7064]   RET         call __var_40 := decimals_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG);
[L7065]   COND FALSE  !(revert)
[L7071]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7072]   COND TRUE   __tmp__DType[this] == Wafl
[L7073]   CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5449]               __var_11 := null;
[L5450]   COND FALSE  !(!(account_s587 != null))
[L5454]   CALL        call __var_12 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s587);
[L4565]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4566]   COND FALSE  !(!(c_s26 >= a_s26))
[L4570]               __ret_0_ := c_s26;
[L5454]   RET         call __var_12 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s587);
[L5455]   COND FALSE  !(revert)
[L5458]               __tmp___totalSupply_ERC20[this] := __var_12;
[L5459]   CALL        call __var_13 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s587], amount_s587);
[L4565]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4566]   COND FALSE  !(!(c_s26 >= a_s26))
[L4570]               __ret_0_ := c_s26;
[L5459]   RET         call __var_13 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s587], amount_s587);
[L5460]   COND FALSE  !(revert)
[L5463]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s587];
[L5464]               __tmp___balances_ERC20[this][account_s587] := __var_13;
[L5465]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s587];
[L7073]   RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7074]   COND FALSE  !(revert)
[L7153]   RET         call Wafl_Wafl_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7154]   COND FALSE  !(revert)
[L3161]   RET         call Wafl_Wafl__fail(this, msgsender_MSG, msgvalue_MSG);
[L3162]               assume revert || gas < 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND TRUE   choice == 18
[L11090]              gas := gas - 21000;
[L11091]  COND TRUE   gas >= 0
[L11092]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1061 != to_s1061 && ((value_s1061 > _balances_ERC20[this][from_s1061] || value_s1061 > _allowances_ERC20[this][from_s1061][msgsender_MSG]) || _balances_ERC20[this][to_s1061] + value_s1061 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC20Pausable0 := true;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2226]               havoc __exception;
[L2227]               revert := false;
[L2228]   COND FALSE  !(__exception)
[L2256]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6430]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6430]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L6434]   COND TRUE   DType[this] == Wafl
[L6435]   CALL        call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L5159]   COND TRUE   DType[this] == Wafl
[L5160]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5160]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5161]   COND FALSE  !(revert)
[L5187]   CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5187]   RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L5188]   COND FALSE  !(revert)
[L5191]   COND TRUE   DType[this] == Wafl
[L5192]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5192]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5193]   COND FALSE  !(revert)
[L5219]               __ret_0_ := true;
[L6435]   RET         call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6436]   COND FALSE  !(revert)
[L6447]               __ret_0_ := __var_28;
[L2256]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2257]               assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND TRUE   choice == 18
[L11090]              gas := gas - 21000;
[L11091]  COND TRUE   gas >= 0
[L11092]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1061 != to_s1061 && ((value_s1061 > _balances_ERC20[this][from_s1061] || value_s1061 > _allowances_ERC20[this][from_s1061][msgsender_MSG]) || _balances_ERC20[this][to_s1061] + value_s1061 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC20Pausable0 := true;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2226]               havoc __exception;
[L2227]               revert := false;
[L2228]   COND FALSE  !(__exception)
[L2256]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6430]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6430]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L6434]   COND TRUE   DType[this] == Wafl
[L6435]   CALL        call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L5159]   COND TRUE   DType[this] == Wafl
[L5160]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5160]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5161]   COND FALSE  !(revert)
[L5187]   CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5187]   RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L5188]   COND FALSE  !(revert)
[L5191]   COND TRUE   DType[this] == Wafl
[L5192]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5192]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5193]   COND FALSE  !(revert)
[L5219]               __ret_0_ := true;
[L6435]   RET         call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6436]   COND FALSE  !(revert)
[L6447]               __ret_0_ := __var_28;
[L2256]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2257]               assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:48:24,837 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:48:24,837 INFO  L82        PathProgramCache]: Analyzing trace with hash -776650285, now seen corresponding path program 1 times
[2020-11-25 08:48:24,838 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:48:24,851 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:48:25,081 INFO  L134       CoverageAnalysis]: Checked inductivity of 957 backedges. 25 proven. 0 refuted. 0 times theorem prover too weak. 932 trivial. 0 not checked.
[2020-11-25 08:48:25,081 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:48:25,081 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-11-25 08:48:25,081 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:48:25,081 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 08:48:25,082 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=73, Unknown=0, NotChecked=0, Total=90
[2020-11-25 08:48:25,082 INFO  L87              Difference]: Start difference. First operand 9112 states and 10624 transitions. cyclomatic complexity: 1522 Second operand 10 states.
[2020-11-25 08:48:27,133 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:48:27,133 INFO  L93              Difference]: Finished difference Result 9248 states and 10765 transitions.
[2020-11-25 08:48:27,133 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-11-25 08:48:27,133 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9248 states and 10765 transitions.
[2020-11-25 08:48:27,153 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:48:27,170 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9248 states to 9190 states and 10695 transitions.
[2020-11-25 08:48:27,170 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2338
[2020-11-25 08:48:27,171 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2338
[2020-11-25 08:48:27,171 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9190 states and 10695 transitions.
[2020-11-25 08:48:27,176 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:48:27,177 INFO  L728         BuchiCegarLoop]: Abstraction has 9190 states and 10695 transitions.
[2020-11-25 08:48:27,182 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9190 states and 10695 transitions.
[2020-11-25 08:48:27,223 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9190 to 9084.
[2020-11-25 08:48:27,223 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9084 states.
[2020-11-25 08:48:27,232 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9084 states to 9084 states and 10589 transitions.
[2020-11-25 08:48:27,233 INFO  L751         BuchiCegarLoop]: Abstraction has 9084 states and 10589 transitions.
[2020-11-25 08:48:27,233 INFO  L631         BuchiCegarLoop]: Abstraction has 9084 states and 10589 transitions.
[2020-11-25 08:48:27,233 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-11-25 08:48:27,233 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9084 states and 10589 transitions.
[2020-11-25 08:48:27,241 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:48:27,241 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:48:27,241 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:48:27,243 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:48:27,243 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ERC20Pausable0 := false;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND TRUE   __exception
[L3137]               __tmp__Balance := Balance;
[L3138]               __tmp__DType := DType;
[L3139]               __tmp__Alloc := Alloc;
[L3140]               __tmp__balance_ADDR := balance_ADDR;
[L3141]               __tmp__M_Ref_int := M_Ref_int;
[L3142]               __tmp__sum__balances0 := sum__balances0;
[L3143]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L3144]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3145]               __tmp__sum__allowances1 := sum__allowances1;
[L3146]               __tmp__M_Ref_bool := M_Ref_bool;
[L3147]               __tmp__sum := sum;
[L3148]               __tmp__Length := Length;
[L3149]               __tmp__now := now;
[L3150]               __tmp___owner_Ownable := _owner_Ownable;
[L3151]               __tmp___balances_ERC20 := _balances_ERC20;
[L3152]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L3153]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3154]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3155]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3156]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3157]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3158]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3159]               __tmp___paused_Pausable := _paused_Pausable;
[L3160]               __tmp___minters_MinterRole := _minters_MinterRole;
[L3161]   CALL        call Wafl_Wafl__fail(this, msgsender_MSG, msgvalue_MSG);
[L7113]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L7113]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7114]   COND FALSE  !(revert)
[L7117]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4895]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L4895]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   COND FALSE  !(revert)
[L4899]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4870]               assume msgsender_MSG != null;
[L4871]               __tmp__Balance[this] := 0;
[L4872]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4873]               __tmp__sum__balances0[this] := 0;
[L4874]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4875]               __tmp__sum__allowances1[this] := 0;
[L4876]               __tmp___totalSupply_ERC20[this] := 0;
[L4899]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4900]   COND FALSE  !(revert)
[L7117]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7118]   COND FALSE  !(revert)
[L7121]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5741]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L5741]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5742]   COND FALSE  !(revert)
[L5745]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5714]               assume msgsender_MSG != null;
[L5715]               __tmp__Balance[this] := 0;
[L5716]               __tmp___name_ERC20Detailed[this] := -1545721152;
[L5717]               __tmp___symbol_ERC20Detailed[this] := -1545721152;
[L5718]               __tmp___decimals_ERC20Detailed[this] := 0;
[L5720]               __tmp___name_ERC20Detailed[this] := name_s731;
[L5721]               __tmp___symbol_ERC20Detailed[this] := symbol_s731;
[L5722]               __tmp___decimals_ERC20Detailed[this] := decimals_s731;
[L5745]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5746]   COND FALSE  !(revert)
[L7121]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7122]   COND FALSE  !(revert)
[L7125]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5990]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5915]               assume msgsender_MSG != null;
[L5916]               __tmp__Balance[this] := 0;
[L5918]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4506]               havoc newRef;
[L4507]               assume __tmp__Alloc[newRef] == false;
[L4508]               __tmp__Alloc[newRef] := true;
[L4509]               assume newRef != null;
[L5918]   RET         call __var_23 := FreshRefGenerator__fail();
[L5919]   COND FALSE  !(revert)
[L5922]               __tmp___pausers_PauserRole[this] := __var_23;
[L5924]   COND TRUE   __tmp__DType[this] == Wafl
[L5925]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6145]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5834]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5890]               __var_22 := null;
[L5891]   COND FALSE  !(!(account_s834 != null))
[L5895]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5834]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5835]   COND FALSE  !(revert)
[L5838]   COND FALSE  !(!!__var_20)
[L5842]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6145]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6146]   COND FALSE  !(revert)
[L5925]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5926]   COND FALSE  !(revert)
[L5990]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   COND FALSE  !(revert)
[L7125]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6199]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5990]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5915]               assume msgsender_MSG != null;
[L5916]               __tmp__Balance[this] := 0;
[L5918]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4506]               havoc newRef;
[L4507]               assume __tmp__Alloc[newRef] == false;
[L4508]               __tmp__Alloc[newRef] := true;
[L4509]               assume newRef != null;
[L5918]   RET         call __var_23 := FreshRefGenerator__fail();
[L5919]   COND FALSE  !(revert)
[L5922]               __tmp___pausers_PauserRole[this] := __var_23;
[L5924]   COND TRUE   __tmp__DType[this] == Wafl
[L5925]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6145]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5834]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5890]               __var_22 := null;
[L5891]   COND FALSE  !(!(account_s834 != null))
[L5895]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5834]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5835]   COND FALSE  !(revert)
[L5838]   COND FALSE  !(!!__var_20)
[L5842]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6145]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6146]   COND FALSE  !(revert)
[L5925]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5926]   COND FALSE  !(revert)
[L5990]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   COND FALSE  !(revert)
[L6199]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6200]   COND FALSE  !(revert)
[L6203]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6180]               assume msgsender_MSG != null;
[L6181]               __tmp__Balance[this] := 0;
[L6182]               __tmp___paused_Pausable[this] := false;
[L6184]               __tmp___paused_Pausable[this] := false;
[L6203]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6204]   COND FALSE  !(revert)
[L7129]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7130]   COND FALSE  !(revert)
[L7133]   CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6305]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L6305]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6306]   COND FALSE  !(revert)
[L6309]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4895]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L4895]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   COND FALSE  !(revert)
[L4899]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4870]               assume msgsender_MSG != null;
[L4871]               __tmp__Balance[this] := 0;
[L4872]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4873]               __tmp__sum__balances0[this] := 0;
[L4874]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4875]               __tmp__sum__allowances1[this] := 0;
[L4876]               __tmp___totalSupply_ERC20[this] := 0;
[L4899]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4900]   COND FALSE  !(revert)
[L6309]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6310]   COND FALSE  !(revert)
[L6313]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5990]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5915]               assume msgsender_MSG != null;
[L5916]               __tmp__Balance[this] := 0;
[L5918]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4506]               havoc newRef;
[L4507]               assume __tmp__Alloc[newRef] == false;
[L4508]               __tmp__Alloc[newRef] := true;
[L4509]               assume newRef != null;
[L5918]   RET         call __var_23 := FreshRefGenerator__fail();
[L5919]   COND FALSE  !(revert)
[L5922]               __tmp___pausers_PauserRole[this] := __var_23;
[L5924]   COND TRUE   __tmp__DType[this] == Wafl
[L5925]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6145]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5834]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5890]               __var_22 := null;
[L5891]   COND FALSE  !(!(account_s834 != null))
[L5895]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5834]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5835]   COND FALSE  !(revert)
[L5838]   COND FALSE  !(!!__var_20)
[L5842]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6145]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6146]   COND FALSE  !(revert)
[L5925]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5926]   COND FALSE  !(revert)
[L5990]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   COND FALSE  !(revert)
[L6313]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6314]   COND FALSE  !(revert)
[L6317]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6199]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5990]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5915]               assume msgsender_MSG != null;
[L5916]               __tmp__Balance[this] := 0;
[L5918]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4506]               havoc newRef;
[L4507]               assume __tmp__Alloc[newRef] == false;
[L4508]               __tmp__Alloc[newRef] := true;
[L4509]               assume newRef != null;
[L5918]   RET         call __var_23 := FreshRefGenerator__fail();
[L5919]   COND FALSE  !(revert)
[L5922]               __tmp___pausers_PauserRole[this] := __var_23;
[L5924]   COND TRUE   __tmp__DType[this] == Wafl
[L5925]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6145]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5834]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5890]               __var_22 := null;
[L5891]   COND FALSE  !(!(account_s834 != null))
[L5895]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5834]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5835]   COND FALSE  !(revert)
[L5838]   COND FALSE  !(!!__var_20)
[L5842]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6145]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6146]   COND FALSE  !(revert)
[L5925]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5926]   COND FALSE  !(revert)
[L5990]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   COND FALSE  !(revert)
[L6199]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6200]   COND FALSE  !(revert)
[L6203]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6180]               assume msgsender_MSG != null;
[L6181]               __tmp__Balance[this] := 0;
[L6182]               __tmp___paused_Pausable[this] := false;
[L6184]               __tmp___paused_Pausable[this] := false;
[L6203]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6204]   COND FALSE  !(revert)
[L6317]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6318]   COND FALSE  !(revert)
[L6321]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6290]               assume msgsender_MSG != null;
[L6291]               __tmp__Balance[this] := 0;
[L6321]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6322]   COND FALSE  !(revert)
[L7133]   RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7134]   COND FALSE  !(revert)
[L7137]   CALL        call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6957]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L6957]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6958]   COND FALSE  !(revert)
[L6961]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4895]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L4895]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   COND FALSE  !(revert)
[L4899]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4870]               assume msgsender_MSG != null;
[L4871]               __tmp__Balance[this] := 0;
[L4872]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4873]               __tmp__sum__balances0[this] := 0;
[L4874]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4875]               __tmp__sum__allowances1[this] := 0;
[L4876]               __tmp___totalSupply_ERC20[this] := 0;
[L4899]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4900]   COND FALSE  !(revert)
[L6961]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6962]   COND FALSE  !(revert)
[L6965]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6942]               assume msgsender_MSG != null;
[L6943]               __tmp__Balance[this] := 0;
[L6965]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6966]   COND FALSE  !(revert)
[L7137]   RET         call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7138]   COND FALSE  !(revert)
[L7141]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6670]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6605]               assume msgsender_MSG != null;
[L6606]               __tmp__Balance[this] := 0;
[L6608]   CALL        call __var_36 := FreshRefGenerator__fail();
[L4506]               havoc newRef;
[L4507]               assume __tmp__Alloc[newRef] == false;
[L4508]               __tmp__Alloc[newRef] := true;
[L4509]               assume newRef != null;
[L6608]   RET         call __var_36 := FreshRefGenerator__fail();
[L6609]   COND FALSE  !(revert)
[L6612]               __tmp___minters_MinterRole[this] := __var_36;
[L6614]   COND FALSE  !(__tmp__DType[this] == Wafl)
[L6619]   COND TRUE   __tmp__DType[this] == ERC20Mintable
[L6620]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6805]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L5834]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5890]               __var_22 := null;
[L5891]   COND FALSE  !(!(account_s834 != null))
[L5895]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5834]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5835]   COND FALSE  !(revert)
[L5838]   COND FALSE  !(!!__var_20)
[L5842]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6805]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L6806]   COND FALSE  !(revert)
[L6620]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6621]   COND FALSE  !(revert)
[L6670]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6671]   COND FALSE  !(revert)
[L7141]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7142]   COND FALSE  !(revert)
[L7145]   CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L6855]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6856]   COND FALSE  !(revert)
[L6859]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4895]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4853]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4838]               assume msgsender_MSG != null;
[L4839]               __tmp__Balance[this] := 0;
[L4853]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   COND FALSE  !(revert)
[L4895]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   COND FALSE  !(revert)
[L4899]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4870]               assume msgsender_MSG != null;
[L4871]               __tmp__Balance[this] := 0;
[L4872]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4873]               __tmp__sum__balances0[this] := 0;
[L4874]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4875]               __tmp__sum__allowances1[this] := 0;
[L4876]               __tmp___totalSupply_ERC20[this] := 0;
[L4899]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4900]   COND FALSE  !(revert)
[L6859]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6860]   COND FALSE  !(revert)
[L6863]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6670]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6605]               assume msgsender_MSG != null;
[L6606]               __tmp__Balance[this] := 0;
[L6608]   CALL        call __var_36 := FreshRefGenerator__fail();
[L4506]               havoc newRef;
[L4507]               assume __tmp__Alloc[newRef] == false;
[L4508]               __tmp__Alloc[newRef] := true;
[L4509]               assume newRef != null;
[L6608]   RET         call __var_36 := FreshRefGenerator__fail();
[L6609]   COND FALSE  !(revert)
[L6612]               __tmp___minters_MinterRole[this] := __var_36;
[L6614]   COND FALSE  !(__tmp__DType[this] == Wafl)
[L6619]   COND TRUE   __tmp__DType[this] == ERC20Mintable
[L6620]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6805]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L5834]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5890]               __var_22 := null;
[L5891]   COND FALSE  !(!(account_s834 != null))
[L5895]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5834]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5835]   COND FALSE  !(revert)
[L5838]   COND FALSE  !(!!__var_20)
[L5842]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6805]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L6806]   COND FALSE  !(revert)
[L6620]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6621]   COND FALSE  !(revert)
[L6670]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6671]   COND FALSE  !(revert)
[L6863]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6864]   COND FALSE  !(revert)
[L6867]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6840]               assume msgsender_MSG != null;
[L6841]               __tmp__Balance[this] := 0;
[L6867]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L7145]   RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7146]   COND FALSE  !(revert)
[L7149]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4709]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4689]               assume msgsender_MSG != null;
[L4690]               __tmp__Balance[this] := 0;
[L4691]               __tmp___owner_Ownable[this] := null;
[L4693]               __tmp___owner_Ownable[this] := msgsender_MSG;
[L4709]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4710]   COND FALSE  !(revert)
[L7149]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7150]   COND FALSE  !(revert)
[L7153]   CALL        call Wafl_Wafl_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7060]               assume msgsender_MSG != null;
[L7061]               __tmp__Balance[this] := 0;
[L7063]   COND TRUE   __tmp__DType[this] == Wafl
[L7064]   CALL        call __var_40 := decimals_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG);
[L5789]               __ret_0_ := __tmp___decimals_ERC20Detailed[this];
[L7064]   RET         call __var_40 := decimals_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG);
[L7065]   COND FALSE  !(revert)
[L7071]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7072]   COND TRUE   __tmp__DType[this] == Wafl
[L7073]   CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5449]               __var_11 := null;
[L5450]   COND FALSE  !(!(account_s587 != null))
[L5454]   CALL        call __var_12 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s587);
[L4565]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4566]   COND FALSE  !(!(c_s26 >= a_s26))
[L4570]               __ret_0_ := c_s26;
[L5454]   RET         call __var_12 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s587);
[L5455]   COND FALSE  !(revert)
[L5458]               __tmp___totalSupply_ERC20[this] := __var_12;
[L5459]   CALL        call __var_13 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s587], amount_s587);
[L4565]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4566]   COND FALSE  !(!(c_s26 >= a_s26))
[L4570]               __ret_0_ := c_s26;
[L5459]   RET         call __var_13 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s587], amount_s587);
[L5460]   COND FALSE  !(revert)
[L5463]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s587];
[L5464]               __tmp___balances_ERC20[this][account_s587] := __var_13;
[L5465]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s587];
[L7073]   RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7074]   COND FALSE  !(revert)
[L7153]   RET         call Wafl_Wafl_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7154]   COND FALSE  !(revert)
[L3161]   RET         call Wafl_Wafl__fail(this, msgsender_MSG, msgvalue_MSG);
[L3162]               assume revert || gas < 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND TRUE   choice == 18
[L11090]              gas := gas - 21000;
[L11091]  COND TRUE   gas >= 0
[L11092]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1061 != to_s1061 && ((value_s1061 > _balances_ERC20[this][from_s1061] || value_s1061 > _allowances_ERC20[this][from_s1061][msgsender_MSG]) || _balances_ERC20[this][to_s1061] + value_s1061 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC20Pausable0 := true;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2226]               havoc __exception;
[L2227]               revert := false;
[L2228]   COND FALSE  !(__exception)
[L2256]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6430]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6430]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L6434]   COND TRUE   DType[this] == Wafl
[L6435]   CALL        call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L5159]   COND TRUE   DType[this] == Wafl
[L5160]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5160]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5161]   COND FALSE  !(revert)
[L5187]   CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5187]   RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L5188]   COND FALSE  !(revert)
[L5191]   COND TRUE   DType[this] == Wafl
[L5192]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5192]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5193]   COND FALSE  !(revert)
[L5219]               __ret_0_ := true;
[L6435]   RET         call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6436]   COND FALSE  !(revert)
[L6447]               __ret_0_ := __var_28;
[L2256]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2257]               assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND TRUE   choice == 27
[L11034]              gas := gas - 21000;
[L11035]  COND FALSE  !(gas >= 0)
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:48:27,247 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:48:27,248 INFO  L82        PathProgramCache]: Analyzing trace with hash 532829810, now seen corresponding path program 1 times
[2020-11-25 08:48:27,248 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:48:27,266 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:48:27,484 INFO  L134       CoverageAnalysis]: Checked inductivity of 968 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 968 trivial. 0 not checked.
[2020-11-25 08:48:27,484 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:48:27,485 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 08:48:27,485 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:48:27,485 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 08:48:27,485 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 08:48:27,485 INFO  L87              Difference]: Start difference. First operand 9084 states and 10589 transitions. cyclomatic complexity: 1515 Second operand 4 states.
[2020-11-25 08:48:28,391 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:48:28,391 INFO  L93              Difference]: Finished difference Result 10264 states and 12167 transitions.
[2020-11-25 08:48:28,391 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 08:48:28,391 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10264 states and 12167 transitions.
[2020-11-25 08:48:28,413 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 10
[2020-11-25 08:48:28,435 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10264 states to 9972 states and 11854 transitions.
[2020-11-25 08:48:28,435 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2585
[2020-11-25 08:48:28,436 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2585
[2020-11-25 08:48:28,436 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9972 states and 11854 transitions.
[2020-11-25 08:48:28,442 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:48:28,442 INFO  L728         BuchiCegarLoop]: Abstraction has 9972 states and 11854 transitions.
[2020-11-25 08:48:28,447 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9972 states and 11854 transitions.
[2020-11-25 08:48:28,499 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9972 to 9459.
[2020-11-25 08:48:28,500 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9459 states.
[2020-11-25 08:48:28,511 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9459 states to 9459 states and 11126 transitions.
[2020-11-25 08:48:28,511 INFO  L751         BuchiCegarLoop]: Abstraction has 9459 states and 11126 transitions.
[2020-11-25 08:48:28,511 INFO  L631         BuchiCegarLoop]: Abstraction has 9459 states and 11126 transitions.
[2020-11-25 08:48:28,511 INFO  L445         BuchiCegarLoop]: ======== Iteration 20============
[2020-11-25 08:48:28,511 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9459 states and 11126 transitions.
[2020-11-25 08:48:28,521 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 08:48:28,521 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:48:28,521 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:48:28,523 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:48:28,523 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ERC20Pausable0 := false;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND FALSE  !(DType[this] == Wafl)
[L6652]   COND TRUE   DType[this] == ERC20Mintable
[L6653]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6653]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6654]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND FALSE  !(DType[this] == Wafl)
[L6652]   COND FALSE  !(DType[this] == ERC20Mintable)
[L6657]   COND TRUE   DType[this] == MinterRole
[L6658]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6658]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6659]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND FALSE  !(choice == 18)
[L11096]  COND FALSE  !(choice == 17)
[L11103]  COND FALSE  !(choice == 16)
[L11110]  COND FALSE  !(choice == 15)
[L11116]  COND FALSE  !(choice == 14)
[L11122]  COND FALSE  !(choice == 13)
[L11128]  COND FALSE  !(choice == 12)
[L11134]  COND FALSE  !(choice == 11)
[L11140]  COND FALSE  !(choice == 10)
[L11146]  COND FALSE  !(choice == 9)
[L11152]  COND FALSE  !(choice == 8)
[L11158]  COND FALSE  !(choice == 7)
[L11164]  COND FALSE  !(choice == 6)
[L11170]  COND FALSE  !(choice == 5)
[L11176]  COND FALSE  !(choice == 4)
[L11182]  COND FALSE  !(choice == 3)
[L11189]  COND FALSE  !(choice == 2)
[L11196]  COND TRUE   choice == 1
[L11197]              gas := gas - 21000;
[L11198]  COND TRUE   gas >= 0
[L11199]              assume amount_s1268 >= 0 && amount_s1268 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11200]              assume msgvalue_MSG == 0;
[L11201]  CALL        call burnFrom~address~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L3049]               havoc __exception;
[L3050]               revert := false;
[L3051]   COND FALSE  !(__exception)
[L3079]   CALL        call burnFrom~address~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L7040]   COND FALSE  !(DType[this] == Wafl)
[L7045]   COND TRUE   DType[this] == ERC20Burnable
[L7046]   CALL        call _burnFrom~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L5649]   COND FALSE  !(DType[this] == Wafl)
[L5654]   COND TRUE   DType[this] == ERC20Burnable
[L5655]   CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s700, amount_s700);
[L5522]               __var_14 := null;
[L5523]   COND FALSE  !(!(account_s630 != null))
[L5527]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s630);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5527]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s630);
[L5528]   COND FALSE  !(revert)
[L5531]               _totalSupply_ERC20[this] := __var_15;
[L5532]   CALL        call __var_16 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s630], value_s630);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5532]   RET         call __var_16 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s630], value_s630);
[L5533]   COND FALSE  !(revert)
[L5536]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s630];
[L5537]               _balances_ERC20[this][account_s630] := __var_16;
[L5538]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s630];
[L5539]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5655]   RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s700, amount_s700);
[L5656]   COND FALSE  !(revert)
[L5677]   CALL        call __var_19 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][account_s700][msgsender_MSG], amount_s700);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5677]   RET         call __var_19 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][account_s700][msgsender_MSG], amount_s700);
[L5678]   COND FALSE  !(revert)
[L5681]   COND FALSE  !(DType[this] == Wafl)
[L5686]   COND FALSE  !(DType[this] == ERC20Burnable)
[L5691]   COND FALSE  !(DType[this] == ERC20Mintable)
[L5696]   COND TRUE   DType[this] == ERC20Pausable
[L5697]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s700, msgsender_MSG, __var_19);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5697]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s700, msgsender_MSG, __var_19);
[L5698]   COND FALSE  !(revert)
[L7046]   RET         call _burnFrom~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L7047]   COND FALSE  !(revert)
[L3079]   RET         call burnFrom~address~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L3080]               assume !revert && gas >= 0;
[L11201]  RET         call burnFrom~address~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L11221]  RET         call CorralChoice_Wafl(this);
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND TRUE   choice == 18
[L11090]              gas := gas - 21000;
[L11091]  COND TRUE   gas >= 0
[L11092]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1061 != to_s1061 && ((value_s1061 > _balances_ERC20[this][from_s1061] || value_s1061 > _allowances_ERC20[this][from_s1061][msgsender_MSG]) || _balances_ERC20[this][to_s1061] + value_s1061 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC20Pausable0 := true;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2226]               havoc __exception;
[L2227]               revert := false;
[L2228]   COND FALSE  !(__exception)
[L2256]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6430]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6430]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L6434]   COND TRUE   DType[this] == Wafl
[L6435]   CALL        call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L5159]   COND TRUE   DType[this] == Wafl
[L5160]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5160]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5161]   COND FALSE  !(revert)
[L5187]   CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5187]   RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L5188]   COND FALSE  !(revert)
[L5191]   COND TRUE   DType[this] == Wafl
[L5192]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5192]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5193]   COND FALSE  !(revert)
[L5219]               __ret_0_ := true;
[L6435]   RET         call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6436]   COND FALSE  !(revert)
[L6447]               __ret_0_ := __var_28;
[L2256]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2257]               assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND TRUE   choice == 18
[L11090]              gas := gas - 21000;
[L11091]  COND TRUE   gas >= 0
[L11092]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1061 != to_s1061 && ((value_s1061 > _balances_ERC20[this][from_s1061] || value_s1061 > _allowances_ERC20[this][from_s1061][msgsender_MSG]) || _balances_ERC20[this][to_s1061] + value_s1061 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC20Pausable0 := true;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2226]               havoc __exception;
[L2227]               revert := false;
[L2228]   COND FALSE  !(__exception)
[L2256]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6430]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6430]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L6434]   COND TRUE   DType[this] == Wafl
[L6435]   CALL        call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L5159]   COND TRUE   DType[this] == Wafl
[L5160]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5160]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5161]   COND FALSE  !(revert)
[L5187]   CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5187]   RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L5188]   COND FALSE  !(revert)
[L5191]   COND TRUE   DType[this] == Wafl
[L5192]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5192]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5193]   COND FALSE  !(revert)
[L5219]               __ret_0_ := true;
[L6435]   RET         call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6436]   COND FALSE  !(revert)
[L6447]               __ret_0_ := __var_28;
[L2256]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2257]               assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:48:28,528 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:48:28,528 INFO  L82        PathProgramCache]: Analyzing trace with hash -2051176282, now seen corresponding path program 1 times
[2020-11-25 08:48:28,529 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:48:28,550 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:48:28,804 INFO  L134       CoverageAnalysis]: Checked inductivity of 1102 backedges. 0 proven. 6 refuted. 0 times theorem prover too weak. 1096 trivial. 0 not checked.
[2020-11-25 08:48:28,805 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:48:28,805 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 08:48:28,805 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:48:28,805 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 08:48:28,806 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 08:48:28,806 INFO  L87              Difference]: Start difference. First operand 9459 states and 11126 transitions. cyclomatic complexity: 1677 Second operand 7 states.
[2020-11-25 08:48:28,982 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:48:28,982 INFO  L93              Difference]: Finished difference Result 9482 states and 11152 transitions.
[2020-11-25 08:48:28,982 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 08:48:28,982 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9482 states and 11152 transitions.
[2020-11-25 08:48:29,000 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 08:48:29,018 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9482 states to 9465 states and 11132 transitions.
[2020-11-25 08:48:29,018 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2516
[2020-11-25 08:48:29,019 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2516
[2020-11-25 08:48:29,019 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9465 states and 11132 transitions.
[2020-11-25 08:48:29,024 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:48:29,024 INFO  L728         BuchiCegarLoop]: Abstraction has 9465 states and 11132 transitions.
[2020-11-25 08:48:29,029 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9465 states and 11132 transitions.
[2020-11-25 08:48:29,076 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9465 to 9459.
[2020-11-25 08:48:29,076 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9459 states.
[2020-11-25 08:48:29,087 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9459 states to 9459 states and 11126 transitions.
[2020-11-25 08:48:29,087 INFO  L751         BuchiCegarLoop]: Abstraction has 9459 states and 11126 transitions.
[2020-11-25 08:48:29,087 INFO  L631         BuchiCegarLoop]: Abstraction has 9459 states and 11126 transitions.
[2020-11-25 08:48:29,087 INFO  L445         BuchiCegarLoop]: ======== Iteration 21============
[2020-11-25 08:48:29,087 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9459 states and 11126 transitions.
[2020-11-25 08:48:29,097 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 08:48:29,097 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:48:29,097 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:48:29,098 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:48:29,098 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ERC20Pausable0 := false;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND FALSE  !(DType[this] == Wafl)
[L6652]   COND FALSE  !(DType[this] == ERC20Mintable)
[L6657]   COND TRUE   DType[this] == MinterRole
[L6658]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6658]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6659]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND FALSE  !(choice == 18)
[L11096]  COND FALSE  !(choice == 17)
[L11103]  COND FALSE  !(choice == 16)
[L11110]  COND FALSE  !(choice == 15)
[L11116]  COND FALSE  !(choice == 14)
[L11122]  COND FALSE  !(choice == 13)
[L11128]  COND FALSE  !(choice == 12)
[L11134]  COND FALSE  !(choice == 11)
[L11140]  COND FALSE  !(choice == 10)
[L11146]  COND FALSE  !(choice == 9)
[L11152]  COND FALSE  !(choice == 8)
[L11158]  COND FALSE  !(choice == 7)
[L11164]  COND FALSE  !(choice == 6)
[L11170]  COND FALSE  !(choice == 5)
[L11176]  COND FALSE  !(choice == 4)
[L11182]  COND FALSE  !(choice == 3)
[L11189]  COND FALSE  !(choice == 2)
[L11196]  COND TRUE   choice == 1
[L11197]              gas := gas - 21000;
[L11198]  COND TRUE   gas >= 0
[L11199]              assume amount_s1268 >= 0 && amount_s1268 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11200]              assume msgvalue_MSG == 0;
[L11201]  CALL        call burnFrom~address~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L3049]               havoc __exception;
[L3050]               revert := false;
[L3051]   COND FALSE  !(__exception)
[L3079]   CALL        call burnFrom~address~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L7040]   COND TRUE   DType[this] == Wafl
[L7041]   CALL        call _burnFrom~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L5649]   COND FALSE  !(DType[this] == Wafl)
[L5654]   COND FALSE  !(DType[this] == ERC20Burnable)
[L5659]   COND TRUE   DType[this] == ERC20Mintable
[L5660]   CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s700, amount_s700);
[L5522]               __var_14 := null;
[L5523]   COND FALSE  !(!(account_s630 != null))
[L5527]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s630);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5527]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s630);
[L5528]   COND FALSE  !(revert)
[L5531]               _totalSupply_ERC20[this] := __var_15;
[L5532]   CALL        call __var_16 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s630], value_s630);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5532]   RET         call __var_16 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s630], value_s630);
[L5533]   COND FALSE  !(revert)
[L5536]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s630];
[L5537]               _balances_ERC20[this][account_s630] := __var_16;
[L5538]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s630];
[L5539]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5660]   RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s700, amount_s700);
[L5661]   COND FALSE  !(revert)
[L5677]   CALL        call __var_19 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][account_s700][msgsender_MSG], amount_s700);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5677]   RET         call __var_19 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][account_s700][msgsender_MSG], amount_s700);
[L5678]   COND FALSE  !(revert)
[L5681]   COND FALSE  !(DType[this] == Wafl)
[L5686]   COND FALSE  !(DType[this] == ERC20Burnable)
[L5691]   COND FALSE  !(DType[this] == ERC20Mintable)
[L5696]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5701]   COND TRUE   DType[this] == ERC20
[L5702]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s700, msgsender_MSG, __var_19);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5702]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s700, msgsender_MSG, __var_19);
[L5703]   COND FALSE  !(revert)
[L7041]   RET         call _burnFrom~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L7042]   COND FALSE  !(revert)
[L3079]   RET         call burnFrom~address~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L3080]               assume !revert && gas >= 0;
[L11201]  RET         call burnFrom~address~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L11221]  RET         call CorralChoice_Wafl(this);
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND TRUE   choice == 18
[L11090]              gas := gas - 21000;
[L11091]  COND TRUE   gas >= 0
[L11092]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1061 != to_s1061 && ((value_s1061 > _balances_ERC20[this][from_s1061] || value_s1061 > _allowances_ERC20[this][from_s1061][msgsender_MSG]) || _balances_ERC20[this][to_s1061] + value_s1061 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC20Pausable0 := true;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2226]               havoc __exception;
[L2227]               revert := false;
[L2228]   COND FALSE  !(__exception)
[L2256]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6430]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6430]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L6434]   COND TRUE   DType[this] == Wafl
[L6435]   CALL        call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L5159]   COND TRUE   DType[this] == Wafl
[L5160]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5160]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5161]   COND FALSE  !(revert)
[L5187]   CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5187]   RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L5188]   COND FALSE  !(revert)
[L5191]   COND TRUE   DType[this] == Wafl
[L5192]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5192]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5193]   COND FALSE  !(revert)
[L5219]               __ret_0_ := true;
[L6435]   RET         call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6436]   COND FALSE  !(revert)
[L6447]               __ret_0_ := __var_28;
[L2256]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2257]               assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND TRUE   choice == 27
[L11034]              gas := gas - 21000;
[L11035]  COND FALSE  !(gas >= 0)
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:48:29,103 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:48:29,104 INFO  L82        PathProgramCache]: Analyzing trace with hash 1632778900, now seen corresponding path program 1 times
[2020-11-25 08:48:29,104 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:48:29,124 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:48:29,403 INFO  L134       CoverageAnalysis]: Checked inductivity of 1101 backedges. 6 proven. 0 refuted. 0 times theorem prover too weak. 1095 trivial. 0 not checked.
[2020-11-25 08:48:29,403 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:48:29,403 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 08:48:29,403 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:48:29,404 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 08:48:29,404 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 08:48:29,404 INFO  L87              Difference]: Start difference. First operand 9459 states and 11126 transitions. cyclomatic complexity: 1677 Second operand 8 states.
[2020-11-25 08:48:29,583 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:48:29,584 INFO  L93              Difference]: Finished difference Result 9486 states and 11155 transitions.
[2020-11-25 08:48:29,584 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 08:48:29,584 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9486 states and 11155 transitions.
[2020-11-25 08:48:29,601 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 08:48:29,618 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9486 states to 9454 states and 11119 transitions.
[2020-11-25 08:48:29,619 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2516
[2020-11-25 08:48:29,620 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2516
[2020-11-25 08:48:29,620 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9454 states and 11119 transitions.
[2020-11-25 08:48:29,625 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:48:29,625 INFO  L728         BuchiCegarLoop]: Abstraction has 9454 states and 11119 transitions.
[2020-11-25 08:48:29,630 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9454 states and 11119 transitions.
[2020-11-25 08:48:29,673 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9454 to 9454.
[2020-11-25 08:48:29,673 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9454 states.
[2020-11-25 08:48:29,686 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9454 states to 9454 states and 11119 transitions.
[2020-11-25 08:48:29,686 INFO  L751         BuchiCegarLoop]: Abstraction has 9454 states and 11119 transitions.
[2020-11-25 08:48:29,686 INFO  L631         BuchiCegarLoop]: Abstraction has 9454 states and 11119 transitions.
[2020-11-25 08:48:29,686 INFO  L445         BuchiCegarLoop]: ======== Iteration 22============
[2020-11-25 08:48:29,686 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9454 states and 11119 transitions.
[2020-11-25 08:48:29,702 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 08:48:29,702 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:48:29,702 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:48:29,704 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:48:29,704 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ERC20Pausable0 := false;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND FALSE  !(DType[this] == Wafl)
[L6652]   COND TRUE   DType[this] == ERC20Mintable
[L6653]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6653]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6654]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND FALSE  !(choice == 18)
[L11096]  COND FALSE  !(choice == 17)
[L11103]  COND FALSE  !(choice == 16)
[L11110]  COND FALSE  !(choice == 15)
[L11116]  COND FALSE  !(choice == 14)
[L11122]  COND FALSE  !(choice == 13)
[L11128]  COND FALSE  !(choice == 12)
[L11134]  COND FALSE  !(choice == 11)
[L11140]  COND FALSE  !(choice == 10)
[L11146]  COND FALSE  !(choice == 9)
[L11152]  COND FALSE  !(choice == 8)
[L11158]  COND FALSE  !(choice == 7)
[L11164]  COND FALSE  !(choice == 6)
[L11170]  COND FALSE  !(choice == 5)
[L11176]  COND FALSE  !(choice == 4)
[L11182]  COND FALSE  !(choice == 3)
[L11189]  COND FALSE  !(choice == 2)
[L11196]  COND TRUE   choice == 1
[L11197]              gas := gas - 21000;
[L11198]  COND TRUE   gas >= 0
[L11199]              assume amount_s1268 >= 0 && amount_s1268 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11200]              assume msgvalue_MSG == 0;
[L11201]  CALL        call burnFrom~address~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L3049]               havoc __exception;
[L3050]               revert := false;
[L3051]   COND FALSE  !(__exception)
[L3079]   CALL        call burnFrom~address~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L7040]   COND TRUE   DType[this] == Wafl
[L7041]   CALL        call _burnFrom~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L5649]   COND FALSE  !(DType[this] == Wafl)
[L5654]   COND FALSE  !(DType[this] == ERC20Burnable)
[L5659]   COND TRUE   DType[this] == ERC20Mintable
[L5660]   CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s700, amount_s700);
[L5522]               __var_14 := null;
[L5523]   COND FALSE  !(!(account_s630 != null))
[L5527]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s630);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5527]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s630);
[L5528]   COND FALSE  !(revert)
[L5531]               _totalSupply_ERC20[this] := __var_15;
[L5532]   CALL        call __var_16 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s630], value_s630);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5532]   RET         call __var_16 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s630], value_s630);
[L5533]   COND FALSE  !(revert)
[L5536]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s630];
[L5537]               _balances_ERC20[this][account_s630] := __var_16;
[L5538]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s630];
[L5539]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5660]   RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s700, amount_s700);
[L5661]   COND FALSE  !(revert)
[L5677]   CALL        call __var_19 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][account_s700][msgsender_MSG], amount_s700);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5677]   RET         call __var_19 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][account_s700][msgsender_MSG], amount_s700);
[L5678]   COND FALSE  !(revert)
[L5681]   COND TRUE   DType[this] == Wafl
[L5682]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s700, msgsender_MSG, __var_19);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5682]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s700, msgsender_MSG, __var_19);
[L5683]   COND FALSE  !(revert)
[L7041]   RET         call _burnFrom~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L7042]   COND FALSE  !(revert)
[L3079]   RET         call burnFrom~address~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L3080]               assume !revert && gas >= 0;
[L11201]  RET         call burnFrom~address~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L11221]  RET         call CorralChoice_Wafl(this);
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND TRUE   choice == 18
[L11090]              gas := gas - 21000;
[L11091]  COND TRUE   gas >= 0
[L11092]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1061 != to_s1061 && ((value_s1061 > _balances_ERC20[this][from_s1061] || value_s1061 > _allowances_ERC20[this][from_s1061][msgsender_MSG]) || _balances_ERC20[this][to_s1061] + value_s1061 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC20Pausable0 := true;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2226]               havoc __exception;
[L2227]               revert := false;
[L2228]   COND FALSE  !(__exception)
[L2256]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6430]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6430]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L6434]   COND FALSE  !(DType[this] == Wafl)
[L6439]   COND TRUE   DType[this] == ERC20Pausable
[L6440]   CALL        call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L5159]   COND TRUE   DType[this] == Wafl
[L5160]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5160]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5161]   COND FALSE  !(revert)
[L5187]   CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5187]   RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L5188]   COND FALSE  !(revert)
[L5191]   COND TRUE   DType[this] == Wafl
[L5192]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5192]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5193]   COND FALSE  !(revert)
[L5219]               __ret_0_ := true;
[L6440]   RET         call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6441]   COND FALSE  !(revert)
[L6447]               __ret_0_ := __var_28;
[L2256]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2257]               assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND TRUE   choice == 18
[L11090]              gas := gas - 21000;
[L11091]  COND TRUE   gas >= 0
[L11092]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1061 != to_s1061 && ((value_s1061 > _balances_ERC20[this][from_s1061] || value_s1061 > _allowances_ERC20[this][from_s1061][msgsender_MSG]) || _balances_ERC20[this][to_s1061] + value_s1061 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC20Pausable0 := true;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2226]               havoc __exception;
[L2227]               revert := false;
[L2228]   COND FALSE  !(__exception)
[L2256]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6430]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6430]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L6434]   COND FALSE  !(DType[this] == Wafl)
[L6439]   COND TRUE   DType[this] == ERC20Pausable
[L6440]   CALL        call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L5159]   COND TRUE   DType[this] == Wafl
[L5160]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5160]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5161]   COND FALSE  !(revert)
[L5187]   CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5187]   RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L5188]   COND FALSE  !(revert)
[L5191]   COND TRUE   DType[this] == Wafl
[L5192]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5192]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5193]   COND FALSE  !(revert)
[L5219]               __ret_0_ := true;
[L6440]   RET         call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6441]   COND FALSE  !(revert)
[L6447]               __ret_0_ := __var_28;
[L2256]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2257]               assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:48:29,709 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:48:29,709 INFO  L82        PathProgramCache]: Analyzing trace with hash 757518952, now seen corresponding path program 1 times
[2020-11-25 08:48:29,710 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:48:29,729 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:48:29,977 INFO  L134       CoverageAnalysis]: Checked inductivity of 1101 backedges. 6 proven. 0 refuted. 0 times theorem prover too weak. 1095 trivial. 0 not checked.
[2020-11-25 08:48:29,977 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:48:29,977 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 08:48:29,978 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:48:29,978 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 08:48:29,978 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 08:48:29,978 INFO  L87              Difference]: Start difference. First operand 9454 states and 11119 transitions. cyclomatic complexity: 1675 Second operand 8 states.
[2020-11-25 08:48:30,146 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:48:30,146 INFO  L93              Difference]: Finished difference Result 9475 states and 11142 transitions.
[2020-11-25 08:48:30,146 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 08:48:30,147 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9475 states and 11142 transitions.
[2020-11-25 08:48:30,164 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 08:48:30,181 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9475 states to 9443 states and 11106 transitions.
[2020-11-25 08:48:30,181 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2516
[2020-11-25 08:48:30,182 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2516
[2020-11-25 08:48:30,182 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9443 states and 11106 transitions.
[2020-11-25 08:48:30,187 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:48:30,187 INFO  L728         BuchiCegarLoop]: Abstraction has 9443 states and 11106 transitions.
[2020-11-25 08:48:30,192 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9443 states and 11106 transitions.
[2020-11-25 08:48:30,236 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9443 to 9443.
[2020-11-25 08:48:30,236 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9443 states.
[2020-11-25 08:48:30,247 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9443 states to 9443 states and 11106 transitions.
[2020-11-25 08:48:30,247 INFO  L751         BuchiCegarLoop]: Abstraction has 9443 states and 11106 transitions.
[2020-11-25 08:48:30,247 INFO  L631         BuchiCegarLoop]: Abstraction has 9443 states and 11106 transitions.
[2020-11-25 08:48:30,247 INFO  L445         BuchiCegarLoop]: ======== Iteration 23============
[2020-11-25 08:48:30,247 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9443 states and 11106 transitions.
[2020-11-25 08:48:30,256 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 08:48:30,256 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:48:30,256 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:48:30,258 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:48:30,258 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ERC20Pausable0 := false;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND FALSE  !(choice == 18)
[L11096]  COND FALSE  !(choice == 17)
[L11103]  COND FALSE  !(choice == 16)
[L11110]  COND FALSE  !(choice == 15)
[L11116]  COND FALSE  !(choice == 14)
[L11122]  COND FALSE  !(choice == 13)
[L11128]  COND FALSE  !(choice == 12)
[L11134]  COND FALSE  !(choice == 11)
[L11140]  COND FALSE  !(choice == 10)
[L11146]  COND FALSE  !(choice == 9)
[L11152]  COND FALSE  !(choice == 8)
[L11158]  COND FALSE  !(choice == 7)
[L11164]  COND FALSE  !(choice == 6)
[L11170]  COND FALSE  !(choice == 5)
[L11176]  COND FALSE  !(choice == 4)
[L11182]  COND FALSE  !(choice == 3)
[L11189]  COND FALSE  !(choice == 2)
[L11196]  COND TRUE   choice == 1
[L11197]              gas := gas - 21000;
[L11198]  COND TRUE   gas >= 0
[L11199]              assume amount_s1268 >= 0 && amount_s1268 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11200]              assume msgvalue_MSG == 0;
[L11201]  CALL        call burnFrom~address~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L3049]               havoc __exception;
[L3050]               revert := false;
[L3051]   COND FALSE  !(__exception)
[L3079]   CALL        call burnFrom~address~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L7040]   COND TRUE   DType[this] == Wafl
[L7041]   CALL        call _burnFrom~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L5649]   COND FALSE  !(DType[this] == Wafl)
[L5654]   COND TRUE   DType[this] == ERC20Burnable
[L5655]   CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s700, amount_s700);
[L5522]               __var_14 := null;
[L5523]   COND FALSE  !(!(account_s630 != null))
[L5527]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s630);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5527]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s630);
[L5528]   COND FALSE  !(revert)
[L5531]               _totalSupply_ERC20[this] := __var_15;
[L5532]   CALL        call __var_16 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s630], value_s630);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5532]   RET         call __var_16 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s630], value_s630);
[L5533]   COND FALSE  !(revert)
[L5536]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s630];
[L5537]               _balances_ERC20[this][account_s630] := __var_16;
[L5538]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s630];
[L5539]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5655]   RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s700, amount_s700);
[L5656]   COND FALSE  !(revert)
[L5677]   CALL        call __var_19 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][account_s700][msgsender_MSG], amount_s700);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5677]   RET         call __var_19 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][account_s700][msgsender_MSG], amount_s700);
[L5678]   COND FALSE  !(revert)
[L5681]   COND FALSE  !(DType[this] == Wafl)
[L5686]   COND FALSE  !(DType[this] == ERC20Burnable)
[L5691]   COND TRUE   DType[this] == ERC20Mintable
[L5692]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s700, msgsender_MSG, __var_19);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5692]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s700, msgsender_MSG, __var_19);
[L5693]   COND FALSE  !(revert)
[L7041]   RET         call _burnFrom~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L7042]   COND FALSE  !(revert)
[L3079]   RET         call burnFrom~address~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L3080]               assume !revert && gas >= 0;
[L11201]  RET         call burnFrom~address~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L11221]  RET         call CorralChoice_Wafl(this);
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND TRUE   choice == 18
[L11090]              gas := gas - 21000;
[L11091]  COND TRUE   gas >= 0
[L11092]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1061 != to_s1061 && ((value_s1061 > _balances_ERC20[this][from_s1061] || value_s1061 > _allowances_ERC20[this][from_s1061][msgsender_MSG]) || _balances_ERC20[this][to_s1061] + value_s1061 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC20Pausable0 := true;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2226]               havoc __exception;
[L2227]               revert := false;
[L2228]   COND FALSE  !(__exception)
[L2256]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6430]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6430]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L6434]   COND FALSE  !(DType[this] == Wafl)
[L6439]   COND TRUE   DType[this] == ERC20Pausable
[L6440]   CALL        call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L5159]   COND TRUE   DType[this] == Wafl
[L5160]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5160]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5161]   COND FALSE  !(revert)
[L5187]   CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5187]   RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L5188]   COND FALSE  !(revert)
[L5191]   COND TRUE   DType[this] == Wafl
[L5192]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5192]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5193]   COND FALSE  !(revert)
[L5219]               __ret_0_ := true;
[L6440]   RET         call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6441]   COND FALSE  !(revert)
[L6447]               __ret_0_ := __var_28;
[L2256]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2257]               assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND TRUE   choice == 18
[L11090]              gas := gas - 21000;
[L11091]  COND TRUE   gas >= 0
[L11092]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1061 != to_s1061 && ((value_s1061 > _balances_ERC20[this][from_s1061] || value_s1061 > _allowances_ERC20[this][from_s1061][msgsender_MSG]) || _balances_ERC20[this][to_s1061] + value_s1061 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC20Pausable0 := true;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2226]               havoc __exception;
[L2227]               revert := false;
[L2228]   COND FALSE  !(__exception)
[L2256]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6430]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6430]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L6434]   COND FALSE  !(DType[this] == Wafl)
[L6439]   COND TRUE   DType[this] == ERC20Pausable
[L6440]   CALL        call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L5159]   COND TRUE   DType[this] == Wafl
[L5160]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5160]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5161]   COND FALSE  !(revert)
[L5187]   CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5187]   RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L5188]   COND FALSE  !(revert)
[L5191]   COND TRUE   DType[this] == Wafl
[L5192]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5192]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5193]   COND FALSE  !(revert)
[L5219]               __ret_0_ := true;
[L6440]   RET         call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6441]   COND FALSE  !(revert)
[L6447]               __ret_0_ := __var_28;
[L2256]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2257]               assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:48:30,263 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:48:30,264 INFO  L82        PathProgramCache]: Analyzing trace with hash 1490150260, now seen corresponding path program 1 times
[2020-11-25 08:48:30,264 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:48:30,283 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:48:30,562 INFO  L134       CoverageAnalysis]: Checked inductivity of 1105 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1104 trivial. 0 not checked.
[2020-11-25 08:48:30,562 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:48:30,562 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 08:48:30,562 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:48:30,563 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 08:48:30,563 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 08:48:30,563 INFO  L87              Difference]: Start difference. First operand 9443 states and 11106 transitions. cyclomatic complexity: 1673 Second operand 7 states.
[2020-11-25 08:48:30,719 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:48:30,719 INFO  L93              Difference]: Finished difference Result 9523 states and 11186 transitions.
[2020-11-25 08:48:30,719 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 08:48:30,719 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9523 states and 11186 transitions.
[2020-11-25 08:48:30,736 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 08:48:30,753 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9523 states to 9391 states and 11030 transitions.
[2020-11-25 08:48:30,754 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2504
[2020-11-25 08:48:30,755 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2504
[2020-11-25 08:48:30,755 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9391 states and 11030 transitions.
[2020-11-25 08:48:30,760 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:48:30,760 INFO  L728         BuchiCegarLoop]: Abstraction has 9391 states and 11030 transitions.
[2020-11-25 08:48:30,765 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9391 states and 11030 transitions.
[2020-11-25 08:48:30,807 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9391 to 9391.
[2020-11-25 08:48:30,807 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9391 states.
[2020-11-25 08:48:30,818 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9391 states to 9391 states and 11030 transitions.
[2020-11-25 08:48:30,818 INFO  L751         BuchiCegarLoop]: Abstraction has 9391 states and 11030 transitions.
[2020-11-25 08:48:30,818 INFO  L631         BuchiCegarLoop]: Abstraction has 9391 states and 11030 transitions.
[2020-11-25 08:48:30,818 INFO  L445         BuchiCegarLoop]: ======== Iteration 24============
[2020-11-25 08:48:30,818 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9391 states and 11030 transitions.
[2020-11-25 08:48:30,828 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 08:48:30,828 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:48:30,828 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:48:30,829 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:48:30,830 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ERC20Pausable0 := false;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND FALSE  !(choice == 18)
[L11096]  COND FALSE  !(choice == 17)
[L11103]  COND FALSE  !(choice == 16)
[L11110]  COND FALSE  !(choice == 15)
[L11116]  COND FALSE  !(choice == 14)
[L11122]  COND FALSE  !(choice == 13)
[L11128]  COND FALSE  !(choice == 12)
[L11134]  COND FALSE  !(choice == 11)
[L11140]  COND FALSE  !(choice == 10)
[L11146]  COND FALSE  !(choice == 9)
[L11152]  COND FALSE  !(choice == 8)
[L11158]  COND FALSE  !(choice == 7)
[L11164]  COND FALSE  !(choice == 6)
[L11170]  COND FALSE  !(choice == 5)
[L11176]  COND FALSE  !(choice == 4)
[L11182]  COND FALSE  !(choice == 3)
[L11189]  COND FALSE  !(choice == 2)
[L11196]  COND TRUE   choice == 1
[L11197]              gas := gas - 21000;
[L11198]  COND TRUE   gas >= 0
[L11199]              assume amount_s1268 >= 0 && amount_s1268 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11200]              assume msgvalue_MSG == 0;
[L11201]  CALL        call burnFrom~address~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L3049]               havoc __exception;
[L3050]               revert := false;
[L3051]   COND FALSE  !(__exception)
[L3079]   CALL        call burnFrom~address~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L7040]   COND TRUE   DType[this] == Wafl
[L7041]   CALL        call _burnFrom~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L5649]   COND FALSE  !(DType[this] == Wafl)
[L5654]   COND FALSE  !(DType[this] == ERC20Burnable)
[L5659]   COND FALSE  !(DType[this] == ERC20Mintable)
[L5664]   COND TRUE   DType[this] == ERC20Pausable
[L5665]   CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s700, amount_s700);
[L5522]               __var_14 := null;
[L5523]   COND FALSE  !(!(account_s630 != null))
[L5527]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s630);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5527]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s630);
[L5528]   COND FALSE  !(revert)
[L5531]               _totalSupply_ERC20[this] := __var_15;
[L5532]   CALL        call __var_16 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s630], value_s630);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5532]   RET         call __var_16 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s630], value_s630);
[L5533]   COND FALSE  !(revert)
[L5536]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s630];
[L5537]               _balances_ERC20[this][account_s630] := __var_16;
[L5538]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s630];
[L5539]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5665]   RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s700, amount_s700);
[L5666]   COND FALSE  !(revert)
[L5677]   CALL        call __var_19 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][account_s700][msgsender_MSG], amount_s700);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5677]   RET         call __var_19 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][account_s700][msgsender_MSG], amount_s700);
[L5678]   COND FALSE  !(revert)
[L5681]   COND FALSE  !(DType[this] == Wafl)
[L5686]   COND FALSE  !(DType[this] == ERC20Burnable)
[L5691]   COND FALSE  !(DType[this] == ERC20Mintable)
[L5696]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5701]   COND TRUE   DType[this] == ERC20
[L5702]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s700, msgsender_MSG, __var_19);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5702]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s700, msgsender_MSG, __var_19);
[L5703]   COND FALSE  !(revert)
[L7041]   RET         call _burnFrom~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L7042]   COND FALSE  !(revert)
[L3079]   RET         call burnFrom~address~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L3080]               assume !revert && gas >= 0;
[L11201]  RET         call burnFrom~address~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L11221]  RET         call CorralChoice_Wafl(this);
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND TRUE   choice == 18
[L11090]              gas := gas - 21000;
[L11091]  COND TRUE   gas >= 0
[L11092]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1061 != to_s1061 && ((value_s1061 > _balances_ERC20[this][from_s1061] || value_s1061 > _allowances_ERC20[this][from_s1061][msgsender_MSG]) || _balances_ERC20[this][to_s1061] + value_s1061 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC20Pausable0 := true;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2226]               havoc __exception;
[L2227]               revert := false;
[L2228]   COND FALSE  !(__exception)
[L2256]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6430]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6430]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L6434]   COND FALSE  !(DType[this] == Wafl)
[L6439]   COND TRUE   DType[this] == ERC20Pausable
[L6440]   CALL        call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L5159]   COND TRUE   DType[this] == Wafl
[L5160]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5160]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5161]   COND FALSE  !(revert)
[L5187]   CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5187]   RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L5188]   COND FALSE  !(revert)
[L5191]   COND TRUE   DType[this] == Wafl
[L5192]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5192]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5193]   COND FALSE  !(revert)
[L5219]               __ret_0_ := true;
[L6440]   RET         call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6441]   COND FALSE  !(revert)
[L6447]               __ret_0_ := __var_28;
[L2256]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2257]               assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND TRUE   choice == 18
[L11090]              gas := gas - 21000;
[L11091]  COND TRUE   gas >= 0
[L11092]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1061 != to_s1061 && ((value_s1061 > _balances_ERC20[this][from_s1061] || value_s1061 > _allowances_ERC20[this][from_s1061][msgsender_MSG]) || _balances_ERC20[this][to_s1061] + value_s1061 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC20Pausable0 := true;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2226]               havoc __exception;
[L2227]               revert := false;
[L2228]   COND FALSE  !(__exception)
[L2256]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6430]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6430]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L6434]   COND FALSE  !(DType[this] == Wafl)
[L6439]   COND TRUE   DType[this] == ERC20Pausable
[L6440]   CALL        call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L5159]   COND TRUE   DType[this] == Wafl
[L5160]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5160]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5161]   COND FALSE  !(revert)
[L5187]   CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5187]   RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L5188]   COND FALSE  !(revert)
[L5191]   COND TRUE   DType[this] == Wafl
[L5192]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5192]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5193]   COND FALSE  !(revert)
[L5219]               __ret_0_ := true;
[L6440]   RET         call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6441]   COND FALSE  !(revert)
[L6447]               __ret_0_ := __var_28;
[L2256]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2257]               assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:48:30,835 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:48:30,835 INFO  L82        PathProgramCache]: Analyzing trace with hash 182213824, now seen corresponding path program 1 times
[2020-11-25 08:48:30,836 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:48:30,854 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:48:31,104 INFO  L134       CoverageAnalysis]: Checked inductivity of 1105 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1104 trivial. 0 not checked.
[2020-11-25 08:48:31,104 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:48:31,104 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 08:48:31,104 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:48:31,104 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 08:48:31,104 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 08:48:31,105 INFO  L87              Difference]: Start difference. First operand 9391 states and 11030 transitions. cyclomatic complexity: 1649 Second operand 7 states.
[2020-11-25 08:48:31,276 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:48:31,276 INFO  L93              Difference]: Finished difference Result 9471 states and 11110 transitions.
[2020-11-25 08:48:31,277 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 08:48:31,277 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9471 states and 11110 transitions.
[2020-11-25 08:48:31,293 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 08:48:31,310 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9471 states to 9359 states and 10982 transitions.
[2020-11-25 08:48:31,310 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2496
[2020-11-25 08:48:31,311 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2496
[2020-11-25 08:48:31,311 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9359 states and 10982 transitions.
[2020-11-25 08:48:31,316 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:48:31,316 INFO  L728         BuchiCegarLoop]: Abstraction has 9359 states and 10982 transitions.
[2020-11-25 08:48:31,321 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9359 states and 10982 transitions.
[2020-11-25 08:48:31,364 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9359 to 9359.
[2020-11-25 08:48:31,364 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9359 states.
[2020-11-25 08:48:31,375 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9359 states to 9359 states and 10982 transitions.
[2020-11-25 08:48:31,375 INFO  L751         BuchiCegarLoop]: Abstraction has 9359 states and 10982 transitions.
[2020-11-25 08:48:31,375 INFO  L631         BuchiCegarLoop]: Abstraction has 9359 states and 10982 transitions.
[2020-11-25 08:48:31,375 INFO  L445         BuchiCegarLoop]: ======== Iteration 25============
[2020-11-25 08:48:31,375 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9359 states and 10982 transitions.
[2020-11-25 08:48:31,384 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 08:48:31,384 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:48:31,384 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:48:31,385 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:48:31,386 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ERC20Pausable0 := false;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND FALSE  !(choice == 18)
[L11096]  COND FALSE  !(choice == 17)
[L11103]  COND FALSE  !(choice == 16)
[L11110]  COND FALSE  !(choice == 15)
[L11116]  COND FALSE  !(choice == 14)
[L11122]  COND FALSE  !(choice == 13)
[L11128]  COND FALSE  !(choice == 12)
[L11134]  COND FALSE  !(choice == 11)
[L11140]  COND FALSE  !(choice == 10)
[L11146]  COND FALSE  !(choice == 9)
[L11152]  COND FALSE  !(choice == 8)
[L11158]  COND FALSE  !(choice == 7)
[L11164]  COND FALSE  !(choice == 6)
[L11170]  COND FALSE  !(choice == 5)
[L11176]  COND FALSE  !(choice == 4)
[L11182]  COND FALSE  !(choice == 3)
[L11189]  COND FALSE  !(choice == 2)
[L11196]  COND TRUE   choice == 1
[L11197]              gas := gas - 21000;
[L11198]  COND TRUE   gas >= 0
[L11199]              assume amount_s1268 >= 0 && amount_s1268 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11200]              assume msgvalue_MSG == 0;
[L11201]  CALL        call burnFrom~address~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L3049]               havoc __exception;
[L3050]               revert := false;
[L3051]   COND FALSE  !(__exception)
[L3079]   CALL        call burnFrom~address~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L7040]   COND TRUE   DType[this] == Wafl
[L7041]   CALL        call _burnFrom~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L5649]   COND FALSE  !(DType[this] == Wafl)
[L5654]   COND FALSE  !(DType[this] == ERC20Burnable)
[L5659]   COND TRUE   DType[this] == ERC20Mintable
[L5660]   CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s700, amount_s700);
[L5522]               __var_14 := null;
[L5523]   COND FALSE  !(!(account_s630 != null))
[L5527]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s630);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5527]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s630);
[L5528]   COND FALSE  !(revert)
[L5531]               _totalSupply_ERC20[this] := __var_15;
[L5532]   CALL        call __var_16 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s630], value_s630);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5532]   RET         call __var_16 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s630], value_s630);
[L5533]   COND FALSE  !(revert)
[L5536]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s630];
[L5537]               _balances_ERC20[this][account_s630] := __var_16;
[L5538]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s630];
[L5539]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5660]   RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s700, amount_s700);
[L5661]   COND FALSE  !(revert)
[L5677]   CALL        call __var_19 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][account_s700][msgsender_MSG], amount_s700);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5677]   RET         call __var_19 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][account_s700][msgsender_MSG], amount_s700);
[L5678]   COND FALSE  !(revert)
[L5681]   COND TRUE   DType[this] == Wafl
[L5682]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s700, msgsender_MSG, __var_19);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5682]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s700, msgsender_MSG, __var_19);
[L5683]   COND FALSE  !(revert)
[L7041]   RET         call _burnFrom~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L7042]   COND FALSE  !(revert)
[L3079]   RET         call burnFrom~address~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L3080]               assume !revert && gas >= 0;
[L11201]  RET         call burnFrom~address~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L11221]  RET         call CorralChoice_Wafl(this);
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND TRUE   choice == 18
[L11090]              gas := gas - 21000;
[L11091]  COND TRUE   gas >= 0
[L11092]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1061 != to_s1061 && ((value_s1061 > _balances_ERC20[this][from_s1061] || value_s1061 > _allowances_ERC20[this][from_s1061][msgsender_MSG]) || _balances_ERC20[this][to_s1061] + value_s1061 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC20Pausable0 := true;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2226]               havoc __exception;
[L2227]               revert := false;
[L2228]   COND FALSE  !(__exception)
[L2256]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6430]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6430]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L6434]   COND TRUE   DType[this] == Wafl
[L6435]   CALL        call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L5159]   COND TRUE   DType[this] == Wafl
[L5160]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5160]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5161]   COND FALSE  !(revert)
[L5187]   CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5187]   RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L5188]   COND FALSE  !(revert)
[L5191]   COND TRUE   DType[this] == Wafl
[L5192]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5192]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5193]   COND FALSE  !(revert)
[L5219]               __ret_0_ := true;
[L6435]   RET         call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6436]   COND FALSE  !(revert)
[L6447]               __ret_0_ := __var_28;
[L2256]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2257]               assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND TRUE   choice == 18
[L11090]              gas := gas - 21000;
[L11091]  COND TRUE   gas >= 0
[L11092]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1061 != to_s1061 && ((value_s1061 > _balances_ERC20[this][from_s1061] || value_s1061 > _allowances_ERC20[this][from_s1061][msgsender_MSG]) || _balances_ERC20[this][to_s1061] + value_s1061 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC20Pausable0 := true;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2226]               havoc __exception;
[L2227]               revert := false;
[L2228]   COND FALSE  !(__exception)
[L2256]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6430]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6430]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L6434]   COND TRUE   DType[this] == Wafl
[L6435]   CALL        call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L5159]   COND TRUE   DType[this] == Wafl
[L5160]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5160]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5161]   COND FALSE  !(revert)
[L5187]   CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5187]   RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L5188]   COND FALSE  !(revert)
[L5191]   COND TRUE   DType[this] == Wafl
[L5192]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5192]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5193]   COND FALSE  !(revert)
[L5219]               __ret_0_ := true;
[L6435]   RET         call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6436]   COND FALSE  !(revert)
[L6447]               __ret_0_ := __var_28;
[L2256]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2257]               assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:48:31,391 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:48:31,391 INFO  L82        PathProgramCache]: Analyzing trace with hash 1982328097, now seen corresponding path program 1 times
[2020-11-25 08:48:31,392 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:48:31,410 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:48:31,651 INFO  L134       CoverageAnalysis]: Checked inductivity of 1105 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1104 trivial. 0 not checked.
[2020-11-25 08:48:31,652 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:48:31,652 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 08:48:31,652 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:48:31,652 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 08:48:31,652 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 08:48:31,652 INFO  L87              Difference]: Start difference. First operand 9359 states and 10982 transitions. cyclomatic complexity: 1633 Second operand 7 states.
[2020-11-25 08:48:31,802 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:48:31,802 INFO  L93              Difference]: Finished difference Result 9435 states and 11058 transitions.
[2020-11-25 08:48:31,802 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 08:48:31,802 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9435 states and 11058 transitions.
[2020-11-25 08:48:31,819 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 08:48:31,836 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9435 states to 9327 states and 10934 transitions.
[2020-11-25 08:48:31,836 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2488
[2020-11-25 08:48:31,838 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2488
[2020-11-25 08:48:31,838 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9327 states and 10934 transitions.
[2020-11-25 08:48:31,842 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:48:31,843 INFO  L728         BuchiCegarLoop]: Abstraction has 9327 states and 10934 transitions.
[2020-11-25 08:48:31,847 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9327 states and 10934 transitions.
[2020-11-25 08:48:31,890 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9327 to 9327.
[2020-11-25 08:48:31,890 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9327 states.
[2020-11-25 08:48:31,900 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9327 states to 9327 states and 10934 transitions.
[2020-11-25 08:48:31,900 INFO  L751         BuchiCegarLoop]: Abstraction has 9327 states and 10934 transitions.
[2020-11-25 08:48:31,900 INFO  L631         BuchiCegarLoop]: Abstraction has 9327 states and 10934 transitions.
[2020-11-25 08:48:31,900 INFO  L445         BuchiCegarLoop]: ======== Iteration 26============
[2020-11-25 08:48:31,900 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9327 states and 10934 transitions.
[2020-11-25 08:48:31,910 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 08:48:31,910 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:48:31,910 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:48:31,912 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:48:31,912 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ERC20Pausable0 := false;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND FALSE  !(choice == 18)
[L11096]  COND FALSE  !(choice == 17)
[L11103]  COND FALSE  !(choice == 16)
[L11110]  COND FALSE  !(choice == 15)
[L11116]  COND FALSE  !(choice == 14)
[L11122]  COND FALSE  !(choice == 13)
[L11128]  COND FALSE  !(choice == 12)
[L11134]  COND FALSE  !(choice == 11)
[L11140]  COND FALSE  !(choice == 10)
[L11146]  COND FALSE  !(choice == 9)
[L11152]  COND FALSE  !(choice == 8)
[L11158]  COND FALSE  !(choice == 7)
[L11164]  COND FALSE  !(choice == 6)
[L11170]  COND FALSE  !(choice == 5)
[L11176]  COND FALSE  !(choice == 4)
[L11182]  COND FALSE  !(choice == 3)
[L11189]  COND FALSE  !(choice == 2)
[L11196]  COND TRUE   choice == 1
[L11197]              gas := gas - 21000;
[L11198]  COND TRUE   gas >= 0
[L11199]              assume amount_s1268 >= 0 && amount_s1268 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11200]              assume msgvalue_MSG == 0;
[L11201]  CALL        call burnFrom~address~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L3049]               havoc __exception;
[L3050]               revert := false;
[L3051]   COND FALSE  !(__exception)
[L3079]   CALL        call burnFrom~address~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L7040]   COND TRUE   DType[this] == Wafl
[L7041]   CALL        call _burnFrom~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L5649]   COND TRUE   DType[this] == Wafl
[L5650]   CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s700, amount_s700);
[L5522]               __var_14 := null;
[L5523]   COND FALSE  !(!(account_s630 != null))
[L5527]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s630);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5527]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s630);
[L5528]   COND FALSE  !(revert)
[L5531]               _totalSupply_ERC20[this] := __var_15;
[L5532]   CALL        call __var_16 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s630], value_s630);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5532]   RET         call __var_16 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s630], value_s630);
[L5533]   COND FALSE  !(revert)
[L5536]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s630];
[L5537]               _balances_ERC20[this][account_s630] := __var_16;
[L5538]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s630];
[L5539]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5650]   RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s700, amount_s700);
[L5651]   COND FALSE  !(revert)
[L5677]   CALL        call __var_19 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][account_s700][msgsender_MSG], amount_s700);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5677]   RET         call __var_19 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][account_s700][msgsender_MSG], amount_s700);
[L5678]   COND FALSE  !(revert)
[L5681]   COND FALSE  !(DType[this] == Wafl)
[L5686]   COND FALSE  !(DType[this] == ERC20Burnable)
[L5691]   COND FALSE  !(DType[this] == ERC20Mintable)
[L5696]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5701]   COND TRUE   DType[this] == ERC20
[L5702]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s700, msgsender_MSG, __var_19);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5702]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s700, msgsender_MSG, __var_19);
[L5703]   COND FALSE  !(revert)
[L7041]   RET         call _burnFrom~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L7042]   COND FALSE  !(revert)
[L3079]   RET         call burnFrom~address~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L3080]               assume !revert && gas >= 0;
[L11201]  RET         call burnFrom~address~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L11221]  RET         call CorralChoice_Wafl(this);
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND TRUE   choice == 18
[L11090]              gas := gas - 21000;
[L11091]  COND TRUE   gas >= 0
[L11092]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1061 != to_s1061 && ((value_s1061 > _balances_ERC20[this][from_s1061] || value_s1061 > _allowances_ERC20[this][from_s1061][msgsender_MSG]) || _balances_ERC20[this][to_s1061] + value_s1061 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC20Pausable0 := true;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2226]               havoc __exception;
[L2227]               revert := false;
[L2228]   COND FALSE  !(__exception)
[L2256]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6430]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6430]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L6434]   COND FALSE  !(DType[this] == Wafl)
[L6439]   COND TRUE   DType[this] == ERC20Pausable
[L6440]   CALL        call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L5159]   COND TRUE   DType[this] == Wafl
[L5160]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5160]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5161]   COND FALSE  !(revert)
[L5187]   CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5187]   RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L5188]   COND FALSE  !(revert)
[L5191]   COND TRUE   DType[this] == Wafl
[L5192]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5192]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5193]   COND FALSE  !(revert)
[L5219]               __ret_0_ := true;
[L6440]   RET         call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6441]   COND FALSE  !(revert)
[L6447]               __ret_0_ := __var_28;
[L2256]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2257]               assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND TRUE   choice == 18
[L11090]              gas := gas - 21000;
[L11091]  COND TRUE   gas >= 0
[L11092]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1061 != to_s1061 && ((value_s1061 > _balances_ERC20[this][from_s1061] || value_s1061 > _allowances_ERC20[this][from_s1061][msgsender_MSG]) || _balances_ERC20[this][to_s1061] + value_s1061 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC20Pausable0 := true;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2226]               havoc __exception;
[L2227]               revert := false;
[L2228]   COND FALSE  !(__exception)
[L2256]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6430]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6430]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L6434]   COND FALSE  !(DType[this] == Wafl)
[L6439]   COND TRUE   DType[this] == ERC20Pausable
[L6440]   CALL        call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L5159]   COND TRUE   DType[this] == Wafl
[L5160]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5160]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5161]   COND FALSE  !(revert)
[L5187]   CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5187]   RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L5188]   COND FALSE  !(revert)
[L5191]   COND TRUE   DType[this] == Wafl
[L5192]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5192]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5193]   COND FALSE  !(revert)
[L5219]               __ret_0_ := true;
[L6440]   RET         call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6441]   COND FALSE  !(revert)
[L6447]               __ret_0_ := __var_28;
[L2256]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2257]               assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:48:31,917 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:48:31,917 INFO  L82        PathProgramCache]: Analyzing trace with hash -73275448, now seen corresponding path program 1 times
[2020-11-25 08:48:31,918 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:48:31,940 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:48:32,213 INFO  L134       CoverageAnalysis]: Checked inductivity of 1105 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1104 trivial. 0 not checked.
[2020-11-25 08:48:32,214 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:48:32,214 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 08:48:32,214 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:48:32,214 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 08:48:32,214 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 08:48:32,215 INFO  L87              Difference]: Start difference. First operand 9327 states and 10934 transitions. cyclomatic complexity: 1617 Second operand 3 states.
[2020-11-25 08:48:32,267 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:48:32,267 INFO  L93              Difference]: Finished difference Result 9351 states and 10962 transitions.
[2020-11-25 08:48:32,267 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 08:48:32,267 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9351 states and 10962 transitions.
[2020-11-25 08:48:32,283 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 08:48:32,300 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9351 states to 9351 states and 10962 transitions.
[2020-11-25 08:48:32,300 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2498
[2020-11-25 08:48:32,301 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2498
[2020-11-25 08:48:32,301 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9351 states and 10962 transitions.
[2020-11-25 08:48:32,306 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:48:32,306 INFO  L728         BuchiCegarLoop]: Abstraction has 9351 states and 10962 transitions.
[2020-11-25 08:48:32,311 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9351 states and 10962 transitions.
[2020-11-25 08:48:32,353 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9351 to 9343.
[2020-11-25 08:48:32,353 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9343 states.
[2020-11-25 08:48:32,364 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9343 states to 9343 states and 10954 transitions.
[2020-11-25 08:48:32,364 INFO  L751         BuchiCegarLoop]: Abstraction has 9343 states and 10954 transitions.
[2020-11-25 08:48:32,364 INFO  L631         BuchiCegarLoop]: Abstraction has 9343 states and 10954 transitions.
[2020-11-25 08:48:32,364 INFO  L445         BuchiCegarLoop]: ======== Iteration 27============
[2020-11-25 08:48:32,364 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9343 states and 10954 transitions.
[2020-11-25 08:48:32,373 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 08:48:32,373 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:48:32,373 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:48:32,375 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:48:32,375 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ERC20Pausable0 := false;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND FALSE  !(choice == 18)
[L11096]  COND FALSE  !(choice == 17)
[L11103]  COND FALSE  !(choice == 16)
[L11110]  COND FALSE  !(choice == 15)
[L11116]  COND FALSE  !(choice == 14)
[L11122]  COND FALSE  !(choice == 13)
[L11128]  COND FALSE  !(choice == 12)
[L11134]  COND FALSE  !(choice == 11)
[L11140]  COND FALSE  !(choice == 10)
[L11146]  COND FALSE  !(choice == 9)
[L11152]  COND FALSE  !(choice == 8)
[L11158]  COND FALSE  !(choice == 7)
[L11164]  COND FALSE  !(choice == 6)
[L11170]  COND FALSE  !(choice == 5)
[L11176]  COND FALSE  !(choice == 4)
[L11182]  COND FALSE  !(choice == 3)
[L11189]  COND FALSE  !(choice == 2)
[L11196]  COND TRUE   choice == 1
[L11197]              gas := gas - 21000;
[L11198]  COND TRUE   gas >= 0
[L11199]              assume amount_s1268 >= 0 && amount_s1268 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11200]              assume msgvalue_MSG == 0;
[L11201]  CALL        call burnFrom~address~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L3049]               havoc __exception;
[L3050]               revert := false;
[L3051]   COND FALSE  !(__exception)
[L3079]   CALL        call burnFrom~address~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L7040]   COND TRUE   DType[this] == Wafl
[L7041]   CALL        call _burnFrom~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L5649]   COND FALSE  !(DType[this] == Wafl)
[L5654]   COND FALSE  !(DType[this] == ERC20Burnable)
[L5659]   COND FALSE  !(DType[this] == ERC20Mintable)
[L5664]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5669]   COND TRUE   DType[this] == ERC20
[L5670]   CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s700, amount_s700);
[L5522]               __var_14 := null;
[L5523]   COND FALSE  !(!(account_s630 != null))
[L5527]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s630);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5527]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s630);
[L5528]   COND FALSE  !(revert)
[L5531]               _totalSupply_ERC20[this] := __var_15;
[L5532]   CALL        call __var_16 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s630], value_s630);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5532]   RET         call __var_16 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s630], value_s630);
[L5533]   COND FALSE  !(revert)
[L5536]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s630];
[L5537]               _balances_ERC20[this][account_s630] := __var_16;
[L5538]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s630];
[L5539]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5670]   RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s700, amount_s700);
[L5671]   COND FALSE  !(revert)
[L5677]   CALL        call __var_19 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][account_s700][msgsender_MSG], amount_s700);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5677]   RET         call __var_19 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][account_s700][msgsender_MSG], amount_s700);
[L5678]   COND FALSE  !(revert)
[L5681]   COND FALSE  !(DType[this] == Wafl)
[L5686]   COND FALSE  !(DType[this] == ERC20Burnable)
[L5691]   COND FALSE  !(DType[this] == ERC20Mintable)
[L5696]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5701]   COND TRUE   DType[this] == ERC20
[L5702]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s700, msgsender_MSG, __var_19);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5702]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s700, msgsender_MSG, __var_19);
[L5703]   COND FALSE  !(revert)
[L7041]   RET         call _burnFrom~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L7042]   COND FALSE  !(revert)
[L3079]   RET         call burnFrom~address~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L3080]               assume !revert && gas >= 0;
[L11201]  RET         call burnFrom~address~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L11221]  RET         call CorralChoice_Wafl(this);
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND TRUE   choice == 18
[L11090]              gas := gas - 21000;
[L11091]  COND TRUE   gas >= 0
[L11092]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1061 != to_s1061 && ((value_s1061 > _balances_ERC20[this][from_s1061] || value_s1061 > _allowances_ERC20[this][from_s1061][msgsender_MSG]) || _balances_ERC20[this][to_s1061] + value_s1061 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC20Pausable0 := true;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2226]               havoc __exception;
[L2227]               revert := false;
[L2228]   COND FALSE  !(__exception)
[L2256]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6430]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6430]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L6434]   COND FALSE  !(DType[this] == Wafl)
[L6439]   COND TRUE   DType[this] == ERC20Pausable
[L6440]   CALL        call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L5159]   COND TRUE   DType[this] == Wafl
[L5160]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5160]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5161]   COND FALSE  !(revert)
[L5187]   CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5187]   RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L5188]   COND FALSE  !(revert)
[L5191]   COND TRUE   DType[this] == Wafl
[L5192]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5192]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5193]   COND FALSE  !(revert)
[L5219]               __ret_0_ := true;
[L6440]   RET         call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6441]   COND FALSE  !(revert)
[L6447]               __ret_0_ := __var_28;
[L2256]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2257]               assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND TRUE   choice == 27
[L11034]              gas := gas - 21000;
[L11035]  COND FALSE  !(gas >= 0)
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:48:32,379 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:48:32,379 INFO  L82        PathProgramCache]: Analyzing trace with hash 2090578442, now seen corresponding path program 1 times
[2020-11-25 08:48:32,380 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:48:32,399 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:48:32,647 INFO  L134       CoverageAnalysis]: Checked inductivity of 1105 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1104 trivial. 0 not checked.
[2020-11-25 08:48:32,647 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:48:32,647 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 08:48:32,647 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:48:32,647 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 08:48:32,647 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 08:48:32,648 INFO  L87              Difference]: Start difference. First operand 9343 states and 10954 transitions. cyclomatic complexity: 1621 Second operand 7 states.
[2020-11-25 08:48:32,794 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:48:32,795 INFO  L93              Difference]: Finished difference Result 9395 states and 10998 transitions.
[2020-11-25 08:48:32,795 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 08:48:32,795 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9395 states and 10998 transitions.
[2020-11-25 08:48:32,811 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 08:48:32,828 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9395 states to 9263 states and 10854 transitions.
[2020-11-25 08:48:32,829 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2472
[2020-11-25 08:48:32,830 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2472
[2020-11-25 08:48:32,830 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9263 states and 10854 transitions.
[2020-11-25 08:48:32,835 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:48:32,835 INFO  L728         BuchiCegarLoop]: Abstraction has 9263 states and 10854 transitions.
[2020-11-25 08:48:32,840 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9263 states and 10854 transitions.
[2020-11-25 08:48:32,881 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9263 to 9263.
[2020-11-25 08:48:32,881 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9263 states.
[2020-11-25 08:48:32,892 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9263 states to 9263 states and 10854 transitions.
[2020-11-25 08:48:32,892 INFO  L751         BuchiCegarLoop]: Abstraction has 9263 states and 10854 transitions.
[2020-11-25 08:48:32,892 INFO  L631         BuchiCegarLoop]: Abstraction has 9263 states and 10854 transitions.
[2020-11-25 08:48:32,892 INFO  L445         BuchiCegarLoop]: ======== Iteration 28============
[2020-11-25 08:48:32,892 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9263 states and 10854 transitions.
[2020-11-25 08:48:32,901 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 08:48:32,901 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:48:32,901 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:48:32,902 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:48:32,902 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ERC20Pausable0 := false;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND FALSE  !(choice == 18)
[L11096]  COND FALSE  !(choice == 17)
[L11103]  COND FALSE  !(choice == 16)
[L11110]  COND FALSE  !(choice == 15)
[L11116]  COND FALSE  !(choice == 14)
[L11122]  COND FALSE  !(choice == 13)
[L11128]  COND FALSE  !(choice == 12)
[L11134]  COND FALSE  !(choice == 11)
[L11140]  COND FALSE  !(choice == 10)
[L11146]  COND FALSE  !(choice == 9)
[L11152]  COND FALSE  !(choice == 8)
[L11158]  COND FALSE  !(choice == 7)
[L11164]  COND FALSE  !(choice == 6)
[L11170]  COND FALSE  !(choice == 5)
[L11176]  COND FALSE  !(choice == 4)
[L11182]  COND FALSE  !(choice == 3)
[L11189]  COND FALSE  !(choice == 2)
[L11196]  COND TRUE   choice == 1
[L11197]              gas := gas - 21000;
[L11198]  COND TRUE   gas >= 0
[L11199]              assume amount_s1268 >= 0 && amount_s1268 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11200]              assume msgvalue_MSG == 0;
[L11201]  CALL        call burnFrom~address~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L3049]               havoc __exception;
[L3050]               revert := false;
[L3051]   COND FALSE  !(__exception)
[L3079]   CALL        call burnFrom~address~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L7040]   COND TRUE   DType[this] == Wafl
[L7041]   CALL        call _burnFrom~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L5649]   COND TRUE   DType[this] == Wafl
[L5650]   CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s700, amount_s700);
[L5522]               __var_14 := null;
[L5523]   COND FALSE  !(!(account_s630 != null))
[L5527]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s630);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5527]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s630);
[L5528]   COND FALSE  !(revert)
[L5531]               _totalSupply_ERC20[this] := __var_15;
[L5532]   CALL        call __var_16 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s630], value_s630);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5532]   RET         call __var_16 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s630], value_s630);
[L5533]   COND FALSE  !(revert)
[L5536]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s630];
[L5537]               _balances_ERC20[this][account_s630] := __var_16;
[L5538]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s630];
[L5539]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5650]   RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s700, amount_s700);
[L5651]   COND FALSE  !(revert)
[L5677]   CALL        call __var_19 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][account_s700][msgsender_MSG], amount_s700);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5677]   RET         call __var_19 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][account_s700][msgsender_MSG], amount_s700);
[L5678]   COND FALSE  !(revert)
[L5681]   COND TRUE   DType[this] == Wafl
[L5682]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s700, msgsender_MSG, __var_19);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5682]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s700, msgsender_MSG, __var_19);
[L5683]   COND FALSE  !(revert)
[L7041]   RET         call _burnFrom~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L7042]   COND FALSE  !(revert)
[L3079]   RET         call burnFrom~address~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L3080]               assume !revert && gas >= 0;
[L11201]  RET         call burnFrom~address~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L11221]  RET         call CorralChoice_Wafl(this);
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND TRUE   choice == 18
[L11090]              gas := gas - 21000;
[L11091]  COND TRUE   gas >= 0
[L11092]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1061 != to_s1061 && ((value_s1061 > _balances_ERC20[this][from_s1061] || value_s1061 > _allowances_ERC20[this][from_s1061][msgsender_MSG]) || _balances_ERC20[this][to_s1061] + value_s1061 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC20Pausable0 := true;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2226]               havoc __exception;
[L2227]               revert := false;
[L2228]   COND FALSE  !(__exception)
[L2256]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6430]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6430]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L6434]   COND FALSE  !(DType[this] == Wafl)
[L6439]   COND TRUE   DType[this] == ERC20Pausable
[L6440]   CALL        call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L5159]   COND TRUE   DType[this] == Wafl
[L5160]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5160]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5161]   COND FALSE  !(revert)
[L5187]   CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5187]   RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L5188]   COND FALSE  !(revert)
[L5191]   COND TRUE   DType[this] == Wafl
[L5192]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5192]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5193]   COND FALSE  !(revert)
[L5219]               __ret_0_ := true;
[L6440]   RET         call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6441]   COND FALSE  !(revert)
[L6447]               __ret_0_ := __var_28;
[L2256]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2257]               assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND TRUE   choice == 18
[L11090]              gas := gas - 21000;
[L11091]  COND TRUE   gas >= 0
[L11092]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1061 != to_s1061 && ((value_s1061 > _balances_ERC20[this][from_s1061] || value_s1061 > _allowances_ERC20[this][from_s1061][msgsender_MSG]) || _balances_ERC20[this][to_s1061] + value_s1061 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC20Pausable0 := true;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2226]               havoc __exception;
[L2227]               revert := false;
[L2228]   COND FALSE  !(__exception)
[L2256]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6430]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6430]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L6434]   COND FALSE  !(DType[this] == Wafl)
[L6439]   COND TRUE   DType[this] == ERC20Pausable
[L6440]   CALL        call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L5159]   COND TRUE   DType[this] == Wafl
[L5160]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5160]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5161]   COND FALSE  !(revert)
[L5187]   CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5187]   RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L5188]   COND FALSE  !(revert)
[L5191]   COND TRUE   DType[this] == Wafl
[L5192]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5192]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5193]   COND FALSE  !(revert)
[L5219]               __ret_0_ := true;
[L6440]   RET         call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6441]   COND FALSE  !(revert)
[L6447]               __ret_0_ := __var_28;
[L2256]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2257]               assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:48:32,907 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:48:32,907 INFO  L82        PathProgramCache]: Analyzing trace with hash 116105154, now seen corresponding path program 1 times
[2020-11-25 08:48:32,908 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:48:32,930 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:48:33,193 INFO  L134       CoverageAnalysis]: Checked inductivity of 1105 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1105 trivial. 0 not checked.
[2020-11-25 08:48:33,193 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:48:33,194 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 08:48:33,194 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:48:33,194 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 08:48:33,194 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 08:48:33,194 INFO  L87              Difference]: Start difference. First operand 9263 states and 10854 transitions. cyclomatic complexity: 1601 Second operand 6 states.
[2020-11-25 08:48:33,313 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:48:33,314 INFO  L93              Difference]: Finished difference Result 9331 states and 10920 transitions.
[2020-11-25 08:48:33,314 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 08:48:33,314 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9331 states and 10920 transitions.
[2020-11-25 08:48:33,330 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 08:48:33,348 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9331 states to 9243 states and 10826 transitions.
[2020-11-25 08:48:33,348 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2468
[2020-11-25 08:48:33,349 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2468
[2020-11-25 08:48:33,349 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9243 states and 10826 transitions.
[2020-11-25 08:48:33,354 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:48:33,354 INFO  L728         BuchiCegarLoop]: Abstraction has 9243 states and 10826 transitions.
[2020-11-25 08:48:33,358 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9243 states and 10826 transitions.
[2020-11-25 08:48:33,401 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9243 to 9243.
[2020-11-25 08:48:33,401 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9243 states.
[2020-11-25 08:48:33,411 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9243 states to 9243 states and 10826 transitions.
[2020-11-25 08:48:33,411 INFO  L751         BuchiCegarLoop]: Abstraction has 9243 states and 10826 transitions.
[2020-11-25 08:48:33,411 INFO  L631         BuchiCegarLoop]: Abstraction has 9243 states and 10826 transitions.
[2020-11-25 08:48:33,411 INFO  L445         BuchiCegarLoop]: ======== Iteration 29============
[2020-11-25 08:48:33,411 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9243 states and 10826 transitions.
[2020-11-25 08:48:33,420 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 08:48:33,420 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:48:33,420 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:48:33,422 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:48:33,422 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ERC20Pausable0 := false;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND FALSE  !(choice == 18)
[L11096]  COND FALSE  !(choice == 17)
[L11103]  COND FALSE  !(choice == 16)
[L11110]  COND FALSE  !(choice == 15)
[L11116]  COND FALSE  !(choice == 14)
[L11122]  COND FALSE  !(choice == 13)
[L11128]  COND FALSE  !(choice == 12)
[L11134]  COND FALSE  !(choice == 11)
[L11140]  COND FALSE  !(choice == 10)
[L11146]  COND FALSE  !(choice == 9)
[L11152]  COND FALSE  !(choice == 8)
[L11158]  COND FALSE  !(choice == 7)
[L11164]  COND FALSE  !(choice == 6)
[L11170]  COND FALSE  !(choice == 5)
[L11176]  COND FALSE  !(choice == 4)
[L11182]  COND FALSE  !(choice == 3)
[L11189]  COND FALSE  !(choice == 2)
[L11196]  COND TRUE   choice == 1
[L11197]              gas := gas - 21000;
[L11198]  COND TRUE   gas >= 0
[L11199]              assume amount_s1268 >= 0 && amount_s1268 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11200]              assume msgvalue_MSG == 0;
[L11201]  CALL        call burnFrom~address~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L3049]               havoc __exception;
[L3050]               revert := false;
[L3051]   COND FALSE  !(__exception)
[L3079]   CALL        call burnFrom~address~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L7040]   COND TRUE   DType[this] == Wafl
[L7041]   CALL        call _burnFrom~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L5649]   COND TRUE   DType[this] == Wafl
[L5650]   CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s700, amount_s700);
[L5522]               __var_14 := null;
[L5523]   COND FALSE  !(!(account_s630 != null))
[L5527]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s630);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5527]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s630);
[L5528]   COND FALSE  !(revert)
[L5531]               _totalSupply_ERC20[this] := __var_15;
[L5532]   CALL        call __var_16 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s630], value_s630);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5532]   RET         call __var_16 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s630], value_s630);
[L5533]   COND FALSE  !(revert)
[L5536]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s630];
[L5537]               _balances_ERC20[this][account_s630] := __var_16;
[L5538]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s630];
[L5539]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5650]   RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s700, amount_s700);
[L5651]   COND FALSE  !(revert)
[L5677]   CALL        call __var_19 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][account_s700][msgsender_MSG], amount_s700);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5677]   RET         call __var_19 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][account_s700][msgsender_MSG], amount_s700);
[L5678]   COND FALSE  !(revert)
[L5681]   COND TRUE   DType[this] == Wafl
[L5682]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s700, msgsender_MSG, __var_19);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5682]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s700, msgsender_MSG, __var_19);
[L5683]   COND FALSE  !(revert)
[L7041]   RET         call _burnFrom~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L7042]   COND FALSE  !(revert)
[L3079]   RET         call burnFrom~address~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L3080]               assume !revert && gas >= 0;
[L11201]  RET         call burnFrom~address~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, account_s1268, amount_s1268);
[L11221]  RET         call CorralChoice_Wafl(this);
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND TRUE   choice == 18
[L11090]              gas := gas - 21000;
[L11091]  COND TRUE   gas >= 0
[L11092]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1061 != to_s1061 && ((value_s1061 > _balances_ERC20[this][from_s1061] || value_s1061 > _allowances_ERC20[this][from_s1061][msgsender_MSG]) || _balances_ERC20[this][to_s1061] + value_s1061 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC20Pausable0 := true;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2226]               havoc __exception;
[L2227]               revert := false;
[L2228]   COND FALSE  !(__exception)
[L2256]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6430]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6430]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L6434]   COND TRUE   DType[this] == Wafl
[L6435]   CALL        call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L5159]   COND TRUE   DType[this] == Wafl
[L5160]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5160]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5161]   COND FALSE  !(revert)
[L5187]   CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5187]   RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L5188]   COND FALSE  !(revert)
[L5191]   COND TRUE   DType[this] == Wafl
[L5192]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5192]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5193]   COND FALSE  !(revert)
[L5219]               __ret_0_ := true;
[L6435]   RET         call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6436]   COND FALSE  !(revert)
[L6447]               __ret_0_ := __var_28;
[L2256]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2257]               assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND TRUE   choice == 18
[L11090]              gas := gas - 21000;
[L11091]  COND TRUE   gas >= 0
[L11092]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1061 != to_s1061 && ((value_s1061 > _balances_ERC20[this][from_s1061] || value_s1061 > _allowances_ERC20[this][from_s1061][msgsender_MSG]) || _balances_ERC20[this][to_s1061] + value_s1061 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC20Pausable0 := true;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2226]               havoc __exception;
[L2227]               revert := false;
[L2228]   COND FALSE  !(__exception)
[L2256]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6430]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6430]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L6434]   COND TRUE   DType[this] == Wafl
[L6435]   CALL        call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L5159]   COND TRUE   DType[this] == Wafl
[L5160]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5160]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5161]   COND FALSE  !(revert)
[L5187]   CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5187]   RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L5188]   COND FALSE  !(revert)
[L5191]   COND TRUE   DType[this] == Wafl
[L5192]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5192]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5193]   COND FALSE  !(revert)
[L5219]               __ret_0_ := true;
[L6435]   RET         call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6436]   COND FALSE  !(revert)
[L6447]               __ret_0_ := __var_28;
[L2256]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2257]               assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:48:33,427 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:48:33,427 INFO  L82        PathProgramCache]: Analyzing trace with hash 212288534, now seen corresponding path program 1 times
[2020-11-25 08:48:33,427 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:48:33,470 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:48:34,619 INFO  L134       CoverageAnalysis]: Checked inductivity of 1105 backedges. 34 proven. 5 refuted. 0 times theorem prover too weak. 1066 trivial. 0 not checked.
[2020-11-25 08:48:34,620 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:48:34,620 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [39] total 39
[2020-11-25 08:48:34,620 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:48:34,621 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 40 interpolants.
[2020-11-25 08:48:34,621 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=137, Invalid=1423, Unknown=0, NotChecked=0, Total=1560
[2020-11-25 08:48:34,621 INFO  L87              Difference]: Start difference. First operand 9243 states and 10826 transitions. cyclomatic complexity: 1593 Second operand 40 states.
[2020-11-25 08:48:53,026 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:48:53,027 INFO  L93              Difference]: Finished difference Result 9321 states and 11002 transitions.
[2020-11-25 08:48:53,027 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 38 states. 
[2020-11-25 08:48:53,027 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9321 states and 11002 transitions.
[2020-11-25 08:48:53,045 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 08:48:53,063 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9321 states to 9321 states and 11002 transitions.
[2020-11-25 08:48:53,063 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2488
[2020-11-25 08:48:53,064 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2488
[2020-11-25 08:48:53,064 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9321 states and 11002 transitions.
[2020-11-25 08:48:53,069 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:48:53,069 INFO  L728         BuchiCegarLoop]: Abstraction has 9321 states and 11002 transitions.
[2020-11-25 08:48:53,074 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9321 states and 11002 transitions.
[2020-11-25 08:48:53,116 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9321 to 9253.
[2020-11-25 08:48:53,116 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9253 states.
[2020-11-25 08:48:53,127 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9253 states to 9253 states and 10867 transitions.
[2020-11-25 08:48:53,127 INFO  L751         BuchiCegarLoop]: Abstraction has 9253 states and 10867 transitions.
[2020-11-25 08:48:53,127 INFO  L631         BuchiCegarLoop]: Abstraction has 9253 states and 10867 transitions.
[2020-11-25 08:48:53,127 INFO  L445         BuchiCegarLoop]: ======== Iteration 30============
[2020-11-25 08:48:53,127 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9253 states and 10867 transitions.
[2020-11-25 08:48:53,136 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 08:48:53,136 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:48:53,136 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:48:53,137 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:48:53,137 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ERC20Pausable0 := false;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND TRUE   choice == 18
[L11090]              gas := gas - 21000;
[L11091]  COND TRUE   gas >= 0
[L11092]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((from_s1061 != to_s1061 && ((value_s1061 > _balances_ERC20[this][from_s1061] || value_s1061 > _allowances_ERC20[this][from_s1061][msgsender_MSG]) || _balances_ERC20[this][to_s1061] + value_s1061 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                  revert := revert_hold;
[L2226]               havoc __exception;
[L2227]               revert := false;
[L2228]   COND FALSE  !(__exception)
[L2256]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6430]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6430]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L6434]   COND TRUE   DType[this] == Wafl
[L6435]   CALL        call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L5159]   COND FALSE  !(DType[this] == Wafl)
[L5164]   COND FALSE  !(DType[this] == ERC20Burnable)
[L5169]   COND FALSE  !(DType[this] == ERC20Mintable)
[L5174]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5179]   COND TRUE   DType[this] == ERC20
[L5180]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5180]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5181]   COND FALSE  !(revert)
[L5187]   CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5187]   RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L5188]   COND FALSE  !(revert)
[L5191]   COND FALSE  !(DType[this] == Wafl)
[L5196]   COND FALSE  !(DType[this] == ERC20Burnable)
[L5201]   COND TRUE   DType[this] == ERC20Mintable
[L5202]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5202]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5203]   COND FALSE  !(revert)
[L5219]               __ret_0_ := true;
[L6435]   RET         call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6436]   COND FALSE  !(revert)
[L6447]               __ret_0_ := __var_28;
[L2256]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2257]               assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11221]  RET         call CorralChoice_Wafl(this);
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND TRUE   choice == 18
[L11090]              gas := gas - 21000;
[L11091]  COND TRUE   gas >= 0
[L11092]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1061 != to_s1061 && ((value_s1061 > _balances_ERC20[this][from_s1061] || value_s1061 > _allowances_ERC20[this][from_s1061][msgsender_MSG]) || _balances_ERC20[this][to_s1061] + value_s1061 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC20Pausable0 := true;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2226]               havoc __exception;
[L2227]               revert := false;
[L2228]   COND FALSE  !(__exception)
[L2256]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6430]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6430]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L6434]   COND TRUE   DType[this] == Wafl
[L6435]   CALL        call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L5159]   COND TRUE   DType[this] == Wafl
[L5160]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5160]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5161]   COND FALSE  !(revert)
[L5187]   CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5187]   RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L5188]   COND FALSE  !(revert)
[L5191]   COND TRUE   DType[this] == Wafl
[L5192]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5192]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5193]   COND FALSE  !(revert)
[L5219]               __ret_0_ := true;
[L6435]   RET         call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6436]   COND FALSE  !(revert)
[L6447]               __ret_0_ := __var_28;
[L2256]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2257]               assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND TRUE   choice == 27
[L11034]              gas := gas - 21000;
[L11035]  COND FALSE  !(gas >= 0)
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:48:53,141 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:48:53,141 INFO  L82        PathProgramCache]: Analyzing trace with hash -1888293023, now seen corresponding path program 1 times
[2020-11-25 08:48:53,142 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:48:53,161 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:48:53,415 INFO  L134       CoverageAnalysis]: Checked inductivity of 1114 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1113 trivial. 0 not checked.
[2020-11-25 08:48:53,415 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:48:53,415 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 08:48:53,415 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:48:53,415 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 08:48:53,415 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 08:48:53,416 INFO  L87              Difference]: Start difference. First operand 9253 states and 10867 transitions. cyclomatic complexity: 1626 Second operand 7 states.
[2020-11-25 08:48:53,586 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:48:53,586 INFO  L93              Difference]: Finished difference Result 9357 states and 10973 transitions.
[2020-11-25 08:48:53,586 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 08:48:53,586 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9357 states and 10973 transitions.
[2020-11-25 08:48:53,603 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 08:48:53,620 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9357 states to 9093 states and 10643 transitions.
[2020-11-25 08:48:53,620 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2428
[2020-11-25 08:48:53,621 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2428
[2020-11-25 08:48:53,621 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9093 states and 10643 transitions.
[2020-11-25 08:48:53,626 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:48:53,626 INFO  L728         BuchiCegarLoop]: Abstraction has 9093 states and 10643 transitions.
[2020-11-25 08:48:53,630 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9093 states and 10643 transitions.
[2020-11-25 08:48:53,670 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9093 to 9093.
[2020-11-25 08:48:53,670 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9093 states.
[2020-11-25 08:48:53,681 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9093 states to 9093 states and 10643 transitions.
[2020-11-25 08:48:53,681 INFO  L751         BuchiCegarLoop]: Abstraction has 9093 states and 10643 transitions.
[2020-11-25 08:48:53,681 INFO  L631         BuchiCegarLoop]: Abstraction has 9093 states and 10643 transitions.
[2020-11-25 08:48:53,681 INFO  L445         BuchiCegarLoop]: ======== Iteration 31============
[2020-11-25 08:48:53,681 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9093 states and 10643 transitions.
[2020-11-25 08:48:53,689 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 08:48:53,690 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:48:53,690 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:48:53,691 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:48:53,691 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ERC20Pausable0 := false;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND TRUE   choice == 18
[L11090]              gas := gas - 21000;
[L11091]  COND TRUE   gas >= 0
[L11092]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((from_s1061 != to_s1061 && ((value_s1061 > _balances_ERC20[this][from_s1061] || value_s1061 > _allowances_ERC20[this][from_s1061][msgsender_MSG]) || _balances_ERC20[this][to_s1061] + value_s1061 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                  revert := revert_hold;
[L2226]               havoc __exception;
[L2227]               revert := false;
[L2228]   COND FALSE  !(__exception)
[L2256]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6430]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6430]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L6434]   COND TRUE   DType[this] == Wafl
[L6435]   CALL        call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L5159]   COND TRUE   DType[this] == Wafl
[L5160]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5160]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5161]   COND FALSE  !(revert)
[L5187]   CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5187]   RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L5188]   COND FALSE  !(revert)
[L5191]   COND TRUE   DType[this] == Wafl
[L5192]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5192]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5193]   COND FALSE  !(revert)
[L5219]               __ret_0_ := true;
[L6435]   RET         call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6436]   COND FALSE  !(revert)
[L6447]               __ret_0_ := __var_28;
[L2256]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2257]               assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11221]  RET         call CorralChoice_Wafl(this);
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND TRUE   choice == 18
[L11090]              gas := gas - 21000;
[L11091]  COND TRUE   gas >= 0
[L11092]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1061 != to_s1061 && ((value_s1061 > _balances_ERC20[this][from_s1061] || value_s1061 > _allowances_ERC20[this][from_s1061][msgsender_MSG]) || _balances_ERC20[this][to_s1061] + value_s1061 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC20Pausable0 := true;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2226]               havoc __exception;
[L2227]               revert := false;
[L2228]   COND FALSE  !(__exception)
[L2256]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6430]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6430]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L6434]   COND TRUE   DType[this] == Wafl
[L6435]   CALL        call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L5159]   COND TRUE   DType[this] == Wafl
[L5160]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5160]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5161]   COND FALSE  !(revert)
[L5187]   CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5187]   RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L5188]   COND FALSE  !(revert)
[L5191]   COND TRUE   DType[this] == Wafl
[L5192]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5192]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5193]   COND FALSE  !(revert)
[L5219]               __ret_0_ := true;
[L6435]   RET         call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6436]   COND FALSE  !(revert)
[L6447]               __ret_0_ := __var_28;
[L2256]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2257]               assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND TRUE   choice == 18
[L11090]              gas := gas - 21000;
[L11091]  COND TRUE   gas >= 0
[L11092]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1061 != to_s1061 && ((value_s1061 > _balances_ERC20[this][from_s1061] || value_s1061 > _allowances_ERC20[this][from_s1061][msgsender_MSG]) || _balances_ERC20[this][to_s1061] + value_s1061 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC20Pausable0 := true;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2226]               havoc __exception;
[L2227]               revert := false;
[L2228]   COND FALSE  !(__exception)
[L2256]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6430]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6430]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L6434]   COND TRUE   DType[this] == Wafl
[L6435]   CALL        call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L5159]   COND TRUE   DType[this] == Wafl
[L5160]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5160]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5161]   COND FALSE  !(revert)
[L5187]   CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5187]   RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L5188]   COND FALSE  !(revert)
[L5191]   COND TRUE   DType[this] == Wafl
[L5192]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5192]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5193]   COND FALSE  !(revert)
[L5219]               __ret_0_ := true;
[L6435]   RET         call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6436]   COND FALSE  !(revert)
[L6447]               __ret_0_ := __var_28;
[L2256]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2257]               assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:48:53,696 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:48:53,696 INFO  L82        PathProgramCache]: Analyzing trace with hash 1880821055, now seen corresponding path program 1 times
[2020-11-25 08:48:53,697 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:48:53,728 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:48:54,567 INFO  L134       CoverageAnalysis]: Checked inductivity of 1114 backedges. 28 proven. 3 refuted. 0 times theorem prover too weak. 1083 trivial. 0 not checked.
[2020-11-25 08:48:54,568 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:48:54,568 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [31] total 31
[2020-11-25 08:48:54,568 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:48:54,568 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 32 interpolants.
[2020-11-25 08:48:54,569 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=103, Invalid=889, Unknown=0, NotChecked=0, Total=992
[2020-11-25 08:48:54,569 INFO  L87              Difference]: Start difference. First operand 9093 states and 10643 transitions. cyclomatic complexity: 1562 Second operand 32 states.
[2020-11-25 08:49:10,951 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:49:10,951 INFO  L93              Difference]: Finished difference Result 9157 states and 10770 transitions.
[2020-11-25 08:49:10,951 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 28 states. 
[2020-11-25 08:49:10,951 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9157 states and 10770 transitions.
[2020-11-25 08:49:10,970 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 08:49:10,988 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9157 states to 9157 states and 10770 transitions.
[2020-11-25 08:49:10,988 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2444
[2020-11-25 08:49:10,989 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2444
[2020-11-25 08:49:10,989 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9157 states and 10770 transitions.
[2020-11-25 08:49:10,994 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:49:10,994 INFO  L728         BuchiCegarLoop]: Abstraction has 9157 states and 10770 transitions.
[2020-11-25 08:49:10,999 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9157 states and 10770 transitions.
[2020-11-25 08:49:11,040 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9157 to 9099.
[2020-11-25 08:49:11,040 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9099 states.
[2020-11-25 08:49:11,052 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9099 states to 9099 states and 10670 transitions.
[2020-11-25 08:49:11,052 INFO  L751         BuchiCegarLoop]: Abstraction has 9099 states and 10670 transitions.
[2020-11-25 08:49:11,052 INFO  L631         BuchiCegarLoop]: Abstraction has 9099 states and 10670 transitions.
[2020-11-25 08:49:11,052 INFO  L445         BuchiCegarLoop]: ======== Iteration 32============
[2020-11-25 08:49:11,052 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9099 states and 10670 transitions.
[2020-11-25 08:49:11,061 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 08:49:11,061 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:49:11,061 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:49:11,063 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:49:11,063 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ERC20Pausable0 := false;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND TRUE   choice == 27
[L11034]              gas := gas - 21000;
[L11035]  COND TRUE   gas >= 0
[L11036]              assume msgvalue_MSG == 0;
[L11037]  CALL        call __ret_0_owner := owner_Ownable(this, msgsender_MSG, msgvalue_MSG);
[L231]                havoc __exception;
[L232]                revert := false;
[L233]    COND TRUE   __exception
[L234]                __tmp__Balance := Balance;
[L235]                __tmp__DType := DType;
[L236]                __tmp__Alloc := Alloc;
[L237]                __tmp__balance_ADDR := balance_ADDR;
[L238]                __tmp__M_Ref_int := M_Ref_int;
[L239]                __tmp__sum__balances0 := sum__balances0;
[L240]                __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L241]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L242]                __tmp__sum__allowances1 := sum__allowances1;
[L243]                __tmp__M_Ref_bool := M_Ref_bool;
[L244]                __tmp__sum := sum;
[L245]                __tmp__Length := Length;
[L246]                __tmp__now := now;
[L247]                __tmp___owner_Ownable := _owner_Ownable;
[L248]                __tmp___balances_ERC20 := _balances_ERC20;
[L249]                __tmp___allowances_ERC20 := _allowances_ERC20;
[L250]                __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L251]                __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L252]                __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L253]                __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L254]                __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L255]                __tmp___pausers_PauserRole := _pausers_PauserRole;
[L256]                __tmp___paused_Pausable := _paused_Pausable;
[L257]                __tmp___minters_MinterRole := _minters_MinterRole;
[L258]    CALL        call __ret_0_ := owner_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4725]               __ret_0_ := __tmp___owner_Ownable[this];
[L258]    RET         call __ret_0_ := owner_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L259]                assume revert || gas < 0;
[L11037]  RET         call __ret_0_owner := owner_Ownable(this, msgsender_MSG, msgvalue_MSG);
[L11221]  RET         call CorralChoice_Wafl(this);
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND FALSE  !(__exception)
[L2188]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6380]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6380]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6381]   COND FALSE  !(revert)
[L6384]   COND TRUE   DType[this] == Wafl
[L6385]   CALL        call __var_26 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L4977]   COND TRUE   DType[this] == Wafl
[L4978]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L4978]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L4979]   COND FALSE  !(revert)
[L5005]               __ret_0_ := true;
[L6385]   RET         call __var_26 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6386]   COND FALSE  !(revert)
[L6397]               __ret_0_ := __var_26;
[L2188]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2189]               assume !revert && gas >= 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND TRUE   choice == 19
[L11083]              gas := gas - 21000;
[L11084]  COND TRUE   gas >= 0
[L11085]              assume value_s1079 >= 0 && value_s1079 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11086]              assume msgvalue_MSG == 0;
[L11087]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s1079, value_s1079);
[L2292]               havoc __exception;
[L2293]               revert := false;
[L2294]   COND FALSE  !(__exception)
[L2322]   CALL        call __ret_0_ := approve~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, spender_s1079, value_s1079);
[L6480]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6480]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6481]   COND FALSE  !(revert)
[L6484]   COND TRUE   DType[this] == Wafl
[L6485]   CALL        call __var_30 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s1079, value_s1079);
[L5057]   COND TRUE   DType[this] == Wafl
[L5058]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s399, value_s399);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5058]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s399, value_s399);
[L5059]   COND FALSE  !(revert)
[L5085]               __ret_0_ := true;
[L6485]   RET         call __var_30 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s1079, value_s1079);
[L6486]   COND FALSE  !(revert)
[L6497]               __ret_0_ := __var_30;
[L2322]   RET         call __ret_0_ := approve~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, spender_s1079, value_s1079);
[L2323]               assume !revert && gas >= 0;
[L11087]  RET         call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s1079, value_s1079);
[L11221]  RET         call CorralChoice_Wafl(this);
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND TRUE   choice == 18
[L11090]              gas := gas - 21000;
[L11091]  COND TRUE   gas >= 0
[L11092]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1061 != to_s1061 && ((value_s1061 > _balances_ERC20[this][from_s1061] || value_s1061 > _allowances_ERC20[this][from_s1061][msgsender_MSG]) || _balances_ERC20[this][to_s1061] + value_s1061 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC20Pausable0 := true;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2226]               havoc __exception;
[L2227]               revert := false;
[L2228]   COND FALSE  !(__exception)
[L2256]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6430]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6430]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L6434]   COND TRUE   DType[this] == Wafl
[L6435]   CALL        call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L5159]   COND TRUE   DType[this] == Wafl
[L5160]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5160]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5161]   COND FALSE  !(revert)
[L5187]   CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5187]   RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L5188]   COND FALSE  !(revert)
[L5191]   COND TRUE   DType[this] == Wafl
[L5192]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5192]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5193]   COND FALSE  !(revert)
[L5219]               __ret_0_ := true;
[L6435]   RET         call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6436]   COND FALSE  !(revert)
[L6447]               __ret_0_ := __var_28;
[L2256]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2257]               assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND TRUE   choice == 27
[L11034]              gas := gas - 21000;
[L11035]  COND TRUE   gas >= 0
[L11036]              assume msgvalue_MSG == 0;
[L11037]  CALL        call __ret_0_owner := owner_Ownable(this, msgsender_MSG, msgvalue_MSG);
[L231]                havoc __exception;
[L232]                revert := false;
[L233]    COND FALSE  !(__exception)
[L261]    CALL        call __ret_0_ := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4731]               __ret_0_ := _owner_Ownable[this];
[L261]    RET         call __ret_0_ := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L262]                assume !revert && gas >= 0;
[L11037]  RET         call __ret_0_owner := owner_Ownable(this, msgsender_MSG, msgvalue_MSG);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:49:11,068 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:49:11,068 INFO  L82        PathProgramCache]: Analyzing trace with hash -1509392087, now seen corresponding path program 1 times
[2020-11-25 08:49:11,069 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:49:11,090 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:49:11,484 INFO  L134       CoverageAnalysis]: Checked inductivity of 1478 backedges. 3 proven. 4 refuted. 0 times theorem prover too weak. 1471 trivial. 0 not checked.
[2020-11-25 08:49:11,484 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:49:11,484 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [5] total 5
[2020-11-25 08:49:11,485 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:49:11,485 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 08:49:11,485 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=8, Invalid=12, Unknown=0, NotChecked=0, Total=20
[2020-11-25 08:49:11,485 INFO  L87              Difference]: Start difference. First operand 9099 states and 10670 transitions. cyclomatic complexity: 1585 Second operand 5 states.
[2020-11-25 08:49:12,890 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:49:12,890 INFO  L93              Difference]: Finished difference Result 9629 states and 11324 transitions.
[2020-11-25 08:49:12,890 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 08:49:12,890 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9629 states and 11324 transitions.
[2020-11-25 08:49:12,912 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 12
[2020-11-25 08:49:12,933 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9629 states to 8564 states and 10158 transitions.
[2020-11-25 08:49:12,933 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1896
[2020-11-25 08:49:12,934 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1896
[2020-11-25 08:49:12,934 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8564 states and 10158 transitions.
[2020-11-25 08:49:12,940 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:49:12,940 INFO  L728         BuchiCegarLoop]: Abstraction has 8564 states and 10158 transitions.
[2020-11-25 08:49:12,944 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8564 states and 10158 transitions.
[2020-11-25 08:49:12,974 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8564 to 5174.
[2020-11-25 08:49:12,974 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5174 states.
[2020-11-25 08:49:12,979 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5174 states to 5174 states and 5927 transitions.
[2020-11-25 08:49:12,979 INFO  L751         BuchiCegarLoop]: Abstraction has 5174 states and 5927 transitions.
[2020-11-25 08:49:12,980 INFO  L631         BuchiCegarLoop]: Abstraction has 5174 states and 5927 transitions.
[2020-11-25 08:49:12,980 INFO  L445         BuchiCegarLoop]: ======== Iteration 33============
[2020-11-25 08:49:12,980 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5174 states and 5927 transitions.
[2020-11-25 08:49:12,985 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:49:12,985 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:49:12,985 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:49:12,986 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:49:12,986 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ERC20Pausable0 := false;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND FALSE  !(__exception)
[L2188]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6380]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6380]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6381]   COND FALSE  !(revert)
[L6384]   COND TRUE   DType[this] == Wafl
[L6385]   CALL        call __var_26 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L4977]   COND TRUE   DType[this] == Wafl
[L4978]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L4978]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L4979]   COND FALSE  !(revert)
[L5005]               __ret_0_ := true;
[L6385]   RET         call __var_26 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6386]   COND FALSE  !(revert)
[L6397]               __ret_0_ := __var_26;
[L2188]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2189]               assume !revert && gas >= 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND TRUE   choice == 19
[L11083]              gas := gas - 21000;
[L11084]  COND TRUE   gas >= 0
[L11085]              assume value_s1079 >= 0 && value_s1079 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11086]              assume msgvalue_MSG == 0;
[L11087]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s1079, value_s1079);
[L2292]               havoc __exception;
[L2293]               revert := false;
[L2294]   COND FALSE  !(__exception)
[L2322]   CALL        call __ret_0_ := approve~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, spender_s1079, value_s1079);
[L6480]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6480]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6481]   COND FALSE  !(revert)
[L6484]   COND TRUE   DType[this] == Wafl
[L6485]   CALL        call __var_30 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s1079, value_s1079);
[L5057]   COND TRUE   DType[this] == Wafl
[L5058]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s399, value_s399);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5058]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s399, value_s399);
[L5059]   COND FALSE  !(revert)
[L5085]               __ret_0_ := true;
[L6485]   RET         call __var_30 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s1079, value_s1079);
[L6486]   COND FALSE  !(revert)
[L6497]               __ret_0_ := __var_30;
[L2322]   RET         call __ret_0_ := approve~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, spender_s1079, value_s1079);
[L2323]               assume !revert && gas >= 0;
[L11087]  RET         call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s1079, value_s1079);
[L11221]  RET         call CorralChoice_Wafl(this);
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND FALSE  !(choice == 21)
[L11076]  COND FALSE  !(choice == 20)
[L11082]  COND FALSE  !(choice == 19)
[L11089]  COND TRUE   choice == 18
[L11090]              gas := gas - 21000;
[L11091]  COND TRUE   gas >= 0
[L11092]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1061 != to_s1061 && ((value_s1061 > _balances_ERC20[this][from_s1061] || value_s1061 > _allowances_ERC20[this][from_s1061][msgsender_MSG]) || _balances_ERC20[this][to_s1061] + value_s1061 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC20Pausable0 := true;
[L2]                  call_transferFrom_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2226]               havoc __exception;
[L2227]               revert := false;
[L2228]   COND FALSE  !(__exception)
[L2256]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6430]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6430]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L6434]   COND TRUE   DType[this] == Wafl
[L6435]   CALL        call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L5159]   COND TRUE   DType[this] == Wafl
[L5160]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5160]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5161]   COND FALSE  !(revert)
[L5187]   CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5187]   RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s434][msgsender_MSG], amount_s434);
[L5188]   COND FALSE  !(revert)
[L5191]   COND TRUE   DType[this] == Wafl
[L5192]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5565]               __var_17 := null;
[L5566]   COND FALSE  !(!(owner_s672 != null))
[L5570]               __var_18 := null;
[L5571]   COND FALSE  !(!(spender_s672 != null))
[L5575]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] - _allowances_ERC20[this][owner_s672][spender_s672];
[L5576]               _allowances_ERC20[this][owner_s672][spender_s672] := value_s672;
[L5577]               sum__allowances1[owner_s672] := sum__allowances1[owner_s672] + _allowances_ERC20[this][owner_s672][spender_s672];
[L5578]               assert { :EventEmitted "Approval_ERC20" } true;
[L5192]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s434, msgsender_MSG, __var_4);
[L5193]   COND FALSE  !(revert)
[L5219]               __ret_0_ := true;
[L6435]   RET         call __var_28 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6436]   COND FALSE  !(revert)
[L6447]               __ret_0_ := __var_28;
[L2256]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2257]               assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND TRUE   choice == 27
[L11034]              gas := gas - 21000;
[L11035]  COND FALSE  !(gas >= 0)
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:49:12,991 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:49:12,991 INFO  L82        PathProgramCache]: Analyzing trace with hash -1277789825, now seen corresponding path program 1 times
[2020-11-25 08:49:12,992 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:49:13,025 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:49:13,487 INFO  L134       CoverageAnalysis]: Checked inductivity of 1259 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1259 trivial. 0 not checked.
[2020-11-25 08:49:13,488 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:49:13,488 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [16] imperfect sequences [] total 16
[2020-11-25 08:49:13,488 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:49:13,488 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-25 08:49:13,488 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=36, Invalid=204, Unknown=0, NotChecked=0, Total=240
[2020-11-25 08:49:13,489 INFO  L87              Difference]: Start difference. First operand 5174 states and 5927 transitions. cyclomatic complexity: 760 Second operand 16 states.
[2020-11-25 08:49:17,408 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:49:17,409 INFO  L93              Difference]: Finished difference Result 2946 states and 3358 transitions.
[2020-11-25 08:49:17,409 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-11-25 08:49:17,409 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2946 states and 3358 transitions.
[2020-11-25 08:49:17,414 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 08:49:17,414 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2946 states to 0 states and 0 transitions.
[2020-11-25 08:49:17,414 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 08:49:17,414 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 08:49:17,414 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 08:49:17,414 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:49:17,414 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 08:49:17,414 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 08:49:17,414 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 08:49:17,414 INFO  L445         BuchiCegarLoop]: ======== Iteration 34============
[2020-11-25 08:49:17,414 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 08:49:17,414 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 08:49:17,414 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 08:49:17,417 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 08:49:17 BasicIcfg
[2020-11-25 08:49:17,417 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 08:49:17,418 INFO  L168              Benchmark]: Toolchain (without parser) took 91709.37 ms. Allocated memory was 1.0 GB in the beginning and 5.0 GB in the end (delta: 3.9 GB). Free memory was 919.1 MB in the beginning and 3.6 GB in the end (delta: -2.7 GB). Peak memory consumption was 1.2 GB. Max. memory is 15.3 GB.
[2020-11-25 08:49:17,419 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 08:49:17,419 INFO  L168              Benchmark]: Boogie Preprocessor took 170.46 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 897.2 MB in the end (delta: 21.9 MB). Peak memory consumption was 21.9 MB. Max. memory is 15.3 GB.
[2020-11-25 08:49:17,419 INFO  L168              Benchmark]: UtopiaSpecLang took 86.74 ms. Allocated memory is still 1.0 GB. Free memory was 897.2 MB in the beginning and 886.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 08:49:17,419 INFO  L168              Benchmark]: Boogie Printer took 29.32 ms. Allocated memory is still 1.0 GB. Free memory was 886.5 MB in the beginning and 881.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 08:49:17,420 INFO  L168              Benchmark]: RCFGBuilder took 1496.40 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 71.3 MB). Free memory was 881.1 MB in the beginning and 778.1 MB in the end (delta: 103.0 MB). Peak memory consumption was 174.3 MB. Max. memory is 15.3 GB.
[2020-11-25 08:49:17,420 INFO  L168              Benchmark]: UtopiaLTL2Aut took 34.65 ms. Allocated memory is still 1.1 GB. Free memory was 778.1 MB in the beginning and 764.9 MB in the end (delta: 13.2 MB). Peak memory consumption was 13.2 MB. Max. memory is 15.3 GB.
[2020-11-25 08:49:17,420 INFO  L168              Benchmark]: BÃ¼chi Program Product took 3472.01 ms. Allocated memory was 1.1 GB in the beginning and 1.6 GB in the end (delta: 454.0 MB). Free memory was 764.9 MB in the beginning and 912.3 MB in the end (delta: -147.4 MB). Peak memory consumption was 342.7 MB. Max. memory is 15.3 GB.
[2020-11-25 08:49:17,420 INFO  L168              Benchmark]: BlockEncodingV2 took 287.46 ms. Allocated memory is still 1.6 GB. Free memory was 912.3 MB in the beginning and 768.9 MB in the end (delta: 143.4 MB). Peak memory consumption was 143.4 MB. Max. memory is 15.3 GB.
[2020-11-25 08:49:17,421 INFO  L168              Benchmark]: BuchiAutomizer took 86129.30 ms. Allocated memory was 1.6 GB in the beginning and 5.0 GB in the end (delta: 3.4 GB). Free memory was 768.9 MB in the beginning and 3.6 GB in the end (delta: -2.9 GB). Peak memory consumption was 537.2 MB. Max. memory is 15.3 GB.
[2020-11-25 08:49:17,423 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    10760 locations, 20065 edges
  - StatisticsResult: Encoded RCFG
    10540 locations, 19475 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 170.46 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 897.2 MB in the end (delta: 21.9 MB). Peak memory consumption was 21.9 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 86.74 ms. Allocated memory is still 1.0 GB. Free memory was 897.2 MB in the beginning and 886.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 29.32 ms. Allocated memory is still 1.0 GB. Free memory was 886.5 MB in the beginning and 881.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1496.40 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 71.3 MB). Free memory was 881.1 MB in the beginning and 778.1 MB in the end (delta: 103.0 MB). Peak memory consumption was 174.3 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 34.65 ms. Allocated memory is still 1.1 GB. Free memory was 778.1 MB in the beginning and 764.9 MB in the end (delta: 13.2 MB). Peak memory consumption was 13.2 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 3472.01 ms. Allocated memory was 1.1 GB in the beginning and 1.6 GB in the end (delta: 454.0 MB). Free memory was 764.9 MB in the beginning and 912.3 MB in the end (delta: -147.4 MB). Peak memory consumption was 342.7 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 287.46 ms. Allocated memory is still 1.6 GB. Free memory was 912.3 MB in the beginning and 768.9 MB in the end (delta: 143.4 MB). Peak memory consumption was 143.4 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 86129.30 ms. Allocated memory was 1.6 GB in the beginning and 5.0 GB in the end (delta: 3.4 GB). Free memory was 768.9 MB in the beginning and 3.6 GB in the end (delta: -2.9 GB). Peak memory consumption was 537.2 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    4155 locations, 6109 edges
  - StatisticsResult: BuchiProgram size
    10760 locations, 20065 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 33 terminating modules (33 trivial, 0 deterministic, 0 nondeterministic). 33 modules have a trivial ranking function, the largest among these consists of 40 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 86.0s and 34 iterations.  TraceHistogramMax:9. Analysis of lassos took 10.7s. Construction of modules took 55.2s. BÃ¼chi inclusion checks took 15.8s. Highest rank in rank-based complementation 0. Minimization of det autom 33. Minimization of nondet autom 0. Automata minimization 2.0s AutomataMinimizationTime, 32 MinimizatonAttempts, 6361 StatesRemovedByMinimization, 18 NontrivialMinimizations. Non-live state removal took 1.2s Buchi closure took 0.0s. Biggest automaton had 9459 states and ocurred in iteration 19.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 230075 SDtfs, 125097 SDslu, 964720 SDs, 0 SdLazy, 534312 SolverSat, 17754 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 55.2s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU33 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_ERC20Pausable0) ==> ( <>(fail_transferFrom_ERC20Pausable0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
