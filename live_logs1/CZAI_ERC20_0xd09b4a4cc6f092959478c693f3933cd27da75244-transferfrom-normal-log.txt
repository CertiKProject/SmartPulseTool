This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 13:02:07,223 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 13:02:07,224 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 13:02:07,231 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 13:02:07,231 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 13:02:07,232 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 13:02:07,232 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 13:02:07,233 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 13:02:07,234 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 13:02:07,235 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 13:02:07,235 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 13:02:07,235 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 13:02:07,236 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 13:02:07,236 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 13:02:07,237 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 13:02:07,237 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 13:02:07,238 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 13:02:07,238 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 13:02:07,239 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 13:02:07,240 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 13:02:07,241 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 13:02:07,241 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 13:02:07,243 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 13:02:07,243 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 13:02:07,243 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 13:02:07,244 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 13:02:07,244 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 13:02:07,244 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 13:02:07,245 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 13:02:07,245 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 13:02:07,245 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 13:02:07,245 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 13:02:07,246 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 13:02:07,246 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 13:02:07,247 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 13:02:07,247 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 13:02:07,247 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 13:02:07,247 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 13:02:07,247 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 13:02:07,248 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 13:02:07,248 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 13:02:07,248 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 13:02:07,256 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 13:02:07,256 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 13:02:07,257 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 13:02:07,257 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 13:02:07,257 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 13:02:07,257 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 13:02:07,257 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 13:02:07,257 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 13:02:07,257 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 13:02:07,258 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 13:02:07,258 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 13:02:07,258 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 13:02:07,258 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 13:02:07,258 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 13:02:07,258 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 13:02:07,258 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 13:02:07,258 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 13:02:07,258 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 13:02:07,258 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 13:02:07,259 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 13:02:07,259 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 13:02:07,259 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 13:02:07,259 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 13:02:07,259 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 13:02:07,259 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 13:02:07,259 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 13:02:07,277 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 13:02:07,292 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 13:02:07,296 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 13:02:07,297 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 13:02:07,297 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 13:02:07,298 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/CZAI_ERC20_0xd09b4a4cc6f092959478c693f3933cd27da75244_transferfrom-normal.bpl
[2020-11-25 13:02:07,298 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/CZAI_ERC20_0xd09b4a4cc6f092959478c693f3933cd27da75244_transferfrom-normal.bpl'
[2020-11-25 13:02:07,402 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 13:02:07,404 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 13:02:07,404 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 13:02:07,405 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 13:02:07,405 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 13:02:07,421 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "CZAI_ERC20_0xd09b4a4cc6f092959478c693f3933cd27da75244_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:02:07" (1/1) ...
[2020-11-25 13:02:07,423 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "CZAI_ERC20_0xd09b4a4cc6f092959478c693f3933cd27da75244_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:02:07" (1/1) ...
[2020-11-25 13:02:07,458 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "CZAI_ERC20_0xd09b4a4cc6f092959478c693f3933cd27da75244_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:02:07" (1/1) ...
[2020-11-25 13:02:07,458 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "CZAI_ERC20_0xd09b4a4cc6f092959478c693f3933cd27da75244_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:02:07" (1/1) ...
[2020-11-25 13:02:07,483 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "CZAI_ERC20_0xd09b4a4cc6f092959478c693f3933cd27da75244_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:02:07" (1/1) ...
[2020-11-25 13:02:07,495 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "CZAI_ERC20_0xd09b4a4cc6f092959478c693f3933cd27da75244_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:02:07" (1/1) ...
[2020-11-25 13:02:07,506 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "CZAI_ERC20_0xd09b4a4cc6f092959478c693f3933cd27da75244_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:02:07" (1/1) ...
[2020-11-25 13:02:07,519 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 13:02:07,520 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 13:02:07,520 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 13:02:07,522 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 13:02:07,526 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "CZAI_ERC20_0xd09b4a4cc6f092959478c693f3933cd27da75244_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:02:07" (1/1) ...
[2020-11-25 13:02:07,547 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(TokenERC20.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_TokenERC20[this][from] && value <= allowed_TokenERC20[this][from][msg.sender] && balances_TokenERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][to] >= 0 && balances_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][from] >= 0 &&  balances_TokenERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_TokenERC20[this][from][msg.sender] >= 0 && allowed_TokenERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transferFrom(from, to, value), return == true && balances_TokenERC20[this][from] == old(balances_TokenERC20[this][from]) - value && balances_TokenERC20[this][to] == old(balances_TokenERC20[this][to]) + value && allowed_TokenERC20[this][from][msg.sender] == old(allowed_TokenERC20[this][from][msg.sender]) - value && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this]) && balances_TokenERC20[this][p1] == old(balances_TokenERC20[this][p1]) && allowed_TokenERC20[this][p2][p3] == old(allowed_TokenERC20[this][p2][p3]) && aSBlock_CZAI_ERC20[this] == old(aSBlock_CZAI_ERC20[this]) && aEBlock_CZAI_ERC20[this] == old(aEBlock_CZAI_ERC20[this]) && aCap_CZAI_ERC20[this] == old(aCap_CZAI_ERC20[this]) && aTot_CZAI_ERC20[this] == old(aTot_CZAI_ERC20[this]) && aAmt_CZAI_ERC20[this] == old(aAmt_CZAI_ERC20[this]) && sSBlock_CZAI_ERC20[this] == old(sSBlock_CZAI_ERC20[this]) && sEBlock_CZAI_ERC20[this] == old(sEBlock_CZAI_ERC20[this]) && sCap_CZAI_ERC20[this] == old(sCap_CZAI_ERC20[this]) && sTot_CZAI_ERC20[this] == old(sTot_CZAI_ERC20[this]) && sChunk_CZAI_ERC20[this] == old(sChunk_CZAI_ERC20[this]) && sPrice_CZAI_ERC20[this] == old(sPrice_CZAI_ERC20[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 13:02:07,553 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(TokenERC20.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_TokenERC20[this][from] && value <= allowed_TokenERC20[this][from][msg.sender] && balances_TokenERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][to] >= 0 && balances_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][from] >= 0 &&  balances_TokenERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_TokenERC20[this][from][msg.sender] >= 0 && allowed_TokenERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transferFrom(from, to, value), return == true && balances_TokenERC20[this][from] == old(balances_TokenERC20[this][from]) - value && balances_TokenERC20[this][to] == old(balances_TokenERC20[this][to]) + value && allowed_TokenERC20[this][from][msg.sender] == old(allowed_TokenERC20[this][from][msg.sender]) - value && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this]) && balances_TokenERC20[this][p1] == old(balances_TokenERC20[this][p1]) && allowed_TokenERC20[this][p2][p3] == old(allowed_TokenERC20[this][p2][p3]) && aSBlock_CZAI_ERC20[this] == old(aSBlock_CZAI_ERC20[this]) && aEBlock_CZAI_ERC20[this] == old(aEBlock_CZAI_ERC20[this]) && aCap_CZAI_ERC20[this] == old(aCap_CZAI_ERC20[this]) && aTot_CZAI_ERC20[this] == old(aTot_CZAI_ERC20[this]) && aAmt_CZAI_ERC20[this] == old(aAmt_CZAI_ERC20[this]) && sSBlock_CZAI_ERC20[this] == old(sSBlock_CZAI_ERC20[this]) && sEBlock_CZAI_ERC20[this] == old(sEBlock_CZAI_ERC20[this]) && sCap_CZAI_ERC20[this] == old(sCap_CZAI_ERC20[this]) && sTot_CZAI_ERC20[this] == old(sTot_CZAI_ERC20[this]) && sChunk_CZAI_ERC20[this] == old(sChunk_CZAI_ERC20[this]) && sPrice_CZAI_ERC20[this] == old(sPrice_CZAI_ERC20[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 13:02:07,562 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(TokenERC20.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_TokenERC20[this][from] && value <= allowed_TokenERC20[this][from][msg.sender] && balances_TokenERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][to] >= 0 && balances_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][from] >= 0 &&  balances_TokenERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_TokenERC20[this][from][msg.sender] >= 0 && allowed_TokenERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transferFrom(from, to, value), return == true && balances_TokenERC20[this][from] == old(balances_TokenERC20[this][from]) - value && balances_TokenERC20[this][to] == old(balances_TokenERC20[this][to]) + value && allowed_TokenERC20[this][from][msg.sender] == old(allowed_TokenERC20[this][from][msg.sender]) - value && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this]) && balances_TokenERC20[this][p1] == old(balances_TokenERC20[this][p1]) && allowed_TokenERC20[this][p2][p3] == old(allowed_TokenERC20[this][p2][p3]) && aSBlock_CZAI_ERC20[this] == old(aSBlock_CZAI_ERC20[this]) && aEBlock_CZAI_ERC20[this] == old(aEBlock_CZAI_ERC20[this]) && aCap_CZAI_ERC20[this] == old(aCap_CZAI_ERC20[this]) && aTot_CZAI_ERC20[this] == old(aTot_CZAI_ERC20[this]) && aAmt_CZAI_ERC20[this] == old(aAmt_CZAI_ERC20[this]) && sSBlock_CZAI_ERC20[this] == old(sSBlock_CZAI_ERC20[this]) && sEBlock_CZAI_ERC20[this] == old(sEBlock_CZAI_ERC20[this]) && sCap_CZAI_ERC20[this] == old(sCap_CZAI_ERC20[this]) && sTot_CZAI_ERC20[this] == old(sTot_CZAI_ERC20[this]) && sChunk_CZAI_ERC20[this] == old(sChunk_CZAI_ERC20[this]) && sPrice_CZAI_ERC20[this] == old(sPrice_CZAI_ERC20[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 13:02:07,571 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( ( ( p1!=from_s468 && p1!=to_s468 ) && ( p2!=from_s468 || p3!=msg.sender ) ) && from_s468!=to_s468 ) && tokens_s468<=balances_TokenERC20[this][from_s468] ) && tokens_s468<=allowed_TokenERC20[this][from_s468][msg.sender] ) && ( balances_TokenERC20[this][to_s468] + tokens_s468 )<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && tokens_s468>=0 ) && tokens_s468<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_TokenERC20[this][to_s468]>=0 ) && balances_TokenERC20[this][to_s468]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_TokenERC20[this][from_s468]>=0 ) && balances_TokenERC20[this][from_s468]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && allowed_TokenERC20[this][from_s468][msg.sender]>=0 ) && allowed_TokenERC20[this][from_s468][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[from_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]],BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[to_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[from_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]],BinaryExpression[COMPNEQ,IdentifierExpression[p3,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]],BinaryExpression[COMPNEQ,IdentifierExpression[from_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],IdentifierExpression[to_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],BinaryExpression[COMPLEQ,IdentifierExpression[tokens_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[from_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]],BinaryExpression[COMPLEQ,IdentifierExpression[tokens_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[from_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]],BinaryExpression[COMPLT,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[to_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IdentifierExpression[tokens_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,IdentifierExpression[tokens_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[tokens_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[to_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[to_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[from_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[from_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[from_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[from_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 13:02:07,576 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( success_s468==true && balances_TokenERC20[this][from_s468]==( ( old(balances_TokenERC20[this][from_s468]) ) - tokens_s468 ) ) && balances_TokenERC20[this][to_s468]==( ( old(balances_TokenERC20[this][to_s468]) ) + tokens_s468 ) ) && allowed_TokenERC20[this][from_s468][msg.sender]==( ( old(allowed_TokenERC20[this][from_s468][msg.sender]) ) - tokens_s468 ) ) && _totalSupply_TokenERC20[this]==( old(_totalSupply_TokenERC20[this]) ) ) && balances_TokenERC20[this][p1]==( old(balances_TokenERC20[this][p1]) ) ) && allowed_TokenERC20[this][p2][p3]==( old(allowed_TokenERC20[this][p2][p3]) ) ) && aSBlock_CZAI_ERC20[this]==( old(aSBlock_CZAI_ERC20[this]) ) ) && aEBlock_CZAI_ERC20[this]==( old(aEBlock_CZAI_ERC20[this]) ) ) && aCap_CZAI_ERC20[this]==( old(aCap_CZAI_ERC20[this]) ) ) && aTot_CZAI_ERC20[this]==( old(aTot_CZAI_ERC20[this]) ) ) && aAmt_CZAI_ERC20[this]==( old(aAmt_CZAI_ERC20[this]) ) ) && sSBlock_CZAI_ERC20[this]==( old(sSBlock_CZAI_ERC20[this]) ) ) && sEBlock_CZAI_ERC20[this]==( old(sEBlock_CZAI_ERC20[this]) ) ) && sCap_CZAI_ERC20[this]==( old(sCap_CZAI_ERC20[this]) ) ) && sTot_CZAI_ERC20[this]==( old(sTot_CZAI_ERC20[this]) ) ) && sChunk_CZAI_ERC20[this]==( old(sChunk_CZAI_ERC20[this]) ) ) && sPrice_CZAI_ERC20[this]==( old(sPrice_CZAI_ERC20[this]) ) ) && symbol_TokenERC20[this]==( old(symbol_TokenERC20[this]) ) ) && name_TokenERC20[this]==( old(name_TokenERC20[this]) ) ) && decimals_TokenERC20[this]==( old(decimals_TokenERC20[this]) ) ) && owner_Owned[this]==( old(owner_Owned[this]) ) ) && newOwner_Owned[this]==( old(newOwner_Owned[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[success_s468,<IMPLEMENTATION_OUTPARAM,transferFrom~address~address~uint256_TokenERC20>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[from_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[from_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]],IdentifierExpression[tokens_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[to_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],BinaryExpression[ARITHPLUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[to_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]],IdentifierExpression[tokens_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[from_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[from_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]],IdentifierExpression[tokens_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[p1,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[p1,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[p2,GLOBAL]]],[IdentifierExpression[p3,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[p2,GLOBAL]]],[IdentifierExpression[p3,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[aSBlock_CZAI_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[aSBlock_CZAI_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[aEBlock_CZAI_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[aEBlock_CZAI_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[aCap_CZAI_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[aCap_CZAI_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[aTot_CZAI_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[aTot_CZAI_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[aAmt_CZAI_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[aAmt_CZAI_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[sSBlock_CZAI_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[sSBlock_CZAI_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[sEBlock_CZAI_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[sEBlock_CZAI_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[sCap_CZAI_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[sCap_CZAI_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[sTot_CZAI_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[sTot_CZAI_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[sChunk_CZAI_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[sChunk_CZAI_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[sPrice_CZAI_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[sPrice_CZAI_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]]
[2020-11-25 13:02:07,584 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(TokenERC20.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_TokenERC20[this][from] && value <= allowed_TokenERC20[this][from][msg.sender] && balances_TokenERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][to] >= 0 && balances_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][from] >= 0 &&  balances_TokenERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_TokenERC20[this][from][msg.sender] >= 0 && allowed_TokenERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transferFrom(from, to, value), return == true && balances_TokenERC20[this][from] == old(balances_TokenERC20[this][from]) - value && balances_TokenERC20[this][to] == old(balances_TokenERC20[this][to]) + value && allowed_TokenERC20[this][from][msg.sender] == old(allowed_TokenERC20[this][from][msg.sender]) - value && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this]) && balances_TokenERC20[this][p1] == old(balances_TokenERC20[this][p1]) && allowed_TokenERC20[this][p2][p3] == old(allowed_TokenERC20[this][p2][p3]) && aSBlock_CZAI_ERC20[this] == old(aSBlock_CZAI_ERC20[this]) && aEBlock_CZAI_ERC20[this] == old(aEBlock_CZAI_ERC20[this]) && aCap_CZAI_ERC20[this] == old(aCap_CZAI_ERC20[this]) && aTot_CZAI_ERC20[this] == old(aTot_CZAI_ERC20[this]) && aAmt_CZAI_ERC20[this] == old(aAmt_CZAI_ERC20[this]) && sSBlock_CZAI_ERC20[this] == old(sSBlock_CZAI_ERC20[this]) && sEBlock_CZAI_ERC20[this] == old(sEBlock_CZAI_ERC20[this]) && sCap_CZAI_ERC20[this] == old(sCap_CZAI_ERC20[this]) && sTot_CZAI_ERC20[this] == old(sTot_CZAI_ERC20[this]) && sChunk_CZAI_ERC20[this] == old(sChunk_CZAI_ERC20[this]) && sPrice_CZAI_ERC20[this] == old(sPrice_CZAI_ERC20[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 13:02:07,584 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_TokenERC200) ==> ( <>AP(success_transferFrom_TokenERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 13:02:07,598 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:02:07 PropertyContainer
[2020-11-25 13:02:07,598 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 13:02:07,598 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 13:02:07,599 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 13:02:07,599 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 13:02:07,599 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "CZAI_ERC20_0xd09b4a4cc6f092959478c693f3933cd27da75244_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:02:07" (1/2) ...
[2020-11-25 13:02:07,600 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 13:02:07,600 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 13:02:07,618 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:02:07" (2/2) ...
[2020-11-25 13:02:07,618 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 13:02:07,619 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 13:02:07,619 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 13:02:07,619 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 13:02:07,620 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "CZAI_ERC20_0xd09b4a4cc6f092959478c693f3933cd27da75244_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:02:07" (1/2) ...
[2020-11-25 13:02:07,675 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 13:02:07,675 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 13:02:07,676 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 13:02:07,676 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 13:02:07,676 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 13:02:07,676 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 13:02:07,676 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 13:02:07,676 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 13:02:07,676 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 13:02:07,676 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface
[2020-11-25 13:02:07,676 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface
[2020-11-25 13:02:07,677 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Interface
[2020-11-25 13:02:07,677 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Interface
[2020-11-25 13:02:07,677 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20Interface
[2020-11-25 13:02:07,677 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Interface
[2020-11-25 13:02:07,677 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Interface
[2020-11-25 13:02:07,677 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Interface
[2020-11-25 13:02:07,677 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 13:02:07,678 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 13:02:07,678 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 13:02:07,678 INFO  L130     BoogieDeclarations]: Found specification of procedure receiveApproval~address~uint256~address~bytes_ApproveAndCallFallBack
[2020-11-25 13:02:07,678 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 13:02:07,678 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned
[2020-11-25 13:02:07,678 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned
[2020-11-25 13:02:07,678 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned
[2020-11-25 13:02:07,678 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned
[2020-11-25 13:02:07,678 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned
[2020-11-25 13:02:07,678 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned
[2020-11-25 13:02:07,678 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned
[2020-11-25 13:02:07,679 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned
[2020-11-25 13:02:07,679 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned
[2020-11-25 13:02:07,679 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned
[2020-11-25 13:02:07,679 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20_NoBaseCtor__success
[2020-11-25 13:02:07,679 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20
[2020-11-25 13:02:07,679 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20
[2020-11-25 13:02:07,679 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20
[2020-11-25 13:02:07,679 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20
[2020-11-25 13:02:07,679 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20
[2020-11-25 13:02:07,679 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20
[2020-11-25 13:02:07,680 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20
[2020-11-25 13:02:07,680 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20
[2020-11-25 13:02:07,680 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20
[2020-11-25 13:02:07,680 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20
[2020-11-25 13:02:07,680 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20
[2020-11-25 13:02:07,680 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20
[2020-11-25 13:02:07,680 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20
[2020-11-25 13:02:07,680 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20
[2020-11-25 13:02:07,680 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20
[2020-11-25 13:02:07,680 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20
[2020-11-25 13:02:07,680 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_TokenERC20__success
[2020-11-25 13:02:07,681 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20
[2020-11-25 13:02:07,681 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20
[2020-11-25 13:02:07,681 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20
[2020-11-25 13:02:07,681 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20
[2020-11-25 13:02:07,681 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20
[2020-11-25 13:02:07,681 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20
[2020-11-25 13:02:07,681 INFO  L130     BoogieDeclarations]: Found specification of procedure CZAI_ERC20_CZAI_ERC20_NoBaseCtor__success
[2020-11-25 13:02:07,681 INFO  L130     BoogieDeclarations]: Found specification of procedure CZAI_ERC20_CZAI_ERC20
[2020-11-25 13:02:07,681 INFO  L138     BoogieDeclarations]: Found implementation of procedure CZAI_ERC20_CZAI_ERC20
[2020-11-25 13:02:07,682 INFO  L130     BoogieDeclarations]: Found specification of procedure getAirdrop~address_CZAI_ERC20
[2020-11-25 13:02:07,682 INFO  L138     BoogieDeclarations]: Found implementation of procedure getAirdrop~address_CZAI_ERC20
[2020-11-25 13:02:07,682 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenSale~address_CZAI_ERC20
[2020-11-25 13:02:07,682 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenSale~address_CZAI_ERC20
[2020-11-25 13:02:07,682 INFO  L130     BoogieDeclarations]: Found specification of procedure viewAirdrop_CZAI_ERC20
[2020-11-25 13:02:07,682 INFO  L138     BoogieDeclarations]: Found implementation of procedure viewAirdrop_CZAI_ERC20
[2020-11-25 13:02:07,682 INFO  L130     BoogieDeclarations]: Found specification of procedure viewSale_CZAI_ERC20
[2020-11-25 13:02:07,682 INFO  L138     BoogieDeclarations]: Found implementation of procedure viewSale_CZAI_ERC20
[2020-11-25 13:02:07,682 INFO  L130     BoogieDeclarations]: Found specification of procedure startAirdrop~uint256~uint256~uint256~uint256_CZAI_ERC20
[2020-11-25 13:02:07,682 INFO  L138     BoogieDeclarations]: Found implementation of procedure startAirdrop~uint256~uint256~uint256~uint256_CZAI_ERC20
[2020-11-25 13:02:07,683 INFO  L130     BoogieDeclarations]: Found specification of procedure startSale~uint256~uint256~uint256~uint256~uint256_CZAI_ERC20
[2020-11-25 13:02:07,683 INFO  L138     BoogieDeclarations]: Found implementation of procedure startSale~uint256~uint256~uint256~uint256~uint256_CZAI_ERC20
[2020-11-25 13:02:07,683 INFO  L130     BoogieDeclarations]: Found specification of procedure clearETH_CZAI_ERC20
[2020-11-25 13:02:07,683 INFO  L138     BoogieDeclarations]: Found implementation of procedure clearETH_CZAI_ERC20
[2020-11-25 13:02:07,683 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_CZAI_ERC20__success
[2020-11-25 13:02:07,683 INFO  L130     BoogieDeclarations]: Found specification of procedure aSBlock_CZAI_ERC20
[2020-11-25 13:02:07,683 INFO  L138     BoogieDeclarations]: Found implementation of procedure aSBlock_CZAI_ERC20
[2020-11-25 13:02:07,683 INFO  L130     BoogieDeclarations]: Found specification of procedure aEBlock_CZAI_ERC20
[2020-11-25 13:02:07,683 INFO  L138     BoogieDeclarations]: Found implementation of procedure aEBlock_CZAI_ERC20
[2020-11-25 13:02:07,683 INFO  L130     BoogieDeclarations]: Found specification of procedure aCap_CZAI_ERC20
[2020-11-25 13:02:07,683 INFO  L138     BoogieDeclarations]: Found implementation of procedure aCap_CZAI_ERC20
[2020-11-25 13:02:07,684 INFO  L130     BoogieDeclarations]: Found specification of procedure aTot_CZAI_ERC20
[2020-11-25 13:02:07,684 INFO  L138     BoogieDeclarations]: Found implementation of procedure aTot_CZAI_ERC20
[2020-11-25 13:02:07,684 INFO  L130     BoogieDeclarations]: Found specification of procedure aAmt_CZAI_ERC20
[2020-11-25 13:02:07,684 INFO  L138     BoogieDeclarations]: Found implementation of procedure aAmt_CZAI_ERC20
[2020-11-25 13:02:07,684 INFO  L130     BoogieDeclarations]: Found specification of procedure sSBlock_CZAI_ERC20
[2020-11-25 13:02:07,684 INFO  L138     BoogieDeclarations]: Found implementation of procedure sSBlock_CZAI_ERC20
[2020-11-25 13:02:07,684 INFO  L130     BoogieDeclarations]: Found specification of procedure sEBlock_CZAI_ERC20
[2020-11-25 13:02:07,684 INFO  L138     BoogieDeclarations]: Found implementation of procedure sEBlock_CZAI_ERC20
[2020-11-25 13:02:07,684 INFO  L130     BoogieDeclarations]: Found specification of procedure sCap_CZAI_ERC20
[2020-11-25 13:02:07,684 INFO  L138     BoogieDeclarations]: Found implementation of procedure sCap_CZAI_ERC20
[2020-11-25 13:02:07,685 INFO  L130     BoogieDeclarations]: Found specification of procedure sTot_CZAI_ERC20
[2020-11-25 13:02:07,685 INFO  L138     BoogieDeclarations]: Found implementation of procedure sTot_CZAI_ERC20
[2020-11-25 13:02:07,685 INFO  L130     BoogieDeclarations]: Found specification of procedure sChunk_CZAI_ERC20
[2020-11-25 13:02:07,685 INFO  L138     BoogieDeclarations]: Found implementation of procedure sChunk_CZAI_ERC20
[2020-11-25 13:02:07,685 INFO  L130     BoogieDeclarations]: Found specification of procedure sPrice_CZAI_ERC20
[2020-11-25 13:02:07,685 INFO  L138     BoogieDeclarations]: Found implementation of procedure sPrice_CZAI_ERC20
[2020-11-25 13:02:07,685 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 13:02:07,685 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 13:02:07,685 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 13:02:07,685 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 13:02:07,685 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 13:02:07,686 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 13:02:07,686 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Interface
[2020-11-25 13:02:07,686 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Interface
[2020-11-25 13:02:07,686 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 13:02:07,686 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 13:02:07,686 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Owned
[2020-11-25 13:02:07,686 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Owned
[2020-11-25 13:02:07,686 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_TokenERC20
[2020-11-25 13:02:07,686 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_TokenERC20
[2020-11-25 13:02:07,686 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_CZAI_ERC20
[2020-11-25 13:02:07,687 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 13:02:07,687 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 13:02:07,687 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 13:02:07,687 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 13:02:07,687 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 13:02:07,687 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 13:02:07,687 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 13:02:07,687 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 13:02:07,687 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 13:02:07,687 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 13:02:07,688 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 13:02:07,688 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 13:02:07,688 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 13:02:07,688 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 13:02:07,688 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 13:02:07,688 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 13:02:07,688 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__success
[2020-11-25 13:02:07,688 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__fail
[2020-11-25 13:02:07,688 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__success
[2020-11-25 13:02:07,688 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__fail
[2020-11-25 13:02:07,688 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__success
[2020-11-25 13:02:07,689 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__fail
[2020-11-25 13:02:07,689 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__success
[2020-11-25 13:02:07,689 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__fail
[2020-11-25 13:02:07,689 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__success
[2020-11-25 13:02:07,689 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__fail
[2020-11-25 13:02:07,689 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20_NoBaseCtor__fail
[2020-11-25 13:02:07,689 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20__success
[2020-11-25 13:02:07,689 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20__fail
[2020-11-25 13:02:07,689 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20__success
[2020-11-25 13:02:07,690 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20__fail
[2020-11-25 13:02:07,690 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20__success
[2020-11-25 13:02:07,690 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20__fail
[2020-11-25 13:02:07,690 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20__success
[2020-11-25 13:02:07,690 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20__fail
[2020-11-25 13:02:07,690 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20__success
[2020-11-25 13:02:07,690 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20__fail
[2020-11-25 13:02:07,690 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20__success
[2020-11-25 13:02:07,690 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20__fail
[2020-11-25 13:02:07,691 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20__success
[2020-11-25 13:02:07,691 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20__fail
[2020-11-25 13:02:07,691 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20__success
[2020-11-25 13:02:07,691 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20__fail
[2020-11-25 13:02:07,691 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_TokenERC20__fail
[2020-11-25 13:02:07,691 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20__success
[2020-11-25 13:02:07,691 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20__fail
[2020-11-25 13:02:07,691 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20__success
[2020-11-25 13:02:07,691 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20__fail
[2020-11-25 13:02:07,691 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20__success
[2020-11-25 13:02:07,691 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20__fail
[2020-11-25 13:02:07,692 INFO  L130     BoogieDeclarations]: Found specification of procedure CZAI_ERC20_CZAI_ERC20_NoBaseCtor__fail
[2020-11-25 13:02:07,692 INFO  L130     BoogieDeclarations]: Found specification of procedure CZAI_ERC20_CZAI_ERC20__success
[2020-11-25 13:02:07,692 INFO  L130     BoogieDeclarations]: Found specification of procedure CZAI_ERC20_CZAI_ERC20__fail
[2020-11-25 13:02:07,692 INFO  L130     BoogieDeclarations]: Found specification of procedure getAirdrop~address_CZAI_ERC20__success
[2020-11-25 13:02:07,692 INFO  L130     BoogieDeclarations]: Found specification of procedure getAirdrop~address_CZAI_ERC20__fail
[2020-11-25 13:02:07,692 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenSale~address_CZAI_ERC20__success
[2020-11-25 13:02:07,692 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenSale~address_CZAI_ERC20__fail
[2020-11-25 13:02:07,692 INFO  L130     BoogieDeclarations]: Found specification of procedure viewAirdrop_CZAI_ERC20__success
[2020-11-25 13:02:07,692 INFO  L130     BoogieDeclarations]: Found specification of procedure viewAirdrop_CZAI_ERC20__fail
[2020-11-25 13:02:07,692 INFO  L130     BoogieDeclarations]: Found specification of procedure viewSale_CZAI_ERC20__success
[2020-11-25 13:02:07,692 INFO  L130     BoogieDeclarations]: Found specification of procedure viewSale_CZAI_ERC20__fail
[2020-11-25 13:02:07,693 INFO  L130     BoogieDeclarations]: Found specification of procedure startAirdrop~uint256~uint256~uint256~uint256_CZAI_ERC20__success
[2020-11-25 13:02:07,693 INFO  L130     BoogieDeclarations]: Found specification of procedure startAirdrop~uint256~uint256~uint256~uint256_CZAI_ERC20__fail
[2020-11-25 13:02:07,693 INFO  L130     BoogieDeclarations]: Found specification of procedure startSale~uint256~uint256~uint256~uint256~uint256_CZAI_ERC20__success
[2020-11-25 13:02:07,693 INFO  L130     BoogieDeclarations]: Found specification of procedure startSale~uint256~uint256~uint256~uint256~uint256_CZAI_ERC20__fail
[2020-11-25 13:02:07,693 INFO  L130     BoogieDeclarations]: Found specification of procedure clearETH_CZAI_ERC20__success
[2020-11-25 13:02:07,693 INFO  L130     BoogieDeclarations]: Found specification of procedure clearETH_CZAI_ERC20__fail
[2020-11-25 13:02:07,693 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_CZAI_ERC20__fail
[2020-11-25 13:02:07,693 INFO  L130     BoogieDeclarations]: Found specification of procedure aSBlock_CZAI_ERC20__success
[2020-11-25 13:02:07,693 INFO  L130     BoogieDeclarations]: Found specification of procedure aSBlock_CZAI_ERC20__fail
[2020-11-25 13:02:07,693 INFO  L130     BoogieDeclarations]: Found specification of procedure aEBlock_CZAI_ERC20__success
[2020-11-25 13:02:07,693 INFO  L130     BoogieDeclarations]: Found specification of procedure aEBlock_CZAI_ERC20__fail
[2020-11-25 13:02:07,693 INFO  L130     BoogieDeclarations]: Found specification of procedure aCap_CZAI_ERC20__success
[2020-11-25 13:02:07,694 INFO  L130     BoogieDeclarations]: Found specification of procedure aCap_CZAI_ERC20__fail
[2020-11-25 13:02:07,694 INFO  L130     BoogieDeclarations]: Found specification of procedure aTot_CZAI_ERC20__success
[2020-11-25 13:02:07,694 INFO  L130     BoogieDeclarations]: Found specification of procedure aTot_CZAI_ERC20__fail
[2020-11-25 13:02:07,694 INFO  L130     BoogieDeclarations]: Found specification of procedure aAmt_CZAI_ERC20__success
[2020-11-25 13:02:07,694 INFO  L130     BoogieDeclarations]: Found specification of procedure aAmt_CZAI_ERC20__fail
[2020-11-25 13:02:07,694 INFO  L130     BoogieDeclarations]: Found specification of procedure sSBlock_CZAI_ERC20__success
[2020-11-25 13:02:07,694 INFO  L130     BoogieDeclarations]: Found specification of procedure sSBlock_CZAI_ERC20__fail
[2020-11-25 13:02:07,694 INFO  L130     BoogieDeclarations]: Found specification of procedure sEBlock_CZAI_ERC20__success
[2020-11-25 13:02:07,694 INFO  L130     BoogieDeclarations]: Found specification of procedure sEBlock_CZAI_ERC20__fail
[2020-11-25 13:02:07,694 INFO  L130     BoogieDeclarations]: Found specification of procedure sCap_CZAI_ERC20__success
[2020-11-25 13:02:07,694 INFO  L130     BoogieDeclarations]: Found specification of procedure sCap_CZAI_ERC20__fail
[2020-11-25 13:02:07,694 INFO  L130     BoogieDeclarations]: Found specification of procedure sTot_CZAI_ERC20__success
[2020-11-25 13:02:07,695 INFO  L130     BoogieDeclarations]: Found specification of procedure sTot_CZAI_ERC20__fail
[2020-11-25 13:02:07,695 INFO  L130     BoogieDeclarations]: Found specification of procedure sChunk_CZAI_ERC20__success
[2020-11-25 13:02:07,695 INFO  L130     BoogieDeclarations]: Found specification of procedure sChunk_CZAI_ERC20__fail
[2020-11-25 13:02:07,695 INFO  L130     BoogieDeclarations]: Found specification of procedure sPrice_CZAI_ERC20__success
[2020-11-25 13:02:07,695 INFO  L130     BoogieDeclarations]: Found specification of procedure sPrice_CZAI_ERC20__fail
[2020-11-25 13:02:07,695 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 13:02:07,695 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 13:02:07,695 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 13:02:07,695 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 13:02:07,695 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 13:02:07,695 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 13:02:07,695 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 13:02:07,695 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 13:02:07,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 13:02:07,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 13:02:07,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 13:02:07,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 13:02:07,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 13:02:07,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 13:02:07,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 13:02:07,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 13:02:07,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 13:02:07,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 13:02:07,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 13:02:07,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 13:02:07,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 13:02:07,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 13:02:07,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 13:02:07,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 13:02:07,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 13:02:07,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 13:02:07,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 13:02:07,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 13:02:07,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__fail
[2020-11-25 13:02:07,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__success
[2020-11-25 13:02:07,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__fail
[2020-11-25 13:02:07,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__success
[2020-11-25 13:02:07,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__fail
[2020-11-25 13:02:07,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__success
[2020-11-25 13:02:07,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__fail
[2020-11-25 13:02:07,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__success
[2020-11-25 13:02:07,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__fail
[2020-11-25 13:02:07,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__success
[2020-11-25 13:02:07,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20_NoBaseCtor__fail
[2020-11-25 13:02:07,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20_NoBaseCtor__success
[2020-11-25 13:02:07,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20__fail
[2020-11-25 13:02:07,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20__success
[2020-11-25 13:02:07,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20__fail
[2020-11-25 13:02:07,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20__success
[2020-11-25 13:02:07,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20__fail
[2020-11-25 13:02:07,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20__success
[2020-11-25 13:02:07,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20__fail
[2020-11-25 13:02:07,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20__success
[2020-11-25 13:02:07,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20__fail
[2020-11-25 13:02:07,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20__success
[2020-11-25 13:02:07,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20__fail
[2020-11-25 13:02:07,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20__success
[2020-11-25 13:02:07,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20__fail
[2020-11-25 13:02:07,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20__success
[2020-11-25 13:02:07,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20__fail
[2020-11-25 13:02:07,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20__success
[2020-11-25 13:02:07,700 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_TokenERC20__fail
[2020-11-25 13:02:07,700 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_TokenERC20__success
[2020-11-25 13:02:07,700 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20__fail
[2020-11-25 13:02:07,700 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20__success
[2020-11-25 13:02:07,700 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20__fail
[2020-11-25 13:02:07,700 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20__success
[2020-11-25 13:02:07,700 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20__fail
[2020-11-25 13:02:07,700 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20__success
[2020-11-25 13:02:07,700 INFO  L138     BoogieDeclarations]: Found implementation of procedure CZAI_ERC20_CZAI_ERC20_NoBaseCtor__fail
[2020-11-25 13:02:07,700 INFO  L138     BoogieDeclarations]: Found implementation of procedure CZAI_ERC20_CZAI_ERC20_NoBaseCtor__success
[2020-11-25 13:02:07,700 INFO  L138     BoogieDeclarations]: Found implementation of procedure CZAI_ERC20_CZAI_ERC20__fail
[2020-11-25 13:02:07,700 INFO  L138     BoogieDeclarations]: Found implementation of procedure CZAI_ERC20_CZAI_ERC20__success
[2020-11-25 13:02:07,700 INFO  L138     BoogieDeclarations]: Found implementation of procedure getAirdrop~address_CZAI_ERC20__fail
[2020-11-25 13:02:07,701 INFO  L138     BoogieDeclarations]: Found implementation of procedure getAirdrop~address_CZAI_ERC20__success
[2020-11-25 13:02:07,701 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenSale~address_CZAI_ERC20__fail
[2020-11-25 13:02:07,701 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenSale~address_CZAI_ERC20__success
[2020-11-25 13:02:07,701 INFO  L138     BoogieDeclarations]: Found implementation of procedure viewAirdrop_CZAI_ERC20__fail
[2020-11-25 13:02:07,701 INFO  L138     BoogieDeclarations]: Found implementation of procedure viewAirdrop_CZAI_ERC20__success
[2020-11-25 13:02:07,701 INFO  L138     BoogieDeclarations]: Found implementation of procedure viewSale_CZAI_ERC20__fail
[2020-11-25 13:02:07,701 INFO  L138     BoogieDeclarations]: Found implementation of procedure viewSale_CZAI_ERC20__success
[2020-11-25 13:02:07,701 INFO  L138     BoogieDeclarations]: Found implementation of procedure startAirdrop~uint256~uint256~uint256~uint256_CZAI_ERC20__fail
[2020-11-25 13:02:07,701 INFO  L138     BoogieDeclarations]: Found implementation of procedure startAirdrop~uint256~uint256~uint256~uint256_CZAI_ERC20__success
[2020-11-25 13:02:07,701 INFO  L138     BoogieDeclarations]: Found implementation of procedure startSale~uint256~uint256~uint256~uint256~uint256_CZAI_ERC20__fail
[2020-11-25 13:02:07,701 INFO  L138     BoogieDeclarations]: Found implementation of procedure startSale~uint256~uint256~uint256~uint256~uint256_CZAI_ERC20__success
[2020-11-25 13:02:07,702 INFO  L138     BoogieDeclarations]: Found implementation of procedure clearETH_CZAI_ERC20__fail
[2020-11-25 13:02:07,702 INFO  L138     BoogieDeclarations]: Found implementation of procedure clearETH_CZAI_ERC20__success
[2020-11-25 13:02:07,702 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_CZAI_ERC20__fail
[2020-11-25 13:02:07,702 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_CZAI_ERC20__success
[2020-11-25 13:02:07,702 INFO  L138     BoogieDeclarations]: Found implementation of procedure aSBlock_CZAI_ERC20__fail
[2020-11-25 13:02:07,702 INFO  L138     BoogieDeclarations]: Found implementation of procedure aSBlock_CZAI_ERC20__success
[2020-11-25 13:02:07,702 INFO  L138     BoogieDeclarations]: Found implementation of procedure aEBlock_CZAI_ERC20__fail
[2020-11-25 13:02:07,702 INFO  L138     BoogieDeclarations]: Found implementation of procedure aEBlock_CZAI_ERC20__success
[2020-11-25 13:02:07,702 INFO  L138     BoogieDeclarations]: Found implementation of procedure aCap_CZAI_ERC20__fail
[2020-11-25 13:02:07,702 INFO  L138     BoogieDeclarations]: Found implementation of procedure aCap_CZAI_ERC20__success
[2020-11-25 13:02:07,702 INFO  L138     BoogieDeclarations]: Found implementation of procedure aTot_CZAI_ERC20__fail
[2020-11-25 13:02:07,702 INFO  L138     BoogieDeclarations]: Found implementation of procedure aTot_CZAI_ERC20__success
[2020-11-25 13:02:07,703 INFO  L138     BoogieDeclarations]: Found implementation of procedure aAmt_CZAI_ERC20__fail
[2020-11-25 13:02:07,703 INFO  L138     BoogieDeclarations]: Found implementation of procedure aAmt_CZAI_ERC20__success
[2020-11-25 13:02:07,703 INFO  L138     BoogieDeclarations]: Found implementation of procedure sSBlock_CZAI_ERC20__fail
[2020-11-25 13:02:07,703 INFO  L138     BoogieDeclarations]: Found implementation of procedure sSBlock_CZAI_ERC20__success
[2020-11-25 13:02:07,703 INFO  L138     BoogieDeclarations]: Found implementation of procedure sEBlock_CZAI_ERC20__fail
[2020-11-25 13:02:07,703 INFO  L138     BoogieDeclarations]: Found implementation of procedure sEBlock_CZAI_ERC20__success
[2020-11-25 13:02:07,703 INFO  L138     BoogieDeclarations]: Found implementation of procedure sCap_CZAI_ERC20__fail
[2020-11-25 13:02:07,703 INFO  L138     BoogieDeclarations]: Found implementation of procedure sCap_CZAI_ERC20__success
[2020-11-25 13:02:07,703 INFO  L138     BoogieDeclarations]: Found implementation of procedure sTot_CZAI_ERC20__fail
[2020-11-25 13:02:07,703 INFO  L138     BoogieDeclarations]: Found implementation of procedure sTot_CZAI_ERC20__success
[2020-11-25 13:02:07,703 INFO  L138     BoogieDeclarations]: Found implementation of procedure sChunk_CZAI_ERC20__fail
[2020-11-25 13:02:07,703 INFO  L138     BoogieDeclarations]: Found implementation of procedure sChunk_CZAI_ERC20__success
[2020-11-25 13:02:07,704 INFO  L138     BoogieDeclarations]: Found implementation of procedure sPrice_CZAI_ERC20__fail
[2020-11-25 13:02:07,704 INFO  L138     BoogieDeclarations]: Found implementation of procedure sPrice_CZAI_ERC20__success
[2020-11-25 13:02:07,704 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 13:02:07,704 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 13:02:07,704 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 13:02:07,704 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 13:02:07,704 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 13:02:07,704 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 13:02:07,704 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 13:02:07,704 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 13:02:07,704 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 13:02:07,704 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 13:02:07,704 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Interface
[2020-11-25 13:02:07,705 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Interface
[2020-11-25 13:02:07,705 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 13:02:07,705 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 13:02:07,705 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Owned
[2020-11-25 13:02:07,705 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Owned
[2020-11-25 13:02:07,705 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_TokenERC20
[2020-11-25 13:02:07,705 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_TokenERC20
[2020-11-25 13:02:07,705 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_CZAI_ERC20
[2020-11-25 13:02:07,705 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 13:02:07,705 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 13:02:07,705 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 13:02:08,114 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 13:02:08,115 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 13:02:08,115 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 13:02:08,271 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 13:02:08,632 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 13:02:08,632 INFO  L286             CfgBuilder]: Removed 6 assue(true) statements.
[2020-11-25 13:02:08,634 INFO  L202        PluginConnector]: Adding new model CZAI_ERC20_0xd09b4a4cc6f092959478c693f3933cd27da75244_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:02:08 BoogieIcfgContainer
[2020-11-25 13:02:08,634 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:02:07" (2/2) ...
[2020-11-25 13:02:08,634 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 13:02:08,635 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@3bb19d57 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:02:08, skipping insertion in model container
[2020-11-25 13:02:08,635 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 13:02:08,635 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 13:02:08,635 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 13:02:08,636 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 13:02:08,636 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "CZAI_ERC20_0xd09b4a4cc6f092959478c693f3933cd27da75244_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:02:07" (1/3) ...
[2020-11-25 13:02:08,637 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@6d17bf53 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:02:08, skipping insertion in model container
[2020-11-25 13:02:08,637 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:02:07" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 13:02:08,672 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:02:08 NWAContainer
[2020-11-25 13:02:08,672 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 13:02:08,673 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 13:02:08,673 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 13:02:08,673 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 13:02:08,674 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "CZAI_ERC20_0xd09b4a4cc6f092959478c693f3933cd27da75244_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:02:08" (3/4) ...
[2020-11-25 13:02:08,675 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@5e14a5f8 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:02:08, skipping insertion in model container
[2020-11-25 13:02:08,675 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:02:08" (4/4) ...
[2020-11-25 13:02:08,678 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 13:02:08,684 INFO  L110   BuchiProductObserver]: Initial RCFG 3569 locations, 4645 edges
[2020-11-25 13:02:08,684 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 13:02:08,697 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 13:02:10,429 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 13:02:10,439 INFO  L110   BuchiProductObserver]: BuchiProgram size 8364 locations, 14620 edges
[2020-11-25 13:02:10,439 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:02:10 BoogieIcfgContainer
[2020-11-25 13:02:10,439 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 13:02:10,439 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 13:02:10,440 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 13:02:10,441 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 13:02:10,441 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:02:10" (1/1) ...
[2020-11-25 13:02:10,560 INFO  L313           BlockEncoder]: Initial Icfg 8364 locations, 14620 edges
[2020-11-25 13:02:10,560 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 13:02:10,560 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 13:02:10,561 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 13:02:10,561 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 13:02:10,577 INFO  L70    emoveInfeasibleEdges]: Removed 84 edges and 15 locations because of local infeasibility
[2020-11-25 13:02:10,594 INFO  L70        RemoveSinkStates]: Removed 14 edges and 9 locations by removing sink states
[2020-11-25 13:02:10,611 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 13:02:10,615 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 13:02:10,621 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 13:02:10,621 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 13:02:10,625 INFO  L313           BlockEncoder]: Encoded RCFG 8308 locations, 14475 edges
[2020-11-25 13:02:10,625 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 01:02:10 BasicIcfg
[2020-11-25 13:02:10,626 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 13:02:10,626 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 13:02:10,626 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 13:02:10,628 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 13:02:10,628 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:02:10,628 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "CZAI_ERC20_0xd09b4a4cc6f092959478c693f3933cd27da75244_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:02:07" (1/6) ...
[2020-11-25 13:02:10,629 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@68ed69 and model type CZAI_ERC20_0xd09b4a4cc6f092959478c693f3933cd27da75244_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:02:10, skipping insertion in model container
[2020-11-25 13:02:10,629 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:02:10,630 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:02:07" (2/6) ...
[2020-11-25 13:02:10,630 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@68ed69 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:02:10, skipping insertion in model container
[2020-11-25 13:02:10,630 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:02:10,630 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "CZAI_ERC20_0xd09b4a4cc6f092959478c693f3933cd27da75244_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:02:08" (3/6) ...
[2020-11-25 13:02:10,630 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@68ed69 and model type CZAI_ERC20_0xd09b4a4cc6f092959478c693f3933cd27da75244_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 01:02:10, skipping insertion in model container
[2020-11-25 13:02:10,630 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:02:10,630 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:02:08" (4/6) ...
[2020-11-25 13:02:10,631 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@68ed69 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:02:10, skipping insertion in model container
[2020-11-25 13:02:10,631 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:02:10,631 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:02:10" (5/6) ...
[2020-11-25 13:02:10,631 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@68ed69 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 01:02:10, skipping insertion in model container
[2020-11-25 13:02:10,631 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:02:10,631 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 01:02:10" (6/6) ...
[2020-11-25 13:02:10,632 INFO  L404   chiAutomizerObserver]: Analyzing ICFG CZAI_ERC20_0xd09b4a4cc6f092959478c693f3933cd27da75244_transferfrom-normal.bpl_BEv2
[2020-11-25 13:02:10,663 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 13:02:10,663 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 13:02:10,663 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 13:02:10,663 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 13:02:10,663 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 13:02:10,664 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 13:02:10,664 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 13:02:10,664 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 13:02:10,664 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 13:02:10,720 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8308 states.
[2020-11-25 13:02:10,798 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:02:10,798 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:02:10,799 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:02:10,810 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:02:10,810 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:02:10,810 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 13:02:10,810 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8308 states.
[2020-11-25 13:02:10,865 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:02:10,865 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:02:10,865 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:02:10,867 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:02:10,867 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == CZAI_ERC20;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call CZAI_ERC20_CZAI_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND TRUE   revert
[L7679]  RET         call CZAI_ERC20_CZAI_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;

Loop:
[L7683]  CALL        call CorralChoice_CZAI_ERC20(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != CZAI_ERC20;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND TRUE   choice == 32
[L7461]              gas := gas - 21000;
[L7462]  COND FALSE  !(gas >= 0)
[L7683]  RET         call CorralChoice_CZAI_ERC20(this);

[2020-11-25 13:02:10,883 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:02:10,883 INFO  L82        PathProgramCache]: Analyzing trace with hash 25997314, now seen corresponding path program 1 times
[2020-11-25 13:02:10,888 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:02:10,903 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:02:10,941 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 13:02:10,943 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:02:10,943 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 13:02:11,396 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:02:11,405 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 13:02:11,405 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 13:02:11,406 INFO  L87              Difference]: Start difference. First operand 8308 states. Second operand 3 states.
[2020-11-25 13:02:11,818 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:02:11,818 INFO  L93              Difference]: Finished difference Result 7023 states and 8364 transitions.
[2020-11-25 13:02:11,818 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 13:02:11,819 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7023 states and 8364 transitions.
[2020-11-25 13:02:11,853 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:02:11,893 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7023 states to 7023 states and 8364 transitions.
[2020-11-25 13:02:11,894 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 13:02:11,895 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 244
[2020-11-25 13:02:11,896 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7023 states and 8364 transitions.
[2020-11-25 13:02:11,910 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:02:11,910 INFO  L728         BuchiCegarLoop]: Abstraction has 7023 states and 8364 transitions.
[2020-11-25 13:02:11,930 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7023 states and 8364 transitions.
[2020-11-25 13:02:12,016 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7023 to 7023.
[2020-11-25 13:02:12,017 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7023 states.
[2020-11-25 13:02:12,028 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7023 states to 7023 states and 8364 transitions.
[2020-11-25 13:02:12,029 INFO  L751         BuchiCegarLoop]: Abstraction has 7023 states and 8364 transitions.
[2020-11-25 13:02:12,029 INFO  L631         BuchiCegarLoop]: Abstraction has 7023 states and 8364 transitions.
[2020-11-25 13:02:12,029 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 13:02:12,029 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7023 states and 8364 transitions.
[2020-11-25 13:02:12,039 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:02:12,039 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:02:12,039 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:02:12,041 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:02:12,041 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == CZAI_ERC20;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call CZAI_ERC20_CZAI_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND TRUE   revert
[L7679]  RET         call CZAI_ERC20_CZAI_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;
[L7683]  CALL        call CorralChoice_CZAI_ERC20(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != CZAI_ERC20;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND FALSE  !(__exception)
[L1173]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4552]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4118]  COND TRUE   !(b_s45 <= a_s45)
[L4119]              revert := true;
[L4552]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4553]  COND TRUE   revert
[L1173]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1174]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((((((((((success_s468 == true && balances_TokenERC20[this][from_s468] == old(balances_TokenERC20[this][from_s468]) - tokens_s468) && balances_TokenERC20[this][to_s468] == old(balances_TokenERC20[this][to_s468]) + tokens_s468) && allowed_TokenERC20[this][from_s468][msgsender_MSG] == old(allowed_TokenERC20[this][from_s468][msgsender_MSG]) - tokens_s468) && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this][p1] == old(balances_TokenERC20[this][p1])) && allowed_TokenERC20[this][p2][p3] == old(allowed_TokenERC20[this][p2][p3])) && aSBlock_CZAI_ERC20[this] == old(aSBlock_CZAI_ERC20[this])) && aEBlock_CZAI_ERC20[this] == old(aEBlock_CZAI_ERC20[this])) && aCap_CZAI_ERC20[this] == old(aCap_CZAI_ERC20[this])) && aTot_CZAI_ERC20[this] == old(aTot_CZAI_ERC20[this])) && aAmt_CZAI_ERC20[this] == old(aAmt_CZAI_ERC20[this])) && sSBlock_CZAI_ERC20[this] == old(sSBlock_CZAI_ERC20[this])) && sEBlock_CZAI_ERC20[this] == old(sEBlock_CZAI_ERC20[this])) && sCap_CZAI_ERC20[this] == old(sCap_CZAI_ERC20[this])) && sTot_CZAI_ERC20[this] == old(sTot_CZAI_ERC20[this])) && sChunk_CZAI_ERC20[this] == old(sChunk_CZAI_ERC20[this])) && sPrice_CZAI_ERC20[this] == old(sPrice_CZAI_ERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_CZAI_ERC20(this);

Loop:
[L7683]  CALL        call CorralChoice_CZAI_ERC20(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != CZAI_ERC20;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND FALSE  !(__exception)
[L1173]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4552]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4118]  COND TRUE   !(b_s45 <= a_s45)
[L4119]              revert := true;
[L4552]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4553]  COND TRUE   revert
[L1173]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1174]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((((((((((success_s468 == true && balances_TokenERC20[this][from_s468] == old(balances_TokenERC20[this][from_s468]) - tokens_s468) && balances_TokenERC20[this][to_s468] == old(balances_TokenERC20[this][to_s468]) + tokens_s468) && allowed_TokenERC20[this][from_s468][msgsender_MSG] == old(allowed_TokenERC20[this][from_s468][msgsender_MSG]) - tokens_s468) && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this][p1] == old(balances_TokenERC20[this][p1])) && allowed_TokenERC20[this][p2][p3] == old(allowed_TokenERC20[this][p2][p3])) && aSBlock_CZAI_ERC20[this] == old(aSBlock_CZAI_ERC20[this])) && aEBlock_CZAI_ERC20[this] == old(aEBlock_CZAI_ERC20[this])) && aCap_CZAI_ERC20[this] == old(aCap_CZAI_ERC20[this])) && aTot_CZAI_ERC20[this] == old(aTot_CZAI_ERC20[this])) && aAmt_CZAI_ERC20[this] == old(aAmt_CZAI_ERC20[this])) && sSBlock_CZAI_ERC20[this] == old(sSBlock_CZAI_ERC20[this])) && sEBlock_CZAI_ERC20[this] == old(sEBlock_CZAI_ERC20[this])) && sCap_CZAI_ERC20[this] == old(sCap_CZAI_ERC20[this])) && sTot_CZAI_ERC20[this] == old(sTot_CZAI_ERC20[this])) && sChunk_CZAI_ERC20[this] == old(sChunk_CZAI_ERC20[this])) && sPrice_CZAI_ERC20[this] == old(sPrice_CZAI_ERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_CZAI_ERC20(this);

[2020-11-25 13:02:12,046 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:02:12,046 INFO  L82        PathProgramCache]: Analyzing trace with hash -455486865, now seen corresponding path program 1 times
[2020-11-25 13:02:12,047 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:02:12,058 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:02:12,092 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 13:02:12,093 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:02:12,093 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 13:02:12,094 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:02:12,095 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 13:02:12,095 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 13:02:12,095 INFO  L87              Difference]: Start difference. First operand 7023 states and 8364 transitions. cyclomatic complexity: 1347 Second operand 3 states.
[2020-11-25 13:02:12,271 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:02:12,271 INFO  L93              Difference]: Finished difference Result 8379 states and 9923 transitions.
[2020-11-25 13:02:12,271 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 13:02:12,272 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8379 states and 9923 transitions.
[2020-11-25 13:02:12,300 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 13:02:12,347 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8379 states to 8379 states and 9923 transitions.
[2020-11-25 13:02:12,347 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 326
[2020-11-25 13:02:12,348 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 326
[2020-11-25 13:02:12,349 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8379 states and 9923 transitions.
[2020-11-25 13:02:12,359 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:02:12,359 INFO  L728         BuchiCegarLoop]: Abstraction has 8379 states and 9923 transitions.
[2020-11-25 13:02:12,371 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8379 states and 9923 transitions.
[2020-11-25 13:02:12,466 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8379 to 7435.
[2020-11-25 13:02:12,466 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7435 states.
[2020-11-25 13:02:12,479 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7435 states to 7435 states and 8753 transitions.
[2020-11-25 13:02:12,479 INFO  L751         BuchiCegarLoop]: Abstraction has 7435 states and 8753 transitions.
[2020-11-25 13:02:12,479 INFO  L631         BuchiCegarLoop]: Abstraction has 7435 states and 8753 transitions.
[2020-11-25 13:02:12,479 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 13:02:12,479 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7435 states and 8753 transitions.
[2020-11-25 13:02:12,491 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:02:12,492 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:02:12,492 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:02:12,494 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:02:12,494 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == CZAI_ERC20;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call CZAI_ERC20_CZAI_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND TRUE   revert
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND TRUE   revert
[L7679]  RET         call CZAI_ERC20_CZAI_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;
[L7683]  CALL        call CorralChoice_CZAI_ERC20(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != CZAI_ERC20;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND FALSE  !(__exception)
[L1173]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4552]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4118]  COND TRUE   !(b_s45 <= a_s45)
[L4119]              revert := true;
[L4552]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4553]  COND TRUE   revert
[L1173]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1174]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((((((((((success_s468 == true && balances_TokenERC20[this][from_s468] == old(balances_TokenERC20[this][from_s468]) - tokens_s468) && balances_TokenERC20[this][to_s468] == old(balances_TokenERC20[this][to_s468]) + tokens_s468) && allowed_TokenERC20[this][from_s468][msgsender_MSG] == old(allowed_TokenERC20[this][from_s468][msgsender_MSG]) - tokens_s468) && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this][p1] == old(balances_TokenERC20[this][p1])) && allowed_TokenERC20[this][p2][p3] == old(allowed_TokenERC20[this][p2][p3])) && aSBlock_CZAI_ERC20[this] == old(aSBlock_CZAI_ERC20[this])) && aEBlock_CZAI_ERC20[this] == old(aEBlock_CZAI_ERC20[this])) && aCap_CZAI_ERC20[this] == old(aCap_CZAI_ERC20[this])) && aTot_CZAI_ERC20[this] == old(aTot_CZAI_ERC20[this])) && aAmt_CZAI_ERC20[this] == old(aAmt_CZAI_ERC20[this])) && sSBlock_CZAI_ERC20[this] == old(sSBlock_CZAI_ERC20[this])) && sEBlock_CZAI_ERC20[this] == old(sEBlock_CZAI_ERC20[this])) && sCap_CZAI_ERC20[this] == old(sCap_CZAI_ERC20[this])) && sTot_CZAI_ERC20[this] == old(sTot_CZAI_ERC20[this])) && sChunk_CZAI_ERC20[this] == old(sChunk_CZAI_ERC20[this])) && sPrice_CZAI_ERC20[this] == old(sPrice_CZAI_ERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_CZAI_ERC20(this);

Loop:
[L7683]  CALL        call CorralChoice_CZAI_ERC20(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != CZAI_ERC20;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND FALSE  !(__exception)
[L1173]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4552]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4118]  COND TRUE   !(b_s45 <= a_s45)
[L4119]              revert := true;
[L4552]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4553]  COND TRUE   revert
[L1173]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1174]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((((((((((success_s468 == true && balances_TokenERC20[this][from_s468] == old(balances_TokenERC20[this][from_s468]) - tokens_s468) && balances_TokenERC20[this][to_s468] == old(balances_TokenERC20[this][to_s468]) + tokens_s468) && allowed_TokenERC20[this][from_s468][msgsender_MSG] == old(allowed_TokenERC20[this][from_s468][msgsender_MSG]) - tokens_s468) && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this][p1] == old(balances_TokenERC20[this][p1])) && allowed_TokenERC20[this][p2][p3] == old(allowed_TokenERC20[this][p2][p3])) && aSBlock_CZAI_ERC20[this] == old(aSBlock_CZAI_ERC20[this])) && aEBlock_CZAI_ERC20[this] == old(aEBlock_CZAI_ERC20[this])) && aCap_CZAI_ERC20[this] == old(aCap_CZAI_ERC20[this])) && aTot_CZAI_ERC20[this] == old(aTot_CZAI_ERC20[this])) && aAmt_CZAI_ERC20[this] == old(aAmt_CZAI_ERC20[this])) && sSBlock_CZAI_ERC20[this] == old(sSBlock_CZAI_ERC20[this])) && sEBlock_CZAI_ERC20[this] == old(sEBlock_CZAI_ERC20[this])) && sCap_CZAI_ERC20[this] == old(sCap_CZAI_ERC20[this])) && sTot_CZAI_ERC20[this] == old(sTot_CZAI_ERC20[this])) && sChunk_CZAI_ERC20[this] == old(sChunk_CZAI_ERC20[this])) && sPrice_CZAI_ERC20[this] == old(sPrice_CZAI_ERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_CZAI_ERC20(this);

[2020-11-25 13:02:12,499 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:02:12,499 INFO  L82        PathProgramCache]: Analyzing trace with hash -818953363, now seen corresponding path program 1 times
[2020-11-25 13:02:12,500 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:02:12,508 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:02:12,535 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 13:02:12,535 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:02:12,535 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 13:02:12,535 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:02:12,536 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 13:02:12,536 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 13:02:12,536 INFO  L87              Difference]: Start difference. First operand 7435 states and 8753 transitions. cyclomatic complexity: 1324 Second operand 3 states.
[2020-11-25 13:02:12,638 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:02:12,638 INFO  L93              Difference]: Finished difference Result 8379 states and 9749 transitions.
[2020-11-25 13:02:12,638 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 13:02:12,638 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8379 states and 9749 transitions.
[2020-11-25 13:02:12,674 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 13:02:12,705 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8379 states to 8075 states and 9381 transitions.
[2020-11-25 13:02:12,705 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 306
[2020-11-25 13:02:12,705 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 306
[2020-11-25 13:02:12,705 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8075 states and 9381 transitions.
[2020-11-25 13:02:12,716 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:02:12,716 INFO  L728         BuchiCegarLoop]: Abstraction has 8075 states and 9381 transitions.
[2020-11-25 13:02:12,728 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8075 states and 9381 transitions.
[2020-11-25 13:02:12,802 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8075 to 7187.
[2020-11-25 13:02:12,803 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7187 states.
[2020-11-25 13:02:12,814 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7187 states to 7187 states and 8271 transitions.
[2020-11-25 13:02:12,814 INFO  L751         BuchiCegarLoop]: Abstraction has 7187 states and 8271 transitions.
[2020-11-25 13:02:12,814 INFO  L631         BuchiCegarLoop]: Abstraction has 7187 states and 8271 transitions.
[2020-11-25 13:02:12,814 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 13:02:12,815 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7187 states and 8271 transitions.
[2020-11-25 13:02:12,825 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:02:12,825 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:02:12,825 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:02:12,828 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:02:12,828 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == CZAI_ERC20;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call CZAI_ERC20_CZAI_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4745]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4745]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4746]  COND FALSE  !(revert)
[L4749]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4401]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4402]  COND FALSE  !(revert)
[L4405]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4405]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4406]  COND FALSE  !(revert)
[L4409]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]              assume msgsender_MSG != null;
[L4360]              Balance[this] := 0;
[L4361]              symbol_TokenERC20[this] := -1301478191;
[L4362]              name_TokenERC20[this] := -1301478191;
[L4363]              decimals_TokenERC20[this] := 0;
[L4364]              _totalSupply_TokenERC20[this] := 0;
[L4365]              balances_TokenERC20[this] := zeroRefintArr();
[L4366]              sum_balances0[this] := 0;
[L4367]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4368]              sum_allowed1[this] := 0;
[L4370]              symbol_TokenERC20[this] := 56796887;
[L4371]              name_TokenERC20[this] := -847728030;
[L4372]              decimals_TokenERC20[this] := 0;
[L4373]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              _totalSupply_TokenERC20[this] := nonlinearMul(61917364224 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4375]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4376]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4377]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4378]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4409]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4749]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4750]  COND FALSE  !(revert)
[L4753]  CALL        call CZAI_ERC20_CZAI_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4703]              assume msgsender_MSG != null;
[L4704]              Balance[this] := 0;
[L4705]              aSBlock_CZAI_ERC20[this] := 0;
[L4706]              aEBlock_CZAI_ERC20[this] := 0;
[L4707]              aCap_CZAI_ERC20[this] := 0;
[L4708]              aTot_CZAI_ERC20[this] := 0;
[L4709]              aAmt_CZAI_ERC20[this] := 0;
[L4710]              sSBlock_CZAI_ERC20[this] := 0;
[L4711]              sEBlock_CZAI_ERC20[this] := 0;
[L4712]              sCap_CZAI_ERC20[this] := 0;
[L4713]              sTot_CZAI_ERC20[this] := 0;
[L4714]              sChunk_CZAI_ERC20[this] := 0;
[L4715]              sPrice_CZAI_ERC20[this] := 0;
[L4753]  RET         call CZAI_ERC20_CZAI_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]  COND FALSE  !(revert)
[L7679]  RET         call CZAI_ERC20_CZAI_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;
[L7683]  CALL        call CorralChoice_CZAI_ERC20(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != CZAI_ERC20;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND TRUE   __exception
[L1140]              __tmp__Balance := Balance;
[L1141]              __tmp__DType := DType;
[L1142]              __tmp__Alloc := Alloc;
[L1143]              __tmp__balance_ADDR := balance_ADDR;
[L1144]              __tmp__M_Ref_int := M_Ref_int;
[L1145]              __tmp__sum_balances0 := sum_balances0;
[L1146]              __tmp__alloc_allowed_TokenERC20_lvl0 := alloc_allowed_TokenERC20_lvl0;
[L1147]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1148]              __tmp__sum_allowed1 := sum_allowed1;
[L1149]              __tmp__Length := Length;
[L1150]              __tmp__now := now;
[L1151]              __tmp__owner_Owned := owner_Owned;
[L1152]              __tmp__newOwner_Owned := newOwner_Owned;
[L1153]              __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L1154]              __tmp__name_TokenERC20 := name_TokenERC20;
[L1155]              __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L1156]              __tmp___totalSupply_TokenERC20 := _totalSupply_TokenERC20;
[L1157]              __tmp__balances_TokenERC20 := balances_TokenERC20;
[L1158]              __tmp__allowed_TokenERC20 := allowed_TokenERC20;
[L1159]              __tmp__aSBlock_CZAI_ERC20 := aSBlock_CZAI_ERC20;
[L1160]              __tmp__aEBlock_CZAI_ERC20 := aEBlock_CZAI_ERC20;
[L1161]              __tmp__aCap_CZAI_ERC20 := aCap_CZAI_ERC20;
[L1162]              __tmp__aTot_CZAI_ERC20 := aTot_CZAI_ERC20;
[L1163]              __tmp__aAmt_CZAI_ERC20 := aAmt_CZAI_ERC20;
[L1164]              __tmp__sSBlock_CZAI_ERC20 := sSBlock_CZAI_ERC20;
[L1165]              __tmp__sEBlock_CZAI_ERC20 := sEBlock_CZAI_ERC20;
[L1166]              __tmp__sCap_CZAI_ERC20 := sCap_CZAI_ERC20;
[L1167]              __tmp__sTot_CZAI_ERC20 := sTot_CZAI_ERC20;
[L1168]              __tmp__sChunk_CZAI_ERC20 := sChunk_CZAI_ERC20;
[L1169]              __tmp__sPrice_CZAI_ERC20 := sPrice_CZAI_ERC20;
[L1170]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4522]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4109]  COND TRUE   !(b_s45 <= a_s45)
[L4110]              revert := true;
[L4522]  RET         call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4523]  COND TRUE   revert
[L1170]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1171]              assume revert || gas < 0;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_CZAI_ERC20(this);

Loop:
[L7683]  CALL        call CorralChoice_CZAI_ERC20(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != CZAI_ERC20;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND TRUE   __exception
[L1140]              __tmp__Balance := Balance;
[L1141]              __tmp__DType := DType;
[L1142]              __tmp__Alloc := Alloc;
[L1143]              __tmp__balance_ADDR := balance_ADDR;
[L1144]              __tmp__M_Ref_int := M_Ref_int;
[L1145]              __tmp__sum_balances0 := sum_balances0;
[L1146]              __tmp__alloc_allowed_TokenERC20_lvl0 := alloc_allowed_TokenERC20_lvl0;
[L1147]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1148]              __tmp__sum_allowed1 := sum_allowed1;
[L1149]              __tmp__Length := Length;
[L1150]              __tmp__now := now;
[L1151]              __tmp__owner_Owned := owner_Owned;
[L1152]              __tmp__newOwner_Owned := newOwner_Owned;
[L1153]              __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L1154]              __tmp__name_TokenERC20 := name_TokenERC20;
[L1155]              __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L1156]              __tmp___totalSupply_TokenERC20 := _totalSupply_TokenERC20;
[L1157]              __tmp__balances_TokenERC20 := balances_TokenERC20;
[L1158]              __tmp__allowed_TokenERC20 := allowed_TokenERC20;
[L1159]              __tmp__aSBlock_CZAI_ERC20 := aSBlock_CZAI_ERC20;
[L1160]              __tmp__aEBlock_CZAI_ERC20 := aEBlock_CZAI_ERC20;
[L1161]              __tmp__aCap_CZAI_ERC20 := aCap_CZAI_ERC20;
[L1162]              __tmp__aTot_CZAI_ERC20 := aTot_CZAI_ERC20;
[L1163]              __tmp__aAmt_CZAI_ERC20 := aAmt_CZAI_ERC20;
[L1164]              __tmp__sSBlock_CZAI_ERC20 := sSBlock_CZAI_ERC20;
[L1165]              __tmp__sEBlock_CZAI_ERC20 := sEBlock_CZAI_ERC20;
[L1166]              __tmp__sCap_CZAI_ERC20 := sCap_CZAI_ERC20;
[L1167]              __tmp__sTot_CZAI_ERC20 := sTot_CZAI_ERC20;
[L1168]              __tmp__sChunk_CZAI_ERC20 := sChunk_CZAI_ERC20;
[L1169]              __tmp__sPrice_CZAI_ERC20 := sPrice_CZAI_ERC20;
[L1170]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4522]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4109]  COND TRUE   !(b_s45 <= a_s45)
[L4110]              revert := true;
[L4522]  RET         call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4523]  COND TRUE   revert
[L1170]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1171]              assume revert || gas < 0;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_CZAI_ERC20(this);

[2020-11-25 13:02:12,834 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:02:12,835 INFO  L82        PathProgramCache]: Analyzing trace with hash 1911412554, now seen corresponding path program 1 times
[2020-11-25 13:02:12,835 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:02:12,854 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:02:12,948 INFO  L134       CoverageAnalysis]: Checked inductivity of 23 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 23 trivial. 0 not checked.
[2020-11-25 13:02:12,948 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:02:12,948 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 13:02:12,949 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:02:12,949 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 13:02:12,949 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 13:02:12,949 INFO  L87              Difference]: Start difference. First operand 7187 states and 8271 transitions. cyclomatic complexity: 1090 Second operand 7 states.
[2020-11-25 13:02:14,529 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:02:14,529 INFO  L93              Difference]: Finished difference Result 7683 states and 8817 transitions.
[2020-11-25 13:02:14,529 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 13:02:14,529 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7683 states and 8817 transitions.
[2020-11-25 13:02:14,542 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 13:02:14,565 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7683 states to 7683 states and 8817 transitions.
[2020-11-25 13:02:14,565 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 351
[2020-11-25 13:02:14,565 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 351
[2020-11-25 13:02:14,566 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7683 states and 8817 transitions.
[2020-11-25 13:02:14,571 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:02:14,571 INFO  L728         BuchiCegarLoop]: Abstraction has 7683 states and 8817 transitions.
[2020-11-25 13:02:14,577 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7683 states and 8817 transitions.
[2020-11-25 13:02:14,634 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7683 to 7265.
[2020-11-25 13:02:14,634 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7265 states.
[2020-11-25 13:02:14,641 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7265 states to 7265 states and 8359 transitions.
[2020-11-25 13:02:14,641 INFO  L751         BuchiCegarLoop]: Abstraction has 7265 states and 8359 transitions.
[2020-11-25 13:02:14,641 INFO  L631         BuchiCegarLoop]: Abstraction has 7265 states and 8359 transitions.
[2020-11-25 13:02:14,641 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 13:02:14,642 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7265 states and 8359 transitions.
[2020-11-25 13:02:14,648 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:02:14,648 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:02:14,648 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:02:14,650 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:02:14,650 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == CZAI_ERC20;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call CZAI_ERC20_CZAI_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4745]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4745]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4746]  COND FALSE  !(revert)
[L4749]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4401]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4402]  COND FALSE  !(revert)
[L4405]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4405]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4406]  COND FALSE  !(revert)
[L4409]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]              assume msgsender_MSG != null;
[L4360]              Balance[this] := 0;
[L4361]              symbol_TokenERC20[this] := -1301478191;
[L4362]              name_TokenERC20[this] := -1301478191;
[L4363]              decimals_TokenERC20[this] := 0;
[L4364]              _totalSupply_TokenERC20[this] := 0;
[L4365]              balances_TokenERC20[this] := zeroRefintArr();
[L4366]              sum_balances0[this] := 0;
[L4367]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4368]              sum_allowed1[this] := 0;
[L4370]              symbol_TokenERC20[this] := 56796887;
[L4371]              name_TokenERC20[this] := -847728030;
[L4372]              decimals_TokenERC20[this] := 0;
[L4373]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              _totalSupply_TokenERC20[this] := nonlinearMul(61917364224 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4375]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4376]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4377]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4378]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4409]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4749]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4750]  COND FALSE  !(revert)
[L4753]  CALL        call CZAI_ERC20_CZAI_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4703]              assume msgsender_MSG != null;
[L4704]              Balance[this] := 0;
[L4705]              aSBlock_CZAI_ERC20[this] := 0;
[L4706]              aEBlock_CZAI_ERC20[this] := 0;
[L4707]              aCap_CZAI_ERC20[this] := 0;
[L4708]              aTot_CZAI_ERC20[this] := 0;
[L4709]              aAmt_CZAI_ERC20[this] := 0;
[L4710]              sSBlock_CZAI_ERC20[this] := 0;
[L4711]              sEBlock_CZAI_ERC20[this] := 0;
[L4712]              sCap_CZAI_ERC20[this] := 0;
[L4713]              sTot_CZAI_ERC20[this] := 0;
[L4714]              sChunk_CZAI_ERC20[this] := 0;
[L4715]              sPrice_CZAI_ERC20[this] := 0;
[L4753]  RET         call CZAI_ERC20_CZAI_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]  COND FALSE  !(revert)
[L7679]  RET         call CZAI_ERC20_CZAI_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;
[L7683]  CALL        call CorralChoice_CZAI_ERC20(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != CZAI_ERC20;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND FALSE  !(__exception)
[L1173]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4552]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4552]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4553]  COND FALSE  !(revert)
[L4556]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][from_s468];
[L4557]              balances_TokenERC20[this][from_s468] := __var_7;
[L4558]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][from_s468];
[L4559]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4559]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4560]  COND FALSE  !(revert)
[L4563]              sum_allowed1[from_s468] := sum_allowed1[from_s468] - allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4564]              allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4565]              sum_allowed1[from_s468] := sum_allowed1[from_s468] + allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4566]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4100]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4101]  COND FALSE  !(!(c_s23 >= a_s23))
[L4566]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4567]  COND FALSE  !(revert)
[L4570]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s468];
[L4571]              balances_TokenERC20[this][to_s468] := __var_9;
[L4572]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s468];
[L4573]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4574]              success_s468 := true;
[L1173]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1174]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((((((((((success_s468 == true && balances_TokenERC20[this][from_s468] == old(balances_TokenERC20[this][from_s468]) - tokens_s468) && balances_TokenERC20[this][to_s468] == old(balances_TokenERC20[this][to_s468]) + tokens_s468) && allowed_TokenERC20[this][from_s468][msgsender_MSG] == old(allowed_TokenERC20[this][from_s468][msgsender_MSG]) - tokens_s468) && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this][p1] == old(balances_TokenERC20[this][p1])) && allowed_TokenERC20[this][p2][p3] == old(allowed_TokenERC20[this][p2][p3])) && aSBlock_CZAI_ERC20[this] == old(aSBlock_CZAI_ERC20[this])) && aEBlock_CZAI_ERC20[this] == old(aEBlock_CZAI_ERC20[this])) && aCap_CZAI_ERC20[this] == old(aCap_CZAI_ERC20[this])) && aTot_CZAI_ERC20[this] == old(aTot_CZAI_ERC20[this])) && aAmt_CZAI_ERC20[this] == old(aAmt_CZAI_ERC20[this])) && sSBlock_CZAI_ERC20[this] == old(sSBlock_CZAI_ERC20[this])) && sEBlock_CZAI_ERC20[this] == old(sEBlock_CZAI_ERC20[this])) && sCap_CZAI_ERC20[this] == old(sCap_CZAI_ERC20[this])) && sTot_CZAI_ERC20[this] == old(sTot_CZAI_ERC20[this])) && sChunk_CZAI_ERC20[this] == old(sChunk_CZAI_ERC20[this])) && sPrice_CZAI_ERC20[this] == old(sPrice_CZAI_ERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_CZAI_ERC20(this);

Loop:
[L7683]  CALL        call CorralChoice_CZAI_ERC20(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != CZAI_ERC20;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND FALSE  !(__exception)
[L1173]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4552]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4552]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4553]  COND FALSE  !(revert)
[L4556]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][from_s468];
[L4557]              balances_TokenERC20[this][from_s468] := __var_7;
[L4558]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][from_s468];
[L4559]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4559]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4560]  COND FALSE  !(revert)
[L4563]              sum_allowed1[from_s468] := sum_allowed1[from_s468] - allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4564]              allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4565]              sum_allowed1[from_s468] := sum_allowed1[from_s468] + allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4566]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4100]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4101]  COND FALSE  !(!(c_s23 >= a_s23))
[L4566]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4567]  COND FALSE  !(revert)
[L4570]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s468];
[L4571]              balances_TokenERC20[this][to_s468] := __var_9;
[L4572]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s468];
[L4573]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4574]              success_s468 := true;
[L1173]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1174]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((((((((((success_s468 == true && balances_TokenERC20[this][from_s468] == old(balances_TokenERC20[this][from_s468]) - tokens_s468) && balances_TokenERC20[this][to_s468] == old(balances_TokenERC20[this][to_s468]) + tokens_s468) && allowed_TokenERC20[this][from_s468][msgsender_MSG] == old(allowed_TokenERC20[this][from_s468][msgsender_MSG]) - tokens_s468) && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this][p1] == old(balances_TokenERC20[this][p1])) && allowed_TokenERC20[this][p2][p3] == old(allowed_TokenERC20[this][p2][p3])) && aSBlock_CZAI_ERC20[this] == old(aSBlock_CZAI_ERC20[this])) && aEBlock_CZAI_ERC20[this] == old(aEBlock_CZAI_ERC20[this])) && aCap_CZAI_ERC20[this] == old(aCap_CZAI_ERC20[this])) && aTot_CZAI_ERC20[this] == old(aTot_CZAI_ERC20[this])) && aAmt_CZAI_ERC20[this] == old(aAmt_CZAI_ERC20[this])) && sSBlock_CZAI_ERC20[this] == old(sSBlock_CZAI_ERC20[this])) && sEBlock_CZAI_ERC20[this] == old(sEBlock_CZAI_ERC20[this])) && sCap_CZAI_ERC20[this] == old(sCap_CZAI_ERC20[this])) && sTot_CZAI_ERC20[this] == old(sTot_CZAI_ERC20[this])) && sChunk_CZAI_ERC20[this] == old(sChunk_CZAI_ERC20[this])) && sPrice_CZAI_ERC20[this] == old(sPrice_CZAI_ERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_CZAI_ERC20(this);

[2020-11-25 13:02:14,654 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:02:14,654 INFO  L82        PathProgramCache]: Analyzing trace with hash -1321955915, now seen corresponding path program 1 times
[2020-11-25 13:02:14,655 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:02:14,708 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:02:15,670 INFO  L134       CoverageAnalysis]: Checked inductivity of 27 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 25 trivial. 0 not checked.
[2020-11-25 13:02:15,670 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 13:02:15,670 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [24] total 24
[2020-11-25 13:02:15,670 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:02:15,671 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 25 interpolants.
[2020-11-25 13:02:15,671 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=62, Invalid=538, Unknown=0, NotChecked=0, Total=600
[2020-11-25 13:02:15,671 INFO  L87              Difference]: Start difference. First operand 7265 states and 8359 transitions. cyclomatic complexity: 1100 Second operand 25 states.
[2020-11-25 13:02:33,412 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:02:33,412 INFO  L93              Difference]: Finished difference Result 7428 states and 8540 transitions.
[2020-11-25 13:02:33,412 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 26 states. 
[2020-11-25 13:02:33,413 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7428 states and 8540 transitions.
[2020-11-25 13:02:33,424 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 13:02:33,440 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7428 states to 7428 states and 8540 transitions.
[2020-11-25 13:02:33,440 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 287
[2020-11-25 13:02:33,441 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 287
[2020-11-25 13:02:33,441 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7428 states and 8540 transitions.
[2020-11-25 13:02:33,445 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:02:33,445 INFO  L728         BuchiCegarLoop]: Abstraction has 7428 states and 8540 transitions.
[2020-11-25 13:02:33,452 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7428 states and 8540 transitions.
[2020-11-25 13:02:33,498 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7428 to 7379.
[2020-11-25 13:02:33,499 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7379 states.
[2020-11-25 13:02:33,506 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7379 states to 7379 states and 8485 transitions.
[2020-11-25 13:02:33,506 INFO  L751         BuchiCegarLoop]: Abstraction has 7379 states and 8485 transitions.
[2020-11-25 13:02:33,506 INFO  L631         BuchiCegarLoop]: Abstraction has 7379 states and 8485 transitions.
[2020-11-25 13:02:33,506 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 13:02:33,506 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7379 states and 8485 transitions.
[2020-11-25 13:02:33,513 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 13:02:33,513 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:02:33,513 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:02:33,515 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:02:33,515 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == CZAI_ERC20;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call CZAI_ERC20_CZAI_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4745]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4745]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4746]  COND FALSE  !(revert)
[L4749]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4401]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4402]  COND FALSE  !(revert)
[L4405]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4405]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4406]  COND FALSE  !(revert)
[L4409]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]              assume msgsender_MSG != null;
[L4360]              Balance[this] := 0;
[L4361]              symbol_TokenERC20[this] := -1301478191;
[L4362]              name_TokenERC20[this] := -1301478191;
[L4363]              decimals_TokenERC20[this] := 0;
[L4364]              _totalSupply_TokenERC20[this] := 0;
[L4365]              balances_TokenERC20[this] := zeroRefintArr();
[L4366]              sum_balances0[this] := 0;
[L4367]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4368]              sum_allowed1[this] := 0;
[L4370]              symbol_TokenERC20[this] := 56796887;
[L4371]              name_TokenERC20[this] := -847728030;
[L4372]              decimals_TokenERC20[this] := 0;
[L4373]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              _totalSupply_TokenERC20[this] := nonlinearMul(61917364224 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4375]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4376]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4377]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4378]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4409]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4749]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4750]  COND FALSE  !(revert)
[L4753]  CALL        call CZAI_ERC20_CZAI_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4703]              assume msgsender_MSG != null;
[L4704]              Balance[this] := 0;
[L4705]              aSBlock_CZAI_ERC20[this] := 0;
[L4706]              aEBlock_CZAI_ERC20[this] := 0;
[L4707]              aCap_CZAI_ERC20[this] := 0;
[L4708]              aTot_CZAI_ERC20[this] := 0;
[L4709]              aAmt_CZAI_ERC20[this] := 0;
[L4710]              sSBlock_CZAI_ERC20[this] := 0;
[L4711]              sEBlock_CZAI_ERC20[this] := 0;
[L4712]              sCap_CZAI_ERC20[this] := 0;
[L4713]              sTot_CZAI_ERC20[this] := 0;
[L4714]              sChunk_CZAI_ERC20[this] := 0;
[L4715]              sPrice_CZAI_ERC20[this] := 0;
[L4753]  RET         call CZAI_ERC20_CZAI_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]  COND FALSE  !(revert)
[L7679]  RET         call CZAI_ERC20_CZAI_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;
[L7683]  CALL        call CorralChoice_CZAI_ERC20(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != CZAI_ERC20;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND TRUE   __exception
[L1140]              __tmp__Balance := Balance;
[L1141]              __tmp__DType := DType;
[L1142]              __tmp__Alloc := Alloc;
[L1143]              __tmp__balance_ADDR := balance_ADDR;
[L1144]              __tmp__M_Ref_int := M_Ref_int;
[L1145]              __tmp__sum_balances0 := sum_balances0;
[L1146]              __tmp__alloc_allowed_TokenERC20_lvl0 := alloc_allowed_TokenERC20_lvl0;
[L1147]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1148]              __tmp__sum_allowed1 := sum_allowed1;
[L1149]              __tmp__Length := Length;
[L1150]              __tmp__now := now;
[L1151]              __tmp__owner_Owned := owner_Owned;
[L1152]              __tmp__newOwner_Owned := newOwner_Owned;
[L1153]              __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L1154]              __tmp__name_TokenERC20 := name_TokenERC20;
[L1155]              __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L1156]              __tmp___totalSupply_TokenERC20 := _totalSupply_TokenERC20;
[L1157]              __tmp__balances_TokenERC20 := balances_TokenERC20;
[L1158]              __tmp__allowed_TokenERC20 := allowed_TokenERC20;
[L1159]              __tmp__aSBlock_CZAI_ERC20 := aSBlock_CZAI_ERC20;
[L1160]              __tmp__aEBlock_CZAI_ERC20 := aEBlock_CZAI_ERC20;
[L1161]              __tmp__aCap_CZAI_ERC20 := aCap_CZAI_ERC20;
[L1162]              __tmp__aTot_CZAI_ERC20 := aTot_CZAI_ERC20;
[L1163]              __tmp__aAmt_CZAI_ERC20 := aAmt_CZAI_ERC20;
[L1164]              __tmp__sSBlock_CZAI_ERC20 := sSBlock_CZAI_ERC20;
[L1165]              __tmp__sEBlock_CZAI_ERC20 := sEBlock_CZAI_ERC20;
[L1166]              __tmp__sCap_CZAI_ERC20 := sCap_CZAI_ERC20;
[L1167]              __tmp__sTot_CZAI_ERC20 := sTot_CZAI_ERC20;
[L1168]              __tmp__sChunk_CZAI_ERC20 := sChunk_CZAI_ERC20;
[L1169]              __tmp__sPrice_CZAI_ERC20 := sPrice_CZAI_ERC20;
[L1170]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4522]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4109]  COND FALSE  !(!(b_s45 <= a_s45))
[L4113]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4522]  RET         call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4523]  COND FALSE  !(revert)
[L4526]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_TokenERC20[this][from_s468];
[L4527]              __tmp__balances_TokenERC20[this][from_s468] := __var_7;
[L4528]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_TokenERC20[this][from_s468];
[L4529]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4109]  COND TRUE   !(b_s45 <= a_s45)
[L4110]              revert := true;
[L4529]  RET         call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4530]  COND TRUE   revert
[L1170]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1171]              assume revert || gas < 0;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_CZAI_ERC20(this);

Loop:
[L7683]  CALL        call CorralChoice_CZAI_ERC20(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != CZAI_ERC20;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND TRUE   __exception
[L1140]              __tmp__Balance := Balance;
[L1141]              __tmp__DType := DType;
[L1142]              __tmp__Alloc := Alloc;
[L1143]              __tmp__balance_ADDR := balance_ADDR;
[L1144]              __tmp__M_Ref_int := M_Ref_int;
[L1145]              __tmp__sum_balances0 := sum_balances0;
[L1146]              __tmp__alloc_allowed_TokenERC20_lvl0 := alloc_allowed_TokenERC20_lvl0;
[L1147]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1148]              __tmp__sum_allowed1 := sum_allowed1;
[L1149]              __tmp__Length := Length;
[L1150]              __tmp__now := now;
[L1151]              __tmp__owner_Owned := owner_Owned;
[L1152]              __tmp__newOwner_Owned := newOwner_Owned;
[L1153]              __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L1154]              __tmp__name_TokenERC20 := name_TokenERC20;
[L1155]              __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L1156]              __tmp___totalSupply_TokenERC20 := _totalSupply_TokenERC20;
[L1157]              __tmp__balances_TokenERC20 := balances_TokenERC20;
[L1158]              __tmp__allowed_TokenERC20 := allowed_TokenERC20;
[L1159]              __tmp__aSBlock_CZAI_ERC20 := aSBlock_CZAI_ERC20;
[L1160]              __tmp__aEBlock_CZAI_ERC20 := aEBlock_CZAI_ERC20;
[L1161]              __tmp__aCap_CZAI_ERC20 := aCap_CZAI_ERC20;
[L1162]              __tmp__aTot_CZAI_ERC20 := aTot_CZAI_ERC20;
[L1163]              __tmp__aAmt_CZAI_ERC20 := aAmt_CZAI_ERC20;
[L1164]              __tmp__sSBlock_CZAI_ERC20 := sSBlock_CZAI_ERC20;
[L1165]              __tmp__sEBlock_CZAI_ERC20 := sEBlock_CZAI_ERC20;
[L1166]              __tmp__sCap_CZAI_ERC20 := sCap_CZAI_ERC20;
[L1167]              __tmp__sTot_CZAI_ERC20 := sTot_CZAI_ERC20;
[L1168]              __tmp__sChunk_CZAI_ERC20 := sChunk_CZAI_ERC20;
[L1169]              __tmp__sPrice_CZAI_ERC20 := sPrice_CZAI_ERC20;
[L1170]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4522]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4109]  COND FALSE  !(!(b_s45 <= a_s45))
[L4113]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4522]  RET         call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4523]  COND FALSE  !(revert)
[L4526]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_TokenERC20[this][from_s468];
[L4527]              __tmp__balances_TokenERC20[this][from_s468] := __var_7;
[L4528]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_TokenERC20[this][from_s468];
[L4529]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4109]  COND TRUE   !(b_s45 <= a_s45)
[L4110]              revert := true;
[L4529]  RET         call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4530]  COND TRUE   revert
[L1170]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1171]              assume revert || gas < 0;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_CZAI_ERC20(this);

[2020-11-25 13:02:33,518 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:02:33,518 INFO  L82        PathProgramCache]: Analyzing trace with hash 1053339706, now seen corresponding path program 1 times
[2020-11-25 13:02:33,519 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:02:33,529 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:02:33,579 INFO  L134       CoverageAnalysis]: Checked inductivity of 26 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 24 trivial. 0 not checked.
[2020-11-25 13:02:33,579 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:02:33,579 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 13:02:33,579 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:02:33,579 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 13:02:33,579 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 13:02:33,580 INFO  L87              Difference]: Start difference. First operand 7379 states and 8485 transitions. cyclomatic complexity: 1114 Second operand 7 states.
[2020-11-25 13:02:34,963 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:02:34,964 INFO  L93              Difference]: Finished difference Result 7703 states and 8843 transitions.
[2020-11-25 13:02:34,964 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 13:02:34,964 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7703 states and 8843 transitions.
[2020-11-25 13:02:34,980 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 13:02:34,996 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7703 states to 7703 states and 8843 transitions.
[2020-11-25 13:02:34,996 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 371
[2020-11-25 13:02:34,996 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 371
[2020-11-25 13:02:34,996 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7703 states and 8843 transitions.
[2020-11-25 13:02:35,002 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:02:35,002 INFO  L728         BuchiCegarLoop]: Abstraction has 7703 states and 8843 transitions.
[2020-11-25 13:02:35,008 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7703 states and 8843 transitions.
[2020-11-25 13:02:35,051 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7703 to 7479.
[2020-11-25 13:02:35,051 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7479 states.
[2020-11-25 13:02:35,059 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7479 states to 7479 states and 8587 transitions.
[2020-11-25 13:02:35,059 INFO  L751         BuchiCegarLoop]: Abstraction has 7479 states and 8587 transitions.
[2020-11-25 13:02:35,059 INFO  L631         BuchiCegarLoop]: Abstraction has 7479 states and 8587 transitions.
[2020-11-25 13:02:35,059 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 13:02:35,059 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7479 states and 8587 transitions.
[2020-11-25 13:02:35,065 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 13:02:35,066 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:02:35,066 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:02:35,067 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:02:35,067 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == CZAI_ERC20;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call CZAI_ERC20_CZAI_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4745]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4745]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4746]  COND FALSE  !(revert)
[L4749]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4401]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4402]  COND FALSE  !(revert)
[L4405]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4405]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4406]  COND FALSE  !(revert)
[L4409]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]              assume msgsender_MSG != null;
[L4360]              Balance[this] := 0;
[L4361]              symbol_TokenERC20[this] := -1301478191;
[L4362]              name_TokenERC20[this] := -1301478191;
[L4363]              decimals_TokenERC20[this] := 0;
[L4364]              _totalSupply_TokenERC20[this] := 0;
[L4365]              balances_TokenERC20[this] := zeroRefintArr();
[L4366]              sum_balances0[this] := 0;
[L4367]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4368]              sum_allowed1[this] := 0;
[L4370]              symbol_TokenERC20[this] := 56796887;
[L4371]              name_TokenERC20[this] := -847728030;
[L4372]              decimals_TokenERC20[this] := 0;
[L4373]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              _totalSupply_TokenERC20[this] := nonlinearMul(61917364224 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4375]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4376]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4377]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4378]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4409]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4749]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4750]  COND FALSE  !(revert)
[L4753]  CALL        call CZAI_ERC20_CZAI_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4703]              assume msgsender_MSG != null;
[L4704]              Balance[this] := 0;
[L4705]              aSBlock_CZAI_ERC20[this] := 0;
[L4706]              aEBlock_CZAI_ERC20[this] := 0;
[L4707]              aCap_CZAI_ERC20[this] := 0;
[L4708]              aTot_CZAI_ERC20[this] := 0;
[L4709]              aAmt_CZAI_ERC20[this] := 0;
[L4710]              sSBlock_CZAI_ERC20[this] := 0;
[L4711]              sEBlock_CZAI_ERC20[this] := 0;
[L4712]              sCap_CZAI_ERC20[this] := 0;
[L4713]              sTot_CZAI_ERC20[this] := 0;
[L4714]              sChunk_CZAI_ERC20[this] := 0;
[L4715]              sPrice_CZAI_ERC20[this] := 0;
[L4753]  RET         call CZAI_ERC20_CZAI_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]  COND FALSE  !(revert)
[L7679]  RET         call CZAI_ERC20_CZAI_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;
[L7683]  CALL        call CorralChoice_CZAI_ERC20(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != CZAI_ERC20;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND TRUE   __exception
[L1140]              __tmp__Balance := Balance;
[L1141]              __tmp__DType := DType;
[L1142]              __tmp__Alloc := Alloc;
[L1143]              __tmp__balance_ADDR := balance_ADDR;
[L1144]              __tmp__M_Ref_int := M_Ref_int;
[L1145]              __tmp__sum_balances0 := sum_balances0;
[L1146]              __tmp__alloc_allowed_TokenERC20_lvl0 := alloc_allowed_TokenERC20_lvl0;
[L1147]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1148]              __tmp__sum_allowed1 := sum_allowed1;
[L1149]              __tmp__Length := Length;
[L1150]              __tmp__now := now;
[L1151]              __tmp__owner_Owned := owner_Owned;
[L1152]              __tmp__newOwner_Owned := newOwner_Owned;
[L1153]              __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L1154]              __tmp__name_TokenERC20 := name_TokenERC20;
[L1155]              __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L1156]              __tmp___totalSupply_TokenERC20 := _totalSupply_TokenERC20;
[L1157]              __tmp__balances_TokenERC20 := balances_TokenERC20;
[L1158]              __tmp__allowed_TokenERC20 := allowed_TokenERC20;
[L1159]              __tmp__aSBlock_CZAI_ERC20 := aSBlock_CZAI_ERC20;
[L1160]              __tmp__aEBlock_CZAI_ERC20 := aEBlock_CZAI_ERC20;
[L1161]              __tmp__aCap_CZAI_ERC20 := aCap_CZAI_ERC20;
[L1162]              __tmp__aTot_CZAI_ERC20 := aTot_CZAI_ERC20;
[L1163]              __tmp__aAmt_CZAI_ERC20 := aAmt_CZAI_ERC20;
[L1164]              __tmp__sSBlock_CZAI_ERC20 := sSBlock_CZAI_ERC20;
[L1165]              __tmp__sEBlock_CZAI_ERC20 := sEBlock_CZAI_ERC20;
[L1166]              __tmp__sCap_CZAI_ERC20 := sCap_CZAI_ERC20;
[L1167]              __tmp__sTot_CZAI_ERC20 := sTot_CZAI_ERC20;
[L1168]              __tmp__sChunk_CZAI_ERC20 := sChunk_CZAI_ERC20;
[L1169]              __tmp__sPrice_CZAI_ERC20 := sPrice_CZAI_ERC20;
[L1170]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4522]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4109]  COND FALSE  !(!(b_s45 <= a_s45))
[L4113]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4522]  RET         call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4523]  COND FALSE  !(revert)
[L4526]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_TokenERC20[this][from_s468];
[L4527]              __tmp__balances_TokenERC20[this][from_s468] := __var_7;
[L4528]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_TokenERC20[this][from_s468];
[L4529]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4109]  COND FALSE  !(!(b_s45 <= a_s45))
[L4113]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4529]  RET         call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4530]  COND FALSE  !(revert)
[L4533]              __tmp__sum_allowed1[from_s468] := __tmp__sum_allowed1[from_s468] - __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4534]              __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4535]              __tmp__sum_allowed1[from_s468] := __tmp__sum_allowed1[from_s468] + __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4536]  CALL        call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s468], tokens_s468);
[L4091]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4092]  COND TRUE   !(c_s23 >= a_s23)
[L4093]              revert := true;
[L4536]  RET         call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s468], tokens_s468);
[L4537]  COND TRUE   revert
[L1170]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1171]              assume revert || gas < 0;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_CZAI_ERC20(this);

Loop:
[L7683]  CALL        call CorralChoice_CZAI_ERC20(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != CZAI_ERC20;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND TRUE   __exception
[L1140]              __tmp__Balance := Balance;
[L1141]              __tmp__DType := DType;
[L1142]              __tmp__Alloc := Alloc;
[L1143]              __tmp__balance_ADDR := balance_ADDR;
[L1144]              __tmp__M_Ref_int := M_Ref_int;
[L1145]              __tmp__sum_balances0 := sum_balances0;
[L1146]              __tmp__alloc_allowed_TokenERC20_lvl0 := alloc_allowed_TokenERC20_lvl0;
[L1147]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1148]              __tmp__sum_allowed1 := sum_allowed1;
[L1149]              __tmp__Length := Length;
[L1150]              __tmp__now := now;
[L1151]              __tmp__owner_Owned := owner_Owned;
[L1152]              __tmp__newOwner_Owned := newOwner_Owned;
[L1153]              __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L1154]              __tmp__name_TokenERC20 := name_TokenERC20;
[L1155]              __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L1156]              __tmp___totalSupply_TokenERC20 := _totalSupply_TokenERC20;
[L1157]              __tmp__balances_TokenERC20 := balances_TokenERC20;
[L1158]              __tmp__allowed_TokenERC20 := allowed_TokenERC20;
[L1159]              __tmp__aSBlock_CZAI_ERC20 := aSBlock_CZAI_ERC20;
[L1160]              __tmp__aEBlock_CZAI_ERC20 := aEBlock_CZAI_ERC20;
[L1161]              __tmp__aCap_CZAI_ERC20 := aCap_CZAI_ERC20;
[L1162]              __tmp__aTot_CZAI_ERC20 := aTot_CZAI_ERC20;
[L1163]              __tmp__aAmt_CZAI_ERC20 := aAmt_CZAI_ERC20;
[L1164]              __tmp__sSBlock_CZAI_ERC20 := sSBlock_CZAI_ERC20;
[L1165]              __tmp__sEBlock_CZAI_ERC20 := sEBlock_CZAI_ERC20;
[L1166]              __tmp__sCap_CZAI_ERC20 := sCap_CZAI_ERC20;
[L1167]              __tmp__sTot_CZAI_ERC20 := sTot_CZAI_ERC20;
[L1168]              __tmp__sChunk_CZAI_ERC20 := sChunk_CZAI_ERC20;
[L1169]              __tmp__sPrice_CZAI_ERC20 := sPrice_CZAI_ERC20;
[L1170]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4522]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4109]  COND FALSE  !(!(b_s45 <= a_s45))
[L4113]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4522]  RET         call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4523]  COND FALSE  !(revert)
[L4526]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_TokenERC20[this][from_s468];
[L4527]              __tmp__balances_TokenERC20[this][from_s468] := __var_7;
[L4528]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_TokenERC20[this][from_s468];
[L4529]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4109]  COND FALSE  !(!(b_s45 <= a_s45))
[L4113]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4529]  RET         call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4530]  COND FALSE  !(revert)
[L4533]              __tmp__sum_allowed1[from_s468] := __tmp__sum_allowed1[from_s468] - __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4534]              __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4535]              __tmp__sum_allowed1[from_s468] := __tmp__sum_allowed1[from_s468] + __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4536]  CALL        call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s468], tokens_s468);
[L4091]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4092]  COND TRUE   !(c_s23 >= a_s23)
[L4093]              revert := true;
[L4536]  RET         call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s468], tokens_s468);
[L4537]  COND TRUE   revert
[L1170]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1171]              assume revert || gas < 0;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_CZAI_ERC20(this);

[2020-11-25 13:02:35,071 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:02:35,071 INFO  L82        PathProgramCache]: Analyzing trace with hash -1922981827, now seen corresponding path program 1 times
[2020-11-25 13:02:35,072 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:02:35,082 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:02:35,259 INFO  L134       CoverageAnalysis]: Checked inductivity of 27 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 27 trivial. 0 not checked.
[2020-11-25 13:02:35,259 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:02:35,260 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [18] imperfect sequences [] total 18
[2020-11-25 13:02:35,260 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:02:35,260 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 19 interpolants.
[2020-11-25 13:02:35,260 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=39, Invalid=303, Unknown=0, NotChecked=0, Total=342
[2020-11-25 13:02:35,260 INFO  L87              Difference]: Start difference. First operand 7479 states and 8587 transitions. cyclomatic complexity: 1116 Second operand 19 states.
[2020-11-25 13:02:44,430 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:02:44,430 INFO  L93              Difference]: Finished difference Result 7807 states and 8972 transitions.
[2020-11-25 13:02:44,430 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 21 states. 
[2020-11-25 13:02:44,431 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7807 states and 8972 transitions.
[2020-11-25 13:02:44,444 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 13:02:44,460 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7807 states to 7807 states and 8972 transitions.
[2020-11-25 13:02:44,461 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 378
[2020-11-25 13:02:44,461 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 378
[2020-11-25 13:02:44,461 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7807 states and 8972 transitions.
[2020-11-25 13:02:44,465 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:02:44,465 INFO  L728         BuchiCegarLoop]: Abstraction has 7807 states and 8972 transitions.
[2020-11-25 13:02:44,471 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7807 states and 8972 transitions.
[2020-11-25 13:02:44,514 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7807 to 7483.
[2020-11-25 13:02:44,514 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7483 states.
[2020-11-25 13:02:44,521 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7483 states to 7483 states and 8591 transitions.
[2020-11-25 13:02:44,522 INFO  L751         BuchiCegarLoop]: Abstraction has 7483 states and 8591 transitions.
[2020-11-25 13:02:44,522 INFO  L631         BuchiCegarLoop]: Abstraction has 7483 states and 8591 transitions.
[2020-11-25 13:02:44,522 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 13:02:44,522 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7483 states and 8591 transitions.
[2020-11-25 13:02:44,529 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 13:02:44,529 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:02:44,529 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:02:44,530 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:02:44,530 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == CZAI_ERC20;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call CZAI_ERC20_CZAI_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4745]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4745]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4746]  COND FALSE  !(revert)
[L4749]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4401]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4402]  COND FALSE  !(revert)
[L4405]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4405]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4406]  COND FALSE  !(revert)
[L4409]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]              assume msgsender_MSG != null;
[L4360]              Balance[this] := 0;
[L4361]              symbol_TokenERC20[this] := -1301478191;
[L4362]              name_TokenERC20[this] := -1301478191;
[L4363]              decimals_TokenERC20[this] := 0;
[L4364]              _totalSupply_TokenERC20[this] := 0;
[L4365]              balances_TokenERC20[this] := zeroRefintArr();
[L4366]              sum_balances0[this] := 0;
[L4367]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4368]              sum_allowed1[this] := 0;
[L4370]              symbol_TokenERC20[this] := 56796887;
[L4371]              name_TokenERC20[this] := -847728030;
[L4372]              decimals_TokenERC20[this] := 0;
[L4373]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              _totalSupply_TokenERC20[this] := nonlinearMul(61917364224 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4375]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4376]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4377]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4378]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4409]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4749]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4750]  COND FALSE  !(revert)
[L4753]  CALL        call CZAI_ERC20_CZAI_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4703]              assume msgsender_MSG != null;
[L4704]              Balance[this] := 0;
[L4705]              aSBlock_CZAI_ERC20[this] := 0;
[L4706]              aEBlock_CZAI_ERC20[this] := 0;
[L4707]              aCap_CZAI_ERC20[this] := 0;
[L4708]              aTot_CZAI_ERC20[this] := 0;
[L4709]              aAmt_CZAI_ERC20[this] := 0;
[L4710]              sSBlock_CZAI_ERC20[this] := 0;
[L4711]              sEBlock_CZAI_ERC20[this] := 0;
[L4712]              sCap_CZAI_ERC20[this] := 0;
[L4713]              sTot_CZAI_ERC20[this] := 0;
[L4714]              sChunk_CZAI_ERC20[this] := 0;
[L4715]              sPrice_CZAI_ERC20[this] := 0;
[L4753]  RET         call CZAI_ERC20_CZAI_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]  COND FALSE  !(revert)
[L7679]  RET         call CZAI_ERC20_CZAI_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;
[L7683]  CALL        call CorralChoice_CZAI_ERC20(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != CZAI_ERC20;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND TRUE   __exception
[L1140]              __tmp__Balance := Balance;
[L1141]              __tmp__DType := DType;
[L1142]              __tmp__Alloc := Alloc;
[L1143]              __tmp__balance_ADDR := balance_ADDR;
[L1144]              __tmp__M_Ref_int := M_Ref_int;
[L1145]              __tmp__sum_balances0 := sum_balances0;
[L1146]              __tmp__alloc_allowed_TokenERC20_lvl0 := alloc_allowed_TokenERC20_lvl0;
[L1147]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1148]              __tmp__sum_allowed1 := sum_allowed1;
[L1149]              __tmp__Length := Length;
[L1150]              __tmp__now := now;
[L1151]              __tmp__owner_Owned := owner_Owned;
[L1152]              __tmp__newOwner_Owned := newOwner_Owned;
[L1153]              __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L1154]              __tmp__name_TokenERC20 := name_TokenERC20;
[L1155]              __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L1156]              __tmp___totalSupply_TokenERC20 := _totalSupply_TokenERC20;
[L1157]              __tmp__balances_TokenERC20 := balances_TokenERC20;
[L1158]              __tmp__allowed_TokenERC20 := allowed_TokenERC20;
[L1159]              __tmp__aSBlock_CZAI_ERC20 := aSBlock_CZAI_ERC20;
[L1160]              __tmp__aEBlock_CZAI_ERC20 := aEBlock_CZAI_ERC20;
[L1161]              __tmp__aCap_CZAI_ERC20 := aCap_CZAI_ERC20;
[L1162]              __tmp__aTot_CZAI_ERC20 := aTot_CZAI_ERC20;
[L1163]              __tmp__aAmt_CZAI_ERC20 := aAmt_CZAI_ERC20;
[L1164]              __tmp__sSBlock_CZAI_ERC20 := sSBlock_CZAI_ERC20;
[L1165]              __tmp__sEBlock_CZAI_ERC20 := sEBlock_CZAI_ERC20;
[L1166]              __tmp__sCap_CZAI_ERC20 := sCap_CZAI_ERC20;
[L1167]              __tmp__sTot_CZAI_ERC20 := sTot_CZAI_ERC20;
[L1168]              __tmp__sChunk_CZAI_ERC20 := sChunk_CZAI_ERC20;
[L1169]              __tmp__sPrice_CZAI_ERC20 := sPrice_CZAI_ERC20;
[L1170]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4522]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4109]  COND FALSE  !(!(b_s45 <= a_s45))
[L4113]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4522]  RET         call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4523]  COND FALSE  !(revert)
[L4526]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_TokenERC20[this][from_s468];
[L4527]              __tmp__balances_TokenERC20[this][from_s468] := __var_7;
[L4528]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_TokenERC20[this][from_s468];
[L4529]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4109]  COND FALSE  !(!(b_s45 <= a_s45))
[L4113]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4529]  RET         call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4530]  COND FALSE  !(revert)
[L4533]              __tmp__sum_allowed1[from_s468] := __tmp__sum_allowed1[from_s468] - __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4534]              __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4535]              __tmp__sum_allowed1[from_s468] := __tmp__sum_allowed1[from_s468] + __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4536]  CALL        call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s468], tokens_s468);
[L4091]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4092]  COND FALSE  !(!(c_s23 >= a_s23))
[L4536]  RET         call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s468], tokens_s468);
[L4537]  COND FALSE  !(revert)
[L4540]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_TokenERC20[this][to_s468];
[L4541]              __tmp__balances_TokenERC20[this][to_s468] := __var_9;
[L4542]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_TokenERC20[this][to_s468];
[L4543]              success_s468 := true;
[L1170]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1171]              assume revert || gas < 0;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_CZAI_ERC20(this);

Loop:
[L7683]  CALL        call CorralChoice_CZAI_ERC20(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != CZAI_ERC20;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND TRUE   choice == 32
[L7461]              gas := gas - 21000;
[L7462]  COND FALSE  !(gas >= 0)
[L7683]  RET         call CorralChoice_CZAI_ERC20(this);

[2020-11-25 13:02:44,533 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:02:44,534 INFO  L82        PathProgramCache]: Analyzing trace with hash 361426871, now seen corresponding path program 1 times
[2020-11-25 13:02:44,534 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:02:44,544 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:02:44,577 INFO  L134       CoverageAnalysis]: Checked inductivity of 27 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 27 trivial. 0 not checked.
[2020-11-25 13:02:44,577 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:02:44,577 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 13:02:44,577 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:02:44,578 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 13:02:44,578 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 13:02:44,578 INFO  L87              Difference]: Start difference. First operand 7483 states and 8591 transitions. cyclomatic complexity: 1116 Second operand 5 states.
[2020-11-25 13:02:45,580 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:02:45,580 INFO  L93              Difference]: Finished difference Result 8804 states and 10144 transitions.
[2020-11-25 13:02:45,580 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 13:02:45,581 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8804 states and 10144 transitions.
[2020-11-25 13:02:45,597 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 13:02:45,615 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8804 states to 7234 states and 8413 transitions.
[2020-11-25 13:02:45,615 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 296
[2020-11-25 13:02:45,616 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 296
[2020-11-25 13:02:45,616 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7234 states and 8413 transitions.
[2020-11-25 13:02:45,621 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:02:45,621 INFO  L728         BuchiCegarLoop]: Abstraction has 7234 states and 8413 transitions.
[2020-11-25 13:02:45,626 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7234 states and 8413 transitions.
[2020-11-25 13:02:45,660 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7234 to 5852.
[2020-11-25 13:02:45,660 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5852 states.
[2020-11-25 13:02:45,667 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5852 states to 5852 states and 6726 transitions.
[2020-11-25 13:02:45,667 INFO  L751         BuchiCegarLoop]: Abstraction has 5852 states and 6726 transitions.
[2020-11-25 13:02:45,667 INFO  L631         BuchiCegarLoop]: Abstraction has 5852 states and 6726 transitions.
[2020-11-25 13:02:45,667 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 13:02:45,667 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5852 states and 6726 transitions.
[2020-11-25 13:02:45,672 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:02:45,672 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:02:45,672 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:02:45,674 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:02:45,674 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == CZAI_ERC20;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call CZAI_ERC20_CZAI_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4745]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4745]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4746]  COND FALSE  !(revert)
[L4749]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4401]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4402]  COND FALSE  !(revert)
[L4405]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4405]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4406]  COND FALSE  !(revert)
[L4409]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]              assume msgsender_MSG != null;
[L4360]              Balance[this] := 0;
[L4361]              symbol_TokenERC20[this] := -1301478191;
[L4362]              name_TokenERC20[this] := -1301478191;
[L4363]              decimals_TokenERC20[this] := 0;
[L4364]              _totalSupply_TokenERC20[this] := 0;
[L4365]              balances_TokenERC20[this] := zeroRefintArr();
[L4366]              sum_balances0[this] := 0;
[L4367]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4368]              sum_allowed1[this] := 0;
[L4370]              symbol_TokenERC20[this] := 56796887;
[L4371]              name_TokenERC20[this] := -847728030;
[L4372]              decimals_TokenERC20[this] := 0;
[L4373]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              _totalSupply_TokenERC20[this] := nonlinearMul(61917364224 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4375]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4376]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4377]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4378]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4409]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4749]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4750]  COND FALSE  !(revert)
[L4753]  CALL        call CZAI_ERC20_CZAI_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4703]              assume msgsender_MSG != null;
[L4704]              Balance[this] := 0;
[L4705]              aSBlock_CZAI_ERC20[this] := 0;
[L4706]              aEBlock_CZAI_ERC20[this] := 0;
[L4707]              aCap_CZAI_ERC20[this] := 0;
[L4708]              aTot_CZAI_ERC20[this] := 0;
[L4709]              aAmt_CZAI_ERC20[this] := 0;
[L4710]              sSBlock_CZAI_ERC20[this] := 0;
[L4711]              sEBlock_CZAI_ERC20[this] := 0;
[L4712]              sCap_CZAI_ERC20[this] := 0;
[L4713]              sTot_CZAI_ERC20[this] := 0;
[L4714]              sChunk_CZAI_ERC20[this] := 0;
[L4715]              sPrice_CZAI_ERC20[this] := 0;
[L4753]  RET         call CZAI_ERC20_CZAI_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]  COND FALSE  !(revert)
[L7679]  RET         call CZAI_ERC20_CZAI_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;
[L7683]  CALL        call CorralChoice_CZAI_ERC20(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != CZAI_ERC20;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND TRUE   choice == 28
[L7486]              gas := gas - 21000;
[L7487]  COND TRUE   gas >= 0
[L7488]              assume tokens_s409 >= 0 && tokens_s409 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7489]              assume msgvalue_MSG == 0;
[L7490]  CALL        call success_s409 := approve~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, spender_s409, tokens_s409);
[L1057]              havoc __exception;
[L1058]              revert := false;
[L1059]  COND FALSE  !(__exception)
[L1093]  CALL        call success_s409 := approve~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s409, tokens_s409);
[L4509]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_TokenERC20[this][msgsender_MSG][spender_s409];
[L4510]              allowed_TokenERC20[this][msgsender_MSG][spender_s409] := tokens_s409;
[L4511]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_TokenERC20[this][msgsender_MSG][spender_s409];
[L4512]              assert { :EventEmitted "Approval_TokenERC20" } true;
[L4513]              success_s409 := true;
[L1093]  RET         call success_s409 := approve~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s409, tokens_s409);
[L1094]              assume !revert && gas >= 0;
[L7490]  RET         call success_s409 := approve~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, spender_s409, tokens_s409);
[L7683]  RET         call CorralChoice_CZAI_ERC20(this);
[L7683]  CALL        call CorralChoice_CZAI_ERC20(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != CZAI_ERC20;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND FALSE  !(__exception)
[L1173]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4552]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4552]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4553]  COND FALSE  !(revert)
[L4556]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][from_s468];
[L4557]              balances_TokenERC20[this][from_s468] := __var_7;
[L4558]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][from_s468];
[L4559]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4559]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4560]  COND FALSE  !(revert)
[L4563]              sum_allowed1[from_s468] := sum_allowed1[from_s468] - allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4564]              allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4565]              sum_allowed1[from_s468] := sum_allowed1[from_s468] + allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4566]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4100]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4101]  COND FALSE  !(!(c_s23 >= a_s23))
[L4566]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4567]  COND FALSE  !(revert)
[L4570]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s468];
[L4571]              balances_TokenERC20[this][to_s468] := __var_9;
[L4572]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s468];
[L4573]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4574]              success_s468 := true;
[L1173]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1174]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((((((((((success_s468 == true && balances_TokenERC20[this][from_s468] == old(balances_TokenERC20[this][from_s468]) - tokens_s468) && balances_TokenERC20[this][to_s468] == old(balances_TokenERC20[this][to_s468]) + tokens_s468) && allowed_TokenERC20[this][from_s468][msgsender_MSG] == old(allowed_TokenERC20[this][from_s468][msgsender_MSG]) - tokens_s468) && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this][p1] == old(balances_TokenERC20[this][p1])) && allowed_TokenERC20[this][p2][p3] == old(allowed_TokenERC20[this][p2][p3])) && aSBlock_CZAI_ERC20[this] == old(aSBlock_CZAI_ERC20[this])) && aEBlock_CZAI_ERC20[this] == old(aEBlock_CZAI_ERC20[this])) && aCap_CZAI_ERC20[this] == old(aCap_CZAI_ERC20[this])) && aTot_CZAI_ERC20[this] == old(aTot_CZAI_ERC20[this])) && aAmt_CZAI_ERC20[this] == old(aAmt_CZAI_ERC20[this])) && sSBlock_CZAI_ERC20[this] == old(sSBlock_CZAI_ERC20[this])) && sEBlock_CZAI_ERC20[this] == old(sEBlock_CZAI_ERC20[this])) && sCap_CZAI_ERC20[this] == old(sCap_CZAI_ERC20[this])) && sTot_CZAI_ERC20[this] == old(sTot_CZAI_ERC20[this])) && sChunk_CZAI_ERC20[this] == old(sChunk_CZAI_ERC20[this])) && sPrice_CZAI_ERC20[this] == old(sPrice_CZAI_ERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_CZAI_ERC20(this);

Loop:
[L7683]  CALL        call CorralChoice_CZAI_ERC20(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != CZAI_ERC20;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND FALSE  !(__exception)
[L1173]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4552]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4552]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4553]  COND FALSE  !(revert)
[L4556]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][from_s468];
[L4557]              balances_TokenERC20[this][from_s468] := __var_7;
[L4558]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][from_s468];
[L4559]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4559]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4560]  COND FALSE  !(revert)
[L4563]              sum_allowed1[from_s468] := sum_allowed1[from_s468] - allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4564]              allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4565]              sum_allowed1[from_s468] := sum_allowed1[from_s468] + allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4566]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4100]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4101]  COND FALSE  !(!(c_s23 >= a_s23))
[L4566]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4567]  COND FALSE  !(revert)
[L4570]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s468];
[L4571]              balances_TokenERC20[this][to_s468] := __var_9;
[L4572]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s468];
[L4573]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4574]              success_s468 := true;
[L1173]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1174]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((((((((((success_s468 == true && balances_TokenERC20[this][from_s468] == old(balances_TokenERC20[this][from_s468]) - tokens_s468) && balances_TokenERC20[this][to_s468] == old(balances_TokenERC20[this][to_s468]) + tokens_s468) && allowed_TokenERC20[this][from_s468][msgsender_MSG] == old(allowed_TokenERC20[this][from_s468][msgsender_MSG]) - tokens_s468) && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this][p1] == old(balances_TokenERC20[this][p1])) && allowed_TokenERC20[this][p2][p3] == old(allowed_TokenERC20[this][p2][p3])) && aSBlock_CZAI_ERC20[this] == old(aSBlock_CZAI_ERC20[this])) && aEBlock_CZAI_ERC20[this] == old(aEBlock_CZAI_ERC20[this])) && aCap_CZAI_ERC20[this] == old(aCap_CZAI_ERC20[this])) && aTot_CZAI_ERC20[this] == old(aTot_CZAI_ERC20[this])) && aAmt_CZAI_ERC20[this] == old(aAmt_CZAI_ERC20[this])) && sSBlock_CZAI_ERC20[this] == old(sSBlock_CZAI_ERC20[this])) && sEBlock_CZAI_ERC20[this] == old(sEBlock_CZAI_ERC20[this])) && sCap_CZAI_ERC20[this] == old(sCap_CZAI_ERC20[this])) && sTot_CZAI_ERC20[this] == old(sTot_CZAI_ERC20[this])) && sChunk_CZAI_ERC20[this] == old(sChunk_CZAI_ERC20[this])) && sPrice_CZAI_ERC20[this] == old(sPrice_CZAI_ERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_CZAI_ERC20(this);

[2020-11-25 13:02:45,678 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:02:45,678 INFO  L82        PathProgramCache]: Analyzing trace with hash 984798550, now seen corresponding path program 1 times
[2020-11-25 13:02:45,678 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:02:45,727 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:02:46,938 INFO  L134       CoverageAnalysis]: Checked inductivity of 112 backedges. 3 proven. 1 refuted. 0 times theorem prover too weak. 108 trivial. 0 not checked.
[2020-11-25 13:02:46,939 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 13:02:46,939 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [35] total 35
[2020-11-25 13:02:46,939 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:02:46,939 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 36 interpolants.
[2020-11-25 13:02:46,939 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=110, Invalid=1150, Unknown=0, NotChecked=0, Total=1260
[2020-11-25 13:02:46,939 INFO  L87              Difference]: Start difference. First operand 5852 states and 6726 transitions. cyclomatic complexity: 881 Second operand 36 states.
[2020-11-25 13:03:10,946 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:03:10,946 INFO  L93              Difference]: Finished difference Result 5988 states and 6898 transitions.
[2020-11-25 13:03:10,946 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 37 states. 
[2020-11-25 13:03:10,946 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5988 states and 6898 transitions.
[2020-11-25 13:03:10,956 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 13:03:10,968 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5988 states to 5988 states and 6898 transitions.
[2020-11-25 13:03:10,968 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 251
[2020-11-25 13:03:10,968 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 251
[2020-11-25 13:03:10,968 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5988 states and 6898 transitions.
[2020-11-25 13:03:10,972 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:03:10,972 INFO  L728         BuchiCegarLoop]: Abstraction has 5988 states and 6898 transitions.
[2020-11-25 13:03:10,976 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5988 states and 6898 transitions.
[2020-11-25 13:03:11,004 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5988 to 5905.
[2020-11-25 13:03:11,004 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5905 states.
[2020-11-25 13:03:11,010 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5905 states to 5905 states and 6791 transitions.
[2020-11-25 13:03:11,010 INFO  L751         BuchiCegarLoop]: Abstraction has 5905 states and 6791 transitions.
[2020-11-25 13:03:11,010 INFO  L631         BuchiCegarLoop]: Abstraction has 5905 states and 6791 transitions.
[2020-11-25 13:03:11,010 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 13:03:11,010 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5905 states and 6791 transitions.
[2020-11-25 13:03:11,015 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 13:03:11,015 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:03:11,015 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:03:11,017 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:03:11,017 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == CZAI_ERC20;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call CZAI_ERC20_CZAI_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4745]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4745]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4746]  COND FALSE  !(revert)
[L4749]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4401]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4402]  COND FALSE  !(revert)
[L4405]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4405]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4406]  COND FALSE  !(revert)
[L4409]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]              assume msgsender_MSG != null;
[L4360]              Balance[this] := 0;
[L4361]              symbol_TokenERC20[this] := -1301478191;
[L4362]              name_TokenERC20[this] := -1301478191;
[L4363]              decimals_TokenERC20[this] := 0;
[L4364]              _totalSupply_TokenERC20[this] := 0;
[L4365]              balances_TokenERC20[this] := zeroRefintArr();
[L4366]              sum_balances0[this] := 0;
[L4367]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4368]              sum_allowed1[this] := 0;
[L4370]              symbol_TokenERC20[this] := 56796887;
[L4371]              name_TokenERC20[this] := -847728030;
[L4372]              decimals_TokenERC20[this] := 0;
[L4373]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              _totalSupply_TokenERC20[this] := nonlinearMul(61917364224 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4375]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4376]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4377]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4378]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4409]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4749]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4750]  COND FALSE  !(revert)
[L4753]  CALL        call CZAI_ERC20_CZAI_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4703]              assume msgsender_MSG != null;
[L4704]              Balance[this] := 0;
[L4705]              aSBlock_CZAI_ERC20[this] := 0;
[L4706]              aEBlock_CZAI_ERC20[this] := 0;
[L4707]              aCap_CZAI_ERC20[this] := 0;
[L4708]              aTot_CZAI_ERC20[this] := 0;
[L4709]              aAmt_CZAI_ERC20[this] := 0;
[L4710]              sSBlock_CZAI_ERC20[this] := 0;
[L4711]              sEBlock_CZAI_ERC20[this] := 0;
[L4712]              sCap_CZAI_ERC20[this] := 0;
[L4713]              sTot_CZAI_ERC20[this] := 0;
[L4714]              sChunk_CZAI_ERC20[this] := 0;
[L4715]              sPrice_CZAI_ERC20[this] := 0;
[L4753]  RET         call CZAI_ERC20_CZAI_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]  COND FALSE  !(revert)
[L7679]  RET         call CZAI_ERC20_CZAI_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;
[L7683]  CALL        call CorralChoice_CZAI_ERC20(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != CZAI_ERC20;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND FALSE  !(choice == 27)
[L7499]  COND FALSE  !(choice == 26)
[L7505]  COND FALSE  !(choice == 25)
[L7511]  COND FALSE  !(choice == 24)
[L7517]  COND FALSE  !(choice == 23)
[L7523]  COND FALSE  !(choice == 22)
[L7529]  COND FALSE  !(choice == 21)
[L7535]  COND FALSE  !(choice == 20)
[L7541]  COND TRUE   choice == 19
[L7542]              gas := gas - 21000;
[L7543]  COND TRUE   gas >= 0
[L7544]              assume tokens_s527 >= 0 && tokens_s527 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7545]              assume msgvalue_MSG == 0;
[L7546]  CALL        call success_s527 := approveAndCall~address~uint256~bytes_TokenERC20(this, msgsender_MSG, msgvalue_MSG, spender_s527, tokens_s527, data_s527);
[L1291]              havoc __exception;
[L1292]              revert := false;
[L1293]  COND FALSE  !(__exception)
[L1327]  CALL        call success_s527 := approveAndCall~address~uint256~bytes_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s527, tokens_s527, data_s527);
[L4611]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_TokenERC20[this][msgsender_MSG][spender_s527];
[L4612]              allowed_TokenERC20[this][msgsender_MSG][spender_s527] := tokens_s527;
[L4613]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_TokenERC20[this][msgsender_MSG][spender_s527];
[L4614]              assert { :EventEmitted "Approval_TokenERC20" } true;
[L4615]              assume DType[spender_s527] == ApproveAndCallFallBack;
[L4616]              __var_10 := spender_s527;
[L4617]              __var_12 := this;
[L4619]              success_s527 := true;
[L1327]  RET         call success_s527 := approveAndCall~address~uint256~bytes_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s527, tokens_s527, data_s527);
[L1328]              assume !revert && gas >= 0;
[L7546]  RET         call success_s527 := approveAndCall~address~uint256~bytes_TokenERC20(this, msgsender_MSG, msgvalue_MSG, spender_s527, tokens_s527, data_s527);
[L7683]  RET         call CorralChoice_CZAI_ERC20(this);
[L7683]  CALL        call CorralChoice_CZAI_ERC20(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != CZAI_ERC20;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND FALSE  !(__exception)
[L1173]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4552]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4552]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4553]  COND FALSE  !(revert)
[L4556]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][from_s468];
[L4557]              balances_TokenERC20[this][from_s468] := __var_7;
[L4558]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][from_s468];
[L4559]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4559]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4560]  COND FALSE  !(revert)
[L4563]              sum_allowed1[from_s468] := sum_allowed1[from_s468] - allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4564]              allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4565]              sum_allowed1[from_s468] := sum_allowed1[from_s468] + allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4566]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4100]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4101]  COND FALSE  !(!(c_s23 >= a_s23))
[L4566]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4567]  COND FALSE  !(revert)
[L4570]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s468];
[L4571]              balances_TokenERC20[this][to_s468] := __var_9;
[L4572]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s468];
[L4573]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4574]              success_s468 := true;
[L1173]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1174]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((((((((((success_s468 == true && balances_TokenERC20[this][from_s468] == old(balances_TokenERC20[this][from_s468]) - tokens_s468) && balances_TokenERC20[this][to_s468] == old(balances_TokenERC20[this][to_s468]) + tokens_s468) && allowed_TokenERC20[this][from_s468][msgsender_MSG] == old(allowed_TokenERC20[this][from_s468][msgsender_MSG]) - tokens_s468) && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this][p1] == old(balances_TokenERC20[this][p1])) && allowed_TokenERC20[this][p2][p3] == old(allowed_TokenERC20[this][p2][p3])) && aSBlock_CZAI_ERC20[this] == old(aSBlock_CZAI_ERC20[this])) && aEBlock_CZAI_ERC20[this] == old(aEBlock_CZAI_ERC20[this])) && aCap_CZAI_ERC20[this] == old(aCap_CZAI_ERC20[this])) && aTot_CZAI_ERC20[this] == old(aTot_CZAI_ERC20[this])) && aAmt_CZAI_ERC20[this] == old(aAmt_CZAI_ERC20[this])) && sSBlock_CZAI_ERC20[this] == old(sSBlock_CZAI_ERC20[this])) && sEBlock_CZAI_ERC20[this] == old(sEBlock_CZAI_ERC20[this])) && sCap_CZAI_ERC20[this] == old(sCap_CZAI_ERC20[this])) && sTot_CZAI_ERC20[this] == old(sTot_CZAI_ERC20[this])) && sChunk_CZAI_ERC20[this] == old(sChunk_CZAI_ERC20[this])) && sPrice_CZAI_ERC20[this] == old(sPrice_CZAI_ERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_CZAI_ERC20(this);

Loop:
[L7683]  CALL        call CorralChoice_CZAI_ERC20(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != CZAI_ERC20;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND TRUE   choice == 28
[L7486]              gas := gas - 21000;
[L7487]  COND TRUE   gas >= 0
[L7488]              assume tokens_s409 >= 0 && tokens_s409 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7489]              assume msgvalue_MSG == 0;
[L7490]  CALL        call success_s409 := approve~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, spender_s409, tokens_s409);
[L1057]              havoc __exception;
[L1058]              revert := false;
[L1059]  COND FALSE  !(__exception)
[L1093]  CALL        call success_s409 := approve~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s409, tokens_s409);
[L4509]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_TokenERC20[this][msgsender_MSG][spender_s409];
[L4510]              allowed_TokenERC20[this][msgsender_MSG][spender_s409] := tokens_s409;
[L4511]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_TokenERC20[this][msgsender_MSG][spender_s409];
[L4512]              assert { :EventEmitted "Approval_TokenERC20" } true;
[L4513]              success_s409 := true;
[L1093]  RET         call success_s409 := approve~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s409, tokens_s409);
[L1094]              assume !revert && gas >= 0;
[L7490]  RET         call success_s409 := approve~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, spender_s409, tokens_s409);
[L7683]  RET         call CorralChoice_CZAI_ERC20(this);

[2020-11-25 13:03:11,020 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:03:11,020 INFO  L82        PathProgramCache]: Analyzing trace with hash 422344801, now seen corresponding path program 1 times
[2020-11-25 13:03:11,021 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:03:11,075 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:03:12,519 WARN  L188               SmtUtils]: Spent 344.00 ms on a formula simplification. DAG size of input: 262 DAG size of output: 105
[2020-11-25 13:03:12,826 WARN  L188               SmtUtils]: Spent 230.00 ms on a formula simplification. DAG size of input: 252 DAG size of output: 95
[2020-11-25 13:03:13,061 WARN  L188               SmtUtils]: Spent 171.00 ms on a formula simplification. DAG size of input: 233 DAG size of output: 84
[2020-11-25 13:03:13,262 WARN  L188               SmtUtils]: Spent 130.00 ms on a formula simplification. DAG size of input: 224 DAG size of output: 72
[2020-11-25 13:03:13,460 WARN  L188               SmtUtils]: Spent 135.00 ms on a formula simplification. DAG size of input: 227 DAG size of output: 74
[2020-11-25 13:03:13,913 WARN  L188               SmtUtils]: Spent 330.00 ms on a formula simplification. DAG size of input: 374 DAG size of output: 80
[2020-11-25 13:03:14,135 WARN  L188               SmtUtils]: Spent 142.00 ms on a formula simplification. DAG size of input: 292 DAG size of output: 60
[2020-11-25 13:03:14,539 INFO  L134       CoverageAnalysis]: Checked inductivity of 113 backedges. 10 proven. 4 refuted. 0 times theorem prover too weak. 99 trivial. 0 not checked.
[2020-11-25 13:03:14,539 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 13:03:14,539 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [39] total 39
[2020-11-25 13:03:14,540 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:03:14,540 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 40 interpolants.
[2020-11-25 13:03:14,540 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=143, Invalid=1417, Unknown=0, NotChecked=0, Total=1560
[2020-11-25 13:03:14,540 INFO  L87              Difference]: Start difference. First operand 5905 states and 6791 transitions. cyclomatic complexity: 895 Second operand 40 states.
[2020-11-25 13:03:25,028 WARN  L188               SmtUtils]: Spent 101.00 ms on a formula simplification. DAG size of input: 121 DAG size of output: 97
[2020-11-25 13:03:43,318 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:03:43,318 INFO  L93              Difference]: Finished difference Result 6010 states and 6937 transitions.
[2020-11-25 13:03:43,318 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 43 states. 
[2020-11-25 13:03:43,318 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6010 states and 6937 transitions.
[2020-11-25 13:03:43,327 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 13:03:43,338 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6010 states to 6010 states and 6937 transitions.
[2020-11-25 13:03:43,338 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 253
[2020-11-25 13:03:43,338 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 253
[2020-11-25 13:03:43,338 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6010 states and 6937 transitions.
[2020-11-25 13:03:43,341 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:03:43,341 INFO  L728         BuchiCegarLoop]: Abstraction has 6010 states and 6937 transitions.
[2020-11-25 13:03:43,345 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6010 states and 6937 transitions.
[2020-11-25 13:03:43,374 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6010 to 5905.
[2020-11-25 13:03:43,374 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5905 states.
[2020-11-25 13:03:43,382 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5905 states to 5905 states and 6791 transitions.
[2020-11-25 13:03:43,382 INFO  L751         BuchiCegarLoop]: Abstraction has 5905 states and 6791 transitions.
[2020-11-25 13:03:43,382 INFO  L631         BuchiCegarLoop]: Abstraction has 5905 states and 6791 transitions.
[2020-11-25 13:03:43,382 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 13:03:43,382 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5905 states and 6791 transitions.
[2020-11-25 13:03:43,387 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 13:03:43,388 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:03:43,388 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:03:43,389 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:03:43,389 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == CZAI_ERC20;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call CZAI_ERC20_CZAI_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4745]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4745]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4746]  COND FALSE  !(revert)
[L4749]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4401]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4402]  COND FALSE  !(revert)
[L4405]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4405]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4406]  COND FALSE  !(revert)
[L4409]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]              assume msgsender_MSG != null;
[L4360]              Balance[this] := 0;
[L4361]              symbol_TokenERC20[this] := -1301478191;
[L4362]              name_TokenERC20[this] := -1301478191;
[L4363]              decimals_TokenERC20[this] := 0;
[L4364]              _totalSupply_TokenERC20[this] := 0;
[L4365]              balances_TokenERC20[this] := zeroRefintArr();
[L4366]              sum_balances0[this] := 0;
[L4367]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4368]              sum_allowed1[this] := 0;
[L4370]              symbol_TokenERC20[this] := 56796887;
[L4371]              name_TokenERC20[this] := -847728030;
[L4372]              decimals_TokenERC20[this] := 0;
[L4373]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              _totalSupply_TokenERC20[this] := nonlinearMul(61917364224 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4375]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4376]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4377]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4378]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4409]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4749]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4750]  COND FALSE  !(revert)
[L4753]  CALL        call CZAI_ERC20_CZAI_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4703]              assume msgsender_MSG != null;
[L4704]              Balance[this] := 0;
[L4705]              aSBlock_CZAI_ERC20[this] := 0;
[L4706]              aEBlock_CZAI_ERC20[this] := 0;
[L4707]              aCap_CZAI_ERC20[this] := 0;
[L4708]              aTot_CZAI_ERC20[this] := 0;
[L4709]              aAmt_CZAI_ERC20[this] := 0;
[L4710]              sSBlock_CZAI_ERC20[this] := 0;
[L4711]              sEBlock_CZAI_ERC20[this] := 0;
[L4712]              sCap_CZAI_ERC20[this] := 0;
[L4713]              sTot_CZAI_ERC20[this] := 0;
[L4714]              sChunk_CZAI_ERC20[this] := 0;
[L4715]              sPrice_CZAI_ERC20[this] := 0;
[L4753]  RET         call CZAI_ERC20_CZAI_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]  COND FALSE  !(revert)
[L7679]  RET         call CZAI_ERC20_CZAI_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;
[L7683]  CALL        call CorralChoice_CZAI_ERC20(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != CZAI_ERC20;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND TRUE   choice == 28
[L7486]              gas := gas - 21000;
[L7487]  COND TRUE   gas >= 0
[L7488]              assume tokens_s409 >= 0 && tokens_s409 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7489]              assume msgvalue_MSG == 0;
[L7490]  CALL        call success_s409 := approve~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, spender_s409, tokens_s409);
[L1057]              havoc __exception;
[L1058]              revert := false;
[L1059]  COND FALSE  !(__exception)
[L1093]  CALL        call success_s409 := approve~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s409, tokens_s409);
[L4509]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_TokenERC20[this][msgsender_MSG][spender_s409];
[L4510]              allowed_TokenERC20[this][msgsender_MSG][spender_s409] := tokens_s409;
[L4511]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_TokenERC20[this][msgsender_MSG][spender_s409];
[L4512]              assert { :EventEmitted "Approval_TokenERC20" } true;
[L4513]              success_s409 := true;
[L1093]  RET         call success_s409 := approve~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s409, tokens_s409);
[L1094]              assume !revert && gas >= 0;
[L7490]  RET         call success_s409 := approve~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, spender_s409, tokens_s409);
[L7683]  RET         call CorralChoice_CZAI_ERC20(this);
[L7683]  CALL        call CorralChoice_CZAI_ERC20(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != CZAI_ERC20;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND TRUE   __exception
[L1140]              __tmp__Balance := Balance;
[L1141]              __tmp__DType := DType;
[L1142]              __tmp__Alloc := Alloc;
[L1143]              __tmp__balance_ADDR := balance_ADDR;
[L1144]              __tmp__M_Ref_int := M_Ref_int;
[L1145]              __tmp__sum_balances0 := sum_balances0;
[L1146]              __tmp__alloc_allowed_TokenERC20_lvl0 := alloc_allowed_TokenERC20_lvl0;
[L1147]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1148]              __tmp__sum_allowed1 := sum_allowed1;
[L1149]              __tmp__Length := Length;
[L1150]              __tmp__now := now;
[L1151]              __tmp__owner_Owned := owner_Owned;
[L1152]              __tmp__newOwner_Owned := newOwner_Owned;
[L1153]              __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L1154]              __tmp__name_TokenERC20 := name_TokenERC20;
[L1155]              __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L1156]              __tmp___totalSupply_TokenERC20 := _totalSupply_TokenERC20;
[L1157]              __tmp__balances_TokenERC20 := balances_TokenERC20;
[L1158]              __tmp__allowed_TokenERC20 := allowed_TokenERC20;
[L1159]              __tmp__aSBlock_CZAI_ERC20 := aSBlock_CZAI_ERC20;
[L1160]              __tmp__aEBlock_CZAI_ERC20 := aEBlock_CZAI_ERC20;
[L1161]              __tmp__aCap_CZAI_ERC20 := aCap_CZAI_ERC20;
[L1162]              __tmp__aTot_CZAI_ERC20 := aTot_CZAI_ERC20;
[L1163]              __tmp__aAmt_CZAI_ERC20 := aAmt_CZAI_ERC20;
[L1164]              __tmp__sSBlock_CZAI_ERC20 := sSBlock_CZAI_ERC20;
[L1165]              __tmp__sEBlock_CZAI_ERC20 := sEBlock_CZAI_ERC20;
[L1166]              __tmp__sCap_CZAI_ERC20 := sCap_CZAI_ERC20;
[L1167]              __tmp__sTot_CZAI_ERC20 := sTot_CZAI_ERC20;
[L1168]              __tmp__sChunk_CZAI_ERC20 := sChunk_CZAI_ERC20;
[L1169]              __tmp__sPrice_CZAI_ERC20 := sPrice_CZAI_ERC20;
[L1170]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4522]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4109]  COND FALSE  !(!(b_s45 <= a_s45))
[L4113]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4522]  RET         call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4523]  COND FALSE  !(revert)
[L4526]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_TokenERC20[this][from_s468];
[L4527]              __tmp__balances_TokenERC20[this][from_s468] := __var_7;
[L4528]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_TokenERC20[this][from_s468];
[L4529]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4109]  COND FALSE  !(!(b_s45 <= a_s45))
[L4113]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4529]  RET         call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4530]  COND FALSE  !(revert)
[L4533]              __tmp__sum_allowed1[from_s468] := __tmp__sum_allowed1[from_s468] - __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4534]              __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4535]              __tmp__sum_allowed1[from_s468] := __tmp__sum_allowed1[from_s468] + __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4536]  CALL        call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s468], tokens_s468);
[L4091]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4092]  COND TRUE   !(c_s23 >= a_s23)
[L4093]              revert := true;
[L4536]  RET         call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s468], tokens_s468);
[L4537]  COND TRUE   revert
[L1170]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1171]              assume revert || gas < 0;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_CZAI_ERC20(this);

Loop:
[L7683]  CALL        call CorralChoice_CZAI_ERC20(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != CZAI_ERC20;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND TRUE   __exception
[L1140]              __tmp__Balance := Balance;
[L1141]              __tmp__DType := DType;
[L1142]              __tmp__Alloc := Alloc;
[L1143]              __tmp__balance_ADDR := balance_ADDR;
[L1144]              __tmp__M_Ref_int := M_Ref_int;
[L1145]              __tmp__sum_balances0 := sum_balances0;
[L1146]              __tmp__alloc_allowed_TokenERC20_lvl0 := alloc_allowed_TokenERC20_lvl0;
[L1147]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1148]              __tmp__sum_allowed1 := sum_allowed1;
[L1149]              __tmp__Length := Length;
[L1150]              __tmp__now := now;
[L1151]              __tmp__owner_Owned := owner_Owned;
[L1152]              __tmp__newOwner_Owned := newOwner_Owned;
[L1153]              __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L1154]              __tmp__name_TokenERC20 := name_TokenERC20;
[L1155]              __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L1156]              __tmp___totalSupply_TokenERC20 := _totalSupply_TokenERC20;
[L1157]              __tmp__balances_TokenERC20 := balances_TokenERC20;
[L1158]              __tmp__allowed_TokenERC20 := allowed_TokenERC20;
[L1159]              __tmp__aSBlock_CZAI_ERC20 := aSBlock_CZAI_ERC20;
[L1160]              __tmp__aEBlock_CZAI_ERC20 := aEBlock_CZAI_ERC20;
[L1161]              __tmp__aCap_CZAI_ERC20 := aCap_CZAI_ERC20;
[L1162]              __tmp__aTot_CZAI_ERC20 := aTot_CZAI_ERC20;
[L1163]              __tmp__aAmt_CZAI_ERC20 := aAmt_CZAI_ERC20;
[L1164]              __tmp__sSBlock_CZAI_ERC20 := sSBlock_CZAI_ERC20;
[L1165]              __tmp__sEBlock_CZAI_ERC20 := sEBlock_CZAI_ERC20;
[L1166]              __tmp__sCap_CZAI_ERC20 := sCap_CZAI_ERC20;
[L1167]              __tmp__sTot_CZAI_ERC20 := sTot_CZAI_ERC20;
[L1168]              __tmp__sChunk_CZAI_ERC20 := sChunk_CZAI_ERC20;
[L1169]              __tmp__sPrice_CZAI_ERC20 := sPrice_CZAI_ERC20;
[L1170]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4522]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4109]  COND FALSE  !(!(b_s45 <= a_s45))
[L4113]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4522]  RET         call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4523]  COND FALSE  !(revert)
[L4526]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_TokenERC20[this][from_s468];
[L4527]              __tmp__balances_TokenERC20[this][from_s468] := __var_7;
[L4528]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_TokenERC20[this][from_s468];
[L4529]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4109]  COND FALSE  !(!(b_s45 <= a_s45))
[L4113]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4529]  RET         call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4530]  COND FALSE  !(revert)
[L4533]              __tmp__sum_allowed1[from_s468] := __tmp__sum_allowed1[from_s468] - __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4534]              __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4535]              __tmp__sum_allowed1[from_s468] := __tmp__sum_allowed1[from_s468] + __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4536]  CALL        call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s468], tokens_s468);
[L4091]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4092]  COND TRUE   !(c_s23 >= a_s23)
[L4093]              revert := true;
[L4536]  RET         call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s468], tokens_s468);
[L4537]  COND TRUE   revert
[L1170]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1171]              assume revert || gas < 0;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_CZAI_ERC20(this);

[2020-11-25 13:03:43,393 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:03:43,393 INFO  L82        PathProgramCache]: Analyzing trace with hash 789711134, now seen corresponding path program 1 times
[2020-11-25 13:03:43,393 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:03:43,405 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:03:43,492 INFO  L134       CoverageAnalysis]: Checked inductivity of 112 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 112 trivial. 0 not checked.
[2020-11-25 13:03:43,492 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:03:43,492 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 13:03:43,493 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:03:43,493 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 13:03:43,493 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=16, Invalid=56, Unknown=0, NotChecked=0, Total=72
[2020-11-25 13:03:43,493 INFO  L87              Difference]: Start difference. First operand 5905 states and 6791 transitions. cyclomatic complexity: 895 Second operand 9 states.
[2020-11-25 13:03:46,356 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:03:46,357 INFO  L93              Difference]: Finished difference Result 6165 states and 7096 transitions.
[2020-11-25 13:03:46,357 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 13:03:46,357 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6165 states and 7096 transitions.
[2020-11-25 13:03:46,369 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 13:03:46,380 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6165 states to 6103 states and 7032 transitions.
[2020-11-25 13:03:46,381 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 255
[2020-11-25 13:03:46,381 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 255
[2020-11-25 13:03:46,381 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6103 states and 7032 transitions.
[2020-11-25 13:03:46,384 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:03:46,384 INFO  L728         BuchiCegarLoop]: Abstraction has 6103 states and 7032 transitions.
[2020-11-25 13:03:46,388 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6103 states and 7032 transitions.
[2020-11-25 13:03:46,412 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6103 to 5786.
[2020-11-25 13:03:46,413 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5786 states.
[2020-11-25 13:03:46,418 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5786 states to 5786 states and 6656 transitions.
[2020-11-25 13:03:46,418 INFO  L751         BuchiCegarLoop]: Abstraction has 5786 states and 6656 transitions.
[2020-11-25 13:03:46,418 INFO  L631         BuchiCegarLoop]: Abstraction has 5786 states and 6656 transitions.
[2020-11-25 13:03:46,418 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 13:03:46,418 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5786 states and 6656 transitions.
[2020-11-25 13:03:46,423 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:03:46,423 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:03:46,423 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:03:46,425 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:03:46,425 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == CZAI_ERC20;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call CZAI_ERC20_CZAI_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4745]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4745]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4746]  COND FALSE  !(revert)
[L4749]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4401]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4402]  COND FALSE  !(revert)
[L4405]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4405]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4406]  COND FALSE  !(revert)
[L4409]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]              assume msgsender_MSG != null;
[L4360]              Balance[this] := 0;
[L4361]              symbol_TokenERC20[this] := -1301478191;
[L4362]              name_TokenERC20[this] := -1301478191;
[L4363]              decimals_TokenERC20[this] := 0;
[L4364]              _totalSupply_TokenERC20[this] := 0;
[L4365]              balances_TokenERC20[this] := zeroRefintArr();
[L4366]              sum_balances0[this] := 0;
[L4367]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4368]              sum_allowed1[this] := 0;
[L4370]              symbol_TokenERC20[this] := 56796887;
[L4371]              name_TokenERC20[this] := -847728030;
[L4372]              decimals_TokenERC20[this] := 0;
[L4373]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              _totalSupply_TokenERC20[this] := nonlinearMul(61917364224 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4375]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4376]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4377]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4378]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4409]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4749]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4750]  COND FALSE  !(revert)
[L4753]  CALL        call CZAI_ERC20_CZAI_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4703]              assume msgsender_MSG != null;
[L4704]              Balance[this] := 0;
[L4705]              aSBlock_CZAI_ERC20[this] := 0;
[L4706]              aEBlock_CZAI_ERC20[this] := 0;
[L4707]              aCap_CZAI_ERC20[this] := 0;
[L4708]              aTot_CZAI_ERC20[this] := 0;
[L4709]              aAmt_CZAI_ERC20[this] := 0;
[L4710]              sSBlock_CZAI_ERC20[this] := 0;
[L4711]              sEBlock_CZAI_ERC20[this] := 0;
[L4712]              sCap_CZAI_ERC20[this] := 0;
[L4713]              sTot_CZAI_ERC20[this] := 0;
[L4714]              sChunk_CZAI_ERC20[this] := 0;
[L4715]              sPrice_CZAI_ERC20[this] := 0;
[L4753]  RET         call CZAI_ERC20_CZAI_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]  COND FALSE  !(revert)
[L7679]  RET         call CZAI_ERC20_CZAI_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;
[L7683]  CALL        call CorralChoice_CZAI_ERC20(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != CZAI_ERC20;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND TRUE   choice == 29
[L7479]              gas := gas - 21000;
[L7480]  COND TRUE   gas >= 0
[L7481]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7482]              assume msgvalue_MSG == 0;
[L7483]  CALL        call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L979]               havoc __exception;
[L980]               revert := false;
[L981]   COND FALSE  !(__exception)
[L1015]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L4479]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4479]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4480]  COND FALSE  !(revert)
[L4483]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][msgsender_MSG];
[L4484]              balances_TokenERC20[this][msgsender_MSG] := __var_5;
[L4485]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][msgsender_MSG];
[L4486]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4100]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4101]  COND FALSE  !(!(c_s23 >= a_s23))
[L4486]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4487]  COND FALSE  !(revert)
[L4490]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s381];
[L4491]              balances_TokenERC20[this][to_s381] := __var_6;
[L4492]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s381];
[L4493]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4494]              success_s381 := true;
[L1015]  RET         call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L1016]              assume !revert && gas >= 0;
[L7483]  RET         call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L7683]  RET         call CorralChoice_CZAI_ERC20(this);
[L7683]  CALL        call CorralChoice_CZAI_ERC20(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != CZAI_ERC20;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND FALSE  !(__exception)
[L1173]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4552]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4552]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4553]  COND FALSE  !(revert)
[L4556]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][from_s468];
[L4557]              balances_TokenERC20[this][from_s468] := __var_7;
[L4558]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][from_s468];
[L4559]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4559]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4560]  COND FALSE  !(revert)
[L4563]              sum_allowed1[from_s468] := sum_allowed1[from_s468] - allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4564]              allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4565]              sum_allowed1[from_s468] := sum_allowed1[from_s468] + allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4566]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4100]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4101]  COND FALSE  !(!(c_s23 >= a_s23))
[L4566]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4567]  COND FALSE  !(revert)
[L4570]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s468];
[L4571]              balances_TokenERC20[this][to_s468] := __var_9;
[L4572]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s468];
[L4573]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4574]              success_s468 := true;
[L1173]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1174]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((((((((((success_s468 == true && balances_TokenERC20[this][from_s468] == old(balances_TokenERC20[this][from_s468]) - tokens_s468) && balances_TokenERC20[this][to_s468] == old(balances_TokenERC20[this][to_s468]) + tokens_s468) && allowed_TokenERC20[this][from_s468][msgsender_MSG] == old(allowed_TokenERC20[this][from_s468][msgsender_MSG]) - tokens_s468) && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this][p1] == old(balances_TokenERC20[this][p1])) && allowed_TokenERC20[this][p2][p3] == old(allowed_TokenERC20[this][p2][p3])) && aSBlock_CZAI_ERC20[this] == old(aSBlock_CZAI_ERC20[this])) && aEBlock_CZAI_ERC20[this] == old(aEBlock_CZAI_ERC20[this])) && aCap_CZAI_ERC20[this] == old(aCap_CZAI_ERC20[this])) && aTot_CZAI_ERC20[this] == old(aTot_CZAI_ERC20[this])) && aAmt_CZAI_ERC20[this] == old(aAmt_CZAI_ERC20[this])) && sSBlock_CZAI_ERC20[this] == old(sSBlock_CZAI_ERC20[this])) && sEBlock_CZAI_ERC20[this] == old(sEBlock_CZAI_ERC20[this])) && sCap_CZAI_ERC20[this] == old(sCap_CZAI_ERC20[this])) && sTot_CZAI_ERC20[this] == old(sTot_CZAI_ERC20[this])) && sChunk_CZAI_ERC20[this] == old(sChunk_CZAI_ERC20[this])) && sPrice_CZAI_ERC20[this] == old(sPrice_CZAI_ERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_CZAI_ERC20(this);

Loop:
[L7683]  CALL        call CorralChoice_CZAI_ERC20(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != CZAI_ERC20;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND FALSE  !(__exception)
[L1173]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4552]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4552]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4553]  COND FALSE  !(revert)
[L4556]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][from_s468];
[L4557]              balances_TokenERC20[this][from_s468] := __var_7;
[L4558]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][from_s468];
[L4559]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4559]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4560]  COND FALSE  !(revert)
[L4563]              sum_allowed1[from_s468] := sum_allowed1[from_s468] - allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4564]              allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4565]              sum_allowed1[from_s468] := sum_allowed1[from_s468] + allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4566]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4100]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4101]  COND FALSE  !(!(c_s23 >= a_s23))
[L4566]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4567]  COND FALSE  !(revert)
[L4570]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s468];
[L4571]              balances_TokenERC20[this][to_s468] := __var_9;
[L4572]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s468];
[L4573]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4574]              success_s468 := true;
[L1173]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1174]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((((((((((success_s468 == true && balances_TokenERC20[this][from_s468] == old(balances_TokenERC20[this][from_s468]) - tokens_s468) && balances_TokenERC20[this][to_s468] == old(balances_TokenERC20[this][to_s468]) + tokens_s468) && allowed_TokenERC20[this][from_s468][msgsender_MSG] == old(allowed_TokenERC20[this][from_s468][msgsender_MSG]) - tokens_s468) && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this][p1] == old(balances_TokenERC20[this][p1])) && allowed_TokenERC20[this][p2][p3] == old(allowed_TokenERC20[this][p2][p3])) && aSBlock_CZAI_ERC20[this] == old(aSBlock_CZAI_ERC20[this])) && aEBlock_CZAI_ERC20[this] == old(aEBlock_CZAI_ERC20[this])) && aCap_CZAI_ERC20[this] == old(aCap_CZAI_ERC20[this])) && aTot_CZAI_ERC20[this] == old(aTot_CZAI_ERC20[this])) && aAmt_CZAI_ERC20[this] == old(aAmt_CZAI_ERC20[this])) && sSBlock_CZAI_ERC20[this] == old(sSBlock_CZAI_ERC20[this])) && sEBlock_CZAI_ERC20[this] == old(sEBlock_CZAI_ERC20[this])) && sCap_CZAI_ERC20[this] == old(sCap_CZAI_ERC20[this])) && sTot_CZAI_ERC20[this] == old(sTot_CZAI_ERC20[this])) && sChunk_CZAI_ERC20[this] == old(sChunk_CZAI_ERC20[this])) && sPrice_CZAI_ERC20[this] == old(sPrice_CZAI_ERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_CZAI_ERC20(this);

[2020-11-25 13:03:46,429 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:03:46,429 INFO  L82        PathProgramCache]: Analyzing trace with hash -116129347, now seen corresponding path program 1 times
[2020-11-25 13:03:46,429 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:03:46,489 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:03:47,119 WARN  L188               SmtUtils]: Spent 201.00 ms on a formula simplification. DAG size of input: 123 DAG size of output: 56
[2020-11-25 13:03:47,458 INFO  L134       CoverageAnalysis]: Checked inductivity of 111 backedges. 1 proven. 3 refuted. 0 times theorem prover too weak. 107 trivial. 0 not checked.
[2020-11-25 13:03:47,458 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 13:03:47,458 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [31] total 31
[2020-11-25 13:03:47,458 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:03:47,458 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 32 interpolants.
[2020-11-25 13:03:47,459 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=98, Invalid=894, Unknown=0, NotChecked=0, Total=992
[2020-11-25 13:03:47,460 INFO  L87              Difference]: Start difference. First operand 5786 states and 6656 transitions. cyclomatic complexity: 878 Second operand 32 states.
[2020-11-25 13:04:02,199 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:04:02,199 INFO  L93              Difference]: Finished difference Result 6251 states and 7256 transitions.
[2020-11-25 13:04:02,199 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 39 states. 
[2020-11-25 13:04:02,200 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6251 states and 7256 transitions.
[2020-11-25 13:04:02,210 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 13:04:02,222 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6251 states to 6251 states and 7256 transitions.
[2020-11-25 13:04:02,222 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 290
[2020-11-25 13:04:02,222 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 290
[2020-11-25 13:04:02,222 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6251 states and 7256 transitions.
[2020-11-25 13:04:02,226 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:04:02,226 INFO  L728         BuchiCegarLoop]: Abstraction has 6251 states and 7256 transitions.
[2020-11-25 13:04:02,230 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6251 states and 7256 transitions.
[2020-11-25 13:04:02,254 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6251 to 6139.
[2020-11-25 13:04:02,254 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6139 states.
[2020-11-25 13:04:02,260 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6139 states to 6139 states and 7129 transitions.
[2020-11-25 13:04:02,261 INFO  L751         BuchiCegarLoop]: Abstraction has 6139 states and 7129 transitions.
[2020-11-25 13:04:02,261 INFO  L631         BuchiCegarLoop]: Abstraction has 6139 states and 7129 transitions.
[2020-11-25 13:04:02,261 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 13:04:02,261 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6139 states and 7129 transitions.
[2020-11-25 13:04:02,266 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 13:04:02,266 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:04:02,266 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:04:02,268 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:04:02,268 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == CZAI_ERC20;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call CZAI_ERC20_CZAI_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4745]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4745]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4746]  COND FALSE  !(revert)
[L4749]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4401]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4402]  COND FALSE  !(revert)
[L4405]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4405]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4406]  COND FALSE  !(revert)
[L4409]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]              assume msgsender_MSG != null;
[L4360]              Balance[this] := 0;
[L4361]              symbol_TokenERC20[this] := -1301478191;
[L4362]              name_TokenERC20[this] := -1301478191;
[L4363]              decimals_TokenERC20[this] := 0;
[L4364]              _totalSupply_TokenERC20[this] := 0;
[L4365]              balances_TokenERC20[this] := zeroRefintArr();
[L4366]              sum_balances0[this] := 0;
[L4367]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4368]              sum_allowed1[this] := 0;
[L4370]              symbol_TokenERC20[this] := 56796887;
[L4371]              name_TokenERC20[this] := -847728030;
[L4372]              decimals_TokenERC20[this] := 0;
[L4373]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              _totalSupply_TokenERC20[this] := nonlinearMul(61917364224 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4375]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4376]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4377]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4378]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4409]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4749]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4750]  COND FALSE  !(revert)
[L4753]  CALL        call CZAI_ERC20_CZAI_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4703]              assume msgsender_MSG != null;
[L4704]              Balance[this] := 0;
[L4705]              aSBlock_CZAI_ERC20[this] := 0;
[L4706]              aEBlock_CZAI_ERC20[this] := 0;
[L4707]              aCap_CZAI_ERC20[this] := 0;
[L4708]              aTot_CZAI_ERC20[this] := 0;
[L4709]              aAmt_CZAI_ERC20[this] := 0;
[L4710]              sSBlock_CZAI_ERC20[this] := 0;
[L4711]              sEBlock_CZAI_ERC20[this] := 0;
[L4712]              sCap_CZAI_ERC20[this] := 0;
[L4713]              sTot_CZAI_ERC20[this] := 0;
[L4714]              sChunk_CZAI_ERC20[this] := 0;
[L4715]              sPrice_CZAI_ERC20[this] := 0;
[L4753]  RET         call CZAI_ERC20_CZAI_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]  COND FALSE  !(revert)
[L7679]  RET         call CZAI_ERC20_CZAI_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;
[L7683]  CALL        call CorralChoice_CZAI_ERC20(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != CZAI_ERC20;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND FALSE  !(choice == 27)
[L7499]  COND FALSE  !(choice == 26)
[L7505]  COND FALSE  !(choice == 25)
[L7511]  COND FALSE  !(choice == 24)
[L7517]  COND FALSE  !(choice == 23)
[L7523]  COND FALSE  !(choice == 22)
[L7529]  COND FALSE  !(choice == 21)
[L7535]  COND FALSE  !(choice == 20)
[L7541]  COND FALSE  !(choice == 19)
[L7548]  COND FALSE  !(choice == 18)
[L7554]  COND FALSE  !(choice == 17)
[L7560]  COND FALSE  !(choice == 16)
[L7566]  COND FALSE  !(choice == 15)
[L7572]  COND FALSE  !(choice == 14)
[L7578]  COND FALSE  !(choice == 13)
[L7584]  COND FALSE  !(choice == 12)
[L7590]  COND FALSE  !(choice == 11)
[L7596]  COND FALSE  !(choice == 10)
[L7602]  COND FALSE  !(choice == 9)
[L7608]  COND FALSE  !(choice == 8)
[L7614]  COND FALSE  !(choice == 7)
[L7620]  COND FALSE  !(choice == 6)
[L7626]  COND FALSE  !(choice == 5)
[L7632]  COND FALSE  !(choice == 4)
[L7638]  COND FALSE  !(choice == 3)
[L7648]  COND FALSE  !(choice == 2)
[L7659]  COND TRUE   choice == 1
[L7660]              gas := gas - 21000;
[L7661]  COND TRUE   gas >= 0
[L7662]              assume msgvalue_MSG == 0;
[L7663]  CALL        call clearETH_CZAI_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2213]              havoc __exception;
[L2214]              revert := false;
[L2215]  COND FALSE  !(__exception)
[L2249]  CALL        call clearETH_CZAI_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6829]  COND FALSE  !(!(msgsender_MSG == owner_Owned[this]))
[L5186]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]              _owner_s986 := msgsender_MSG;
[L5191]              __var_31 := gas;
[L5192]  COND FALSE  !(gas > 2300)
[L5195]              __var_31 := __var_31 - gas;
[L5196]              __var_32 := this;
[L5197]  CALL        call __var_33 := send__success(this, _owner_s986, Balance[this]);
[L6770]              havoc __exception;
[L6771]  COND FALSE  !(__exception)
[L6809]  COND TRUE   Balance[from] >= amount
[L6810]  CALL        call FallbackDispatch__success(from, to, amount);
[L5383]  COND FALSE  !(DType[to] == CZAI_ERC20)
[L5388]  COND FALSE  !(DType[to] == TokenERC20)
[L5393]  COND FALSE  !(DType[to] == Owned)
[L5395]  COND FALSE  !(DType[to] == ApproveAndCallFallBack)
[L5397]  COND FALSE  !(DType[to] == ERC20Interface)
[L5400]  CALL        call Fallback_UnknownType__success(from, to, amount);
[L6118]              assume Balance[from] >= amount;
[L6119]              Balance[from] := Balance[from] - amount;
[L6120]              Balance[to] := Balance[to] + amount;
[L6122]  COND FALSE  !(choice == 0)
[L6126]  COND FALSE  !(gas < 21000)
[L6129]  COND FALSE  !(DType[from] == CZAI_ERC20)
[L6432]  COND TRUE   DType[from] == TokenERC20
[L6433]  COND FALSE  !(choice == 14)
[L6442]  COND FALSE  !(choice == 13)
[L6451]  COND FALSE  !(choice == 12)
[L6460]  COND TRUE   choice == 11
[L6461]              gas := gas - 21000;
[L6462]  COND TRUE   gas >= 0
[L6463]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6464]              assume msgvalue_MSG == 0;
[L6465]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__success(from, to, msgvalue_MSG, to_s381, tokens_s381);
[L4479]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4479]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4480]  COND FALSE  !(revert)
[L4483]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][msgsender_MSG];
[L4484]              balances_TokenERC20[this][msgsender_MSG] := __var_5;
[L4485]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][msgsender_MSG];
[L4486]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4100]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4101]  COND FALSE  !(!(c_s23 >= a_s23))
[L4486]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4487]  COND FALSE  !(revert)
[L4490]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s381];
[L4491]              balances_TokenERC20[this][to_s381] := __var_6;
[L4492]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s381];
[L4493]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4494]              success_s381 := true;
[L6465]  RET         call success_s381 := transfer~address~uint256_TokenERC20__success(from, to, msgvalue_MSG, to_s381, tokens_s381);
[L6466]  COND FALSE  !(revert)
[L5400]  RET         call Fallback_UnknownType__success(from, to, amount);
[L5401]  COND FALSE  !(revert)
[L6810]  RET         call FallbackDispatch__success(from, to, amount);
[L6811]              success := true;
[L6815]              assume !revert && gas >= 0;
[L5197]  RET         call __var_33 := send__success(this, _owner_s986, Balance[this]);
[L5198]  COND FALSE  !(!__var_33)
[L5202]              gas := __var_31 + gas;
[L2249]  RET         call clearETH_CZAI_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]              assume !revert && gas >= 0;
[L7663]  RET         call clearETH_CZAI_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L7683]  RET         call CorralChoice_CZAI_ERC20(this);
[L7683]  CALL        call CorralChoice_CZAI_ERC20(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != CZAI_ERC20;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND FALSE  !(__exception)
[L1173]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4552]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4552]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4553]  COND FALSE  !(revert)
[L4556]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][from_s468];
[L4557]              balances_TokenERC20[this][from_s468] := __var_7;
[L4558]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][from_s468];
[L4559]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4559]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4560]  COND FALSE  !(revert)
[L4563]              sum_allowed1[from_s468] := sum_allowed1[from_s468] - allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4564]              allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4565]              sum_allowed1[from_s468] := sum_allowed1[from_s468] + allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4566]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4100]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4101]  COND FALSE  !(!(c_s23 >= a_s23))
[L4566]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4567]  COND FALSE  !(revert)
[L4570]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s468];
[L4571]              balances_TokenERC20[this][to_s468] := __var_9;
[L4572]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s468];
[L4573]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4574]              success_s468 := true;
[L1173]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1174]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((((((((((success_s468 == true && balances_TokenERC20[this][from_s468] == old(balances_TokenERC20[this][from_s468]) - tokens_s468) && balances_TokenERC20[this][to_s468] == old(balances_TokenERC20[this][to_s468]) + tokens_s468) && allowed_TokenERC20[this][from_s468][msgsender_MSG] == old(allowed_TokenERC20[this][from_s468][msgsender_MSG]) - tokens_s468) && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this][p1] == old(balances_TokenERC20[this][p1])) && allowed_TokenERC20[this][p2][p3] == old(allowed_TokenERC20[this][p2][p3])) && aSBlock_CZAI_ERC20[this] == old(aSBlock_CZAI_ERC20[this])) && aEBlock_CZAI_ERC20[this] == old(aEBlock_CZAI_ERC20[this])) && aCap_CZAI_ERC20[this] == old(aCap_CZAI_ERC20[this])) && aTot_CZAI_ERC20[this] == old(aTot_CZAI_ERC20[this])) && aAmt_CZAI_ERC20[this] == old(aAmt_CZAI_ERC20[this])) && sSBlock_CZAI_ERC20[this] == old(sSBlock_CZAI_ERC20[this])) && sEBlock_CZAI_ERC20[this] == old(sEBlock_CZAI_ERC20[this])) && sCap_CZAI_ERC20[this] == old(sCap_CZAI_ERC20[this])) && sTot_CZAI_ERC20[this] == old(sTot_CZAI_ERC20[this])) && sChunk_CZAI_ERC20[this] == old(sChunk_CZAI_ERC20[this])) && sPrice_CZAI_ERC20[this] == old(sPrice_CZAI_ERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_CZAI_ERC20(this);

Loop:
[L7683]  CALL        call CorralChoice_CZAI_ERC20(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != CZAI_ERC20;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND TRUE   choice == 32
[L7461]              gas := gas - 21000;
[L7462]  COND FALSE  !(gas >= 0)
[L7683]  RET         call CorralChoice_CZAI_ERC20(this);

[2020-11-25 13:04:02,272 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:04:02,272 INFO  L82        PathProgramCache]: Analyzing trace with hash -754138156, now seen corresponding path program 1 times
[2020-11-25 13:04:02,272 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:04:02,292 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:04:02,378 INFO  L134       CoverageAnalysis]: Checked inductivity of 113 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 112 trivial. 0 not checked.
[2020-11-25 13:04:02,378 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:04:02,378 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 13:04:02,379 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:04:02,379 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 13:04:02,379 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 13:04:02,379 INFO  L87              Difference]: Start difference. First operand 6139 states and 7129 transitions. cyclomatic complexity: 1001 Second operand 9 states.
[2020-11-25 13:04:02,507 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:04:02,507 INFO  L93              Difference]: Finished difference Result 6267 states and 7258 transitions.
[2020-11-25 13:04:02,507 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 13:04:02,507 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6267 states and 7258 transitions.
[2020-11-25 13:04:02,518 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 13:04:02,528 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6267 states to 5757 states and 6651 transitions.
[2020-11-25 13:04:02,528 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 269
[2020-11-25 13:04:02,529 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 269
[2020-11-25 13:04:02,529 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5757 states and 6651 transitions.
[2020-11-25 13:04:02,532 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:04:02,532 INFO  L728         BuchiCegarLoop]: Abstraction has 5757 states and 6651 transitions.
[2020-11-25 13:04:02,535 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5757 states and 6651 transitions.
[2020-11-25 13:04:02,556 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5757 to 5757.
[2020-11-25 13:04:02,556 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5757 states.
[2020-11-25 13:04:02,561 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5757 states to 5757 states and 6651 transitions.
[2020-11-25 13:04:02,561 INFO  L751         BuchiCegarLoop]: Abstraction has 5757 states and 6651 transitions.
[2020-11-25 13:04:02,561 INFO  L631         BuchiCegarLoop]: Abstraction has 5757 states and 6651 transitions.
[2020-11-25 13:04:02,562 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 13:04:02,562 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5757 states and 6651 transitions.
[2020-11-25 13:04:02,566 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 13:04:02,566 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:04:02,567 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:04:02,568 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:04:02,568 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == CZAI_ERC20;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call CZAI_ERC20_CZAI_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4745]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4745]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4746]  COND FALSE  !(revert)
[L4749]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4401]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4402]  COND FALSE  !(revert)
[L4405]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4405]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4406]  COND FALSE  !(revert)
[L4409]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]              assume msgsender_MSG != null;
[L4360]              Balance[this] := 0;
[L4361]              symbol_TokenERC20[this] := -1301478191;
[L4362]              name_TokenERC20[this] := -1301478191;
[L4363]              decimals_TokenERC20[this] := 0;
[L4364]              _totalSupply_TokenERC20[this] := 0;
[L4365]              balances_TokenERC20[this] := zeroRefintArr();
[L4366]              sum_balances0[this] := 0;
[L4367]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4368]              sum_allowed1[this] := 0;
[L4370]              symbol_TokenERC20[this] := 56796887;
[L4371]              name_TokenERC20[this] := -847728030;
[L4372]              decimals_TokenERC20[this] := 0;
[L4373]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              _totalSupply_TokenERC20[this] := nonlinearMul(61917364224 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4375]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4376]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4377]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4378]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4409]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4749]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4750]  COND FALSE  !(revert)
[L4753]  CALL        call CZAI_ERC20_CZAI_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4703]              assume msgsender_MSG != null;
[L4704]              Balance[this] := 0;
[L4705]              aSBlock_CZAI_ERC20[this] := 0;
[L4706]              aEBlock_CZAI_ERC20[this] := 0;
[L4707]              aCap_CZAI_ERC20[this] := 0;
[L4708]              aTot_CZAI_ERC20[this] := 0;
[L4709]              aAmt_CZAI_ERC20[this] := 0;
[L4710]              sSBlock_CZAI_ERC20[this] := 0;
[L4711]              sEBlock_CZAI_ERC20[this] := 0;
[L4712]              sCap_CZAI_ERC20[this] := 0;
[L4713]              sTot_CZAI_ERC20[this] := 0;
[L4714]              sChunk_CZAI_ERC20[this] := 0;
[L4715]              sPrice_CZAI_ERC20[this] := 0;
[L4753]  RET         call CZAI_ERC20_CZAI_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]  COND FALSE  !(revert)
[L7679]  RET         call CZAI_ERC20_CZAI_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;
[L7683]  CALL        call CorralChoice_CZAI_ERC20(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != CZAI_ERC20;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND FALSE  !(choice == 27)
[L7499]  COND FALSE  !(choice == 26)
[L7505]  COND FALSE  !(choice == 25)
[L7511]  COND FALSE  !(choice == 24)
[L7517]  COND FALSE  !(choice == 23)
[L7523]  COND FALSE  !(choice == 22)
[L7529]  COND FALSE  !(choice == 21)
[L7535]  COND FALSE  !(choice == 20)
[L7541]  COND FALSE  !(choice == 19)
[L7548]  COND FALSE  !(choice == 18)
[L7554]  COND FALSE  !(choice == 17)
[L7560]  COND FALSE  !(choice == 16)
[L7566]  COND FALSE  !(choice == 15)
[L7572]  COND FALSE  !(choice == 14)
[L7578]  COND FALSE  !(choice == 13)
[L7584]  COND FALSE  !(choice == 12)
[L7590]  COND FALSE  !(choice == 11)
[L7596]  COND FALSE  !(choice == 10)
[L7602]  COND FALSE  !(choice == 9)
[L7608]  COND FALSE  !(choice == 8)
[L7614]  COND FALSE  !(choice == 7)
[L7620]  COND FALSE  !(choice == 6)
[L7626]  COND FALSE  !(choice == 5)
[L7632]  COND FALSE  !(choice == 4)
[L7638]  COND FALSE  !(choice == 3)
[L7648]  COND FALSE  !(choice == 2)
[L7659]  COND TRUE   choice == 1
[L7660]              gas := gas - 21000;
[L7661]  COND TRUE   gas >= 0
[L7662]              assume msgvalue_MSG == 0;
[L7663]  CALL        call clearETH_CZAI_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2213]              havoc __exception;
[L2214]              revert := false;
[L2215]  COND FALSE  !(__exception)
[L2249]  CALL        call clearETH_CZAI_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6829]  COND FALSE  !(!(msgsender_MSG == owner_Owned[this]))
[L5186]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]              _owner_s986 := msgsender_MSG;
[L5191]              __var_31 := gas;
[L5192]  COND FALSE  !(gas > 2300)
[L5195]              __var_31 := __var_31 - gas;
[L5196]              __var_32 := this;
[L5197]  CALL        call __var_33 := send__success(this, _owner_s986, Balance[this]);
[L6770]              havoc __exception;
[L6771]  COND FALSE  !(__exception)
[L6809]  COND TRUE   Balance[from] >= amount
[L6810]  CALL        call FallbackDispatch__success(from, to, amount);
[L5383]  COND FALSE  !(DType[to] == CZAI_ERC20)
[L5388]  COND FALSE  !(DType[to] == TokenERC20)
[L5393]  COND FALSE  !(DType[to] == Owned)
[L5395]  COND FALSE  !(DType[to] == ApproveAndCallFallBack)
[L5397]  COND FALSE  !(DType[to] == ERC20Interface)
[L5400]  CALL        call Fallback_UnknownType__success(from, to, amount);
[L6118]              assume Balance[from] >= amount;
[L6119]              Balance[from] := Balance[from] - amount;
[L6120]              Balance[to] := Balance[to] + amount;
[L6122]  COND FALSE  !(choice == 0)
[L6126]  COND FALSE  !(gas < 21000)
[L6129]  COND TRUE   DType[from] == CZAI_ERC20
[L6130]  COND FALSE  !(choice == 32)
[L6139]  COND FALSE  !(choice == 31)
[L6148]  COND FALSE  !(choice == 30)
[L6157]  COND TRUE   choice == 29
[L6158]              gas := gas - 21000;
[L6159]  COND TRUE   gas >= 0
[L6160]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6161]              assume msgvalue_MSG == 0;
[L6162]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__success(from, to, msgvalue_MSG, to_s381, tokens_s381);
[L4479]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4479]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4480]  COND FALSE  !(revert)
[L4483]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][msgsender_MSG];
[L4484]              balances_TokenERC20[this][msgsender_MSG] := __var_5;
[L4485]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][msgsender_MSG];
[L4486]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4100]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4101]  COND FALSE  !(!(c_s23 >= a_s23))
[L4486]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4487]  COND FALSE  !(revert)
[L4490]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s381];
[L4491]              balances_TokenERC20[this][to_s381] := __var_6;
[L4492]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s381];
[L4493]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4494]              success_s381 := true;
[L6162]  RET         call success_s381 := transfer~address~uint256_TokenERC20__success(from, to, msgvalue_MSG, to_s381, tokens_s381);
[L6163]  COND FALSE  !(revert)
[L5400]  RET         call Fallback_UnknownType__success(from, to, amount);
[L5401]  COND FALSE  !(revert)
[L6810]  RET         call FallbackDispatch__success(from, to, amount);
[L6811]              success := true;
[L6815]              assume !revert && gas >= 0;
[L5197]  RET         call __var_33 := send__success(this, _owner_s986, Balance[this]);
[L5198]  COND FALSE  !(!__var_33)
[L5202]              gas := __var_31 + gas;
[L2249]  RET         call clearETH_CZAI_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]              assume !revert && gas >= 0;
[L7663]  RET         call clearETH_CZAI_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L7683]  RET         call CorralChoice_CZAI_ERC20(this);
[L7683]  CALL        call CorralChoice_CZAI_ERC20(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != CZAI_ERC20;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND FALSE  !(__exception)
[L1173]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4552]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4552]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4553]  COND FALSE  !(revert)
[L4556]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][from_s468];
[L4557]              balances_TokenERC20[this][from_s468] := __var_7;
[L4558]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][from_s468];
[L4559]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4559]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4560]  COND FALSE  !(revert)
[L4563]              sum_allowed1[from_s468] := sum_allowed1[from_s468] - allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4564]              allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4565]              sum_allowed1[from_s468] := sum_allowed1[from_s468] + allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4566]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4100]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4101]  COND FALSE  !(!(c_s23 >= a_s23))
[L4566]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4567]  COND FALSE  !(revert)
[L4570]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s468];
[L4571]              balances_TokenERC20[this][to_s468] := __var_9;
[L4572]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s468];
[L4573]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4574]              success_s468 := true;
[L1173]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1174]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((((((((((success_s468 == true && balances_TokenERC20[this][from_s468] == old(balances_TokenERC20[this][from_s468]) - tokens_s468) && balances_TokenERC20[this][to_s468] == old(balances_TokenERC20[this][to_s468]) + tokens_s468) && allowed_TokenERC20[this][from_s468][msgsender_MSG] == old(allowed_TokenERC20[this][from_s468][msgsender_MSG]) - tokens_s468) && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this][p1] == old(balances_TokenERC20[this][p1])) && allowed_TokenERC20[this][p2][p3] == old(allowed_TokenERC20[this][p2][p3])) && aSBlock_CZAI_ERC20[this] == old(aSBlock_CZAI_ERC20[this])) && aEBlock_CZAI_ERC20[this] == old(aEBlock_CZAI_ERC20[this])) && aCap_CZAI_ERC20[this] == old(aCap_CZAI_ERC20[this])) && aTot_CZAI_ERC20[this] == old(aTot_CZAI_ERC20[this])) && aAmt_CZAI_ERC20[this] == old(aAmt_CZAI_ERC20[this])) && sSBlock_CZAI_ERC20[this] == old(sSBlock_CZAI_ERC20[this])) && sEBlock_CZAI_ERC20[this] == old(sEBlock_CZAI_ERC20[this])) && sCap_CZAI_ERC20[this] == old(sCap_CZAI_ERC20[this])) && sTot_CZAI_ERC20[this] == old(sTot_CZAI_ERC20[this])) && sChunk_CZAI_ERC20[this] == old(sChunk_CZAI_ERC20[this])) && sPrice_CZAI_ERC20[this] == old(sPrice_CZAI_ERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_CZAI_ERC20(this);

Loop:
[L7683]  CALL        call CorralChoice_CZAI_ERC20(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != CZAI_ERC20;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND FALSE  !(__exception)
[L1173]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4552]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4552]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4553]  COND FALSE  !(revert)
[L4556]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][from_s468];
[L4557]              balances_TokenERC20[this][from_s468] := __var_7;
[L4558]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][from_s468];
[L4559]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4559]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4560]  COND FALSE  !(revert)
[L4563]              sum_allowed1[from_s468] := sum_allowed1[from_s468] - allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4564]              allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4565]              sum_allowed1[from_s468] := sum_allowed1[from_s468] + allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4566]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4100]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4101]  COND FALSE  !(!(c_s23 >= a_s23))
[L4566]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4567]  COND FALSE  !(revert)
[L4570]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s468];
[L4571]              balances_TokenERC20[this][to_s468] := __var_9;
[L4572]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s468];
[L4573]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4574]              success_s468 := true;
[L1173]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1174]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((((((((((success_s468 == true && balances_TokenERC20[this][from_s468] == old(balances_TokenERC20[this][from_s468]) - tokens_s468) && balances_TokenERC20[this][to_s468] == old(balances_TokenERC20[this][to_s468]) + tokens_s468) && allowed_TokenERC20[this][from_s468][msgsender_MSG] == old(allowed_TokenERC20[this][from_s468][msgsender_MSG]) - tokens_s468) && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this][p1] == old(balances_TokenERC20[this][p1])) && allowed_TokenERC20[this][p2][p3] == old(allowed_TokenERC20[this][p2][p3])) && aSBlock_CZAI_ERC20[this] == old(aSBlock_CZAI_ERC20[this])) && aEBlock_CZAI_ERC20[this] == old(aEBlock_CZAI_ERC20[this])) && aCap_CZAI_ERC20[this] == old(aCap_CZAI_ERC20[this])) && aTot_CZAI_ERC20[this] == old(aTot_CZAI_ERC20[this])) && aAmt_CZAI_ERC20[this] == old(aAmt_CZAI_ERC20[this])) && sSBlock_CZAI_ERC20[this] == old(sSBlock_CZAI_ERC20[this])) && sEBlock_CZAI_ERC20[this] == old(sEBlock_CZAI_ERC20[this])) && sCap_CZAI_ERC20[this] == old(sCap_CZAI_ERC20[this])) && sTot_CZAI_ERC20[this] == old(sTot_CZAI_ERC20[this])) && sChunk_CZAI_ERC20[this] == old(sChunk_CZAI_ERC20[this])) && sPrice_CZAI_ERC20[this] == old(sPrice_CZAI_ERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_CZAI_ERC20(this);

[2020-11-25 13:04:02,572 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:04:02,572 INFO  L82        PathProgramCache]: Analyzing trace with hash -871602438, now seen corresponding path program 1 times
[2020-11-25 13:04:02,573 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:04:02,590 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:04:02,672 INFO  L134       CoverageAnalysis]: Checked inductivity of 113 backedges. 1 proven. 17 refuted. 0 times theorem prover too weak. 95 trivial. 0 not checked.
[2020-11-25 13:04:02,673 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 13:04:02,673 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 13:04:02,673 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:04:02,673 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 13:04:02,673 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=14, Invalid=28, Unknown=0, NotChecked=0, Total=42
[2020-11-25 13:04:02,673 INFO  L87              Difference]: Start difference. First operand 5757 states and 6651 transitions. cyclomatic complexity: 905 Second operand 7 states.
[2020-11-25 13:04:03,931 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:04:03,931 INFO  L93              Difference]: Finished difference Result 7936 states and 8918 transitions.
[2020-11-25 13:04:03,931 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 13:04:03,931 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7936 states and 8918 transitions.
[2020-11-25 13:04:03,947 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 12
[2020-11-25 13:04:03,962 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7936 states to 7804 states and 8786 transitions.
[2020-11-25 13:04:03,963 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 293
[2020-11-25 13:04:03,963 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 864
[2020-11-25 13:04:03,963 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7804 states and 8786 transitions.
[2020-11-25 13:04:03,967 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:04:03,968 INFO  L728         BuchiCegarLoop]: Abstraction has 7804 states and 8786 transitions.
[2020-11-25 13:04:03,972 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7804 states and 8786 transitions.
[2020-11-25 13:04:04,004 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7804 to 7207.
[2020-11-25 13:04:04,004 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7207 states.
[2020-11-25 13:04:04,011 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7207 states to 7207 states and 8063 transitions.
[2020-11-25 13:04:04,011 INFO  L751         BuchiCegarLoop]: Abstraction has 7207 states and 8063 transitions.
[2020-11-25 13:04:04,011 INFO  L631         BuchiCegarLoop]: Abstraction has 7207 states and 8063 transitions.
[2020-11-25 13:04:04,011 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-25 13:04:04,011 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7207 states and 8063 transitions.
[2020-11-25 13:04:04,018 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 13:04:04,018 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:04:04,018 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:04:04,019 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:04:04,019 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == CZAI_ERC20;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call CZAI_ERC20_CZAI_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4745]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4745]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4746]  COND FALSE  !(revert)
[L4749]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4401]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4402]  COND FALSE  !(revert)
[L4405]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4405]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4406]  COND FALSE  !(revert)
[L4409]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]              assume msgsender_MSG != null;
[L4360]              Balance[this] := 0;
[L4361]              symbol_TokenERC20[this] := -1301478191;
[L4362]              name_TokenERC20[this] := -1301478191;
[L4363]              decimals_TokenERC20[this] := 0;
[L4364]              _totalSupply_TokenERC20[this] := 0;
[L4365]              balances_TokenERC20[this] := zeroRefintArr();
[L4366]              sum_balances0[this] := 0;
[L4367]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4368]              sum_allowed1[this] := 0;
[L4370]              symbol_TokenERC20[this] := 56796887;
[L4371]              name_TokenERC20[this] := -847728030;
[L4372]              decimals_TokenERC20[this] := 0;
[L4373]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              _totalSupply_TokenERC20[this] := nonlinearMul(61917364224 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4375]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4376]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4377]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4378]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4409]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4749]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4750]  COND FALSE  !(revert)
[L4753]  CALL        call CZAI_ERC20_CZAI_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4703]              assume msgsender_MSG != null;
[L4704]              Balance[this] := 0;
[L4705]              aSBlock_CZAI_ERC20[this] := 0;
[L4706]              aEBlock_CZAI_ERC20[this] := 0;
[L4707]              aCap_CZAI_ERC20[this] := 0;
[L4708]              aTot_CZAI_ERC20[this] := 0;
[L4709]              aAmt_CZAI_ERC20[this] := 0;
[L4710]              sSBlock_CZAI_ERC20[this] := 0;
[L4711]              sEBlock_CZAI_ERC20[this] := 0;
[L4712]              sCap_CZAI_ERC20[this] := 0;
[L4713]              sTot_CZAI_ERC20[this] := 0;
[L4714]              sChunk_CZAI_ERC20[this] := 0;
[L4715]              sPrice_CZAI_ERC20[this] := 0;
[L4753]  RET         call CZAI_ERC20_CZAI_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]  COND FALSE  !(revert)
[L7679]  RET         call CZAI_ERC20_CZAI_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;
[L7683]  CALL        call CorralChoice_CZAI_ERC20(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != CZAI_ERC20;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND FALSE  !(choice == 27)
[L7499]  COND FALSE  !(choice == 26)
[L7505]  COND FALSE  !(choice == 25)
[L7511]  COND FALSE  !(choice == 24)
[L7517]  COND FALSE  !(choice == 23)
[L7523]  COND FALSE  !(choice == 22)
[L7529]  COND FALSE  !(choice == 21)
[L7535]  COND FALSE  !(choice == 20)
[L7541]  COND FALSE  !(choice == 19)
[L7548]  COND FALSE  !(choice == 18)
[L7554]  COND FALSE  !(choice == 17)
[L7560]  COND FALSE  !(choice == 16)
[L7566]  COND FALSE  !(choice == 15)
[L7572]  COND FALSE  !(choice == 14)
[L7578]  COND FALSE  !(choice == 13)
[L7584]  COND FALSE  !(choice == 12)
[L7590]  COND FALSE  !(choice == 11)
[L7596]  COND FALSE  !(choice == 10)
[L7602]  COND FALSE  !(choice == 9)
[L7608]  COND FALSE  !(choice == 8)
[L7614]  COND FALSE  !(choice == 7)
[L7620]  COND FALSE  !(choice == 6)
[L7626]  COND FALSE  !(choice == 5)
[L7632]  COND FALSE  !(choice == 4)
[L7638]  COND FALSE  !(choice == 3)
[L7648]  COND FALSE  !(choice == 2)
[L7659]  COND TRUE   choice == 1
[L7660]              gas := gas - 21000;
[L7661]  COND TRUE   gas >= 0
[L7662]              assume msgvalue_MSG == 0;
[L7663]  CALL        call clearETH_CZAI_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2213]              havoc __exception;
[L2214]              revert := false;
[L2215]  COND FALSE  !(__exception)
[L2249]  CALL        call clearETH_CZAI_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6829]  COND FALSE  !(!(msgsender_MSG == owner_Owned[this]))
[L5186]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]              _owner_s986 := msgsender_MSG;
[L5191]              __var_31 := gas;
[L5192]  COND TRUE   gas > 2300
[L5193]              gas := 2300;
[L5195]              __var_31 := __var_31 - gas;
[L5196]              __var_32 := this;
[L5197]  CALL        call __var_33 := send__success(this, _owner_s986, Balance[this]);
[L6770]              havoc __exception;
[L6771]  COND FALSE  !(__exception)
[L6809]  COND TRUE   Balance[from] >= amount
[L6810]  CALL        call FallbackDispatch__success(from, to, amount);
[L5383]  COND FALSE  !(DType[to] == CZAI_ERC20)
[L5388]  COND FALSE  !(DType[to] == TokenERC20)
[L5393]  COND FALSE  !(DType[to] == Owned)
[L5395]  COND FALSE  !(DType[to] == ApproveAndCallFallBack)
[L5397]  COND FALSE  !(DType[to] == ERC20Interface)
[L5400]  CALL        call Fallback_UnknownType__success(from, to, amount);
[L6118]              assume Balance[from] >= amount;
[L6119]              Balance[from] := Balance[from] - amount;
[L6120]              Balance[to] := Balance[to] + amount;
[L6122]  COND FALSE  !(choice == 0)
[L6126]  COND FALSE  !(gas < 21000)
[L6129]  COND TRUE   DType[from] == CZAI_ERC20
[L6130]  COND FALSE  !(choice == 32)
[L6139]  COND FALSE  !(choice == 31)
[L6148]  COND FALSE  !(choice == 30)
[L6157]  COND FALSE  !(choice == 29)
[L6167]  COND TRUE   choice == 28
[L6168]              gas := gas - 21000;
[L6169]  COND TRUE   gas >= 0
[L6170]              assume tokens_s409 >= 0 && tokens_s409 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6171]              assume msgvalue_MSG == 0;
[L6172]  CALL        call success_s409 := approve~address~uint256_TokenERC20__success(from, to, msgvalue_MSG, spender_s409, tokens_s409);
[L4509]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_TokenERC20[this][msgsender_MSG][spender_s409];
[L4510]              allowed_TokenERC20[this][msgsender_MSG][spender_s409] := tokens_s409;
[L4511]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_TokenERC20[this][msgsender_MSG][spender_s409];
[L4512]              assert { :EventEmitted "Approval_TokenERC20" } true;
[L4513]              success_s409 := true;
[L6172]  RET         call success_s409 := approve~address~uint256_TokenERC20__success(from, to, msgvalue_MSG, spender_s409, tokens_s409);
[L6173]  COND FALSE  !(revert)
[L5400]  RET         call Fallback_UnknownType__success(from, to, amount);
[L5401]  COND FALSE  !(revert)
[L6810]  RET         call FallbackDispatch__success(from, to, amount);
[L6811]              success := true;
[L6815]              assume !revert && gas >= 0;
[L5197]  RET         call __var_33 := send__success(this, _owner_s986, Balance[this]);
[L5198]  COND FALSE  !(!__var_33)
[L5202]              gas := __var_31 + gas;
[L2249]  RET         call clearETH_CZAI_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]              assume !revert && gas >= 0;
[L7663]  RET         call clearETH_CZAI_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L7683]  RET         call CorralChoice_CZAI_ERC20(this);
[L7683]  CALL        call CorralChoice_CZAI_ERC20(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != CZAI_ERC20;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND FALSE  !(__exception)
[L1173]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4552]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4552]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4553]  COND FALSE  !(revert)
[L4556]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][from_s468];
[L4557]              balances_TokenERC20[this][from_s468] := __var_7;
[L4558]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][from_s468];
[L4559]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4559]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4560]  COND FALSE  !(revert)
[L4563]              sum_allowed1[from_s468] := sum_allowed1[from_s468] - allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4564]              allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4565]              sum_allowed1[from_s468] := sum_allowed1[from_s468] + allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4566]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4100]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4101]  COND FALSE  !(!(c_s23 >= a_s23))
[L4566]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4567]  COND FALSE  !(revert)
[L4570]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s468];
[L4571]              balances_TokenERC20[this][to_s468] := __var_9;
[L4572]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s468];
[L4573]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4574]              success_s468 := true;
[L1173]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1174]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((((((((((success_s468 == true && balances_TokenERC20[this][from_s468] == old(balances_TokenERC20[this][from_s468]) - tokens_s468) && balances_TokenERC20[this][to_s468] == old(balances_TokenERC20[this][to_s468]) + tokens_s468) && allowed_TokenERC20[this][from_s468][msgsender_MSG] == old(allowed_TokenERC20[this][from_s468][msgsender_MSG]) - tokens_s468) && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this][p1] == old(balances_TokenERC20[this][p1])) && allowed_TokenERC20[this][p2][p3] == old(allowed_TokenERC20[this][p2][p3])) && aSBlock_CZAI_ERC20[this] == old(aSBlock_CZAI_ERC20[this])) && aEBlock_CZAI_ERC20[this] == old(aEBlock_CZAI_ERC20[this])) && aCap_CZAI_ERC20[this] == old(aCap_CZAI_ERC20[this])) && aTot_CZAI_ERC20[this] == old(aTot_CZAI_ERC20[this])) && aAmt_CZAI_ERC20[this] == old(aAmt_CZAI_ERC20[this])) && sSBlock_CZAI_ERC20[this] == old(sSBlock_CZAI_ERC20[this])) && sEBlock_CZAI_ERC20[this] == old(sEBlock_CZAI_ERC20[this])) && sCap_CZAI_ERC20[this] == old(sCap_CZAI_ERC20[this])) && sTot_CZAI_ERC20[this] == old(sTot_CZAI_ERC20[this])) && sChunk_CZAI_ERC20[this] == old(sChunk_CZAI_ERC20[this])) && sPrice_CZAI_ERC20[this] == old(sPrice_CZAI_ERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_CZAI_ERC20(this);

Loop:
[L7683]  CALL        call CorralChoice_CZAI_ERC20(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != CZAI_ERC20;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND FALSE  !(choice == 27)
[L7499]  COND FALSE  !(choice == 26)
[L7505]  COND FALSE  !(choice == 25)
[L7511]  COND FALSE  !(choice == 24)
[L7517]  COND FALSE  !(choice == 23)
[L7523]  COND FALSE  !(choice == 22)
[L7529]  COND FALSE  !(choice == 21)
[L7535]  COND FALSE  !(choice == 20)
[L7541]  COND FALSE  !(choice == 19)
[L7548]  COND FALSE  !(choice == 18)
[L7554]  COND FALSE  !(choice == 17)
[L7560]  COND FALSE  !(choice == 16)
[L7566]  COND FALSE  !(choice == 15)
[L7572]  COND FALSE  !(choice == 14)
[L7578]  COND FALSE  !(choice == 13)
[L7584]  COND FALSE  !(choice == 12)
[L7590]  COND FALSE  !(choice == 11)
[L7596]  COND FALSE  !(choice == 10)
[L7602]  COND FALSE  !(choice == 9)
[L7608]  COND FALSE  !(choice == 8)
[L7614]  COND FALSE  !(choice == 7)
[L7620]  COND FALSE  !(choice == 6)
[L7626]  COND FALSE  !(choice == 5)
[L7632]  COND FALSE  !(choice == 4)
[L7638]  COND FALSE  !(choice == 3)
[L7648]  COND FALSE  !(choice == 2)
[L7659]  COND TRUE   choice == 1
[L7660]              gas := gas - 21000;
[L7661]  COND TRUE   gas >= 0
[L7662]              assume msgvalue_MSG == 0;
[L7663]  CALL        call clearETH_CZAI_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2213]              havoc __exception;
[L2214]              revert := false;
[L2215]  COND FALSE  !(__exception)
[L2249]  CALL        call clearETH_CZAI_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6829]  COND FALSE  !(!(msgsender_MSG == owner_Owned[this]))
[L5186]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]              _owner_s986 := msgsender_MSG;
[L5191]              __var_31 := gas;
[L5192]  COND TRUE   gas > 2300
[L5193]              gas := 2300;
[L5195]              __var_31 := __var_31 - gas;
[L5196]              __var_32 := this;
[L5197]  CALL        call __var_33 := send__success(this, _owner_s986, Balance[this]);
[L6770]              havoc __exception;
[L6771]  COND FALSE  !(__exception)
[L6809]  COND TRUE   Balance[from] >= amount
[L6810]  CALL        call FallbackDispatch__success(from, to, amount);
[L5383]  COND FALSE  !(DType[to] == CZAI_ERC20)
[L5388]  COND FALSE  !(DType[to] == TokenERC20)
[L5393]  COND FALSE  !(DType[to] == Owned)
[L5395]  COND FALSE  !(DType[to] == ApproveAndCallFallBack)
[L5397]  COND FALSE  !(DType[to] == ERC20Interface)
[L5400]  CALL        call Fallback_UnknownType__success(from, to, amount);
[L6118]              assume Balance[from] >= amount;
[L6119]              Balance[from] := Balance[from] - amount;
[L6120]              Balance[to] := Balance[to] + amount;
[L6122]  COND FALSE  !(choice == 0)
[L6126]  COND FALSE  !(gas < 21000)
[L6129]  COND TRUE   DType[from] == CZAI_ERC20
[L6130]  COND FALSE  !(choice == 32)
[L6139]  COND FALSE  !(choice == 31)
[L6148]  COND FALSE  !(choice == 30)
[L6157]  COND TRUE   choice == 29
[L6158]              gas := gas - 21000;
[L6159]  COND TRUE   gas >= 0
[L6160]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6161]              assume msgvalue_MSG == 0;
[L6162]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__success(from, to, msgvalue_MSG, to_s381, tokens_s381);
[L4479]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4479]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4480]  COND FALSE  !(revert)
[L4483]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][msgsender_MSG];
[L4484]              balances_TokenERC20[this][msgsender_MSG] := __var_5;
[L4485]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][msgsender_MSG];
[L4486]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4100]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4101]  COND FALSE  !(!(c_s23 >= a_s23))
[L4486]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4487]  COND FALSE  !(revert)
[L4490]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s381];
[L4491]              balances_TokenERC20[this][to_s381] := __var_6;
[L4492]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s381];
[L4493]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4494]              success_s381 := true;
[L6162]  RET         call success_s381 := transfer~address~uint256_TokenERC20__success(from, to, msgvalue_MSG, to_s381, tokens_s381);
[L6163]  COND FALSE  !(revert)
[L5400]  RET         call Fallback_UnknownType__success(from, to, amount);
[L5401]  COND FALSE  !(revert)
[L6810]  RET         call FallbackDispatch__success(from, to, amount);
[L6811]              success := true;
[L6815]              assume !revert && gas >= 0;
[L5197]  RET         call __var_33 := send__success(this, _owner_s986, Balance[this]);
[L5198]  COND FALSE  !(!__var_33)
[L5202]              gas := __var_31 + gas;
[L2249]  RET         call clearETH_CZAI_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]              assume !revert && gas >= 0;
[L7663]  RET         call clearETH_CZAI_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L7683]  RET         call CorralChoice_CZAI_ERC20(this);

[2020-11-25 13:04:04,023 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:04:04,024 INFO  L82        PathProgramCache]: Analyzing trace with hash -1861962089, now seen corresponding path program 1 times
[2020-11-25 13:04:04,024 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:04:04,040 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:04:04,115 INFO  L134       CoverageAnalysis]: Checked inductivity of 113 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 112 trivial. 0 not checked.
[2020-11-25 13:04:04,115 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:04:04,116 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 13:04:04,116 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:04:04,116 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 13:04:04,116 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=19, Unknown=0, NotChecked=0, Total=30
[2020-11-25 13:04:04,116 INFO  L87              Difference]: Start difference. First operand 7207 states and 8063 transitions. cyclomatic complexity: 867 Second operand 6 states.
[2020-11-25 13:04:04,986 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:04:04,986 INFO  L93              Difference]: Finished difference Result 4084 states and 4446 transitions.
[2020-11-25 13:04:04,986 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 13:04:04,986 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4084 states and 4446 transitions.
[2020-11-25 13:04:04,993 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 13:04:04,999 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4084 states to 4084 states and 4446 transitions.
[2020-11-25 13:04:04,999 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 853
[2020-11-25 13:04:05,000 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1323
[2020-11-25 13:04:05,000 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4084 states and 4446 transitions.
[2020-11-25 13:04:05,002 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:04:05,002 INFO  L728         BuchiCegarLoop]: Abstraction has 4084 states and 4446 transitions.
[2020-11-25 13:04:05,004 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4084 states and 4446 transitions.
[2020-11-25 13:04:05,017 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4084 to 3836.
[2020-11-25 13:04:05,017 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3836 states.
[2020-11-25 13:04:05,020 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3836 states to 3836 states and 4156 transitions.
[2020-11-25 13:04:05,020 INFO  L751         BuchiCegarLoop]: Abstraction has 3836 states and 4156 transitions.
[2020-11-25 13:04:05,020 INFO  L631         BuchiCegarLoop]: Abstraction has 3836 states and 4156 transitions.
[2020-11-25 13:04:05,020 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-25 13:04:05,020 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3836 states and 4156 transitions.
[2020-11-25 13:04:05,024 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 13:04:05,024 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:04:05,024 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:04:05,025 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:04:05,025 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == CZAI_ERC20;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call CZAI_ERC20_CZAI_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4745]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4745]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4746]  COND FALSE  !(revert)
[L4749]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4401]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4402]  COND FALSE  !(revert)
[L4405]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4405]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4406]  COND FALSE  !(revert)
[L4409]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]              assume msgsender_MSG != null;
[L4360]              Balance[this] := 0;
[L4361]              symbol_TokenERC20[this] := -1301478191;
[L4362]              name_TokenERC20[this] := -1301478191;
[L4363]              decimals_TokenERC20[this] := 0;
[L4364]              _totalSupply_TokenERC20[this] := 0;
[L4365]              balances_TokenERC20[this] := zeroRefintArr();
[L4366]              sum_balances0[this] := 0;
[L4367]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4368]              sum_allowed1[this] := 0;
[L4370]              symbol_TokenERC20[this] := 56796887;
[L4371]              name_TokenERC20[this] := -847728030;
[L4372]              decimals_TokenERC20[this] := 0;
[L4373]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              _totalSupply_TokenERC20[this] := nonlinearMul(61917364224 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4375]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4376]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4377]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4378]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4409]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4749]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4750]  COND FALSE  !(revert)
[L4753]  CALL        call CZAI_ERC20_CZAI_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4703]              assume msgsender_MSG != null;
[L4704]              Balance[this] := 0;
[L4705]              aSBlock_CZAI_ERC20[this] := 0;
[L4706]              aEBlock_CZAI_ERC20[this] := 0;
[L4707]              aCap_CZAI_ERC20[this] := 0;
[L4708]              aTot_CZAI_ERC20[this] := 0;
[L4709]              aAmt_CZAI_ERC20[this] := 0;
[L4710]              sSBlock_CZAI_ERC20[this] := 0;
[L4711]              sEBlock_CZAI_ERC20[this] := 0;
[L4712]              sCap_CZAI_ERC20[this] := 0;
[L4713]              sTot_CZAI_ERC20[this] := 0;
[L4714]              sChunk_CZAI_ERC20[this] := 0;
[L4715]              sPrice_CZAI_ERC20[this] := 0;
[L4753]  RET         call CZAI_ERC20_CZAI_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]  COND FALSE  !(revert)
[L7679]  RET         call CZAI_ERC20_CZAI_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;
[L7683]  CALL        call CorralChoice_CZAI_ERC20(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != CZAI_ERC20;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND FALSE  !(choice == 27)
[L7499]  COND FALSE  !(choice == 26)
[L7505]  COND FALSE  !(choice == 25)
[L7511]  COND FALSE  !(choice == 24)
[L7517]  COND FALSE  !(choice == 23)
[L7523]  COND FALSE  !(choice == 22)
[L7529]  COND FALSE  !(choice == 21)
[L7535]  COND FALSE  !(choice == 20)
[L7541]  COND FALSE  !(choice == 19)
[L7548]  COND FALSE  !(choice == 18)
[L7554]  COND FALSE  !(choice == 17)
[L7560]  COND FALSE  !(choice == 16)
[L7566]  COND FALSE  !(choice == 15)
[L7572]  COND FALSE  !(choice == 14)
[L7578]  COND FALSE  !(choice == 13)
[L7584]  COND FALSE  !(choice == 12)
[L7590]  COND FALSE  !(choice == 11)
[L7596]  COND FALSE  !(choice == 10)
[L7602]  COND FALSE  !(choice == 9)
[L7608]  COND FALSE  !(choice == 8)
[L7614]  COND TRUE   choice == 7
[L7615]              gas := gas - 21000;
[L7616]  COND TRUE   gas >= 0
[L7617]              assume msgvalue_MSG == 0;
[L7618]  CALL        call success_s687 := getAirdrop~address_CZAI_ERC20(this, msgsender_MSG, msgvalue_MSG, _refer_s687);
[L1723]              havoc __exception;
[L1724]              revert := false;
[L1725]  COND FALSE  !(__exception)
[L1759]  CALL        call success_s687 := getAirdrop~address_CZAI_ERC20__success(this, msgsender_MSG, msgvalue_MSG, _refer_s687);
[L4836]  COND FALSE  !(!(aSBlock_CZAI_ERC20[this] <= now && now <= aEBlock_CZAI_ERC20[this]))
[L4840]  COND FALSE  !(!(aTot_CZAI_ERC20[this] < aCap_CZAI_ERC20[this] || aCap_CZAI_ERC20[this] == 0))
[L4844]              aTot_CZAI_ERC20[this] := (aTot_CZAI_ERC20[this] + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4845]  COND TRUE   DType[this] == CZAI_ERC20
[L4846]  CALL        call __var_13 := balanceOf~address_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _refer_s687);
[L4449]              balance_s338 := balances_TokenERC20[this][tokenOwner_s338];
[L4846]  RET         call __var_13 := balanceOf~address_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _refer_s687);
[L4847]  COND FALSE  !(revert)
[L4853]  COND FALSE  !((msgsender_MSG != _refer_s687 && __var_13 != 0) && _refer_s687 != 0)
[L4872]              __var_18 := this;
[L4873]              __var_20 := this;
[L4874]  CALL        call __var_19 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][this], aAmt_CZAI_ERC20[this]);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]  RET         call __var_19 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][this], aAmt_CZAI_ERC20[this]);
[L4875]  COND FALSE  !(revert)
[L4878]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][this];
[L4879]              balances_TokenERC20[this][this] := __var_19;
[L4880]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][this];
[L4881]  CALL        call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], aAmt_CZAI_ERC20[this]);
[L4100]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4101]  COND FALSE  !(!(c_s23 >= a_s23))
[L4881]  RET         call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], aAmt_CZAI_ERC20[this]);
[L4882]  COND FALSE  !(revert)
[L4885]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][msgsender_MSG];
[L4886]              balances_TokenERC20[this][msgsender_MSG] := __var_21;
[L4887]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][msgsender_MSG];
[L4888]              assert { :EventEmitted "Transfer_CZAI_ERC20" } true;
[L4889]              success_s687 := true;
[L1759]  RET         call success_s687 := getAirdrop~address_CZAI_ERC20__success(this, msgsender_MSG, msgvalue_MSG, _refer_s687);
[L1760]              assume !revert && gas >= 0;
[L7618]  RET         call success_s687 := getAirdrop~address_CZAI_ERC20(this, msgsender_MSG, msgvalue_MSG, _refer_s687);
[L7683]  RET         call CorralChoice_CZAI_ERC20(this);
[L7683]  CALL        call CorralChoice_CZAI_ERC20(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != CZAI_ERC20;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND FALSE  !(__exception)
[L1173]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4552]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4552]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4553]  COND FALSE  !(revert)
[L4556]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][from_s468];
[L4557]              balances_TokenERC20[this][from_s468] := __var_7;
[L4558]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][from_s468];
[L4559]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4559]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4560]  COND FALSE  !(revert)
[L4563]              sum_allowed1[from_s468] := sum_allowed1[from_s468] - allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4564]              allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4565]              sum_allowed1[from_s468] := sum_allowed1[from_s468] + allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4566]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4100]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4101]  COND FALSE  !(!(c_s23 >= a_s23))
[L4566]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4567]  COND FALSE  !(revert)
[L4570]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s468];
[L4571]              balances_TokenERC20[this][to_s468] := __var_9;
[L4572]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s468];
[L4573]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4574]              success_s468 := true;
[L1173]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1174]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((((((((((success_s468 == true && balances_TokenERC20[this][from_s468] == old(balances_TokenERC20[this][from_s468]) - tokens_s468) && balances_TokenERC20[this][to_s468] == old(balances_TokenERC20[this][to_s468]) + tokens_s468) && allowed_TokenERC20[this][from_s468][msgsender_MSG] == old(allowed_TokenERC20[this][from_s468][msgsender_MSG]) - tokens_s468) && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this][p1] == old(balances_TokenERC20[this][p1])) && allowed_TokenERC20[this][p2][p3] == old(allowed_TokenERC20[this][p2][p3])) && aSBlock_CZAI_ERC20[this] == old(aSBlock_CZAI_ERC20[this])) && aEBlock_CZAI_ERC20[this] == old(aEBlock_CZAI_ERC20[this])) && aCap_CZAI_ERC20[this] == old(aCap_CZAI_ERC20[this])) && aTot_CZAI_ERC20[this] == old(aTot_CZAI_ERC20[this])) && aAmt_CZAI_ERC20[this] == old(aAmt_CZAI_ERC20[this])) && sSBlock_CZAI_ERC20[this] == old(sSBlock_CZAI_ERC20[this])) && sEBlock_CZAI_ERC20[this] == old(sEBlock_CZAI_ERC20[this])) && sCap_CZAI_ERC20[this] == old(sCap_CZAI_ERC20[this])) && sTot_CZAI_ERC20[this] == old(sTot_CZAI_ERC20[this])) && sChunk_CZAI_ERC20[this] == old(sChunk_CZAI_ERC20[this])) && sPrice_CZAI_ERC20[this] == old(sPrice_CZAI_ERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_CZAI_ERC20(this);

Loop:
[L7683]  CALL        call CorralChoice_CZAI_ERC20(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != CZAI_ERC20;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND TRUE   choice == 31
[L7467]              gas := gas - 21000;
[L7468]  COND TRUE   gas >= 0
[L7469]              assume msgvalue_MSG == 0;
[L7470]  CALL        call balance_s338 := balanceOf~address_TokenERC20(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s338);
[L901]               havoc __exception;
[L902]               revert := false;
[L903]   COND FALSE  !(__exception)
[L937]   CALL        call balance_s338 := balanceOf~address_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s338);
[L4449]              balance_s338 := balances_TokenERC20[this][tokenOwner_s338];
[L937]   RET         call balance_s338 := balanceOf~address_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s338);
[L938]               assume !revert && gas >= 0;
[L7470]  RET         call balance_s338 := balanceOf~address_TokenERC20(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s338);
[L7683]  RET         call CorralChoice_CZAI_ERC20(this);

[2020-11-25 13:04:05,028 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:04:05,028 INFO  L82        PathProgramCache]: Analyzing trace with hash 244109909, now seen corresponding path program 1 times
[2020-11-25 13:04:05,029 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:04:05,041 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:04:05,147 INFO  L134       CoverageAnalysis]: Checked inductivity of 113 backedges. 1 proven. 85 refuted. 0 times theorem prover too weak. 27 trivial. 0 not checked.
[2020-11-25 13:04:05,147 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 13:04:05,147 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-11-25 13:04:05,148 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:04:05,148 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 13:04:05,148 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=22, Invalid=110, Unknown=0, NotChecked=0, Total=132
[2020-11-25 13:04:05,148 INFO  L87              Difference]: Start difference. First operand 3836 states and 4156 transitions. cyclomatic complexity: 327 Second operand 12 states.
[2020-11-25 13:04:06,781 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:04:06,781 INFO  L93              Difference]: Finished difference Result 4077 states and 4443 transitions.
[2020-11-25 13:04:06,781 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-25 13:04:06,781 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4077 states and 4443 transitions.
[2020-11-25 13:04:06,790 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 13:04:06,797 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4077 states to 4077 states and 4443 transitions.
[2020-11-25 13:04:06,797 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1315
[2020-11-25 13:04:06,798 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1315
[2020-11-25 13:04:06,798 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4077 states and 4443 transitions.
[2020-11-25 13:04:06,800 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:04:06,800 INFO  L728         BuchiCegarLoop]: Abstraction has 4077 states and 4443 transitions.
[2020-11-25 13:04:06,803 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4077 states and 4443 transitions.
[2020-11-25 13:04:06,818 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4077 to 3867.
[2020-11-25 13:04:06,818 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3867 states.
[2020-11-25 13:04:06,822 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3867 states to 3867 states and 4233 transitions.
[2020-11-25 13:04:06,822 INFO  L751         BuchiCegarLoop]: Abstraction has 3867 states and 4233 transitions.
[2020-11-25 13:04:06,822 INFO  L631         BuchiCegarLoop]: Abstraction has 3867 states and 4233 transitions.
[2020-11-25 13:04:06,822 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-11-25 13:04:06,822 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3867 states and 4233 transitions.
[2020-11-25 13:04:06,826 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 13:04:06,826 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:04:06,826 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:04:06,827 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:04:06,827 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == CZAI_ERC20;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call CZAI_ERC20_CZAI_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4745]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4745]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4746]  COND FALSE  !(revert)
[L4749]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4401]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4402]  COND FALSE  !(revert)
[L4405]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4405]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4406]  COND FALSE  !(revert)
[L4409]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]              assume msgsender_MSG != null;
[L4360]              Balance[this] := 0;
[L4361]              symbol_TokenERC20[this] := -1301478191;
[L4362]              name_TokenERC20[this] := -1301478191;
[L4363]              decimals_TokenERC20[this] := 0;
[L4364]              _totalSupply_TokenERC20[this] := 0;
[L4365]              balances_TokenERC20[this] := zeroRefintArr();
[L4366]              sum_balances0[this] := 0;
[L4367]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4368]              sum_allowed1[this] := 0;
[L4370]              symbol_TokenERC20[this] := 56796887;
[L4371]              name_TokenERC20[this] := -847728030;
[L4372]              decimals_TokenERC20[this] := 0;
[L4373]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              _totalSupply_TokenERC20[this] := nonlinearMul(61917364224 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4375]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4376]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4377]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4378]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4409]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4749]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4750]  COND FALSE  !(revert)
[L4753]  CALL        call CZAI_ERC20_CZAI_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4703]              assume msgsender_MSG != null;
[L4704]              Balance[this] := 0;
[L4705]              aSBlock_CZAI_ERC20[this] := 0;
[L4706]              aEBlock_CZAI_ERC20[this] := 0;
[L4707]              aCap_CZAI_ERC20[this] := 0;
[L4708]              aTot_CZAI_ERC20[this] := 0;
[L4709]              aAmt_CZAI_ERC20[this] := 0;
[L4710]              sSBlock_CZAI_ERC20[this] := 0;
[L4711]              sEBlock_CZAI_ERC20[this] := 0;
[L4712]              sCap_CZAI_ERC20[this] := 0;
[L4713]              sTot_CZAI_ERC20[this] := 0;
[L4714]              sChunk_CZAI_ERC20[this] := 0;
[L4715]              sPrice_CZAI_ERC20[this] := 0;
[L4753]  RET         call CZAI_ERC20_CZAI_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]  COND FALSE  !(revert)
[L7679]  RET         call CZAI_ERC20_CZAI_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;
[L7683]  CALL        call CorralChoice_CZAI_ERC20(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != CZAI_ERC20;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND FALSE  !(choice == 27)
[L7499]  COND FALSE  !(choice == 26)
[L7505]  COND FALSE  !(choice == 25)
[L7511]  COND FALSE  !(choice == 24)
[L7517]  COND FALSE  !(choice == 23)
[L7523]  COND FALSE  !(choice == 22)
[L7529]  COND FALSE  !(choice == 21)
[L7535]  COND FALSE  !(choice == 20)
[L7541]  COND FALSE  !(choice == 19)
[L7548]  COND FALSE  !(choice == 18)
[L7554]  COND FALSE  !(choice == 17)
[L7560]  COND FALSE  !(choice == 16)
[L7566]  COND FALSE  !(choice == 15)
[L7572]  COND FALSE  !(choice == 14)
[L7578]  COND FALSE  !(choice == 13)
[L7584]  COND FALSE  !(choice == 12)
[L7590]  COND FALSE  !(choice == 11)
[L7596]  COND FALSE  !(choice == 10)
[L7602]  COND FALSE  !(choice == 9)
[L7608]  COND FALSE  !(choice == 8)
[L7614]  COND FALSE  !(choice == 7)
[L7620]  COND TRUE   choice == 6
[L7621]              gas := gas - 21000;
[L7622]  COND TRUE   gas >= 0
[L7623]              assume msgvalue_MSG >= 0;
[L7624]  CALL        call success_s847 := tokenSale~address_CZAI_ERC20(this, msgsender_MSG, msgvalue_MSG, _refer_s847);
[L1803]              havoc __exception;
[L1804]              revert := false;
[L1805]  COND FALSE  !(__exception)
[L1839]  CALL        call success_s847 := tokenSale~address_CZAI_ERC20__success(this, msgsender_MSG, msgvalue_MSG, _refer_s847);
[L4990]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L4991]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L4992]              Balance[this] := Balance[this] + msgvalue_MSG;
[L4994]  COND FALSE  !(!(sSBlock_CZAI_ERC20[this] <= now && now <= sEBlock_CZAI_ERC20[this]))
[L4998]  COND FALSE  !(!(sTot_CZAI_ERC20[this] < sCap_CZAI_ERC20[this] || sCap_CZAI_ERC20[this] == 0))
[L5002]              _eth_s847 := msgvalue_MSG;
[L5003]              havoc _tkns_s847;
[L5004]  COND FALSE  !(sChunk_CZAI_ERC20[this] != 0)
[L5008]              _tkns_s847 := nonlinearDiv(_eth_s847, sPrice_CZAI_ERC20[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5010]              sTot_CZAI_ERC20[this] := (sTot_CZAI_ERC20[this] + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5011]  COND TRUE   DType[this] == CZAI_ERC20
[L5012]  CALL        call __var_22 := balanceOf~address_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _refer_s847);
[L4449]              balance_s338 := balances_TokenERC20[this][tokenOwner_s338];
[L5012]  RET         call __var_22 := balanceOf~address_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _refer_s847);
[L5013]  COND FALSE  !(revert)
[L5019]  COND FALSE  !((msgsender_MSG != _refer_s847 && __var_22 != 0) && _refer_s847 != 0)
[L5038]              __var_27 := this;
[L5039]              __var_29 := this;
[L5040]  CALL        call __var_28 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][this], _tkns_s847);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5040]  RET         call __var_28 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][this], _tkns_s847);
[L5041]  COND FALSE  !(revert)
[L5044]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][this];
[L5045]              balances_TokenERC20[this][this] := __var_28;
[L5046]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][this];
[L5047]  CALL        call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], _tkns_s847);
[L4100]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4101]  COND FALSE  !(!(c_s23 >= a_s23))
[L5047]  RET         call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], _tkns_s847);
[L5048]  COND FALSE  !(revert)
[L5051]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][msgsender_MSG];
[L5052]              balances_TokenERC20[this][msgsender_MSG] := __var_30;
[L5053]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][msgsender_MSG];
[L5054]              assert { :EventEmitted "Transfer_CZAI_ERC20" } true;
[L5055]              success_s847 := true;
[L1839]  RET         call success_s847 := tokenSale~address_CZAI_ERC20__success(this, msgsender_MSG, msgvalue_MSG, _refer_s847);
[L1840]              assume !revert && gas >= 0;
[L7624]  RET         call success_s847 := tokenSale~address_CZAI_ERC20(this, msgsender_MSG, msgvalue_MSG, _refer_s847);
[L7683]  RET         call CorralChoice_CZAI_ERC20(this);
[L7683]  CALL        call CorralChoice_CZAI_ERC20(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != CZAI_ERC20;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND FALSE  !(__exception)
[L1173]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4552]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4552]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4553]  COND FALSE  !(revert)
[L4556]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][from_s468];
[L4557]              balances_TokenERC20[this][from_s468] := __var_7;
[L4558]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][from_s468];
[L4559]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4559]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4560]  COND FALSE  !(revert)
[L4563]              sum_allowed1[from_s468] := sum_allowed1[from_s468] - allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4564]              allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4565]              sum_allowed1[from_s468] := sum_allowed1[from_s468] + allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4566]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4100]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4101]  COND FALSE  !(!(c_s23 >= a_s23))
[L4566]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4567]  COND FALSE  !(revert)
[L4570]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s468];
[L4571]              balances_TokenERC20[this][to_s468] := __var_9;
[L4572]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s468];
[L4573]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4574]              success_s468 := true;
[L1173]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1174]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((((((((((success_s468 == true && balances_TokenERC20[this][from_s468] == old(balances_TokenERC20[this][from_s468]) - tokens_s468) && balances_TokenERC20[this][to_s468] == old(balances_TokenERC20[this][to_s468]) + tokens_s468) && allowed_TokenERC20[this][from_s468][msgsender_MSG] == old(allowed_TokenERC20[this][from_s468][msgsender_MSG]) - tokens_s468) && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this][p1] == old(balances_TokenERC20[this][p1])) && allowed_TokenERC20[this][p2][p3] == old(allowed_TokenERC20[this][p2][p3])) && aSBlock_CZAI_ERC20[this] == old(aSBlock_CZAI_ERC20[this])) && aEBlock_CZAI_ERC20[this] == old(aEBlock_CZAI_ERC20[this])) && aCap_CZAI_ERC20[this] == old(aCap_CZAI_ERC20[this])) && aTot_CZAI_ERC20[this] == old(aTot_CZAI_ERC20[this])) && aAmt_CZAI_ERC20[this] == old(aAmt_CZAI_ERC20[this])) && sSBlock_CZAI_ERC20[this] == old(sSBlock_CZAI_ERC20[this])) && sEBlock_CZAI_ERC20[this] == old(sEBlock_CZAI_ERC20[this])) && sCap_CZAI_ERC20[this] == old(sCap_CZAI_ERC20[this])) && sTot_CZAI_ERC20[this] == old(sTot_CZAI_ERC20[this])) && sChunk_CZAI_ERC20[this] == old(sChunk_CZAI_ERC20[this])) && sPrice_CZAI_ERC20[this] == old(sPrice_CZAI_ERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_CZAI_ERC20(this);

Loop:
[L7683]  CALL        call CorralChoice_CZAI_ERC20(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != CZAI_ERC20;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND TRUE   choice == 31
[L7467]              gas := gas - 21000;
[L7468]  COND TRUE   gas >= 0
[L7469]              assume msgvalue_MSG == 0;
[L7470]  CALL        call balance_s338 := balanceOf~address_TokenERC20(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s338);
[L901]               havoc __exception;
[L902]               revert := false;
[L903]   COND FALSE  !(__exception)
[L937]   CALL        call balance_s338 := balanceOf~address_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s338);
[L4449]              balance_s338 := balances_TokenERC20[this][tokenOwner_s338];
[L937]   RET         call balance_s338 := balanceOf~address_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s338);
[L938]               assume !revert && gas >= 0;
[L7470]  RET         call balance_s338 := balanceOf~address_TokenERC20(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s338);
[L7683]  RET         call CorralChoice_CZAI_ERC20(this);

[2020-11-25 13:04:06,830 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:04:06,831 INFO  L82        PathProgramCache]: Analyzing trace with hash 957472640, now seen corresponding path program 1 times
[2020-11-25 13:04:06,831 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:04:06,844 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:04:06,957 INFO  L134       CoverageAnalysis]: Checked inductivity of 113 backedges. 1 proven. 85 refuted. 0 times theorem prover too weak. 27 trivial. 0 not checked.
[2020-11-25 13:04:06,957 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 13:04:06,957 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-11-25 13:04:06,958 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:04:06,958 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 13:04:06,958 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=22, Invalid=110, Unknown=0, NotChecked=0, Total=132
[2020-11-25 13:04:06,958 INFO  L87              Difference]: Start difference. First operand 3867 states and 4233 transitions. cyclomatic complexity: 380 Second operand 12 states.
[2020-11-25 13:04:08,553 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:04:08,553 INFO  L93              Difference]: Finished difference Result 4122 states and 4605 transitions.
[2020-11-25 13:04:08,553 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-25 13:04:08,553 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4122 states and 4605 transitions.
[2020-11-25 13:04:08,562 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 16
[2020-11-25 13:04:08,572 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4122 states to 4122 states and 4605 transitions.
[2020-11-25 13:04:08,572 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1333
[2020-11-25 13:04:08,573 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1333
[2020-11-25 13:04:08,573 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4122 states and 4605 transitions.
[2020-11-25 13:04:08,575 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:04:08,575 INFO  L728         BuchiCegarLoop]: Abstraction has 4122 states and 4605 transitions.
[2020-11-25 13:04:08,578 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4122 states and 4605 transitions.
[2020-11-25 13:04:08,595 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4122 to 3912.
[2020-11-25 13:04:08,595 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3912 states.
[2020-11-25 13:04:08,601 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3912 states to 3912 states and 4395 transitions.
[2020-11-25 13:04:08,601 INFO  L751         BuchiCegarLoop]: Abstraction has 3912 states and 4395 transitions.
[2020-11-25 13:04:08,601 INFO  L631         BuchiCegarLoop]: Abstraction has 3912 states and 4395 transitions.
[2020-11-25 13:04:08,601 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-11-25 13:04:08,601 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3912 states and 4395 transitions.
[2020-11-25 13:04:08,605 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 16
[2020-11-25 13:04:08,605 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:04:08,605 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:04:08,606 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:04:08,606 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == CZAI_ERC20;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call CZAI_ERC20_CZAI_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4745]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4745]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4746]  COND FALSE  !(revert)
[L4749]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4401]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4402]  COND FALSE  !(revert)
[L4405]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4405]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4406]  COND FALSE  !(revert)
[L4409]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]              assume msgsender_MSG != null;
[L4360]              Balance[this] := 0;
[L4361]              symbol_TokenERC20[this] := -1301478191;
[L4362]              name_TokenERC20[this] := -1301478191;
[L4363]              decimals_TokenERC20[this] := 0;
[L4364]              _totalSupply_TokenERC20[this] := 0;
[L4365]              balances_TokenERC20[this] := zeroRefintArr();
[L4366]              sum_balances0[this] := 0;
[L4367]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4368]              sum_allowed1[this] := 0;
[L4370]              symbol_TokenERC20[this] := 56796887;
[L4371]              name_TokenERC20[this] := -847728030;
[L4372]              decimals_TokenERC20[this] := 0;
[L4373]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              _totalSupply_TokenERC20[this] := nonlinearMul(61917364224 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4375]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4376]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4377]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4378]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4409]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4749]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4750]  COND FALSE  !(revert)
[L4753]  CALL        call CZAI_ERC20_CZAI_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4703]              assume msgsender_MSG != null;
[L4704]              Balance[this] := 0;
[L4705]              aSBlock_CZAI_ERC20[this] := 0;
[L4706]              aEBlock_CZAI_ERC20[this] := 0;
[L4707]              aCap_CZAI_ERC20[this] := 0;
[L4708]              aTot_CZAI_ERC20[this] := 0;
[L4709]              aAmt_CZAI_ERC20[this] := 0;
[L4710]              sSBlock_CZAI_ERC20[this] := 0;
[L4711]              sEBlock_CZAI_ERC20[this] := 0;
[L4712]              sCap_CZAI_ERC20[this] := 0;
[L4713]              sTot_CZAI_ERC20[this] := 0;
[L4714]              sChunk_CZAI_ERC20[this] := 0;
[L4715]              sPrice_CZAI_ERC20[this] := 0;
[L4753]  RET         call CZAI_ERC20_CZAI_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]  COND FALSE  !(revert)
[L7679]  RET         call CZAI_ERC20_CZAI_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;
[L7683]  CALL        call CorralChoice_CZAI_ERC20(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != CZAI_ERC20;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND FALSE  !(__exception)
[L1173]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4552]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4552]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4553]  COND FALSE  !(revert)
[L4556]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][from_s468];
[L4557]              balances_TokenERC20[this][from_s468] := __var_7;
[L4558]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][from_s468];
[L4559]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4559]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4560]  COND FALSE  !(revert)
[L4563]              sum_allowed1[from_s468] := sum_allowed1[from_s468] - allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4564]              allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4565]              sum_allowed1[from_s468] := sum_allowed1[from_s468] + allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4566]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4100]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4101]  COND FALSE  !(!(c_s23 >= a_s23))
[L4566]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4567]  COND FALSE  !(revert)
[L4570]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s468];
[L4571]              balances_TokenERC20[this][to_s468] := __var_9;
[L4572]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s468];
[L4573]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4574]              success_s468 := true;
[L1173]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1174]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((((((((((success_s468 == true && balances_TokenERC20[this][from_s468] == old(balances_TokenERC20[this][from_s468]) - tokens_s468) && balances_TokenERC20[this][to_s468] == old(balances_TokenERC20[this][to_s468]) + tokens_s468) && allowed_TokenERC20[this][from_s468][msgsender_MSG] == old(allowed_TokenERC20[this][from_s468][msgsender_MSG]) - tokens_s468) && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this][p1] == old(balances_TokenERC20[this][p1])) && allowed_TokenERC20[this][p2][p3] == old(allowed_TokenERC20[this][p2][p3])) && aSBlock_CZAI_ERC20[this] == old(aSBlock_CZAI_ERC20[this])) && aEBlock_CZAI_ERC20[this] == old(aEBlock_CZAI_ERC20[this])) && aCap_CZAI_ERC20[this] == old(aCap_CZAI_ERC20[this])) && aTot_CZAI_ERC20[this] == old(aTot_CZAI_ERC20[this])) && aAmt_CZAI_ERC20[this] == old(aAmt_CZAI_ERC20[this])) && sSBlock_CZAI_ERC20[this] == old(sSBlock_CZAI_ERC20[this])) && sEBlock_CZAI_ERC20[this] == old(sEBlock_CZAI_ERC20[this])) && sCap_CZAI_ERC20[this] == old(sCap_CZAI_ERC20[this])) && sTot_CZAI_ERC20[this] == old(sTot_CZAI_ERC20[this])) && sChunk_CZAI_ERC20[this] == old(sChunk_CZAI_ERC20[this])) && sPrice_CZAI_ERC20[this] == old(sPrice_CZAI_ERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_CZAI_ERC20(this);
[L7683]  CALL        call CorralChoice_CZAI_ERC20(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != CZAI_ERC20;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND FALSE  !(__exception)
[L1173]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4552]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4552]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4553]  COND FALSE  !(revert)
[L4556]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][from_s468];
[L4557]              balances_TokenERC20[this][from_s468] := __var_7;
[L4558]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][from_s468];
[L4559]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4559]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4560]  COND FALSE  !(revert)
[L4563]              sum_allowed1[from_s468] := sum_allowed1[from_s468] - allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4564]              allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4565]              sum_allowed1[from_s468] := sum_allowed1[from_s468] + allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4566]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4100]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4101]  COND FALSE  !(!(c_s23 >= a_s23))
[L4566]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4567]  COND FALSE  !(revert)
[L4570]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s468];
[L4571]              balances_TokenERC20[this][to_s468] := __var_9;
[L4572]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s468];
[L4573]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4574]              success_s468 := true;
[L1173]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1174]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((((((((((success_s468 == true && balances_TokenERC20[this][from_s468] == old(balances_TokenERC20[this][from_s468]) - tokens_s468) && balances_TokenERC20[this][to_s468] == old(balances_TokenERC20[this][to_s468]) + tokens_s468) && allowed_TokenERC20[this][from_s468][msgsender_MSG] == old(allowed_TokenERC20[this][from_s468][msgsender_MSG]) - tokens_s468) && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this][p1] == old(balances_TokenERC20[this][p1])) && allowed_TokenERC20[this][p2][p3] == old(allowed_TokenERC20[this][p2][p3])) && aSBlock_CZAI_ERC20[this] == old(aSBlock_CZAI_ERC20[this])) && aEBlock_CZAI_ERC20[this] == old(aEBlock_CZAI_ERC20[this])) && aCap_CZAI_ERC20[this] == old(aCap_CZAI_ERC20[this])) && aTot_CZAI_ERC20[this] == old(aTot_CZAI_ERC20[this])) && aAmt_CZAI_ERC20[this] == old(aAmt_CZAI_ERC20[this])) && sSBlock_CZAI_ERC20[this] == old(sSBlock_CZAI_ERC20[this])) && sEBlock_CZAI_ERC20[this] == old(sEBlock_CZAI_ERC20[this])) && sCap_CZAI_ERC20[this] == old(sCap_CZAI_ERC20[this])) && sTot_CZAI_ERC20[this] == old(sTot_CZAI_ERC20[this])) && sChunk_CZAI_ERC20[this] == old(sChunk_CZAI_ERC20[this])) && sPrice_CZAI_ERC20[this] == old(sPrice_CZAI_ERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_CZAI_ERC20(this);

Loop:
[L7683]  CALL        call CorralChoice_CZAI_ERC20(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != CZAI_ERC20;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND FALSE  !(__exception)
[L1173]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4552]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4552]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4553]  COND FALSE  !(revert)
[L4556]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][from_s468];
[L4557]              balances_TokenERC20[this][from_s468] := __var_7;
[L4558]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][from_s468];
[L4559]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4559]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4560]  COND FALSE  !(revert)
[L4563]              sum_allowed1[from_s468] := sum_allowed1[from_s468] - allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4564]              allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4565]              sum_allowed1[from_s468] := sum_allowed1[from_s468] + allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4566]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4100]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4101]  COND FALSE  !(!(c_s23 >= a_s23))
[L4566]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4567]  COND FALSE  !(revert)
[L4570]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s468];
[L4571]              balances_TokenERC20[this][to_s468] := __var_9;
[L4572]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s468];
[L4573]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4574]              success_s468 := true;
[L1173]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1174]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((((((((((success_s468 == true && balances_TokenERC20[this][from_s468] == old(balances_TokenERC20[this][from_s468]) - tokens_s468) && balances_TokenERC20[this][to_s468] == old(balances_TokenERC20[this][to_s468]) + tokens_s468) && allowed_TokenERC20[this][from_s468][msgsender_MSG] == old(allowed_TokenERC20[this][from_s468][msgsender_MSG]) - tokens_s468) && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this][p1] == old(balances_TokenERC20[this][p1])) && allowed_TokenERC20[this][p2][p3] == old(allowed_TokenERC20[this][p2][p3])) && aSBlock_CZAI_ERC20[this] == old(aSBlock_CZAI_ERC20[this])) && aEBlock_CZAI_ERC20[this] == old(aEBlock_CZAI_ERC20[this])) && aCap_CZAI_ERC20[this] == old(aCap_CZAI_ERC20[this])) && aTot_CZAI_ERC20[this] == old(aTot_CZAI_ERC20[this])) && aAmt_CZAI_ERC20[this] == old(aAmt_CZAI_ERC20[this])) && sSBlock_CZAI_ERC20[this] == old(sSBlock_CZAI_ERC20[this])) && sEBlock_CZAI_ERC20[this] == old(sEBlock_CZAI_ERC20[this])) && sCap_CZAI_ERC20[this] == old(sCap_CZAI_ERC20[this])) && sTot_CZAI_ERC20[this] == old(sTot_CZAI_ERC20[this])) && sChunk_CZAI_ERC20[this] == old(sChunk_CZAI_ERC20[this])) && sPrice_CZAI_ERC20[this] == old(sPrice_CZAI_ERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_CZAI_ERC20(this);

[2020-11-25 13:04:08,609 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:04:08,609 INFO  L82        PathProgramCache]: Analyzing trace with hash 1245445036, now seen corresponding path program 1 times
[2020-11-25 13:04:08,610 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:04:08,706 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:04:09,601 WARN  L188               SmtUtils]: Spent 127.00 ms on a formula simplification. DAG size of input: 168 DAG size of output: 93
[2020-11-25 13:04:10,069 WARN  L188               SmtUtils]: Spent 167.00 ms on a formula simplification. DAG size of input: 184 DAG size of output: 91
[2020-11-25 13:04:10,564 INFO  L134       CoverageAnalysis]: Checked inductivity of 126 backedges. 1 proven. 97 refuted. 0 times theorem prover too weak. 28 trivial. 0 not checked.
[2020-11-25 13:04:10,564 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 13:04:10,564 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [38] total 38
[2020-11-25 13:04:10,565 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:04:10,565 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 38 interpolants.
[2020-11-25 13:04:10,565 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=133, Invalid=1273, Unknown=0, NotChecked=0, Total=1406
[2020-11-25 13:04:10,565 INFO  L87              Difference]: Start difference. First operand 3912 states and 4395 transitions. cyclomatic complexity: 511 Second operand 38 states.
[2020-11-25 13:04:29,274 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:04:29,274 INFO  L93              Difference]: Finished difference Result 4604 states and 5434 transitions.
[2020-11-25 13:04:29,274 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 35 states. 
[2020-11-25 13:04:29,274 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4604 states and 5434 transitions.
[2020-11-25 13:04:29,286 INFO  L131   ngComponentsAnalysis]: Automaton has 16 accepting balls. 32
[2020-11-25 13:04:29,298 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4604 states to 4604 states and 5434 transitions.
[2020-11-25 13:04:29,298 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1719
[2020-11-25 13:04:29,299 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1719
[2020-11-25 13:04:29,299 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4604 states and 5434 transitions.
[2020-11-25 13:04:29,302 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:04:29,302 INFO  L728         BuchiCegarLoop]: Abstraction has 4604 states and 5434 transitions.
[2020-11-25 13:04:29,305 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4604 states and 5434 transitions.
[2020-11-25 13:04:29,327 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4604 to 4523.
[2020-11-25 13:04:29,327 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4523 states.
[2020-11-25 13:04:29,335 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4523 states to 4523 states and 5282 transitions.
[2020-11-25 13:04:29,335 INFO  L751         BuchiCegarLoop]: Abstraction has 4523 states and 5282 transitions.
[2020-11-25 13:04:29,335 INFO  L631         BuchiCegarLoop]: Abstraction has 4523 states and 5282 transitions.
[2020-11-25 13:04:29,335 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-11-25 13:04:29,335 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4523 states and 5282 transitions.
[2020-11-25 13:04:29,341 INFO  L131   ngComponentsAnalysis]: Automaton has 16 accepting balls. 32
[2020-11-25 13:04:29,341 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:04:29,341 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:04:29,342 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:04:29,342 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == CZAI_ERC20;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call CZAI_ERC20_CZAI_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4745]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4745]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4746]  COND FALSE  !(revert)
[L4749]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4401]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4402]  COND FALSE  !(revert)
[L4405]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4405]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4406]  COND FALSE  !(revert)
[L4409]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]              assume msgsender_MSG != null;
[L4360]              Balance[this] := 0;
[L4361]              symbol_TokenERC20[this] := -1301478191;
[L4362]              name_TokenERC20[this] := -1301478191;
[L4363]              decimals_TokenERC20[this] := 0;
[L4364]              _totalSupply_TokenERC20[this] := 0;
[L4365]              balances_TokenERC20[this] := zeroRefintArr();
[L4366]              sum_balances0[this] := 0;
[L4367]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4368]              sum_allowed1[this] := 0;
[L4370]              symbol_TokenERC20[this] := 56796887;
[L4371]              name_TokenERC20[this] := -847728030;
[L4372]              decimals_TokenERC20[this] := 0;
[L4373]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              _totalSupply_TokenERC20[this] := nonlinearMul(61917364224 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4375]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4376]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4377]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4378]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4409]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4749]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4750]  COND FALSE  !(revert)
[L4753]  CALL        call CZAI_ERC20_CZAI_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4703]              assume msgsender_MSG != null;
[L4704]              Balance[this] := 0;
[L4705]              aSBlock_CZAI_ERC20[this] := 0;
[L4706]              aEBlock_CZAI_ERC20[this] := 0;
[L4707]              aCap_CZAI_ERC20[this] := 0;
[L4708]              aTot_CZAI_ERC20[this] := 0;
[L4709]              aAmt_CZAI_ERC20[this] := 0;
[L4710]              sSBlock_CZAI_ERC20[this] := 0;
[L4711]              sEBlock_CZAI_ERC20[this] := 0;
[L4712]              sCap_CZAI_ERC20[this] := 0;
[L4713]              sTot_CZAI_ERC20[this] := 0;
[L4714]              sChunk_CZAI_ERC20[this] := 0;
[L4715]              sPrice_CZAI_ERC20[this] := 0;
[L4753]  RET         call CZAI_ERC20_CZAI_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]  COND FALSE  !(revert)
[L7679]  RET         call CZAI_ERC20_CZAI_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;
[L7683]  CALL        call CorralChoice_CZAI_ERC20(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != CZAI_ERC20;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND FALSE  !(__exception)
[L1173]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4552]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4552]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4553]  COND FALSE  !(revert)
[L4556]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][from_s468];
[L4557]              balances_TokenERC20[this][from_s468] := __var_7;
[L4558]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][from_s468];
[L4559]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4559]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4560]  COND FALSE  !(revert)
[L4563]              sum_allowed1[from_s468] := sum_allowed1[from_s468] - allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4564]              allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4565]              sum_allowed1[from_s468] := sum_allowed1[from_s468] + allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4566]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4100]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4101]  COND FALSE  !(!(c_s23 >= a_s23))
[L4566]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4567]  COND FALSE  !(revert)
[L4570]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s468];
[L4571]              balances_TokenERC20[this][to_s468] := __var_9;
[L4572]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s468];
[L4573]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4574]              success_s468 := true;
[L1173]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1174]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((((((((((success_s468 == true && balances_TokenERC20[this][from_s468] == old(balances_TokenERC20[this][from_s468]) - tokens_s468) && balances_TokenERC20[this][to_s468] == old(balances_TokenERC20[this][to_s468]) + tokens_s468) && allowed_TokenERC20[this][from_s468][msgsender_MSG] == old(allowed_TokenERC20[this][from_s468][msgsender_MSG]) - tokens_s468) && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this][p1] == old(balances_TokenERC20[this][p1])) && allowed_TokenERC20[this][p2][p3] == old(allowed_TokenERC20[this][p2][p3])) && aSBlock_CZAI_ERC20[this] == old(aSBlock_CZAI_ERC20[this])) && aEBlock_CZAI_ERC20[this] == old(aEBlock_CZAI_ERC20[this])) && aCap_CZAI_ERC20[this] == old(aCap_CZAI_ERC20[this])) && aTot_CZAI_ERC20[this] == old(aTot_CZAI_ERC20[this])) && aAmt_CZAI_ERC20[this] == old(aAmt_CZAI_ERC20[this])) && sSBlock_CZAI_ERC20[this] == old(sSBlock_CZAI_ERC20[this])) && sEBlock_CZAI_ERC20[this] == old(sEBlock_CZAI_ERC20[this])) && sCap_CZAI_ERC20[this] == old(sCap_CZAI_ERC20[this])) && sTot_CZAI_ERC20[this] == old(sTot_CZAI_ERC20[this])) && sChunk_CZAI_ERC20[this] == old(sChunk_CZAI_ERC20[this])) && sPrice_CZAI_ERC20[this] == old(sPrice_CZAI_ERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]);
[L3]                 success_transferFrom_TokenERC200 := true;
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_CZAI_ERC20(this);
[L7683]  CALL        call CorralChoice_CZAI_ERC20(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != CZAI_ERC20;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND FALSE  !(__exception)
[L1173]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4552]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4552]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4553]  COND FALSE  !(revert)
[L4556]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][from_s468];
[L4557]              balances_TokenERC20[this][from_s468] := __var_7;
[L4558]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][from_s468];
[L4559]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4559]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4560]  COND FALSE  !(revert)
[L4563]              sum_allowed1[from_s468] := sum_allowed1[from_s468] - allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4564]              allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4565]              sum_allowed1[from_s468] := sum_allowed1[from_s468] + allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4566]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4100]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4101]  COND FALSE  !(!(c_s23 >= a_s23))
[L4566]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4567]  COND FALSE  !(revert)
[L4570]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s468];
[L4571]              balances_TokenERC20[this][to_s468] := __var_9;
[L4572]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s468];
[L4573]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4574]              success_s468 := true;
[L1173]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1174]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((((((((((success_s468 == true && balances_TokenERC20[this][from_s468] == old(balances_TokenERC20[this][from_s468]) - tokens_s468) && balances_TokenERC20[this][to_s468] == old(balances_TokenERC20[this][to_s468]) + tokens_s468) && allowed_TokenERC20[this][from_s468][msgsender_MSG] == old(allowed_TokenERC20[this][from_s468][msgsender_MSG]) - tokens_s468) && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this][p1] == old(balances_TokenERC20[this][p1])) && allowed_TokenERC20[this][p2][p3] == old(allowed_TokenERC20[this][p2][p3])) && aSBlock_CZAI_ERC20[this] == old(aSBlock_CZAI_ERC20[this])) && aEBlock_CZAI_ERC20[this] == old(aEBlock_CZAI_ERC20[this])) && aCap_CZAI_ERC20[this] == old(aCap_CZAI_ERC20[this])) && aTot_CZAI_ERC20[this] == old(aTot_CZAI_ERC20[this])) && aAmt_CZAI_ERC20[this] == old(aAmt_CZAI_ERC20[this])) && sSBlock_CZAI_ERC20[this] == old(sSBlock_CZAI_ERC20[this])) && sEBlock_CZAI_ERC20[this] == old(sEBlock_CZAI_ERC20[this])) && sCap_CZAI_ERC20[this] == old(sCap_CZAI_ERC20[this])) && sTot_CZAI_ERC20[this] == old(sTot_CZAI_ERC20[this])) && sChunk_CZAI_ERC20[this] == old(sChunk_CZAI_ERC20[this])) && sPrice_CZAI_ERC20[this] == old(sPrice_CZAI_ERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_CZAI_ERC20(this);

Loop:
[L7683]  CALL        call CorralChoice_CZAI_ERC20(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != CZAI_ERC20;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND FALSE  !(__exception)
[L1173]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4552]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4552]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4553]  COND FALSE  !(revert)
[L4556]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][from_s468];
[L4557]              balances_TokenERC20[this][from_s468] := __var_7;
[L4558]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][from_s468];
[L4559]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4559]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4560]  COND FALSE  !(revert)
[L4563]              sum_allowed1[from_s468] := sum_allowed1[from_s468] - allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4564]              allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4565]              sum_allowed1[from_s468] := sum_allowed1[from_s468] + allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4566]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4100]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4101]  COND FALSE  !(!(c_s23 >= a_s23))
[L4566]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4567]  COND FALSE  !(revert)
[L4570]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s468];
[L4571]              balances_TokenERC20[this][to_s468] := __var_9;
[L4572]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s468];
[L4573]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4574]              success_s468 := true;
[L1173]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1174]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((((((((((success_s468 == true && balances_TokenERC20[this][from_s468] == old(balances_TokenERC20[this][from_s468]) - tokens_s468) && balances_TokenERC20[this][to_s468] == old(balances_TokenERC20[this][to_s468]) + tokens_s468) && allowed_TokenERC20[this][from_s468][msgsender_MSG] == old(allowed_TokenERC20[this][from_s468][msgsender_MSG]) - tokens_s468) && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this][p1] == old(balances_TokenERC20[this][p1])) && allowed_TokenERC20[this][p2][p3] == old(allowed_TokenERC20[this][p2][p3])) && aSBlock_CZAI_ERC20[this] == old(aSBlock_CZAI_ERC20[this])) && aEBlock_CZAI_ERC20[this] == old(aEBlock_CZAI_ERC20[this])) && aCap_CZAI_ERC20[this] == old(aCap_CZAI_ERC20[this])) && aTot_CZAI_ERC20[this] == old(aTot_CZAI_ERC20[this])) && aAmt_CZAI_ERC20[this] == old(aAmt_CZAI_ERC20[this])) && sSBlock_CZAI_ERC20[this] == old(sSBlock_CZAI_ERC20[this])) && sEBlock_CZAI_ERC20[this] == old(sEBlock_CZAI_ERC20[this])) && sCap_CZAI_ERC20[this] == old(sCap_CZAI_ERC20[this])) && sTot_CZAI_ERC20[this] == old(sTot_CZAI_ERC20[this])) && sChunk_CZAI_ERC20[this] == old(sChunk_CZAI_ERC20[this])) && sPrice_CZAI_ERC20[this] == old(sPrice_CZAI_ERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_CZAI_ERC20(this);

[2020-11-25 13:04:29,345 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:04:29,345 INFO  L82        PathProgramCache]: Analyzing trace with hash -2062987283, now seen corresponding path program 1 times
[2020-11-25 13:04:29,346 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:04:29,427 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:04:30,074 WARN  L188               SmtUtils]: Spent 147.00 ms on a formula simplification. DAG size of input: 193 DAG size of output: 66
[2020-11-25 13:04:31,742 INFO  L134       CoverageAnalysis]: Checked inductivity of 127 backedges. 2 proven. 3 refuted. 0 times theorem prover too weak. 122 trivial. 0 not checked.
[2020-11-25 13:04:31,742 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 13:04:31,742 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [45] total 45
[2020-11-25 13:04:31,743 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:04:31,743 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 46 interpolants.
[2020-11-25 13:04:31,743 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=147, Invalid=1923, Unknown=0, NotChecked=0, Total=2070
[2020-11-25 13:04:31,743 INFO  L87              Difference]: Start difference. First operand 4523 states and 5282 transitions. cyclomatic complexity: 803 Second operand 46 states.
[2020-11-25 13:04:51,504 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:04:51,504 INFO  L93              Difference]: Finished difference Result 4911 states and 5908 transitions.
[2020-11-25 13:04:51,505 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 40 states. 
[2020-11-25 13:04:51,505 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4911 states and 5908 transitions.
[2020-11-25 13:04:51,518 INFO  L131   ngComponentsAnalysis]: Automaton has 20 accepting balls. 40
[2020-11-25 13:04:51,533 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4911 states to 4911 states and 5908 transitions.
[2020-11-25 13:04:51,533 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1865
[2020-11-25 13:04:51,533 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1865
[2020-11-25 13:04:51,534 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4911 states and 5908 transitions.
[2020-11-25 13:04:51,538 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:04:51,538 INFO  L728         BuchiCegarLoop]: Abstraction has 4911 states and 5908 transitions.
[2020-11-25 13:04:51,541 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4911 states and 5908 transitions.
[2020-11-25 13:04:51,581 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4911 to 4840.
[2020-11-25 13:04:51,581 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4840 states.
[2020-11-25 13:04:51,594 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4840 states to 4840 states and 5806 transitions.
[2020-11-25 13:04:51,594 INFO  L751         BuchiCegarLoop]: Abstraction has 4840 states and 5806 transitions.
[2020-11-25 13:04:51,595 INFO  L631         BuchiCegarLoop]: Abstraction has 4840 states and 5806 transitions.
[2020-11-25 13:04:51,595 INFO  L445         BuchiCegarLoop]: ======== Iteration 20============
[2020-11-25 13:04:51,595 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4840 states and 5806 transitions.
[2020-11-25 13:04:51,603 INFO  L131   ngComponentsAnalysis]: Automaton has 20 accepting balls. 40
[2020-11-25 13:04:51,603 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:04:51,604 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:04:51,605 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:04:51,605 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == CZAI_ERC20;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call CZAI_ERC20_CZAI_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4745]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4745]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4746]  COND FALSE  !(revert)
[L4749]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4401]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4402]  COND FALSE  !(revert)
[L4405]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4405]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4406]  COND FALSE  !(revert)
[L4409]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]              assume msgsender_MSG != null;
[L4360]              Balance[this] := 0;
[L4361]              symbol_TokenERC20[this] := -1301478191;
[L4362]              name_TokenERC20[this] := -1301478191;
[L4363]              decimals_TokenERC20[this] := 0;
[L4364]              _totalSupply_TokenERC20[this] := 0;
[L4365]              balances_TokenERC20[this] := zeroRefintArr();
[L4366]              sum_balances0[this] := 0;
[L4367]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4368]              sum_allowed1[this] := 0;
[L4370]              symbol_TokenERC20[this] := 56796887;
[L4371]              name_TokenERC20[this] := -847728030;
[L4372]              decimals_TokenERC20[this] := 0;
[L4373]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              _totalSupply_TokenERC20[this] := nonlinearMul(61917364224 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4375]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4376]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4377]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4378]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4409]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4749]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4750]  COND FALSE  !(revert)
[L4753]  CALL        call CZAI_ERC20_CZAI_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4703]              assume msgsender_MSG != null;
[L4704]              Balance[this] := 0;
[L4705]              aSBlock_CZAI_ERC20[this] := 0;
[L4706]              aEBlock_CZAI_ERC20[this] := 0;
[L4707]              aCap_CZAI_ERC20[this] := 0;
[L4708]              aTot_CZAI_ERC20[this] := 0;
[L4709]              aAmt_CZAI_ERC20[this] := 0;
[L4710]              sSBlock_CZAI_ERC20[this] := 0;
[L4711]              sEBlock_CZAI_ERC20[this] := 0;
[L4712]              sCap_CZAI_ERC20[this] := 0;
[L4713]              sTot_CZAI_ERC20[this] := 0;
[L4714]              sChunk_CZAI_ERC20[this] := 0;
[L4715]              sPrice_CZAI_ERC20[this] := 0;
[L4753]  RET         call CZAI_ERC20_CZAI_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]  COND FALSE  !(revert)
[L7679]  RET         call CZAI_ERC20_CZAI_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;
[L7683]  CALL        call CorralChoice_CZAI_ERC20(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != CZAI_ERC20;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND FALSE  !(__exception)
[L1173]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4552]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4552]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4553]  COND FALSE  !(revert)
[L4556]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][from_s468];
[L4557]              balances_TokenERC20[this][from_s468] := __var_7;
[L4558]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][from_s468];
[L4559]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4559]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4560]  COND FALSE  !(revert)
[L4563]              sum_allowed1[from_s468] := sum_allowed1[from_s468] - allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4564]              allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4565]              sum_allowed1[from_s468] := sum_allowed1[from_s468] + allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4566]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4100]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4101]  COND FALSE  !(!(c_s23 >= a_s23))
[L4566]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4567]  COND FALSE  !(revert)
[L4570]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s468];
[L4571]              balances_TokenERC20[this][to_s468] := __var_9;
[L4572]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s468];
[L4573]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4574]              success_s468 := true;
[L1173]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1174]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((((((((((success_s468 == true && balances_TokenERC20[this][from_s468] == old(balances_TokenERC20[this][from_s468]) - tokens_s468) && balances_TokenERC20[this][to_s468] == old(balances_TokenERC20[this][to_s468]) + tokens_s468) && allowed_TokenERC20[this][from_s468][msgsender_MSG] == old(allowed_TokenERC20[this][from_s468][msgsender_MSG]) - tokens_s468) && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this][p1] == old(balances_TokenERC20[this][p1])) && allowed_TokenERC20[this][p2][p3] == old(allowed_TokenERC20[this][p2][p3])) && aSBlock_CZAI_ERC20[this] == old(aSBlock_CZAI_ERC20[this])) && aEBlock_CZAI_ERC20[this] == old(aEBlock_CZAI_ERC20[this])) && aCap_CZAI_ERC20[this] == old(aCap_CZAI_ERC20[this])) && aTot_CZAI_ERC20[this] == old(aTot_CZAI_ERC20[this])) && aAmt_CZAI_ERC20[this] == old(aAmt_CZAI_ERC20[this])) && sSBlock_CZAI_ERC20[this] == old(sSBlock_CZAI_ERC20[this])) && sEBlock_CZAI_ERC20[this] == old(sEBlock_CZAI_ERC20[this])) && sCap_CZAI_ERC20[this] == old(sCap_CZAI_ERC20[this])) && sTot_CZAI_ERC20[this] == old(sTot_CZAI_ERC20[this])) && sChunk_CZAI_ERC20[this] == old(sChunk_CZAI_ERC20[this])) && sPrice_CZAI_ERC20[this] == old(sPrice_CZAI_ERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]);
[L3]                 success_transferFrom_TokenERC200 := true;
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_CZAI_ERC20(this);
[L7683]  CALL        call CorralChoice_CZAI_ERC20(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != CZAI_ERC20;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND FALSE  !(__exception)
[L1173]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4552]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4552]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4553]  COND FALSE  !(revert)
[L4556]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][from_s468];
[L4557]              balances_TokenERC20[this][from_s468] := __var_7;
[L4558]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][from_s468];
[L4559]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4559]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4560]  COND FALSE  !(revert)
[L4563]              sum_allowed1[from_s468] := sum_allowed1[from_s468] - allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4564]              allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4565]              sum_allowed1[from_s468] := sum_allowed1[from_s468] + allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4566]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4100]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4101]  COND FALSE  !(!(c_s23 >= a_s23))
[L4566]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4567]  COND FALSE  !(revert)
[L4570]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s468];
[L4571]              balances_TokenERC20[this][to_s468] := __var_9;
[L4572]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s468];
[L4573]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4574]              success_s468 := true;
[L1173]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1174]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((((((((((success_s468 == true && balances_TokenERC20[this][from_s468] == old(balances_TokenERC20[this][from_s468]) - tokens_s468) && balances_TokenERC20[this][to_s468] == old(balances_TokenERC20[this][to_s468]) + tokens_s468) && allowed_TokenERC20[this][from_s468][msgsender_MSG] == old(allowed_TokenERC20[this][from_s468][msgsender_MSG]) - tokens_s468) && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this][p1] == old(balances_TokenERC20[this][p1])) && allowed_TokenERC20[this][p2][p3] == old(allowed_TokenERC20[this][p2][p3])) && aSBlock_CZAI_ERC20[this] == old(aSBlock_CZAI_ERC20[this])) && aEBlock_CZAI_ERC20[this] == old(aEBlock_CZAI_ERC20[this])) && aCap_CZAI_ERC20[this] == old(aCap_CZAI_ERC20[this])) && aTot_CZAI_ERC20[this] == old(aTot_CZAI_ERC20[this])) && aAmt_CZAI_ERC20[this] == old(aAmt_CZAI_ERC20[this])) && sSBlock_CZAI_ERC20[this] == old(sSBlock_CZAI_ERC20[this])) && sEBlock_CZAI_ERC20[this] == old(sEBlock_CZAI_ERC20[this])) && sCap_CZAI_ERC20[this] == old(sCap_CZAI_ERC20[this])) && sTot_CZAI_ERC20[this] == old(sTot_CZAI_ERC20[this])) && sChunk_CZAI_ERC20[this] == old(sChunk_CZAI_ERC20[this])) && sPrice_CZAI_ERC20[this] == old(sPrice_CZAI_ERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_CZAI_ERC20(this);

Loop:
[L7683]  CALL        call CorralChoice_CZAI_ERC20(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != CZAI_ERC20;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND TRUE   choice == 29
[L7479]              gas := gas - 21000;
[L7480]  COND TRUE   gas >= 0
[L7481]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7482]              assume msgvalue_MSG == 0;
[L7483]  CALL        call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L979]               havoc __exception;
[L980]               revert := false;
[L981]   COND FALSE  !(__exception)
[L1015]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L4479]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4479]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4480]  COND FALSE  !(revert)
[L4483]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][msgsender_MSG];
[L4484]              balances_TokenERC20[this][msgsender_MSG] := __var_5;
[L4485]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][msgsender_MSG];
[L4486]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4100]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4101]  COND FALSE  !(!(c_s23 >= a_s23))
[L4486]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4487]  COND FALSE  !(revert)
[L4490]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s381];
[L4491]              balances_TokenERC20[this][to_s381] := __var_6;
[L4492]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s381];
[L4493]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4494]              success_s381 := true;
[L1015]  RET         call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L1016]              assume !revert && gas >= 0;
[L7483]  RET         call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L7683]  RET         call CorralChoice_CZAI_ERC20(this);

[2020-11-25 13:04:51,609 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:04:51,609 INFO  L82        PathProgramCache]: Analyzing trace with hash -413943937, now seen corresponding path program 1 times
[2020-11-25 13:04:51,610 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:04:51,718 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:04:52,346 INFO  L134       CoverageAnalysis]: Checked inductivity of 126 backedges. 7 proven. 3 refuted. 0 times theorem prover too weak. 116 trivial. 0 not checked.
[2020-11-25 13:04:52,346 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 13:04:52,346 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [29] total 29
[2020-11-25 13:04:52,347 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:04:52,347 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 30 interpolants.
[2020-11-25 13:04:52,347 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=90, Invalid=780, Unknown=0, NotChecked=0, Total=870
[2020-11-25 13:04:52,347 INFO  L87              Difference]: Start difference. First operand 4840 states and 5806 transitions. cyclomatic complexity: 1022 Second operand 30 states.
[2020-11-25 13:05:01,217 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:05:01,217 INFO  L93              Difference]: Finished difference Result 4949 states and 6154 transitions.
[2020-11-25 13:05:01,217 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 30 states. 
[2020-11-25 13:05:01,217 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4949 states and 6154 transitions.
[2020-11-25 13:05:01,233 INFO  L131   ngComponentsAnalysis]: Automaton has 20 accepting balls. 40
[2020-11-25 13:05:01,251 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4949 states to 4949 states and 6154 transitions.
[2020-11-25 13:05:01,251 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1865
[2020-11-25 13:05:01,252 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1865
[2020-11-25 13:05:01,252 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4949 states and 6154 transitions.
[2020-11-25 13:05:01,257 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:05:01,257 INFO  L728         BuchiCegarLoop]: Abstraction has 4949 states and 6154 transitions.
[2020-11-25 13:05:01,260 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4949 states and 6154 transitions.
[2020-11-25 13:05:01,289 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4949 to 4872.
[2020-11-25 13:05:01,289 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4872 states.
[2020-11-25 13:05:01,299 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4872 states to 4872 states and 5982 transitions.
[2020-11-25 13:05:01,299 INFO  L751         BuchiCegarLoop]: Abstraction has 4872 states and 5982 transitions.
[2020-11-25 13:05:01,299 INFO  L631         BuchiCegarLoop]: Abstraction has 4872 states and 5982 transitions.
[2020-11-25 13:05:01,299 INFO  L445         BuchiCegarLoop]: ======== Iteration 21============
[2020-11-25 13:05:01,299 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4872 states and 5982 transitions.
[2020-11-25 13:05:01,305 INFO  L131   ngComponentsAnalysis]: Automaton has 20 accepting balls. 40
[2020-11-25 13:05:01,305 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:05:01,306 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:05:01,307 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:05:01,307 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == CZAI_ERC20;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call CZAI_ERC20_CZAI_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4745]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4745]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4746]  COND FALSE  !(revert)
[L4749]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4401]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4402]  COND FALSE  !(revert)
[L4405]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4405]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4406]  COND FALSE  !(revert)
[L4409]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]              assume msgsender_MSG != null;
[L4360]              Balance[this] := 0;
[L4361]              symbol_TokenERC20[this] := -1301478191;
[L4362]              name_TokenERC20[this] := -1301478191;
[L4363]              decimals_TokenERC20[this] := 0;
[L4364]              _totalSupply_TokenERC20[this] := 0;
[L4365]              balances_TokenERC20[this] := zeroRefintArr();
[L4366]              sum_balances0[this] := 0;
[L4367]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4368]              sum_allowed1[this] := 0;
[L4370]              symbol_TokenERC20[this] := 56796887;
[L4371]              name_TokenERC20[this] := -847728030;
[L4372]              decimals_TokenERC20[this] := 0;
[L4373]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              _totalSupply_TokenERC20[this] := nonlinearMul(61917364224 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4375]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4376]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4377]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4378]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4409]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4749]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4750]  COND FALSE  !(revert)
[L4753]  CALL        call CZAI_ERC20_CZAI_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4703]              assume msgsender_MSG != null;
[L4704]              Balance[this] := 0;
[L4705]              aSBlock_CZAI_ERC20[this] := 0;
[L4706]              aEBlock_CZAI_ERC20[this] := 0;
[L4707]              aCap_CZAI_ERC20[this] := 0;
[L4708]              aTot_CZAI_ERC20[this] := 0;
[L4709]              aAmt_CZAI_ERC20[this] := 0;
[L4710]              sSBlock_CZAI_ERC20[this] := 0;
[L4711]              sEBlock_CZAI_ERC20[this] := 0;
[L4712]              sCap_CZAI_ERC20[this] := 0;
[L4713]              sTot_CZAI_ERC20[this] := 0;
[L4714]              sChunk_CZAI_ERC20[this] := 0;
[L4715]              sPrice_CZAI_ERC20[this] := 0;
[L4753]  RET         call CZAI_ERC20_CZAI_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]  COND FALSE  !(revert)
[L7679]  RET         call CZAI_ERC20_CZAI_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;
[L7683]  CALL        call CorralChoice_CZAI_ERC20(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != CZAI_ERC20;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND TRUE   choice == 28
[L7486]              gas := gas - 21000;
[L7487]  COND TRUE   gas >= 0
[L7488]              assume tokens_s409 >= 0 && tokens_s409 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7489]              assume msgvalue_MSG == 0;
[L7490]  CALL        call success_s409 := approve~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, spender_s409, tokens_s409);
[L1057]              havoc __exception;
[L1058]              revert := false;
[L1059]  COND FALSE  !(__exception)
[L1093]  CALL        call success_s409 := approve~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s409, tokens_s409);
[L4509]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_TokenERC20[this][msgsender_MSG][spender_s409];
[L4510]              allowed_TokenERC20[this][msgsender_MSG][spender_s409] := tokens_s409;
[L4511]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_TokenERC20[this][msgsender_MSG][spender_s409];
[L4512]              assert { :EventEmitted "Approval_TokenERC20" } true;
[L4513]              success_s409 := true;
[L1093]  RET         call success_s409 := approve~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s409, tokens_s409);
[L1094]              assume !revert && gas >= 0;
[L7490]  RET         call success_s409 := approve~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, spender_s409, tokens_s409);
[L7683]  RET         call CorralChoice_CZAI_ERC20(this);
[L7683]  CALL        call CorralChoice_CZAI_ERC20(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != CZAI_ERC20;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND TRUE   choice == 28
[L7486]              gas := gas - 21000;
[L7487]  COND TRUE   gas >= 0
[L7488]              assume tokens_s409 >= 0 && tokens_s409 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7489]              assume msgvalue_MSG == 0;
[L7490]  CALL        call success_s409 := approve~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, spender_s409, tokens_s409);
[L1057]              havoc __exception;
[L1058]              revert := false;
[L1059]  COND FALSE  !(__exception)
[L1093]  CALL        call success_s409 := approve~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s409, tokens_s409);
[L4509]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_TokenERC20[this][msgsender_MSG][spender_s409];
[L4510]              allowed_TokenERC20[this][msgsender_MSG][spender_s409] := tokens_s409;
[L4511]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_TokenERC20[this][msgsender_MSG][spender_s409];
[L4512]              assert { :EventEmitted "Approval_TokenERC20" } true;
[L4513]              success_s409 := true;
[L1093]  RET         call success_s409 := approve~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s409, tokens_s409);
[L1094]              assume !revert && gas >= 0;
[L7490]  RET         call success_s409 := approve~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, spender_s409, tokens_s409);
[L7683]  RET         call CorralChoice_CZAI_ERC20(this);
[L7683]  CALL        call CorralChoice_CZAI_ERC20(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != CZAI_ERC20;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND FALSE  !(__exception)
[L1173]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4552]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4552]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4553]  COND FALSE  !(revert)
[L4556]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][from_s468];
[L4557]              balances_TokenERC20[this][from_s468] := __var_7;
[L4558]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][from_s468];
[L4559]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4559]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4560]  COND FALSE  !(revert)
[L4563]              sum_allowed1[from_s468] := sum_allowed1[from_s468] - allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4564]              allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4565]              sum_allowed1[from_s468] := sum_allowed1[from_s468] + allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4566]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4100]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4101]  COND FALSE  !(!(c_s23 >= a_s23))
[L4566]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4567]  COND FALSE  !(revert)
[L4570]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s468];
[L4571]              balances_TokenERC20[this][to_s468] := __var_9;
[L4572]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s468];
[L4573]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4574]              success_s468 := true;
[L1173]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1174]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((((((((((success_s468 == true && balances_TokenERC20[this][from_s468] == old(balances_TokenERC20[this][from_s468]) - tokens_s468) && balances_TokenERC20[this][to_s468] == old(balances_TokenERC20[this][to_s468]) + tokens_s468) && allowed_TokenERC20[this][from_s468][msgsender_MSG] == old(allowed_TokenERC20[this][from_s468][msgsender_MSG]) - tokens_s468) && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this][p1] == old(balances_TokenERC20[this][p1])) && allowed_TokenERC20[this][p2][p3] == old(allowed_TokenERC20[this][p2][p3])) && aSBlock_CZAI_ERC20[this] == old(aSBlock_CZAI_ERC20[this])) && aEBlock_CZAI_ERC20[this] == old(aEBlock_CZAI_ERC20[this])) && aCap_CZAI_ERC20[this] == old(aCap_CZAI_ERC20[this])) && aTot_CZAI_ERC20[this] == old(aTot_CZAI_ERC20[this])) && aAmt_CZAI_ERC20[this] == old(aAmt_CZAI_ERC20[this])) && sSBlock_CZAI_ERC20[this] == old(sSBlock_CZAI_ERC20[this])) && sEBlock_CZAI_ERC20[this] == old(sEBlock_CZAI_ERC20[this])) && sCap_CZAI_ERC20[this] == old(sCap_CZAI_ERC20[this])) && sTot_CZAI_ERC20[this] == old(sTot_CZAI_ERC20[this])) && sChunk_CZAI_ERC20[this] == old(sChunk_CZAI_ERC20[this])) && sPrice_CZAI_ERC20[this] == old(sPrice_CZAI_ERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_CZAI_ERC20(this);

Loop:
[L7683]  CALL        call CorralChoice_CZAI_ERC20(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != CZAI_ERC20;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND TRUE   choice == 31
[L7467]              gas := gas - 21000;
[L7468]  COND TRUE   gas >= 0
[L7469]              assume msgvalue_MSG == 0;
[L7470]  CALL        call balance_s338 := balanceOf~address_TokenERC20(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s338);
[L901]               havoc __exception;
[L902]               revert := false;
[L903]   COND FALSE  !(__exception)
[L937]   CALL        call balance_s338 := balanceOf~address_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s338);
[L4449]              balance_s338 := balances_TokenERC20[this][tokenOwner_s338];
[L937]   RET         call balance_s338 := balanceOf~address_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s338);
[L938]               assume !revert && gas >= 0;
[L7470]  RET         call balance_s338 := balanceOf~address_TokenERC20(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s338);
[L7683]  RET         call CorralChoice_CZAI_ERC20(this);

[2020-11-25 13:05:01,310 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:05:01,310 INFO  L82        PathProgramCache]: Analyzing trace with hash 1656226709, now seen corresponding path program 2 times
[2020-11-25 13:05:01,311 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:05:01,374 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:05:01,791 INFO  L134       CoverageAnalysis]: Checked inductivity of 308 backedges. 3 proven. 0 refuted. 0 times theorem prover too weak. 305 trivial. 0 not checked.
[2020-11-25 13:05:01,792 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:05:01,792 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [23] imperfect sequences [] total 23
[2020-11-25 13:05:01,792 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:05:01,792 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 23 interpolants.
[2020-11-25 13:05:01,792 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=55, Invalid=451, Unknown=0, NotChecked=0, Total=506
[2020-11-25 13:05:01,792 INFO  L87              Difference]: Start difference. First operand 4872 states and 5982 transitions. cyclomatic complexity: 1182 Second operand 23 states.
[2020-11-25 13:05:08,342 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:05:08,342 INFO  L93              Difference]: Finished difference Result 2013 states and 2586 transitions.
[2020-11-25 13:05:08,342 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 21 states. 
[2020-11-25 13:05:08,342 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2013 states and 2586 transitions.
[2020-11-25 13:05:08,348 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 13:05:08,348 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2013 states to 0 states and 0 transitions.
[2020-11-25 13:05:08,348 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 13:05:08,348 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 13:05:08,348 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 13:05:08,348 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:05:08,348 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 13:05:08,348 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 13:05:08,348 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 13:05:08,348 INFO  L445         BuchiCegarLoop]: ======== Iteration 22============
[2020-11-25 13:05:08,348 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 13:05:08,348 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 13:05:08,348 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 13:05:08,351 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 01:05:08 BasicIcfg
[2020-11-25 13:05:08,352 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 13:05:08,352 INFO  L168              Benchmark]: Toolchain (without parser) took 180949.36 ms. Allocated memory was 1.0 GB in the beginning and 3.9 GB in the end (delta: 2.8 GB). Free memory was 929.8 MB in the beginning and 3.2 GB in the end (delta: -2.2 GB). Peak memory consumption was 610.3 MB. Max. memory is 15.3 GB.
[2020-11-25 13:05:08,352 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 13:05:08,353 INFO  L168              Benchmark]: Boogie Preprocessor took 114.92 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.7 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-25 13:05:08,353 INFO  L168              Benchmark]: UtopiaSpecLang took 78.56 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 903.0 MB in the end (delta: 10.8 MB). Peak memory consumption was 10.8 MB. Max. memory is 15.3 GB.
[2020-11-25 13:05:08,353 INFO  L168              Benchmark]: Boogie Printer took 20.07 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 13:05:08,353 INFO  L168              Benchmark]: RCFGBuilder took 1015.87 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 66.6 MB). Free memory was 897.6 MB in the beginning and 1.0 GB in the end (delta: -104.0 MB). Peak memory consumption was 187.3 MB. Max. memory is 15.3 GB.
[2020-11-25 13:05:08,354 INFO  L168              Benchmark]: UtopiaLTL2Aut took 37.65 ms. Allocated memory is still 1.1 GB. Free memory was 1.0 GB in the beginning and 998.2 MB in the end (delta: 3.5 MB). Peak memory consumption was 3.5 MB. Max. memory is 15.3 GB.
[2020-11-25 13:05:08,355 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1766.65 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 157.8 MB). Free memory was 998.2 MB in the beginning and 917.7 MB in the end (delta: 80.4 MB). Peak memory consumption was 519.9 MB. Max. memory is 15.3 GB.
[2020-11-25 13:05:08,355 INFO  L168              Benchmark]: BlockEncodingV2 took 186.08 ms. Allocated memory is still 1.3 GB. Free memory was 917.7 MB in the beginning and 820.6 MB in the end (delta: 97.2 MB). Peak memory consumption was 97.2 MB. Max. memory is 15.3 GB.
[2020-11-25 13:05:08,355 INFO  L168              Benchmark]: BuchiAutomizer took 177725.83 ms. Allocated memory was 1.3 GB in the beginning and 3.9 GB in the end (delta: 2.6 GB). Free memory was 820.6 MB in the beginning and 3.2 GB in the end (delta: -2.3 GB). Peak memory consumption was 276.7 MB. Max. memory is 15.3 GB.
[2020-11-25 13:05:08,358 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    8364 locations, 14620 edges
  - StatisticsResult: Encoded RCFG
    8308 locations, 14475 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 114.92 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.7 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 78.56 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 903.0 MB in the end (delta: 10.8 MB). Peak memory consumption was 10.8 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 20.07 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1015.87 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 66.6 MB). Free memory was 897.6 MB in the beginning and 1.0 GB in the end (delta: -104.0 MB). Peak memory consumption was 187.3 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 37.65 ms. Allocated memory is still 1.1 GB. Free memory was 1.0 GB in the beginning and 998.2 MB in the end (delta: 3.5 MB). Peak memory consumption was 3.5 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1766.65 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 157.8 MB). Free memory was 998.2 MB in the beginning and 917.7 MB in the end (delta: 80.4 MB). Peak memory consumption was 519.9 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 186.08 ms. Allocated memory is still 1.3 GB. Free memory was 917.7 MB in the beginning and 820.6 MB in the end (delta: 97.2 MB). Peak memory consumption was 97.2 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 177725.83 ms. Allocated memory was 1.3 GB in the beginning and 3.9 GB in the end (delta: 2.6 GB). Free memory was 820.6 MB in the beginning and 3.2 GB in the end (delta: -2.3 GB). Peak memory consumption was 276.7 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    3569 locations, 4645 edges
  - StatisticsResult: BuchiProgram size
    8364 locations, 14620 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 21 terminating modules (21 trivial, 0 deterministic, 0 nondeterministic). 21 modules have a trivial ranking function, the largest among these consists of 46 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 177.6s and 22 iterations.  TraceHistogramMax:3. Analysis of lassos took 14.1s. Construction of modules took 136.6s. BÃ¼chi inclusion checks took 24.7s. Highest rank in rank-based complementation 0. Minimization of det autom 21. Minimization of nondet autom 0. Automata minimization 1.0s AutomataMinimizationTime, 20 MinimizatonAttempts, 6340 StatesRemovedByMinimization, 18 NontrivialMinimizations. Non-live state removal took 0.6s Buchi closure took 0.0s. Biggest automaton had 7483 states and ocurred in iteration 7.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 122793 SDtfs, 145077 SDslu, 459246 SDs, 0 SdLazy, 790793 SolverSat, 22879 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 136.6s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU21 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_TokenERC200) ==> ( <>(success_transferFrom_TokenERC200) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
