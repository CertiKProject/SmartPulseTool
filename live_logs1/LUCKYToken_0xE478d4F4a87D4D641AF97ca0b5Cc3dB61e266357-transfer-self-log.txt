This is Ultimate 0.1.24-f1553f5-m
[2020-11-24 20:40:48,064 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-24 20:40:48,064 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-24 20:40:48,072 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-24 20:40:48,072 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-24 20:40:48,072 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-24 20:40:48,073 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-24 20:40:48,074 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-24 20:40:48,075 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-24 20:40:48,075 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-24 20:40:48,076 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-24 20:40:48,076 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-24 20:40:48,076 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-24 20:40:48,077 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-24 20:40:48,078 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-24 20:40:48,078 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-24 20:40:48,078 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-24 20:40:48,079 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-24 20:40:48,080 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-24 20:40:48,081 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-24 20:40:48,081 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-24 20:40:48,082 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-24 20:40:48,083 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-24 20:40:48,083 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-24 20:40:48,084 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-24 20:40:48,084 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-24 20:40:48,084 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-24 20:40:48,085 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-24 20:40:48,085 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-24 20:40:48,085 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-24 20:40:48,085 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-24 20:40:48,086 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-24 20:40:48,086 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-24 20:40:48,086 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-24 20:40:48,087 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-24 20:40:48,087 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-24 20:40:48,087 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-24 20:40:48,087 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-24 20:40:48,087 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-24 20:40:48,088 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-24 20:40:48,089 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-24 20:40:48,089 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-24 20:40:48,096 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-24 20:40:48,097 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-24 20:40:48,097 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-24 20:40:48,097 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-24 20:40:48,098 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-24 20:40:48,098 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-24 20:40:48,098 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-24 20:40:48,098 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-24 20:40:48,098 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-24 20:40:48,098 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-24 20:40:48,098 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-24 20:40:48,098 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-24 20:40:48,098 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-24 20:40:48,099 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-24 20:40:48,099 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-24 20:40:48,099 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-24 20:40:48,099 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-24 20:40:48,099 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-24 20:40:48,099 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-24 20:40:48,099 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-24 20:40:48,099 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-24 20:40:48,099 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-24 20:40:48,100 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-24 20:40:48,100 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-24 20:40:48,100 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-24 20:40:48,100 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-24 20:40:48,117 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-24 20:40:48,127 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-24 20:40:48,129 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-24 20:40:48,130 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-24 20:40:48,131 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-24 20:40:48,131 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/LUCKYToken_0xE478d4F4a87D4D641AF97ca0b5Cc3dB61e266357_transfer-self.bpl
[2020-11-24 20:40:48,131 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/LUCKYToken_0xE478d4F4a87D4D641AF97ca0b5Cc3dB61e266357_transfer-self.bpl'
[2020-11-24 20:40:48,216 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-24 20:40:48,217 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-24 20:40:48,217 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-24 20:40:48,217 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-24 20:40:48,217 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-24 20:40:48,228 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "LUCKYToken_0xE478d4F4a87D4D641AF97ca0b5Cc3dB61e266357_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:40:48" (1/1) ...
[2020-11-24 20:40:48,229 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "LUCKYToken_0xE478d4F4a87D4D641AF97ca0b5Cc3dB61e266357_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:40:48" (1/1) ...
[2020-11-24 20:40:48,258 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "LUCKYToken_0xE478d4F4a87D4D641AF97ca0b5Cc3dB61e266357_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:40:48" (1/1) ...
[2020-11-24 20:40:48,258 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "LUCKYToken_0xE478d4F4a87D4D641AF97ca0b5Cc3dB61e266357_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:40:48" (1/1) ...
[2020-11-24 20:40:48,279 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "LUCKYToken_0xE478d4F4a87D4D641AF97ca0b5Cc3dB61e266357_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:40:48" (1/1) ...
[2020-11-24 20:40:48,288 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "LUCKYToken_0xE478d4F4a87D4D641AF97ca0b5Cc3dB61e266357_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:40:48" (1/1) ...
[2020-11-24 20:40:48,297 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "LUCKYToken_0xE478d4F4a87D4D641AF97ca0b5Cc3dB61e266357_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:40:48" (1/1) ...
[2020-11-24 20:40:48,309 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-24 20:40:48,309 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-24 20:40:48,310 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-24 20:40:48,311 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-24 20:40:48,314 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "LUCKYToken_0xE478d4F4a87D4D641AF97ca0b5Cc3dB61e266357_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:40:48" (1/1) ...
[2020-11-24 20:40:48,329 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(PausableToken.transfer(to, value), msg.sender == to && value <= _balances_StandardToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_StandardToken[this][to] >= 0 && _balances_StandardToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_StandardToken[this][msg.sender] >= 0 &&  _balances_StandardToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(PausableToken.transfer(to, value), return == true && _totalSupply_StandardToken[this] == old(_totalSupply_StandardToken[this]) && _balances_StandardToken[this] == old(_balances_StandardToken[this]) && _allowed_StandardToken[this] == old(_allowed_StandardToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && _owner_Ownable[this] == old(_owner_Ownable[this]))))
[2020-11-24 20:40:48,336 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(PausableToken.transfer(to, value), msg.sender == to && value <= _balances_StandardToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_StandardToken[this][to] >= 0 && _balances_StandardToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_StandardToken[this][msg.sender] >= 0 &&  _balances_StandardToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(PausableToken.transfer(to, value), return == true && _totalSupply_StandardToken[this] == old(_totalSupply_StandardToken[this]) && _balances_StandardToken[this] == old(_balances_StandardToken[this]) && _allowed_StandardToken[this] == old(_allowed_StandardToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && _owner_Ownable[this] == old(_owner_Ownable[this]))))
[2020-11-24 20:40:48,345 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(PausableToken.transfer(to, value), msg.sender == to && value <= _balances_StandardToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_StandardToken[this][to] >= 0 && _balances_StandardToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_StandardToken[this][msg.sender] >= 0 &&  _balances_StandardToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(PausableToken.transfer(to, value), return == true && _totalSupply_StandardToken[this] == old(_totalSupply_StandardToken[this]) && _balances_StandardToken[this] == old(_balances_StandardToken[this]) && _allowed_StandardToken[this] == old(_allowed_StandardToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && _owner_Ownable[this] == old(_owner_Ownable[this]))))
[2020-11-24 20:40:48,354 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==_to_s670 && _value_s670<=_balances_StandardToken[this][msg.sender] ) && _value_s670>=0 ) && _value_s670<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_StandardToken[this][_to_s670]>=0 ) && _balances_StandardToken[this][_to_s670]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_StandardToken[this][msg.sender]>=0 ) && _balances_StandardToken[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_PausableToken>],IdentifierExpression[_to_s670,<IMPLEMENTATION_INPARAM,transfer~address~uint256_PausableToken>]],BinaryExpression[COMPLEQ,IdentifierExpression[_value_s670,<IMPLEMENTATION_INPARAM,transfer~address~uint256_PausableToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_PausableToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_PausableToken>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[_value_s670,<IMPLEMENTATION_INPARAM,transfer~address~uint256_PausableToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_value_s670,<IMPLEMENTATION_INPARAM,transfer~address~uint256_PausableToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_PausableToken>]]],[IdentifierExpression[_to_s670,<IMPLEMENTATION_INPARAM,transfer~address~uint256_PausableToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_PausableToken>]]],[IdentifierExpression[_to_s670,<IMPLEMENTATION_INPARAM,transfer~address~uint256_PausableToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_PausableToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_PausableToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_PausableToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_PausableToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-24 20:40:48,356 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( __ret_0_==true && _totalSupply_StandardToken[this]==( old(_totalSupply_StandardToken[this]) ) ) && _balances_StandardToken[this]==( old(_balances_StandardToken[this]) ) ) && _allowed_StandardToken[this]==( old(_allowed_StandardToken[this]) ) ) && paused_Pausable[this]==( old(paused_Pausable[this]) ) ) && _owner_Ownable[this]==( old(_owner_Ownable[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_PausableToken>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_PausableToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_PausableToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_balances_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_PausableToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_balances_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_PausableToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_PausableToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_PausableToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_PausableToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_PausableToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_PausableToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_PausableToken>]]]]]]
[2020-11-24 20:40:48,361 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(PausableToken.transfer(to, value), msg.sender == to && value <= _balances_StandardToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_StandardToken[this][to] >= 0 && _balances_StandardToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_StandardToken[this][msg.sender] >= 0 &&  _balances_StandardToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(PausableToken.transfer(to, value), return == true && _totalSupply_StandardToken[this] == old(_totalSupply_StandardToken[this]) && _balances_StandardToken[this] == old(_balances_StandardToken[this]) && _allowed_StandardToken[this] == old(_allowed_StandardToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && _owner_Ownable[this] == old(_owner_Ownable[this]))))
[2020-11-24 20:40:48,362 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_PausableToken0) ==> ( <>AP(success_transfer_PausableToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-24 20:40:48,374 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:40:48 PropertyContainer
[2020-11-24 20:40:48,374 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-24 20:40:48,374 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-24 20:40:48,374 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-24 20:40:48,375 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-24 20:40:48,375 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "LUCKYToken_0xE478d4F4a87D4D641AF97ca0b5Cc3dB61e266357_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:40:48" (1/2) ...
[2020-11-24 20:40:48,376 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-24 20:40:48,376 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-24 20:40:48,395 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:40:48" (2/2) ...
[2020-11-24 20:40:48,395 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-24 20:40:48,396 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-24 20:40:48,396 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-24 20:40:48,396 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-24 20:40:48,397 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "LUCKYToken_0xE478d4F4a87D4D641AF97ca0b5Cc3dB61e266357_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:40:48" (1/2) ...
[2020-11-24 20:40:48,447 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-24 20:40:48,448 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 20:40:48,448 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-24 20:40:48,448 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-24 20:40:48,448 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 20:40:48,448 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 20:40:48,448 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 20:40:48,448 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 20:40:48,448 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-24 20:40:48,448 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-24 20:40:48,448 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-24 20:40:48,449 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-24 20:40:48,449 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-24 20:40:48,449 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-24 20:40:48,449 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-24 20:40:48,449 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-24 20:40:48,449 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-24 20:40:48,449 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-24 20:40:48,449 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken
[2020-11-24 20:40:48,449 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken
[2020-11-24 20:40:48,449 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_StandardToken
[2020-11-24 20:40:48,450 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_StandardToken
[2020-11-24 20:40:48,450 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_StandardToken
[2020-11-24 20:40:48,450 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_StandardToken
[2020-11-24 20:40:48,450 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken
[2020-11-24 20:40:48,450 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken
[2020-11-24 20:40:48,450 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_StandardToken
[2020-11-24 20:40:48,450 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_StandardToken
[2020-11-24 20:40:48,450 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken
[2020-11-24 20:40:48,450 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken
[2020-11-24 20:40:48,451 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-24 20:40:48,451 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-24 20:40:48,451 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_StandardToken
[2020-11-24 20:40:48,451 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_StandardToken
[2020-11-24 20:40:48,451 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_StandardToken
[2020-11-24 20:40:48,451 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_StandardToken
[2020-11-24 20:40:48,451 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_StandardToken__success
[2020-11-24 20:40:48,451 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_StandardToken__success
[2020-11-24 20:40:48,451 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_StandardToken__success
[2020-11-24 20:40:48,451 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_StandardToken__success
[2020-11-24 20:40:48,452 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 20:40:48,452 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-24 20:40:48,452 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-24 20:40:48,452 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-24 20:40:48,452 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-24 20:40:48,452 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable
[2020-11-24 20:40:48,452 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable
[2020-11-24 20:40:48,452 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-24 20:40:48,452 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-24 20:40:48,452 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__success
[2020-11-24 20:40:48,452 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-24 20:40:48,453 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-24 20:40:48,453 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-24 20:40:48,453 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-24 20:40:48,453 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-24 20:40:48,453 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-24 20:40:48,453 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-24 20:40:48,453 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-24 20:40:48,453 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-24 20:40:48,453 INFO  L130     BoogieDeclarations]: Found specification of procedure PausableToken_PausableToken_NoBaseCtor__success
[2020-11-24 20:40:48,453 INFO  L130     BoogieDeclarations]: Found specification of procedure PausableToken_PausableToken
[2020-11-24 20:40:48,454 INFO  L138     BoogieDeclarations]: Found implementation of procedure PausableToken_PausableToken
[2020-11-24 20:40:48,454 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_PausableToken
[2020-11-24 20:40:48,454 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_PausableToken
[2020-11-24 20:40:48,454 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_PausableToken
[2020-11-24 20:40:48,454 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_PausableToken
[2020-11-24 20:40:48,454 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_PausableToken
[2020-11-24 20:40:48,454 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_PausableToken
[2020-11-24 20:40:48,454 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_PausableToken
[2020-11-24 20:40:48,454 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_PausableToken
[2020-11-24 20:40:48,454 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_PausableToken
[2020-11-24 20:40:48,454 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_PausableToken
[2020-11-24 20:40:48,455 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-24 20:40:48,455 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken
[2020-11-24 20:40:48,455 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken
[2020-11-24 20:40:48,455 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken
[2020-11-24 20:40:48,455 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken
[2020-11-24 20:40:48,455 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_BurnableToken
[2020-11-24 20:40:48,455 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_BurnableToken
[2020-11-24 20:40:48,455 INFO  L130     BoogieDeclarations]: Found specification of procedure LUCKYToken_LUCKYToken_NoBaseCtor__success
[2020-11-24 20:40:48,455 INFO  L130     BoogieDeclarations]: Found specification of procedure LUCKYToken_LUCKYToken
[2020-11-24 20:40:48,455 INFO  L138     BoogieDeclarations]: Found implementation of procedure LUCKYToken_LUCKYToken
[2020-11-24 20:40:48,456 INFO  L130     BoogieDeclarations]: Found specification of procedure name_LUCKYToken
[2020-11-24 20:40:48,456 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_LUCKYToken
[2020-11-24 20:40:48,456 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_LUCKYToken
[2020-11-24 20:40:48,456 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_LUCKYToken
[2020-11-24 20:40:48,456 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_LUCKYToken
[2020-11-24 20:40:48,456 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_LUCKYToken
[2020-11-24 20:40:48,456 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-24 20:40:48,456 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-24 20:40:48,456 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-24 20:40:48,456 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-24 20:40:48,456 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-24 20:40:48,457 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-24 20:40:48,457 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-24 20:40:48,457 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-24 20:40:48,457 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-24 20:40:48,457 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-24 20:40:48,457 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_StandardToken
[2020-11-24 20:40:48,457 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_StandardToken
[2020-11-24 20:40:48,457 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-24 20:40:48,457 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-24 20:40:48,457 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-24 20:40:48,458 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-24 20:40:48,458 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_PausableToken
[2020-11-24 20:40:48,458 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_PausableToken
[2020-11-24 20:40:48,458 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BurnableToken
[2020-11-24 20:40:48,458 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BurnableToken
[2020-11-24 20:40:48,458 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_LUCKYToken
[2020-11-24 20:40:48,458 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-24 20:40:48,458 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-24 20:40:48,458 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 20:40:48,458 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-24 20:40:48,459 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-24 20:40:48,459 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 20:40:48,459 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 20:40:48,459 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 20:40:48,459 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 20:40:48,459 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-24 20:40:48,459 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-24 20:40:48,459 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-24 20:40:48,459 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-24 20:40:48,459 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__success
[2020-11-24 20:40:48,459 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__fail
[2020-11-24 20:40:48,460 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_StandardToken__success
[2020-11-24 20:40:48,460 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_StandardToken__fail
[2020-11-24 20:40:48,460 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_StandardToken__success
[2020-11-24 20:40:48,460 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_StandardToken__fail
[2020-11-24 20:40:48,460 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__success
[2020-11-24 20:40:48,460 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__fail
[2020-11-24 20:40:48,460 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_StandardToken__success
[2020-11-24 20:40:48,460 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_StandardToken__fail
[2020-11-24 20:40:48,460 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__success
[2020-11-24 20:40:48,460 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__fail
[2020-11-24 20:40:48,461 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-24 20:40:48,461 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-24 20:40:48,461 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_StandardToken__success
[2020-11-24 20:40:48,461 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_StandardToken__fail
[2020-11-24 20:40:48,461 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_StandardToken__success
[2020-11-24 20:40:48,461 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_StandardToken__fail
[2020-11-24 20:40:48,461 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_StandardToken__fail
[2020-11-24 20:40:48,461 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_StandardToken__fail
[2020-11-24 20:40:48,461 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_StandardToken__fail
[2020-11-24 20:40:48,462 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_StandardToken__fail
[2020-11-24 20:40:48,462 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 20:40:48,462 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-24 20:40:48,462 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-24 20:40:48,462 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-24 20:40:48,462 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-24 20:40:48,462 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable__success
[2020-11-24 20:40:48,462 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable__fail
[2020-11-24 20:40:48,462 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-24 20:40:48,462 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-24 20:40:48,463 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__fail
[2020-11-24 20:40:48,463 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-24 20:40:48,463 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-24 20:40:48,463 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-24 20:40:48,463 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-24 20:40:48,463 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-24 20:40:48,463 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-24 20:40:48,463 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-24 20:40:48,463 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-24 20:40:48,463 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-24 20:40:48,464 INFO  L130     BoogieDeclarations]: Found specification of procedure PausableToken_PausableToken_NoBaseCtor__fail
[2020-11-24 20:40:48,464 INFO  L130     BoogieDeclarations]: Found specification of procedure PausableToken_PausableToken__success
[2020-11-24 20:40:48,464 INFO  L130     BoogieDeclarations]: Found specification of procedure PausableToken_PausableToken__fail
[2020-11-24 20:40:48,464 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_PausableToken__success
[2020-11-24 20:40:48,464 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_PausableToken__fail
[2020-11-24 20:40:48,464 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_PausableToken__success
[2020-11-24 20:40:48,464 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_PausableToken__fail
[2020-11-24 20:40:48,464 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_PausableToken__success
[2020-11-24 20:40:48,464 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_PausableToken__fail
[2020-11-24 20:40:48,464 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_PausableToken__success
[2020-11-24 20:40:48,464 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_PausableToken__fail
[2020-11-24 20:40:48,465 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_PausableToken__success
[2020-11-24 20:40:48,465 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_PausableToken__fail
[2020-11-24 20:40:48,465 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-24 20:40:48,465 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__success
[2020-11-24 20:40:48,465 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__fail
[2020-11-24 20:40:48,465 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__success
[2020-11-24 20:40:48,465 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__fail
[2020-11-24 20:40:48,465 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_BurnableToken__success
[2020-11-24 20:40:48,465 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_BurnableToken__fail
[2020-11-24 20:40:48,465 INFO  L130     BoogieDeclarations]: Found specification of procedure LUCKYToken_LUCKYToken_NoBaseCtor__fail
[2020-11-24 20:40:48,465 INFO  L130     BoogieDeclarations]: Found specification of procedure LUCKYToken_LUCKYToken__success
[2020-11-24 20:40:48,465 INFO  L130     BoogieDeclarations]: Found specification of procedure LUCKYToken_LUCKYToken__fail
[2020-11-24 20:40:48,466 INFO  L130     BoogieDeclarations]: Found specification of procedure name_LUCKYToken__success
[2020-11-24 20:40:48,466 INFO  L130     BoogieDeclarations]: Found specification of procedure name_LUCKYToken__fail
[2020-11-24 20:40:48,466 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_LUCKYToken__success
[2020-11-24 20:40:48,466 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_LUCKYToken__fail
[2020-11-24 20:40:48,466 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_LUCKYToken__success
[2020-11-24 20:40:48,466 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_LUCKYToken__fail
[2020-11-24 20:40:48,466 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-24 20:40:48,466 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-24 20:40:48,466 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-24 20:40:48,466 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-24 20:40:48,466 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-24 20:40:48,466 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-24 20:40:48,467 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-24 20:40:48,467 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-24 20:40:48,467 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 20:40:48,467 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 20:40:48,467 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-24 20:40:48,467 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-24 20:40:48,467 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 20:40:48,467 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 20:40:48,467 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 20:40:48,467 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 20:40:48,467 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 20:40:48,467 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 20:40:48,468 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 20:40:48,468 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 20:40:48,468 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-24 20:40:48,468 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-24 20:40:48,468 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-24 20:40:48,468 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-24 20:40:48,468 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-24 20:40:48,468 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-24 20:40:48,468 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__fail
[2020-11-24 20:40:48,468 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__success
[2020-11-24 20:40:48,468 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_StandardToken__fail
[2020-11-24 20:40:48,468 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_StandardToken__success
[2020-11-24 20:40:48,469 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_StandardToken__fail
[2020-11-24 20:40:48,469 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_StandardToken__success
[2020-11-24 20:40:48,469 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__fail
[2020-11-24 20:40:48,469 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__success
[2020-11-24 20:40:48,469 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_StandardToken__fail
[2020-11-24 20:40:48,469 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_StandardToken__success
[2020-11-24 20:40:48,469 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__fail
[2020-11-24 20:40:48,469 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__success
[2020-11-24 20:40:48,469 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-24 20:40:48,469 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-24 20:40:48,469 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_StandardToken__fail
[2020-11-24 20:40:48,469 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_StandardToken__success
[2020-11-24 20:40:48,469 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_StandardToken__fail
[2020-11-24 20:40:48,470 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_StandardToken__success
[2020-11-24 20:40:48,470 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_StandardToken__fail
[2020-11-24 20:40:48,470 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_StandardToken__success
[2020-11-24 20:40:48,470 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_StandardToken__fail
[2020-11-24 20:40:48,470 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_StandardToken__success
[2020-11-24 20:40:48,470 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_StandardToken__fail
[2020-11-24 20:40:48,470 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_StandardToken__success
[2020-11-24 20:40:48,470 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_StandardToken__fail
[2020-11-24 20:40:48,470 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_StandardToken__success
[2020-11-24 20:40:48,470 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 20:40:48,470 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 20:40:48,470 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-24 20:40:48,471 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-24 20:40:48,471 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-24 20:40:48,471 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-24 20:40:48,471 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable__fail
[2020-11-24 20:40:48,471 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable__success
[2020-11-24 20:40:48,471 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-24 20:40:48,471 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-24 20:40:48,471 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__fail
[2020-11-24 20:40:48,471 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__success
[2020-11-24 20:40:48,471 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-24 20:40:48,471 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-24 20:40:48,471 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-24 20:40:48,472 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-24 20:40:48,472 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-24 20:40:48,472 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-24 20:40:48,472 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-24 20:40:48,472 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-24 20:40:48,472 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-24 20:40:48,472 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-24 20:40:48,472 INFO  L138     BoogieDeclarations]: Found implementation of procedure PausableToken_PausableToken_NoBaseCtor__fail
[2020-11-24 20:40:48,472 INFO  L138     BoogieDeclarations]: Found implementation of procedure PausableToken_PausableToken_NoBaseCtor__success
[2020-11-24 20:40:48,472 INFO  L138     BoogieDeclarations]: Found implementation of procedure PausableToken_PausableToken__fail
[2020-11-24 20:40:48,472 INFO  L138     BoogieDeclarations]: Found implementation of procedure PausableToken_PausableToken__success
[2020-11-24 20:40:48,472 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_PausableToken__fail
[2020-11-24 20:40:48,473 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_PausableToken__success
[2020-11-24 20:40:48,473 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_PausableToken__fail
[2020-11-24 20:40:48,473 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_PausableToken__success
[2020-11-24 20:40:48,473 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_PausableToken__fail
[2020-11-24 20:40:48,473 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_PausableToken__success
[2020-11-24 20:40:48,473 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_PausableToken__fail
[2020-11-24 20:40:48,473 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_PausableToken__success
[2020-11-24 20:40:48,473 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_PausableToken__fail
[2020-11-24 20:40:48,473 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_PausableToken__success
[2020-11-24 20:40:48,474 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-24 20:40:48,474 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-24 20:40:48,474 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__fail
[2020-11-24 20:40:48,474 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__success
[2020-11-24 20:40:48,474 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__fail
[2020-11-24 20:40:48,474 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__success
[2020-11-24 20:40:48,474 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_BurnableToken__fail
[2020-11-24 20:40:48,474 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_BurnableToken__success
[2020-11-24 20:40:48,474 INFO  L138     BoogieDeclarations]: Found implementation of procedure LUCKYToken_LUCKYToken_NoBaseCtor__fail
[2020-11-24 20:40:48,474 INFO  L138     BoogieDeclarations]: Found implementation of procedure LUCKYToken_LUCKYToken_NoBaseCtor__success
[2020-11-24 20:40:48,474 INFO  L138     BoogieDeclarations]: Found implementation of procedure LUCKYToken_LUCKYToken__fail
[2020-11-24 20:40:48,475 INFO  L138     BoogieDeclarations]: Found implementation of procedure LUCKYToken_LUCKYToken__success
[2020-11-24 20:40:48,475 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_LUCKYToken__fail
[2020-11-24 20:40:48,475 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_LUCKYToken__success
[2020-11-24 20:40:48,475 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_LUCKYToken__fail
[2020-11-24 20:40:48,475 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_LUCKYToken__success
[2020-11-24 20:40:48,475 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_LUCKYToken__fail
[2020-11-24 20:40:48,475 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_LUCKYToken__success
[2020-11-24 20:40:48,475 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-24 20:40:48,475 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-24 20:40:48,475 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-24 20:40:48,475 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-24 20:40:48,475 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-24 20:40:48,475 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-24 20:40:48,476 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-24 20:40:48,476 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-24 20:40:48,476 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-24 20:40:48,476 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-24 20:40:48,476 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-24 20:40:48,476 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-24 20:40:48,476 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-24 20:40:48,476 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-24 20:40:48,476 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-24 20:40:48,476 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-24 20:40:48,476 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_StandardToken
[2020-11-24 20:40:48,476 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_StandardToken
[2020-11-24 20:40:48,477 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-24 20:40:48,477 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-24 20:40:48,477 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-24 20:40:48,477 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-24 20:40:48,477 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_PausableToken
[2020-11-24 20:40:48,477 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_PausableToken
[2020-11-24 20:40:48,477 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BurnableToken
[2020-11-24 20:40:48,477 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BurnableToken
[2020-11-24 20:40:48,477 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_LUCKYToken
[2020-11-24 20:40:48,477 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-24 20:40:48,477 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-24 20:40:48,477 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-24 20:40:48,937 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 20:40:48,938 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 20:40:48,938 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 20:40:49,461 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-24 20:40:49,462 INFO  L286             CfgBuilder]: Removed 8 assue(true) statements.
[2020-11-24 20:40:49,464 INFO  L202        PluginConnector]: Adding new model LUCKYToken_0xE478d4F4a87D4D641AF97ca0b5Cc3dB61e266357_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:40:49 BoogieIcfgContainer
[2020-11-24 20:40:49,464 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:40:48" (2/2) ...
[2020-11-24 20:40:49,464 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-24 20:40:49,464 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@458438ef and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:40:49, skipping insertion in model container
[2020-11-24 20:40:49,464 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-24 20:40:49,465 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-24 20:40:49,465 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-24 20:40:49,466 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-24 20:40:49,466 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "LUCKYToken_0xE478d4F4a87D4D641AF97ca0b5Cc3dB61e266357_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:40:48" (1/3) ...
[2020-11-24 20:40:49,467 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@74664f76 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:40:49, skipping insertion in model container
[2020-11-24 20:40:49,467 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:40:48" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-24 20:40:49,507 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:40:49 NWAContainer
[2020-11-24 20:40:49,507 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-24 20:40:49,507 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-24 20:40:49,507 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-24 20:40:49,508 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-24 20:40:49,509 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "LUCKYToken_0xE478d4F4a87D4D641AF97ca0b5Cc3dB61e266357_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:40:49" (3/4) ...
[2020-11-24 20:40:49,509 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@107f9b95 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:40:49, skipping insertion in model container
[2020-11-24 20:40:49,509 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:40:49" (4/4) ...
[2020-11-24 20:40:49,512 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-24 20:40:49,518 INFO  L110   BuchiProductObserver]: Initial RCFG 2615 locations, 3887 edges
[2020-11-24 20:40:49,518 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-24 20:40:49,531 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-24 20:40:51,213 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-24 20:40:51,222 INFO  L110   BuchiProductObserver]: BuchiProgram size 6836 locations, 12831 edges
[2020-11-24 20:40:51,222 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:40:51 BoogieIcfgContainer
[2020-11-24 20:40:51,222 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-24 20:40:51,222 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-24 20:40:51,222 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-24 20:40:51,224 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-24 20:40:51,224 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:40:51" (1/1) ...
[2020-11-24 20:40:51,360 INFO  L313           BlockEncoder]: Initial Icfg 6836 locations, 12831 edges
[2020-11-24 20:40:51,361 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-24 20:40:51,361 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-24 20:40:51,361 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-24 20:40:51,362 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-24 20:40:51,377 INFO  L70    emoveInfeasibleEdges]: Removed 180 edges and 19 locations because of local infeasibility
[2020-11-24 20:40:51,390 INFO  L70        RemoveSinkStates]: Removed 104 edges and 69 locations by removing sink states
[2020-11-24 20:40:51,408 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-24 20:40:51,411 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-24 20:40:51,416 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-24 20:40:51,416 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-24 20:40:51,419 INFO  L313           BlockEncoder]: Encoded RCFG 6716 locations, 12500 edges
[2020-11-24 20:40:51,420 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 08:40:51 BasicIcfg
[2020-11-24 20:40:51,420 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-24 20:40:51,420 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-24 20:40:51,420 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-24 20:40:51,422 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-24 20:40:51,422 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:40:51,422 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LUCKYToken_0xE478d4F4a87D4D641AF97ca0b5Cc3dB61e266357_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:40:48" (1/6) ...
[2020-11-24 20:40:51,424 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@57873d52 and model type LUCKYToken_0xE478d4F4a87D4D641AF97ca0b5Cc3dB61e266357_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 08:40:51, skipping insertion in model container
[2020-11-24 20:40:51,424 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:40:51,424 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:40:48" (2/6) ...
[2020-11-24 20:40:51,424 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@57873d52 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 08:40:51, skipping insertion in model container
[2020-11-24 20:40:51,424 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:40:51,424 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LUCKYToken_0xE478d4F4a87D4D641AF97ca0b5Cc3dB61e266357_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:40:49" (3/6) ...
[2020-11-24 20:40:51,425 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@57873d52 and model type LUCKYToken_0xE478d4F4a87D4D641AF97ca0b5Cc3dB61e266357_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 08:40:51, skipping insertion in model container
[2020-11-24 20:40:51,425 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:40:51,425 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:40:49" (4/6) ...
[2020-11-24 20:40:51,425 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@57873d52 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 08:40:51, skipping insertion in model container
[2020-11-24 20:40:51,425 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:40:51,425 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:40:51" (5/6) ...
[2020-11-24 20:40:51,425 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@57873d52 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 24.11 08:40:51, skipping insertion in model container
[2020-11-24 20:40:51,426 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:40:51,426 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 08:40:51" (6/6) ...
[2020-11-24 20:40:51,426 INFO  L404   chiAutomizerObserver]: Analyzing ICFG LUCKYToken_0xE478d4F4a87D4D641AF97ca0b5Cc3dB61e266357_transfer-self.bpl_BEv2
[2020-11-24 20:40:51,461 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-24 20:40:51,461 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-24 20:40:51,461 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-24 20:40:51,461 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-24 20:40:51,462 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-24 20:40:51,462 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-24 20:40:51,462 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-24 20:40:51,462 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-24 20:40:51,462 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-24 20:40:51,509 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6716 states.
[2020-11-24 20:40:51,581 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:40:51,581 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:40:51,581 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:40:51,590 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:40:51,591 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:40:51,591 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-24 20:40:51,591 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6716 states.
[2020-11-24 20:40:51,630 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:40:51,630 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:40:51,630 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:40:51,632 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:40:51,633 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_PausableToken0 := false;
[L2]                 call_transfer_PausableToken0 := false;
[L2]     CALL        call main();
[L7258]              assume null == 0;
[L7259]  CALL        call this := FreshRefGenerator__success();
[L2904]              havoc newRef;
[L2905]              assume Alloc[newRef] == false;
[L2906]              Alloc[newRef] := true;
[L2907]              assume newRef != null;
[L7259]  RET         call this := FreshRefGenerator__success();
[L7260]              assume now >= 0;
[L7261]              assume DType[this] == LUCKYToken;
[L7262]              assume msgvalue_MSG == 0;
[L7263]              gas := gas - 53000;
[L7264]  CALL        call LUCKYToken_LUCKYToken(this, msgsender_MSG, msgvalue_MSG);
[L1849]              havoc __exception;
[L1850]              revert := false;
[L1851]  COND FALSE  !(__exception)
[L1876]  CALL        call LUCKYToken_LUCKYToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4580]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4580]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4581]  COND TRUE   revert
[L1876]  RET         call LUCKYToken_LUCKYToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1877]              assume !revert && gas >= 0;
[L7264]  RET         call LUCKYToken_LUCKYToken(this, msgsender_MSG, msgvalue_MSG);
[L7265]              assume !revert && gas >= 0;

Loop:
[L7268]  CALL        call CorralChoice_LUCKYToken(this);
[L7078]              havoc msgsender_MSG;
[L7079]              havoc msgvalue_MSG;
[L7080]              havoc choice;
[L7081]              havoc _to_s670;
[L7082]              havoc _value_s670;
[L7083]              havoc __ret_0_transfer;
[L7084]              havoc _spender_s709;
[L7085]              havoc _value_s709;
[L7086]              havoc __ret_0_approve;
[L7087]              havoc _from_s691;
[L7088]              havoc _to_s691;
[L7089]              havoc _value_s691;
[L7090]              havoc __ret_0_transferFrom;
[L7091]              havoc __ret_0_totalSupply;
[L7092]              havoc owner_s211;
[L7093]              havoc __ret_0_balanceOf;
[L7094]              havoc owner_s227;
[L7095]              havoc spender_s227;
[L7096]              havoc __ret_0_allowance;
[L7097]              havoc _spender_s727;
[L7098]              havoc _addedValue_s727;
[L7099]              havoc success_s727;
[L7100]              havoc _spender_s745;
[L7101]              havoc _subtractedValue_s745;
[L7102]              havoc success_s745;
[L7103]              havoc __ret_0_owner;
[L7104]              havoc __ret_0_isOwner;
[L7105]              havoc newOwner_s564;
[L7106]              havoc __ret_0_paused;
[L7107]              havoc amount_s764;
[L7108]              havoc account_s779;
[L7109]              havoc amount_s779;
[L7110]              havoc __ret_0_name;
[L7111]              havoc __ret_0_symbol;
[L7112]              havoc __ret_0_decimals;
[L7113]              havoc tmpNow;
[L7114]              havoc gas;
[L7115]              assume gas > 4000000 && gas <= 8000000;
[L7116]              tmpNow := now;
[L7117]              havoc now;
[L7118]              assume now > tmpNow;
[L7119]              assume msgsender_MSG != null;
[L7120]              assume DType[msgsender_MSG] != SafeMath;
[L7121]              assume DType[msgsender_MSG] != IERC20;
[L7122]              assume DType[msgsender_MSG] != StandardToken;
[L7123]              assume DType[msgsender_MSG] != Ownable;
[L7124]              assume DType[msgsender_MSG] != Pausable;
[L7125]              assume DType[msgsender_MSG] != PausableToken;
[L7126]              assume DType[msgsender_MSG] != BurnableToken;
[L7127]              assume DType[msgsender_MSG] != LUCKYToken;
[L7128]              Alloc[msgsender_MSG] := true;
[L7129]  COND TRUE   choice == 19
[L7130]              gas := gas - 21000;
[L7131]  COND FALSE  !(gas >= 0)
[L7268]  RET         call CorralChoice_LUCKYToken(this);

[2020-11-24 20:40:51,650 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:40:51,651 INFO  L82        PathProgramCache]: Analyzing trace with hash -257510069, now seen corresponding path program 1 times
[2020-11-24 20:40:51,656 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:40:51,678 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:40:51,726 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 20:40:51,729 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:40:51,729 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 20:40:52,146 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:40:52,155 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 20:40:52,155 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 20:40:52,156 INFO  L87              Difference]: Start difference. First operand 6716 states. Second operand 3 states.
[2020-11-24 20:40:52,467 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:40:52,468 INFO  L93              Difference]: Finished difference Result 4041 states and 4968 transitions.
[2020-11-24 20:40:52,468 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 20:40:52,469 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4041 states and 4968 transitions.
[2020-11-24 20:40:52,491 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:40:52,520 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4041 states to 4041 states and 4968 transitions.
[2020-11-24 20:40:52,520 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-24 20:40:52,523 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 976
[2020-11-24 20:40:52,523 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4041 states and 4968 transitions.
[2020-11-24 20:40:52,533 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:40:52,533 INFO  L728         BuchiCegarLoop]: Abstraction has 4041 states and 4968 transitions.
[2020-11-24 20:40:52,548 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4041 states and 4968 transitions.
[2020-11-24 20:40:52,603 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4041 to 4041.
[2020-11-24 20:40:52,603 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4041 states.
[2020-11-24 20:40:52,612 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4041 states to 4041 states and 4968 transitions.
[2020-11-24 20:40:52,613 INFO  L751         BuchiCegarLoop]: Abstraction has 4041 states and 4968 transitions.
[2020-11-24 20:40:52,613 INFO  L631         BuchiCegarLoop]: Abstraction has 4041 states and 4968 transitions.
[2020-11-24 20:40:52,613 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-24 20:40:52,613 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4041 states and 4968 transitions.
[2020-11-24 20:40:52,622 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:40:52,622 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:40:52,622 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:40:52,624 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:40:52,624 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_PausableToken0 := false;
[L2]                 call_transfer_PausableToken0 := false;
[L2]     CALL        call main();
[L7258]              assume null == 0;
[L7259]  CALL        call this := FreshRefGenerator__success();
[L2904]              havoc newRef;
[L2905]              assume Alloc[newRef] == false;
[L2906]              Alloc[newRef] := true;
[L2907]              assume newRef != null;
[L7259]  RET         call this := FreshRefGenerator__success();
[L7260]              assume now >= 0;
[L7261]              assume DType[this] == LUCKYToken;
[L7262]              assume msgvalue_MSG == 0;
[L7263]              gas := gas - 53000;
[L7264]  CALL        call LUCKYToken_LUCKYToken(this, msgsender_MSG, msgvalue_MSG);
[L1849]              havoc __exception;
[L1850]              revert := false;
[L1851]  COND FALSE  !(__exception)
[L1876]  CALL        call LUCKYToken_LUCKYToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4580]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND TRUE   revert
[L4580]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4581]  COND TRUE   revert
[L1876]  RET         call LUCKYToken_LUCKYToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1877]              assume !revert && gas >= 0;
[L7264]  RET         call LUCKYToken_LUCKYToken(this, msgsender_MSG, msgvalue_MSG);
[L7265]              assume !revert && gas >= 0;
[L7268]  CALL        call CorralChoice_LUCKYToken(this);
[L7078]              havoc msgsender_MSG;
[L7079]              havoc msgvalue_MSG;
[L7080]              havoc choice;
[L7081]              havoc _to_s670;
[L7082]              havoc _value_s670;
[L7083]              havoc __ret_0_transfer;
[L7084]              havoc _spender_s709;
[L7085]              havoc _value_s709;
[L7086]              havoc __ret_0_approve;
[L7087]              havoc _from_s691;
[L7088]              havoc _to_s691;
[L7089]              havoc _value_s691;
[L7090]              havoc __ret_0_transferFrom;
[L7091]              havoc __ret_0_totalSupply;
[L7092]              havoc owner_s211;
[L7093]              havoc __ret_0_balanceOf;
[L7094]              havoc owner_s227;
[L7095]              havoc spender_s227;
[L7096]              havoc __ret_0_allowance;
[L7097]              havoc _spender_s727;
[L7098]              havoc _addedValue_s727;
[L7099]              havoc success_s727;
[L7100]              havoc _spender_s745;
[L7101]              havoc _subtractedValue_s745;
[L7102]              havoc success_s745;
[L7103]              havoc __ret_0_owner;
[L7104]              havoc __ret_0_isOwner;
[L7105]              havoc newOwner_s564;
[L7106]              havoc __ret_0_paused;
[L7107]              havoc amount_s764;
[L7108]              havoc account_s779;
[L7109]              havoc amount_s779;
[L7110]              havoc __ret_0_name;
[L7111]              havoc __ret_0_symbol;
[L7112]              havoc __ret_0_decimals;
[L7113]              havoc tmpNow;
[L7114]              havoc gas;
[L7115]              assume gas > 4000000 && gas <= 8000000;
[L7116]              tmpNow := now;
[L7117]              havoc now;
[L7118]              assume now > tmpNow;
[L7119]              assume msgsender_MSG != null;
[L7120]              assume DType[msgsender_MSG] != SafeMath;
[L7121]              assume DType[msgsender_MSG] != IERC20;
[L7122]              assume DType[msgsender_MSG] != StandardToken;
[L7123]              assume DType[msgsender_MSG] != Ownable;
[L7124]              assume DType[msgsender_MSG] != Pausable;
[L7125]              assume DType[msgsender_MSG] != PausableToken;
[L7126]              assume DType[msgsender_MSG] != BurnableToken;
[L7127]              assume DType[msgsender_MSG] != LUCKYToken;
[L7128]              Alloc[msgsender_MSG] := true;
[L7129]  COND TRUE   choice == 19
[L7130]              gas := gas - 21000;
[L7131]  COND TRUE   gas >= 0
[L7132]              assume _value_s670 >= 0 && _value_s670 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7133]              assume msgvalue_MSG == 0;
[L7134]  CALL        call __ret_0_transfer := transfer~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s670 && _value_s670 <= _balances_StandardToken[this][msgsender_MSG]) && _value_s670 >= 0) && _value_s670 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][_to_s670] >= 0) && _balances_StandardToken[this][_to_s670] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][msgsender_MSG] >= 0) && _balances_StandardToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_PausableToken0 := true;
[L2]                 call_transfer_PausableToken0 := false;
[L2]                 revert := revert_hold;
[L1329]              havoc __exception;
[L1330]              revert := false;
[L1331]  COND FALSE  !(__exception)
[L1356]  CALL        call __ret_0_ := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L4135]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6244]  COND FALSE  !(!!paused_Pausable[this])
[L4135]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4136]  COND TRUE   revert
[L1356]  RET         call __ret_0_ := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L1357]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((__ret_0_ == true && _totalSupply_StandardToken[this] == old(_totalSupply_StandardToken[this])) && _balances_StandardToken[this] == old(_balances_StandardToken[this])) && _allowed_StandardToken[this] == old(_allowed_StandardToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L7134]  RET         call __ret_0_transfer := transfer~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L7268]  RET         call CorralChoice_LUCKYToken(this);

Loop:
[L7268]  CALL        call CorralChoice_LUCKYToken(this);
[L7078]              havoc msgsender_MSG;
[L7079]              havoc msgvalue_MSG;
[L7080]              havoc choice;
[L7081]              havoc _to_s670;
[L7082]              havoc _value_s670;
[L7083]              havoc __ret_0_transfer;
[L7084]              havoc _spender_s709;
[L7085]              havoc _value_s709;
[L7086]              havoc __ret_0_approve;
[L7087]              havoc _from_s691;
[L7088]              havoc _to_s691;
[L7089]              havoc _value_s691;
[L7090]              havoc __ret_0_transferFrom;
[L7091]              havoc __ret_0_totalSupply;
[L7092]              havoc owner_s211;
[L7093]              havoc __ret_0_balanceOf;
[L7094]              havoc owner_s227;
[L7095]              havoc spender_s227;
[L7096]              havoc __ret_0_allowance;
[L7097]              havoc _spender_s727;
[L7098]              havoc _addedValue_s727;
[L7099]              havoc success_s727;
[L7100]              havoc _spender_s745;
[L7101]              havoc _subtractedValue_s745;
[L7102]              havoc success_s745;
[L7103]              havoc __ret_0_owner;
[L7104]              havoc __ret_0_isOwner;
[L7105]              havoc newOwner_s564;
[L7106]              havoc __ret_0_paused;
[L7107]              havoc amount_s764;
[L7108]              havoc account_s779;
[L7109]              havoc amount_s779;
[L7110]              havoc __ret_0_name;
[L7111]              havoc __ret_0_symbol;
[L7112]              havoc __ret_0_decimals;
[L7113]              havoc tmpNow;
[L7114]              havoc gas;
[L7115]              assume gas > 4000000 && gas <= 8000000;
[L7116]              tmpNow := now;
[L7117]              havoc now;
[L7118]              assume now > tmpNow;
[L7119]              assume msgsender_MSG != null;
[L7120]              assume DType[msgsender_MSG] != SafeMath;
[L7121]              assume DType[msgsender_MSG] != IERC20;
[L7122]              assume DType[msgsender_MSG] != StandardToken;
[L7123]              assume DType[msgsender_MSG] != Ownable;
[L7124]              assume DType[msgsender_MSG] != Pausable;
[L7125]              assume DType[msgsender_MSG] != PausableToken;
[L7126]              assume DType[msgsender_MSG] != BurnableToken;
[L7127]              assume DType[msgsender_MSG] != LUCKYToken;
[L7128]              Alloc[msgsender_MSG] := true;
[L7129]  COND TRUE   choice == 19
[L7130]              gas := gas - 21000;
[L7131]  COND TRUE   gas >= 0
[L7132]              assume _value_s670 >= 0 && _value_s670 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7133]              assume msgvalue_MSG == 0;
[L7134]  CALL        call __ret_0_transfer := transfer~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s670 && _value_s670 <= _balances_StandardToken[this][msgsender_MSG]) && _value_s670 >= 0) && _value_s670 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][_to_s670] >= 0) && _balances_StandardToken[this][_to_s670] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][msgsender_MSG] >= 0) && _balances_StandardToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_PausableToken0 := true;
[L2]                 call_transfer_PausableToken0 := false;
[L2]                 revert := revert_hold;
[L1329]              havoc __exception;
[L1330]              revert := false;
[L1331]  COND FALSE  !(__exception)
[L1356]  CALL        call __ret_0_ := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L4135]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6244]  COND FALSE  !(!!paused_Pausable[this])
[L4135]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4136]  COND TRUE   revert
[L1356]  RET         call __ret_0_ := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L1357]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((__ret_0_ == true && _totalSupply_StandardToken[this] == old(_totalSupply_StandardToken[this])) && _balances_StandardToken[this] == old(_balances_StandardToken[this])) && _allowed_StandardToken[this] == old(_allowed_StandardToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L7134]  RET         call __ret_0_transfer := transfer~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L7268]  RET         call CorralChoice_LUCKYToken(this);

[2020-11-24 20:40:52,627 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:40:52,628 INFO  L82        PathProgramCache]: Analyzing trace with hash 1136537300, now seen corresponding path program 1 times
[2020-11-24 20:40:52,629 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:40:52,640 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:40:52,657 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 20:40:52,657 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:40:52,657 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 20:40:52,658 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:40:52,658 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 20:40:52,658 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-24 20:40:52,658 INFO  L87              Difference]: Start difference. First operand 4041 states and 4968 transitions. cyclomatic complexity: 929 Second operand 4 states.
[2020-11-24 20:40:53,810 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:40:53,810 INFO  L93              Difference]: Finished difference Result 5815 states and 6898 transitions.
[2020-11-24 20:40:53,810 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 20:40:53,810 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5815 states and 6898 transitions.
[2020-11-24 20:40:53,830 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-24 20:40:53,854 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5815 states to 5371 states and 6342 transitions.
[2020-11-24 20:40:53,854 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1309
[2020-11-24 20:40:53,855 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1365
[2020-11-24 20:40:53,855 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5371 states and 6342 transitions.
[2020-11-24 20:40:53,861 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:40:53,861 INFO  L728         BuchiCegarLoop]: Abstraction has 5371 states and 6342 transitions.
[2020-11-24 20:40:53,866 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5371 states and 6342 transitions.
[2020-11-24 20:40:53,912 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5371 to 4365.
[2020-11-24 20:40:53,912 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4365 states.
[2020-11-24 20:40:53,918 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4365 states to 4365 states and 5036 transitions.
[2020-11-24 20:40:53,919 INFO  L751         BuchiCegarLoop]: Abstraction has 4365 states and 5036 transitions.
[2020-11-24 20:40:53,919 INFO  L631         BuchiCegarLoop]: Abstraction has 4365 states and 5036 transitions.
[2020-11-24 20:40:53,919 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-24 20:40:53,919 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4365 states and 5036 transitions.
[2020-11-24 20:40:53,926 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:40:53,927 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:40:53,927 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:40:53,930 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:40:53,930 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_PausableToken0 := false;
[L2]                 call_transfer_PausableToken0 := false;
[L2]     CALL        call main();
[L7258]              assume null == 0;
[L7259]  CALL        call this := FreshRefGenerator__success();
[L2904]              havoc newRef;
[L2905]              assume Alloc[newRef] == false;
[L2906]              Alloc[newRef] := true;
[L2907]              assume newRef != null;
[L7259]  RET         call this := FreshRefGenerator__success();
[L7260]              assume now >= 0;
[L7261]              assume DType[this] == LUCKYToken;
[L7262]              assume msgvalue_MSG == 0;
[L7263]              gas := gas - 53000;
[L7264]  CALL        call LUCKYToken_LUCKYToken(this, msgsender_MSG, msgvalue_MSG);
[L1849]              havoc __exception;
[L1850]              revert := false;
[L1851]  COND FALSE  !(__exception)
[L1876]  CALL        call LUCKYToken_LUCKYToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4580]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4580]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4581]  COND FALSE  !(revert)
[L4584]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3118]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L3118]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3119]  COND FALSE  !(revert)
[L3122]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3094]              assume msgsender_MSG != null;
[L3095]              Balance[this] := 0;
[L3096]              _balances_StandardToken[this] := zeroRefintArr();
[L3097]              sum__balances0[this] := 0;
[L3098]              _allowed_StandardToken[this] := zeroRefRefintArr();
[L3099]              sum__allowed1[this] := 0;
[L3100]              _totalSupply_StandardToken[this] := 0;
[L3122]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4584]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4585]  COND FALSE  !(revert)
[L4588]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L4588]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4589]  COND FALSE  !(revert)
[L4592]  CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4394]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4394]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4395]  COND FALSE  !(revert)
[L4398]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3118]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L3118]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3119]  COND FALSE  !(revert)
[L3122]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3094]              assume msgsender_MSG != null;
[L3095]              Balance[this] := 0;
[L3096]              _balances_StandardToken[this] := zeroRefintArr();
[L3097]              sum__balances0[this] := 0;
[L3098]              _allowed_StandardToken[this] := zeroRefRefintArr();
[L3099]              sum__allowed1[this] := 0;
[L3100]              _totalSupply_StandardToken[this] := 0;
[L3122]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4398]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4399]  COND FALSE  !(revert)
[L4402]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L4402]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4403]  COND FALSE  !(revert)
[L4406]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4367]              assume msgsender_MSG != null;
[L4368]              Balance[this] := 0;
[L4406]  RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4407]  COND FALSE  !(revert)
[L4592]  RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4593]  COND FALSE  !(revert)
[L4596]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3966]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L3966]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3967]  COND FALSE  !(revert)
[L3970]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3946]              assume msgsender_MSG != null;
[L3947]              Balance[this] := 0;
[L3948]              paused_Pausable[this] := false;
[L3970]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3971]  COND FALSE  !(revert)
[L4596]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4597]  COND FALSE  !(revert)
[L4600]  CALL        call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4084]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4084]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4085]  COND FALSE  !(revert)
[L4088]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3118]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L3118]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3119]  COND FALSE  !(revert)
[L3122]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3094]              assume msgsender_MSG != null;
[L3095]              Balance[this] := 0;
[L3096]              _balances_StandardToken[this] := zeroRefintArr();
[L3097]              sum__balances0[this] := 0;
[L3098]              _allowed_StandardToken[this] := zeroRefRefintArr();
[L3099]              sum__allowed1[this] := 0;
[L3100]              _totalSupply_StandardToken[this] := 0;
[L3122]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4088]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4089]  COND FALSE  !(revert)
[L4092]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L4092]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]  COND FALSE  !(revert)
[L4096]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3966]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L3966]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3967]  COND FALSE  !(revert)
[L3970]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3946]              assume msgsender_MSG != null;
[L3947]              Balance[this] := 0;
[L3948]              paused_Pausable[this] := false;
[L3970]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3971]  COND FALSE  !(revert)
[L4096]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4097]  COND FALSE  !(revert)
[L4100]  CALL        call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4053]              assume msgsender_MSG != null;
[L4054]              Balance[this] := 0;
[L4100]  RET         call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4101]  COND FALSE  !(revert)
[L4600]  RET         call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4601]  COND FALSE  !(revert)
[L4604]  CALL        call LUCKYToken_LUCKYToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4523]              assume msgsender_MSG != null;
[L4524]              Balance[this] := 0;
[L4525]              name_LUCKYToken[this] := -927166810;
[L4526]              symbol_LUCKYToken[this] := -927166810;
[L4527]              decimals_LUCKYToken[this] := 18;
[L4528]              INIT_TOTALSUPPLY_LUCKYToken[this] := 10000000000;
[L4529]              __var_26 := ConstantToRef(625314775344980695514831456764478199936221022047);
[L4530]              _tokenOwner_LUCKYToken[this] := ConstantToRef(625314775344980695514831456764478199936221022047);
[L4532]              __var_25 := decimals_LUCKYToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4533]              _totalSupply_StandardToken[this] := nonlinearMul(INIT_TOTALSUPPLY_LUCKYToken[this], nonlinearPow(10, decimals_LUCKYToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4534]              _owner_Ownable[this] := _tokenOwner_LUCKYToken[this];
[L4535]              assert { :EventEmitted "OwnershipTransferred_LUCKYToken" } true;
[L4536]              sum__balances0[this] := sum__balances0[this] - _balances_StandardToken[this][_owner_Ownable[this]];
[L4537]              _balances_StandardToken[this][_owner_Ownable[this]] := _totalSupply_StandardToken[this];
[L4538]              sum__balances0[this] := sum__balances0[this] + _balances_StandardToken[this][_owner_Ownable[this]];
[L4539]              assert { :EventEmitted "Transfer_LUCKYToken" } true;
[L4604]  RET         call LUCKYToken_LUCKYToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4605]  COND FALSE  !(revert)
[L1876]  RET         call LUCKYToken_LUCKYToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1877]              assume !revert && gas >= 0;
[L7264]  RET         call LUCKYToken_LUCKYToken(this, msgsender_MSG, msgvalue_MSG);
[L7265]              assume !revert && gas >= 0;
[L7268]  CALL        call CorralChoice_LUCKYToken(this);
[L7078]              havoc msgsender_MSG;
[L7079]              havoc msgvalue_MSG;
[L7080]              havoc choice;
[L7081]              havoc _to_s670;
[L7082]              havoc _value_s670;
[L7083]              havoc __ret_0_transfer;
[L7084]              havoc _spender_s709;
[L7085]              havoc _value_s709;
[L7086]              havoc __ret_0_approve;
[L7087]              havoc _from_s691;
[L7088]              havoc _to_s691;
[L7089]              havoc _value_s691;
[L7090]              havoc __ret_0_transferFrom;
[L7091]              havoc __ret_0_totalSupply;
[L7092]              havoc owner_s211;
[L7093]              havoc __ret_0_balanceOf;
[L7094]              havoc owner_s227;
[L7095]              havoc spender_s227;
[L7096]              havoc __ret_0_allowance;
[L7097]              havoc _spender_s727;
[L7098]              havoc _addedValue_s727;
[L7099]              havoc success_s727;
[L7100]              havoc _spender_s745;
[L7101]              havoc _subtractedValue_s745;
[L7102]              havoc success_s745;
[L7103]              havoc __ret_0_owner;
[L7104]              havoc __ret_0_isOwner;
[L7105]              havoc newOwner_s564;
[L7106]              havoc __ret_0_paused;
[L7107]              havoc amount_s764;
[L7108]              havoc account_s779;
[L7109]              havoc amount_s779;
[L7110]              havoc __ret_0_name;
[L7111]              havoc __ret_0_symbol;
[L7112]              havoc __ret_0_decimals;
[L7113]              havoc tmpNow;
[L7114]              havoc gas;
[L7115]              assume gas > 4000000 && gas <= 8000000;
[L7116]              tmpNow := now;
[L7117]              havoc now;
[L7118]              assume now > tmpNow;
[L7119]              assume msgsender_MSG != null;
[L7120]              assume DType[msgsender_MSG] != SafeMath;
[L7121]              assume DType[msgsender_MSG] != IERC20;
[L7122]              assume DType[msgsender_MSG] != StandardToken;
[L7123]              assume DType[msgsender_MSG] != Ownable;
[L7124]              assume DType[msgsender_MSG] != Pausable;
[L7125]              assume DType[msgsender_MSG] != PausableToken;
[L7126]              assume DType[msgsender_MSG] != BurnableToken;
[L7127]              assume DType[msgsender_MSG] != LUCKYToken;
[L7128]              Alloc[msgsender_MSG] := true;
[L7129]  COND TRUE   choice == 19
[L7130]              gas := gas - 21000;
[L7131]  COND TRUE   gas >= 0
[L7132]              assume _value_s670 >= 0 && _value_s670 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7133]              assume msgvalue_MSG == 0;
[L7134]  CALL        call __ret_0_transfer := transfer~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s670 && _value_s670 <= _balances_StandardToken[this][msgsender_MSG]) && _value_s670 >= 0) && _value_s670 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][_to_s670] >= 0) && _balances_StandardToken[this][_to_s670] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][msgsender_MSG] >= 0) && _balances_StandardToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_PausableToken0 := true;
[L2]                 call_transfer_PausableToken0 := false;
[L2]                 revert := revert_hold;
[L1329]              havoc __exception;
[L1330]              revert := false;
[L1331]  COND TRUE   __exception
[L1332]              __tmp__Balance := Balance;
[L1333]              __tmp__DType := DType;
[L1334]              __tmp__Alloc := Alloc;
[L1335]              __tmp__balance_ADDR := balance_ADDR;
[L1336]              __tmp__M_Ref_int := M_Ref_int;
[L1337]              __tmp__sum__balances0 := sum__balances0;
[L1338]              __tmp__alloc__allowed_StandardToken_lvl0 := alloc__allowed_StandardToken_lvl0;
[L1339]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1340]              __tmp__sum__allowed1 := sum__allowed1;
[L1341]              __tmp__Length := Length;
[L1342]              __tmp__now := now;
[L1343]              __tmp___balances_StandardToken := _balances_StandardToken;
[L1344]              __tmp___allowed_StandardToken := _allowed_StandardToken;
[L1345]              __tmp___totalSupply_StandardToken := _totalSupply_StandardToken;
[L1346]              __tmp___owner_Ownable := _owner_Ownable;
[L1347]              __tmp__paused_Pausable := paused_Pausable;
[L1348]              __tmp__name_LUCKYToken := name_LUCKYToken;
[L1349]              __tmp__symbol_LUCKYToken := symbol_LUCKYToken;
[L1350]              __tmp__decimals_LUCKYToken := decimals_LUCKYToken;
[L1351]              __tmp__INIT_TOTALSUPPLY_LUCKYToken := INIT_TOTALSUPPLY_LUCKYToken;
[L1352]              __tmp___tokenOwner_LUCKYToken := _tokenOwner_LUCKYToken;
[L1353]  CALL        call __ret_0_ := transfer~address~uint256_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L4110]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6236]  COND TRUE   !!__tmp__paused_Pausable[this]
[L6237]              revert := true;
[L4110]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4111]  COND TRUE   revert
[L1353]  RET         call __ret_0_ := transfer~address~uint256_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L1354]              assume revert || gas < 0;
[L7134]  RET         call __ret_0_transfer := transfer~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L7268]  RET         call CorralChoice_LUCKYToken(this);

Loop:
[L7268]  CALL       call CorralChoice_LUCKYToken(this);
[L7078]             havoc msgsender_MSG;
[L7079]             havoc msgvalue_MSG;
[L7080]             havoc choice;
[L7081]             havoc _to_s670;
[L7082]             havoc _value_s670;
[L7083]             havoc __ret_0_transfer;
[L7084]             havoc _spender_s709;
[L7085]             havoc _value_s709;
[L7086]             havoc __ret_0_approve;
[L7087]             havoc _from_s691;
[L7088]             havoc _to_s691;
[L7089]             havoc _value_s691;
[L7090]             havoc __ret_0_transferFrom;
[L7091]             havoc __ret_0_totalSupply;
[L7092]             havoc owner_s211;
[L7093]             havoc __ret_0_balanceOf;
[L7094]             havoc owner_s227;
[L7095]             havoc spender_s227;
[L7096]             havoc __ret_0_allowance;
[L7097]             havoc _spender_s727;
[L7098]             havoc _addedValue_s727;
[L7099]             havoc success_s727;
[L7100]             havoc _spender_s745;
[L7101]             havoc _subtractedValue_s745;
[L7102]             havoc success_s745;
[L7103]             havoc __ret_0_owner;
[L7104]             havoc __ret_0_isOwner;
[L7105]             havoc newOwner_s564;
[L7106]             havoc __ret_0_paused;
[L7107]             havoc amount_s764;
[L7108]             havoc account_s779;
[L7109]             havoc amount_s779;
[L7110]             havoc __ret_0_name;
[L7111]             havoc __ret_0_symbol;
[L7112]             havoc __ret_0_decimals;
[L7113]             havoc tmpNow;
[L7114]             havoc gas;
[L7115]             assume gas > 4000000 && gas <= 8000000;
[L7116]             tmpNow := now;
[L7117]             havoc now;
[L7118]             assume now > tmpNow;
[L7119]             assume msgsender_MSG != null;
[L7120]             assume DType[msgsender_MSG] != SafeMath;
[L7121]             assume DType[msgsender_MSG] != IERC20;
[L7122]             assume DType[msgsender_MSG] != StandardToken;
[L7123]             assume DType[msgsender_MSG] != Ownable;
[L7124]             assume DType[msgsender_MSG] != Pausable;
[L7125]             assume DType[msgsender_MSG] != PausableToken;
[L7126]             assume DType[msgsender_MSG] != BurnableToken;
[L7127]             assume DType[msgsender_MSG] != LUCKYToken;
[L7128]             Alloc[msgsender_MSG] := true;
[L7129]  COND TRUE  choice == 19
[L7130]             gas := gas - 21000;
[L7131]  COND TRUE  gas >= 0
[L7132]             assume _value_s670 >= 0 && _value_s670 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7133]             assume msgvalue_MSG == 0;
[L7134]  CALL       call __ret_0_transfer := transfer~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L2]                revert_hold := revert;
[L2]                revert := false;
[L2]                assume ((((((msgsender_MSG == _to_s670 && _value_s670 <= _balances_StandardToken[this][msgsender_MSG]) && _value_s670 >= 0) && _value_s670 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][_to_s670] >= 0) && _balances_StandardToken[this][_to_s670] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][msgsender_MSG] >= 0) && _balances_StandardToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                call_transfer_PausableToken0 := true;
[L2]                call_transfer_PausableToken0 := false;
[L2]                revert := revert_hold;
[L1329]             havoc __exception;
[L1330]             revert := false;
[L1331]  COND TRUE  __exception
[L1332]             __tmp__Balance := Balance;
[L1333]             __tmp__DType := DType;
[L1334]             __tmp__Alloc := Alloc;
[L1335]             __tmp__balance_ADDR := balance_ADDR;
[L1336]             __tmp__M_Ref_int := M_Ref_int;
[L1337]             __tmp__sum__balances0 := sum__balances0;
[L1338]             __tmp__alloc__allowed_StandardToken_lvl0 := alloc__allowed_StandardToken_lvl0;
[L1339]             __tmp__M_Ref_Ref := M_Ref_Ref;
[L1340]             __tmp__sum__allowed1 := sum__allowed1;
[L1341]             __tmp__Length := Length;
[L1342]             __tmp__now := now;
[L1343]             __tmp___balances_StandardToken := _balances_StandardToken;
[L1344]             __tmp___allowed_StandardToken := _allowed_StandardToken;
[L1345]             __tmp___totalSupply_StandardToken := _totalSupply_StandardToken;
[L1346]             __tmp___owner_Ownable := _owner_Ownable;
[L1347]             __tmp__paused_Pausable := paused_Pausable;
[L1348]             __tmp__name_LUCKYToken := name_LUCKYToken;
[L1349]             __tmp__symbol_LUCKYToken := symbol_LUCKYToken;
[L1350]             __tmp__decimals_LUCKYToken := decimals_LUCKYToken;
[L1351]             __tmp__INIT_TOTALSUPPLY_LUCKYToken := INIT_TOTALSUPPLY_LUCKYToken;
[L1352]             __tmp___tokenOwner_LUCKYToken := _tokenOwner_LUCKYToken;
[L1353]  CALL       call __ret_0_ := transfer~address~uint256_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L4110]  CALL       call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6236]  COND TRUE  !!__tmp__paused_Pausable[this]
[L6237]             revert := true;
[L4110]  RET        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4111]  COND TRUE  revert
[L1353]  RET        call __ret_0_ := transfer~address~uint256_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L1354]             assume revert || gas < 0;
[L7134]  RET        call __ret_0_transfer := transfer~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L7268]  RET        call CorralChoice_LUCKYToken(this);

[2020-11-24 20:40:53,935 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:40:53,935 INFO  L82        PathProgramCache]: Analyzing trace with hash -771137890, now seen corresponding path program 1 times
[2020-11-24 20:40:53,936 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:40:54,023 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:40:54,184 INFO  L134       CoverageAnalysis]: Checked inductivity of 332 backedges. 6 proven. 0 refuted. 0 times theorem prover too weak. 326 trivial. 0 not checked.
[2020-11-24 20:40:54,184 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:40:54,184 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-24 20:40:54,185 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:40:54,185 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-24 20:40:54,185 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=157, Unknown=0, NotChecked=0, Total=182
[2020-11-24 20:40:54,185 INFO  L87              Difference]: Start difference. First operand 4365 states and 5036 transitions. cyclomatic complexity: 673 Second operand 14 states.
[2020-11-24 20:40:57,845 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:40:57,845 INFO  L93              Difference]: Finished difference Result 6818 states and 7911 transitions.
[2020-11-24 20:40:57,845 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-11-24 20:40:57,845 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6818 states and 7911 transitions.
[2020-11-24 20:40:57,860 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 12
[2020-11-24 20:40:57,884 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6818 states to 6818 states and 7911 transitions.
[2020-11-24 20:40:57,884 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1775
[2020-11-24 20:40:57,886 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1775
[2020-11-24 20:40:57,886 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6818 states and 7911 transitions.
[2020-11-24 20:40:57,893 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:40:57,893 INFO  L728         BuchiCegarLoop]: Abstraction has 6818 states and 7911 transitions.
[2020-11-24 20:40:57,897 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6818 states and 7911 transitions.
[2020-11-24 20:40:57,940 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6818 to 4463.
[2020-11-24 20:40:57,940 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4463 states.
[2020-11-24 20:40:57,945 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4463 states to 4463 states and 5140 transitions.
[2020-11-24 20:40:57,946 INFO  L751         BuchiCegarLoop]: Abstraction has 4463 states and 5140 transitions.
[2020-11-24 20:40:57,946 INFO  L631         BuchiCegarLoop]: Abstraction has 4463 states and 5140 transitions.
[2020-11-24 20:40:57,946 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-24 20:40:57,946 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4463 states and 5140 transitions.
[2020-11-24 20:40:57,951 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 20:40:57,951 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:40:57,951 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:40:57,954 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:40:57,954 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_PausableToken0 := false;
[L2]                 call_transfer_PausableToken0 := false;
[L2]     CALL        call main();
[L7258]              assume null == 0;
[L7259]  CALL        call this := FreshRefGenerator__success();
[L2904]              havoc newRef;
[L2905]              assume Alloc[newRef] == false;
[L2906]              Alloc[newRef] := true;
[L2907]              assume newRef != null;
[L7259]  RET         call this := FreshRefGenerator__success();
[L7260]              assume now >= 0;
[L7261]              assume DType[this] == LUCKYToken;
[L7262]              assume msgvalue_MSG == 0;
[L7263]              gas := gas - 53000;
[L7264]  CALL        call LUCKYToken_LUCKYToken(this, msgsender_MSG, msgvalue_MSG);
[L1849]              havoc __exception;
[L1850]              revert := false;
[L1851]  COND TRUE   __exception
[L1852]              __tmp__Balance := Balance;
[L1853]              __tmp__DType := DType;
[L1854]              __tmp__Alloc := Alloc;
[L1855]              __tmp__balance_ADDR := balance_ADDR;
[L1856]              __tmp__M_Ref_int := M_Ref_int;
[L1857]              __tmp__sum__balances0 := sum__balances0;
[L1858]              __tmp__alloc__allowed_StandardToken_lvl0 := alloc__allowed_StandardToken_lvl0;
[L1859]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1860]              __tmp__sum__allowed1 := sum__allowed1;
[L1861]              __tmp__Length := Length;
[L1862]              __tmp__now := now;
[L1863]              __tmp___balances_StandardToken := _balances_StandardToken;
[L1864]              __tmp___allowed_StandardToken := _allowed_StandardToken;
[L1865]              __tmp___totalSupply_StandardToken := _totalSupply_StandardToken;
[L1866]              __tmp___owner_Ownable := _owner_Ownable;
[L1867]              __tmp__paused_Pausable := paused_Pausable;
[L1868]              __tmp__name_LUCKYToken := name_LUCKYToken;
[L1869]              __tmp__symbol_LUCKYToken := symbol_LUCKYToken;
[L1870]              __tmp__decimals_LUCKYToken := decimals_LUCKYToken;
[L1871]              __tmp__INIT_TOTALSUPPLY_LUCKYToken := INIT_TOTALSUPPLY_LUCKYToken;
[L1872]              __tmp___tokenOwner_LUCKYToken := _tokenOwner_LUCKYToken;
[L1873]  CALL        call LUCKYToken_LUCKYToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4546]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3064]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3049]              assume msgsender_MSG != null;
[L3050]              __tmp__Balance[this] := 0;
[L3064]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3065]  COND FALSE  !(revert)
[L4546]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4547]  COND FALSE  !(revert)
[L4550]  CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3106]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3064]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3049]              assume msgsender_MSG != null;
[L3050]              __tmp__Balance[this] := 0;
[L3064]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3065]  COND FALSE  !(revert)
[L3106]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3107]  COND FALSE  !(revert)
[L3110]  CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3081]              assume msgsender_MSG != null;
[L3082]              __tmp__Balance[this] := 0;
[L3083]              __tmp___balances_StandardToken[this] := zeroRefintArr();
[L3084]              __tmp__sum__balances0[this] := 0;
[L3085]              __tmp___allowed_StandardToken[this] := zeroRefRefintArr();
[L3086]              __tmp__sum__allowed1[this] := 0;
[L3087]              __tmp___totalSupply_StandardToken[this] := 0;
[L3110]  RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3111]  COND FALSE  !(revert)
[L4550]  RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]  COND FALSE  !(revert)
[L4554]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3801]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3784]              assume msgsender_MSG != null;
[L3785]              __tmp__Balance[this] := 0;
[L3786]              __tmp___owner_Ownable[this] := null;
[L3801]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3802]  COND FALSE  !(revert)
[L4554]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4555]  COND FALSE  !(revert)
[L4558]  CALL        call BurnableToken_BurnableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4374]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3064]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3049]              assume msgsender_MSG != null;
[L3050]              __tmp__Balance[this] := 0;
[L3064]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3065]  COND FALSE  !(revert)
[L4374]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4375]  COND FALSE  !(revert)
[L4378]  CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3106]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3064]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3049]              assume msgsender_MSG != null;
[L3050]              __tmp__Balance[this] := 0;
[L3064]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3065]  COND FALSE  !(revert)
[L3106]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3107]  COND FALSE  !(revert)
[L3110]  CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3081]              assume msgsender_MSG != null;
[L3082]              __tmp__Balance[this] := 0;
[L3083]              __tmp___balances_StandardToken[this] := zeroRefintArr();
[L3084]              __tmp__sum__balances0[this] := 0;
[L3085]              __tmp___allowed_StandardToken[this] := zeroRefRefintArr();
[L3086]              __tmp__sum__allowed1[this] := 0;
[L3087]              __tmp___totalSupply_StandardToken[this] := 0;
[L3110]  RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3111]  COND FALSE  !(revert)
[L4378]  RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4379]  COND FALSE  !(revert)
[L4382]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3801]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3784]              assume msgsender_MSG != null;
[L3785]              __tmp__Balance[this] := 0;
[L3786]              __tmp___owner_Ownable[this] := null;
[L3801]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3802]  COND FALSE  !(revert)
[L4382]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4383]  COND FALSE  !(revert)
[L4386]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4359]              assume msgsender_MSG != null;
[L4360]              __tmp__Balance[this] := 0;
[L4386]  RET         call BurnableToken_BurnableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4387]  COND FALSE  !(revert)
[L4558]  RET         call BurnableToken_BurnableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4559]  COND FALSE  !(revert)
[L4562]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3954]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3801]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3784]              assume msgsender_MSG != null;
[L3785]              __tmp__Balance[this] := 0;
[L3786]              __tmp___owner_Ownable[this] := null;
[L3801]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3802]  COND FALSE  !(revert)
[L3954]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3955]  COND FALSE  !(revert)
[L3958]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3937]              assume msgsender_MSG != null;
[L3938]              __tmp__Balance[this] := 0;
[L3939]              __tmp__paused_Pausable[this] := false;
[L3958]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3959]  COND FALSE  !(revert)
[L4562]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4563]  COND FALSE  !(revert)
[L4566]  CALL        call PausableToken_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4060]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3064]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3049]              assume msgsender_MSG != null;
[L3050]              __tmp__Balance[this] := 0;
[L3064]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3065]  COND FALSE  !(revert)
[L4060]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4061]  COND FALSE  !(revert)
[L4064]  CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3106]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3064]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3049]              assume msgsender_MSG != null;
[L3050]              __tmp__Balance[this] := 0;
[L3064]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3065]  COND FALSE  !(revert)
[L3106]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3107]  COND FALSE  !(revert)
[L3110]  CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3081]              assume msgsender_MSG != null;
[L3082]              __tmp__Balance[this] := 0;
[L3083]              __tmp___balances_StandardToken[this] := zeroRefintArr();
[L3084]              __tmp__sum__balances0[this] := 0;
[L3085]              __tmp___allowed_StandardToken[this] := zeroRefRefintArr();
[L3086]              __tmp__sum__allowed1[this] := 0;
[L3087]              __tmp___totalSupply_StandardToken[this] := 0;
[L3110]  RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3111]  COND FALSE  !(revert)
[L4064]  RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4065]  COND FALSE  !(revert)
[L4068]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3801]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3784]              assume msgsender_MSG != null;
[L3785]              __tmp__Balance[this] := 0;
[L3786]              __tmp___owner_Ownable[this] := null;
[L3801]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3802]  COND FALSE  !(revert)
[L4068]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4069]  COND FALSE  !(revert)
[L4072]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3954]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3801]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3784]              assume msgsender_MSG != null;
[L3785]              __tmp__Balance[this] := 0;
[L3786]              __tmp___owner_Ownable[this] := null;
[L3801]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3802]  COND FALSE  !(revert)
[L3954]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3955]  COND FALSE  !(revert)
[L3958]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3937]              assume msgsender_MSG != null;
[L3938]              __tmp__Balance[this] := 0;
[L3939]              __tmp__paused_Pausable[this] := false;
[L3958]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3959]  COND FALSE  !(revert)
[L4072]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4073]  COND FALSE  !(revert)
[L4076]  CALL        call PausableToken_PausableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4045]              assume msgsender_MSG != null;
[L4046]              __tmp__Balance[this] := 0;
[L4076]  RET         call PausableToken_PausableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4077]  COND FALSE  !(revert)
[L4566]  RET         call PausableToken_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]  COND FALSE  !(revert)
[L4570]  CALL        call LUCKYToken_LUCKYToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4501]              assume msgsender_MSG != null;
[L4502]              __tmp__Balance[this] := 0;
[L4503]              __tmp__name_LUCKYToken[this] := -927166810;
[L4504]              __tmp__symbol_LUCKYToken[this] := -927166810;
[L4505]              __tmp__decimals_LUCKYToken[this] := 18;
[L4506]              __tmp__INIT_TOTALSUPPLY_LUCKYToken[this] := 10000000000;
[L4507]              __var_26 := ConstantToRef(625314775344980695514831456764478199936221022047);
[L4508]              __tmp___tokenOwner_LUCKYToken[this] := ConstantToRef(625314775344980695514831456764478199936221022047);
[L4510]              __var_25 := __tmp__decimals_LUCKYToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4511]              __tmp___totalSupply_StandardToken[this] := nonlinearMul(__tmp__INIT_TOTALSUPPLY_LUCKYToken[this], nonlinearPow(10, __tmp__decimals_LUCKYToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4512]              __tmp___owner_Ownable[this] := __tmp___tokenOwner_LUCKYToken[this];
[L4513]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_StandardToken[this][__tmp___owner_Ownable[this]];
[L4514]              __tmp___balances_StandardToken[this][__tmp___owner_Ownable[this]] := __tmp___totalSupply_StandardToken[this];
[L4515]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_StandardToken[this][__tmp___owner_Ownable[this]];
[L4570]  RET         call LUCKYToken_LUCKYToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4571]  COND FALSE  !(revert)
[L1873]  RET         call LUCKYToken_LUCKYToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L1874]              assume revert || gas < 0;
[L7264]  RET         call LUCKYToken_LUCKYToken(this, msgsender_MSG, msgvalue_MSG);
[L7265]              assume !revert && gas >= 0;
[L7268]  CALL        call CorralChoice_LUCKYToken(this);
[L7078]              havoc msgsender_MSG;
[L7079]              havoc msgvalue_MSG;
[L7080]              havoc choice;
[L7081]              havoc _to_s670;
[L7082]              havoc _value_s670;
[L7083]              havoc __ret_0_transfer;
[L7084]              havoc _spender_s709;
[L7085]              havoc _value_s709;
[L7086]              havoc __ret_0_approve;
[L7087]              havoc _from_s691;
[L7088]              havoc _to_s691;
[L7089]              havoc _value_s691;
[L7090]              havoc __ret_0_transferFrom;
[L7091]              havoc __ret_0_totalSupply;
[L7092]              havoc owner_s211;
[L7093]              havoc __ret_0_balanceOf;
[L7094]              havoc owner_s227;
[L7095]              havoc spender_s227;
[L7096]              havoc __ret_0_allowance;
[L7097]              havoc _spender_s727;
[L7098]              havoc _addedValue_s727;
[L7099]              havoc success_s727;
[L7100]              havoc _spender_s745;
[L7101]              havoc _subtractedValue_s745;
[L7102]              havoc success_s745;
[L7103]              havoc __ret_0_owner;
[L7104]              havoc __ret_0_isOwner;
[L7105]              havoc newOwner_s564;
[L7106]              havoc __ret_0_paused;
[L7107]              havoc amount_s764;
[L7108]              havoc account_s779;
[L7109]              havoc amount_s779;
[L7110]              havoc __ret_0_name;
[L7111]              havoc __ret_0_symbol;
[L7112]              havoc __ret_0_decimals;
[L7113]              havoc tmpNow;
[L7114]              havoc gas;
[L7115]              assume gas > 4000000 && gas <= 8000000;
[L7116]              tmpNow := now;
[L7117]              havoc now;
[L7118]              assume now > tmpNow;
[L7119]              assume msgsender_MSG != null;
[L7120]              assume DType[msgsender_MSG] != SafeMath;
[L7121]              assume DType[msgsender_MSG] != IERC20;
[L7122]              assume DType[msgsender_MSG] != StandardToken;
[L7123]              assume DType[msgsender_MSG] != Ownable;
[L7124]              assume DType[msgsender_MSG] != Pausable;
[L7125]              assume DType[msgsender_MSG] != PausableToken;
[L7126]              assume DType[msgsender_MSG] != BurnableToken;
[L7127]              assume DType[msgsender_MSG] != LUCKYToken;
[L7128]              Alloc[msgsender_MSG] := true;
[L7129]  COND TRUE   choice == 19
[L7130]              gas := gas - 21000;
[L7131]  COND TRUE   gas >= 0
[L7132]              assume _value_s670 >= 0 && _value_s670 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7133]              assume msgvalue_MSG == 0;
[L7134]  CALL        call __ret_0_transfer := transfer~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s670 && _value_s670 <= _balances_StandardToken[this][msgsender_MSG]) && _value_s670 >= 0) && _value_s670 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][_to_s670] >= 0) && _balances_StandardToken[this][_to_s670] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][msgsender_MSG] >= 0) && _balances_StandardToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_PausableToken0 := true;
[L2]                 call_transfer_PausableToken0 := false;
[L2]                 revert := revert_hold;
[L1329]              havoc __exception;
[L1330]              revert := false;
[L1331]  COND TRUE   __exception
[L1332]              __tmp__Balance := Balance;
[L1333]              __tmp__DType := DType;
[L1334]              __tmp__Alloc := Alloc;
[L1335]              __tmp__balance_ADDR := balance_ADDR;
[L1336]              __tmp__M_Ref_int := M_Ref_int;
[L1337]              __tmp__sum__balances0 := sum__balances0;
[L1338]              __tmp__alloc__allowed_StandardToken_lvl0 := alloc__allowed_StandardToken_lvl0;
[L1339]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1340]              __tmp__sum__allowed1 := sum__allowed1;
[L1341]              __tmp__Length := Length;
[L1342]              __tmp__now := now;
[L1343]              __tmp___balances_StandardToken := _balances_StandardToken;
[L1344]              __tmp___allowed_StandardToken := _allowed_StandardToken;
[L1345]              __tmp___totalSupply_StandardToken := _totalSupply_StandardToken;
[L1346]              __tmp___owner_Ownable := _owner_Ownable;
[L1347]              __tmp__paused_Pausable := paused_Pausable;
[L1348]              __tmp__name_LUCKYToken := name_LUCKYToken;
[L1349]              __tmp__symbol_LUCKYToken := symbol_LUCKYToken;
[L1350]              __tmp__decimals_LUCKYToken := decimals_LUCKYToken;
[L1351]              __tmp__INIT_TOTALSUPPLY_LUCKYToken := INIT_TOTALSUPPLY_LUCKYToken;
[L1352]              __tmp___tokenOwner_LUCKYToken := _tokenOwner_LUCKYToken;
[L1353]  CALL        call __ret_0_ := transfer~address~uint256_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L4110]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6236]  COND TRUE   !!__tmp__paused_Pausable[this]
[L6237]              revert := true;
[L4110]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4111]  COND TRUE   revert
[L1353]  RET         call __ret_0_ := transfer~address~uint256_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L1354]              assume revert || gas < 0;
[L7134]  RET         call __ret_0_transfer := transfer~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L7268]  RET         call CorralChoice_LUCKYToken(this);

Loop:
[L7268]  CALL        call CorralChoice_LUCKYToken(this);
[L7078]              havoc msgsender_MSG;
[L7079]              havoc msgvalue_MSG;
[L7080]              havoc choice;
[L7081]              havoc _to_s670;
[L7082]              havoc _value_s670;
[L7083]              havoc __ret_0_transfer;
[L7084]              havoc _spender_s709;
[L7085]              havoc _value_s709;
[L7086]              havoc __ret_0_approve;
[L7087]              havoc _from_s691;
[L7088]              havoc _to_s691;
[L7089]              havoc _value_s691;
[L7090]              havoc __ret_0_transferFrom;
[L7091]              havoc __ret_0_totalSupply;
[L7092]              havoc owner_s211;
[L7093]              havoc __ret_0_balanceOf;
[L7094]              havoc owner_s227;
[L7095]              havoc spender_s227;
[L7096]              havoc __ret_0_allowance;
[L7097]              havoc _spender_s727;
[L7098]              havoc _addedValue_s727;
[L7099]              havoc success_s727;
[L7100]              havoc _spender_s745;
[L7101]              havoc _subtractedValue_s745;
[L7102]              havoc success_s745;
[L7103]              havoc __ret_0_owner;
[L7104]              havoc __ret_0_isOwner;
[L7105]              havoc newOwner_s564;
[L7106]              havoc __ret_0_paused;
[L7107]              havoc amount_s764;
[L7108]              havoc account_s779;
[L7109]              havoc amount_s779;
[L7110]              havoc __ret_0_name;
[L7111]              havoc __ret_0_symbol;
[L7112]              havoc __ret_0_decimals;
[L7113]              havoc tmpNow;
[L7114]              havoc gas;
[L7115]              assume gas > 4000000 && gas <= 8000000;
[L7116]              tmpNow := now;
[L7117]              havoc now;
[L7118]              assume now > tmpNow;
[L7119]              assume msgsender_MSG != null;
[L7120]              assume DType[msgsender_MSG] != SafeMath;
[L7121]              assume DType[msgsender_MSG] != IERC20;
[L7122]              assume DType[msgsender_MSG] != StandardToken;
[L7123]              assume DType[msgsender_MSG] != Ownable;
[L7124]              assume DType[msgsender_MSG] != Pausable;
[L7125]              assume DType[msgsender_MSG] != PausableToken;
[L7126]              assume DType[msgsender_MSG] != BurnableToken;
[L7127]              assume DType[msgsender_MSG] != LUCKYToken;
[L7128]              Alloc[msgsender_MSG] := true;
[L7129]  COND FALSE  !(choice == 19)
[L7136]  COND FALSE  !(choice == 18)
[L7143]  COND FALSE  !(choice == 17)
[L7150]  COND FALSE  !(choice == 16)
[L7156]  COND FALSE  !(choice == 15)
[L7162]  COND FALSE  !(choice == 14)
[L7168]  COND FALSE  !(choice == 13)
[L7175]  COND FALSE  !(choice == 12)
[L7182]  COND FALSE  !(choice == 11)
[L7188]  COND FALSE  !(choice == 10)
[L7194]  COND FALSE  !(choice == 9)
[L7200]  COND FALSE  !(choice == 8)
[L7206]  COND FALSE  !(choice == 7)
[L7212]  COND TRUE   choice == 6
[L7213]              gas := gas - 21000;
[L7214]  COND TRUE   gas >= 0
[L7215]              assume msgvalue_MSG == 0;
[L7216]  CALL        call unpause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L1143]              havoc __exception;
[L1144]              revert := false;
[L1145]  COND FALSE  !(__exception)
[L1170]  CALL        call unpause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4018]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6200]  COND TRUE   DType[this] == LUCKYToken
[L6201]  CALL        call __var_13 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3835]              __ret_0_ := msgsender_MSG == _owner_Ownable[this];
[L6201]  RET         call __var_13 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6202]  COND FALSE  !(revert)
[L6228]  COND FALSE  !(!__var_13)
[L4018]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4019]  COND FALSE  !(revert)
[L4022]  CALL        call whenPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6260]  COND FALSE  !(!paused_Pausable[this])
[L4022]  RET         call whenPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4023]  COND FALSE  !(revert)
[L4026]              paused_Pausable[this] := false;
[L4027]              assert { :EventEmitted "Unpause_Pausable" } true;
[L1170]  RET         call unpause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L1171]              assume !revert && gas >= 0;
[L7216]  RET         call unpause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L7268]  RET         call CorralChoice_LUCKYToken(this);

[2020-11-24 20:40:57,959 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:40:57,959 INFO  L82        PathProgramCache]: Analyzing trace with hash 506779468, now seen corresponding path program 1 times
[2020-11-24 20:40:57,960 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:40:57,972 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:40:58,050 INFO  L134       CoverageAnalysis]: Checked inductivity of 332 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 332 trivial. 0 not checked.
[2020-11-24 20:40:58,051 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:40:58,051 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 20:40:58,052 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:40:58,052 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 20:40:58,052 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-24 20:40:58,052 INFO  L87              Difference]: Start difference. First operand 4463 states and 5140 transitions. cyclomatic complexity: 681 Second operand 4 states.
[2020-11-24 20:40:58,526 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:40:58,526 INFO  L93              Difference]: Finished difference Result 5221 states and 6125 transitions.
[2020-11-24 20:40:58,526 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 20:40:58,526 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5221 states and 6125 transitions.
[2020-11-24 20:40:58,538 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 12
[2020-11-24 20:40:58,551 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5221 states to 5001 states and 5897 transitions.
[2020-11-24 20:40:58,551 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1366
[2020-11-24 20:40:58,552 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1366
[2020-11-24 20:40:58,552 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5001 states and 5897 transitions.
[2020-11-24 20:40:58,556 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:40:58,556 INFO  L728         BuchiCegarLoop]: Abstraction has 5001 states and 5897 transitions.
[2020-11-24 20:40:58,560 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5001 states and 5897 transitions.
[2020-11-24 20:40:58,593 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5001 to 4478.
[2020-11-24 20:40:58,593 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4478 states.
[2020-11-24 20:40:58,598 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4478 states to 4478 states and 5198 transitions.
[2020-11-24 20:40:58,598 INFO  L751         BuchiCegarLoop]: Abstraction has 4478 states and 5198 transitions.
[2020-11-24 20:40:58,598 INFO  L631         BuchiCegarLoop]: Abstraction has 4478 states and 5198 transitions.
[2020-11-24 20:40:58,598 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-24 20:40:58,599 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4478 states and 5198 transitions.
[2020-11-24 20:40:58,604 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-24 20:40:58,604 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:40:58,604 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:40:58,606 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:40:58,606 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_PausableToken0 := false;
[L2]                 call_transfer_PausableToken0 := false;
[L2]     CALL        call main();
[L7258]              assume null == 0;
[L7259]  CALL        call this := FreshRefGenerator__success();
[L2904]              havoc newRef;
[L2905]              assume Alloc[newRef] == false;
[L2906]              Alloc[newRef] := true;
[L2907]              assume newRef != null;
[L7259]  RET         call this := FreshRefGenerator__success();
[L7260]              assume now >= 0;
[L7261]              assume DType[this] == LUCKYToken;
[L7262]              assume msgvalue_MSG == 0;
[L7263]              gas := gas - 53000;
[L7264]  CALL        call LUCKYToken_LUCKYToken(this, msgsender_MSG, msgvalue_MSG);
[L1849]              havoc __exception;
[L1850]              revert := false;
[L1851]  COND FALSE  !(__exception)
[L1876]  CALL        call LUCKYToken_LUCKYToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4580]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4580]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4581]  COND FALSE  !(revert)
[L4584]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3118]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L3118]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3119]  COND FALSE  !(revert)
[L3122]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3094]              assume msgsender_MSG != null;
[L3095]              Balance[this] := 0;
[L3096]              _balances_StandardToken[this] := zeroRefintArr();
[L3097]              sum__balances0[this] := 0;
[L3098]              _allowed_StandardToken[this] := zeroRefRefintArr();
[L3099]              sum__allowed1[this] := 0;
[L3100]              _totalSupply_StandardToken[this] := 0;
[L3122]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4584]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4585]  COND FALSE  !(revert)
[L4588]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L4588]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4589]  COND FALSE  !(revert)
[L4592]  CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4394]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4394]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4395]  COND FALSE  !(revert)
[L4398]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3118]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L3118]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3119]  COND FALSE  !(revert)
[L3122]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3094]              assume msgsender_MSG != null;
[L3095]              Balance[this] := 0;
[L3096]              _balances_StandardToken[this] := zeroRefintArr();
[L3097]              sum__balances0[this] := 0;
[L3098]              _allowed_StandardToken[this] := zeroRefRefintArr();
[L3099]              sum__allowed1[this] := 0;
[L3100]              _totalSupply_StandardToken[this] := 0;
[L3122]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4398]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4399]  COND FALSE  !(revert)
[L4402]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L4402]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4403]  COND FALSE  !(revert)
[L4406]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4367]              assume msgsender_MSG != null;
[L4368]              Balance[this] := 0;
[L4406]  RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4407]  COND FALSE  !(revert)
[L4592]  RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4593]  COND FALSE  !(revert)
[L4596]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3966]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L3966]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3967]  COND FALSE  !(revert)
[L3970]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3946]              assume msgsender_MSG != null;
[L3947]              Balance[this] := 0;
[L3948]              paused_Pausable[this] := false;
[L3970]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3971]  COND FALSE  !(revert)
[L4596]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4597]  COND FALSE  !(revert)
[L4600]  CALL        call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4084]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4084]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4085]  COND FALSE  !(revert)
[L4088]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3118]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L3118]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3119]  COND FALSE  !(revert)
[L3122]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3094]              assume msgsender_MSG != null;
[L3095]              Balance[this] := 0;
[L3096]              _balances_StandardToken[this] := zeroRefintArr();
[L3097]              sum__balances0[this] := 0;
[L3098]              _allowed_StandardToken[this] := zeroRefRefintArr();
[L3099]              sum__allowed1[this] := 0;
[L3100]              _totalSupply_StandardToken[this] := 0;
[L3122]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4088]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4089]  COND FALSE  !(revert)
[L4092]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L4092]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]  COND FALSE  !(revert)
[L4096]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3966]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L3966]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3967]  COND FALSE  !(revert)
[L3970]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3946]              assume msgsender_MSG != null;
[L3947]              Balance[this] := 0;
[L3948]              paused_Pausable[this] := false;
[L3970]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3971]  COND FALSE  !(revert)
[L4096]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4097]  COND FALSE  !(revert)
[L4100]  CALL        call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4053]              assume msgsender_MSG != null;
[L4054]              Balance[this] := 0;
[L4100]  RET         call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4101]  COND FALSE  !(revert)
[L4600]  RET         call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4601]  COND FALSE  !(revert)
[L4604]  CALL        call LUCKYToken_LUCKYToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4523]              assume msgsender_MSG != null;
[L4524]              Balance[this] := 0;
[L4525]              name_LUCKYToken[this] := -927166810;
[L4526]              symbol_LUCKYToken[this] := -927166810;
[L4527]              decimals_LUCKYToken[this] := 18;
[L4528]              INIT_TOTALSUPPLY_LUCKYToken[this] := 10000000000;
[L4529]              __var_26 := ConstantToRef(625314775344980695514831456764478199936221022047);
[L4530]              _tokenOwner_LUCKYToken[this] := ConstantToRef(625314775344980695514831456764478199936221022047);
[L4532]              __var_25 := decimals_LUCKYToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4533]              _totalSupply_StandardToken[this] := nonlinearMul(INIT_TOTALSUPPLY_LUCKYToken[this], nonlinearPow(10, decimals_LUCKYToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4534]              _owner_Ownable[this] := _tokenOwner_LUCKYToken[this];
[L4535]              assert { :EventEmitted "OwnershipTransferred_LUCKYToken" } true;
[L4536]              sum__balances0[this] := sum__balances0[this] - _balances_StandardToken[this][_owner_Ownable[this]];
[L4537]              _balances_StandardToken[this][_owner_Ownable[this]] := _totalSupply_StandardToken[this];
[L4538]              sum__balances0[this] := sum__balances0[this] + _balances_StandardToken[this][_owner_Ownable[this]];
[L4539]              assert { :EventEmitted "Transfer_LUCKYToken" } true;
[L4604]  RET         call LUCKYToken_LUCKYToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4605]  COND FALSE  !(revert)
[L1876]  RET         call LUCKYToken_LUCKYToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1877]              assume !revert && gas >= 0;
[L7264]  RET         call LUCKYToken_LUCKYToken(this, msgsender_MSG, msgvalue_MSG);
[L7265]              assume !revert && gas >= 0;
[L7268]  CALL        call CorralChoice_LUCKYToken(this);
[L7078]              havoc msgsender_MSG;
[L7079]              havoc msgvalue_MSG;
[L7080]              havoc choice;
[L7081]              havoc _to_s670;
[L7082]              havoc _value_s670;
[L7083]              havoc __ret_0_transfer;
[L7084]              havoc _spender_s709;
[L7085]              havoc _value_s709;
[L7086]              havoc __ret_0_approve;
[L7087]              havoc _from_s691;
[L7088]              havoc _to_s691;
[L7089]              havoc _value_s691;
[L7090]              havoc __ret_0_transferFrom;
[L7091]              havoc __ret_0_totalSupply;
[L7092]              havoc owner_s211;
[L7093]              havoc __ret_0_balanceOf;
[L7094]              havoc owner_s227;
[L7095]              havoc spender_s227;
[L7096]              havoc __ret_0_allowance;
[L7097]              havoc _spender_s727;
[L7098]              havoc _addedValue_s727;
[L7099]              havoc success_s727;
[L7100]              havoc _spender_s745;
[L7101]              havoc _subtractedValue_s745;
[L7102]              havoc success_s745;
[L7103]              havoc __ret_0_owner;
[L7104]              havoc __ret_0_isOwner;
[L7105]              havoc newOwner_s564;
[L7106]              havoc __ret_0_paused;
[L7107]              havoc amount_s764;
[L7108]              havoc account_s779;
[L7109]              havoc amount_s779;
[L7110]              havoc __ret_0_name;
[L7111]              havoc __ret_0_symbol;
[L7112]              havoc __ret_0_decimals;
[L7113]              havoc tmpNow;
[L7114]              havoc gas;
[L7115]              assume gas > 4000000 && gas <= 8000000;
[L7116]              tmpNow := now;
[L7117]              havoc now;
[L7118]              assume now > tmpNow;
[L7119]              assume msgsender_MSG != null;
[L7120]              assume DType[msgsender_MSG] != SafeMath;
[L7121]              assume DType[msgsender_MSG] != IERC20;
[L7122]              assume DType[msgsender_MSG] != StandardToken;
[L7123]              assume DType[msgsender_MSG] != Ownable;
[L7124]              assume DType[msgsender_MSG] != Pausable;
[L7125]              assume DType[msgsender_MSG] != PausableToken;
[L7126]              assume DType[msgsender_MSG] != BurnableToken;
[L7127]              assume DType[msgsender_MSG] != LUCKYToken;
[L7128]              Alloc[msgsender_MSG] := true;
[L7129]  COND TRUE   choice == 19
[L7130]              gas := gas - 21000;
[L7131]  COND TRUE   gas >= 0
[L7132]              assume _value_s670 >= 0 && _value_s670 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7133]              assume msgvalue_MSG == 0;
[L7134]  CALL        call __ret_0_transfer := transfer~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s670 && _value_s670 <= _balances_StandardToken[this][msgsender_MSG]) && _value_s670 >= 0) && _value_s670 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][_to_s670] >= 0) && _balances_StandardToken[this][_to_s670] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][msgsender_MSG] >= 0) && _balances_StandardToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_PausableToken0 := true;
[L2]                 call_transfer_PausableToken0 := false;
[L2]                 revert := revert_hold;
[L1329]              havoc __exception;
[L1330]              revert := false;
[L1331]  COND TRUE   __exception
[L1332]              __tmp__Balance := Balance;
[L1333]              __tmp__DType := DType;
[L1334]              __tmp__Alloc := Alloc;
[L1335]              __tmp__balance_ADDR := balance_ADDR;
[L1336]              __tmp__M_Ref_int := M_Ref_int;
[L1337]              __tmp__sum__balances0 := sum__balances0;
[L1338]              __tmp__alloc__allowed_StandardToken_lvl0 := alloc__allowed_StandardToken_lvl0;
[L1339]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1340]              __tmp__sum__allowed1 := sum__allowed1;
[L1341]              __tmp__Length := Length;
[L1342]              __tmp__now := now;
[L1343]              __tmp___balances_StandardToken := _balances_StandardToken;
[L1344]              __tmp___allowed_StandardToken := _allowed_StandardToken;
[L1345]              __tmp___totalSupply_StandardToken := _totalSupply_StandardToken;
[L1346]              __tmp___owner_Ownable := _owner_Ownable;
[L1347]              __tmp__paused_Pausable := paused_Pausable;
[L1348]              __tmp__name_LUCKYToken := name_LUCKYToken;
[L1349]              __tmp__symbol_LUCKYToken := symbol_LUCKYToken;
[L1350]              __tmp__decimals_LUCKYToken := decimals_LUCKYToken;
[L1351]              __tmp__INIT_TOTALSUPPLY_LUCKYToken := INIT_TOTALSUPPLY_LUCKYToken;
[L1352]              __tmp___tokenOwner_LUCKYToken := _tokenOwner_LUCKYToken;
[L1353]  CALL        call __ret_0_ := transfer~address~uint256_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L4110]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6236]  COND FALSE  !(!!__tmp__paused_Pausable[this])
[L4110]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4111]  COND FALSE  !(revert)
[L4114]  COND TRUE   __tmp__DType[this] == LUCKYToken
[L4115]  CALL        call __var_15 := transfer~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L3166]  COND TRUE   __tmp__DType[this] == LUCKYToken
[L3167]  CALL        call _transfer~address~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s246, value_s246);
[L3535]              __var_4 := null;
[L3536]  COND TRUE   !(to_s401 != null)
[L3537]              revert := true;
[L3167]  RET         call _transfer~address~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s246, value_s246);
[L3168]  COND TRUE   revert
[L4115]  RET         call __var_15 := transfer~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L4116]  COND TRUE   revert
[L1353]  RET         call __ret_0_ := transfer~address~uint256_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L1354]              assume revert || gas < 0;
[L7134]  RET         call __ret_0_transfer := transfer~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L7268]  RET         call CorralChoice_LUCKYToken(this);

Loop:
[L7268]  CALL        call CorralChoice_LUCKYToken(this);
[L7078]              havoc msgsender_MSG;
[L7079]              havoc msgvalue_MSG;
[L7080]              havoc choice;
[L7081]              havoc _to_s670;
[L7082]              havoc _value_s670;
[L7083]              havoc __ret_0_transfer;
[L7084]              havoc _spender_s709;
[L7085]              havoc _value_s709;
[L7086]              havoc __ret_0_approve;
[L7087]              havoc _from_s691;
[L7088]              havoc _to_s691;
[L7089]              havoc _value_s691;
[L7090]              havoc __ret_0_transferFrom;
[L7091]              havoc __ret_0_totalSupply;
[L7092]              havoc owner_s211;
[L7093]              havoc __ret_0_balanceOf;
[L7094]              havoc owner_s227;
[L7095]              havoc spender_s227;
[L7096]              havoc __ret_0_allowance;
[L7097]              havoc _spender_s727;
[L7098]              havoc _addedValue_s727;
[L7099]              havoc success_s727;
[L7100]              havoc _spender_s745;
[L7101]              havoc _subtractedValue_s745;
[L7102]              havoc success_s745;
[L7103]              havoc __ret_0_owner;
[L7104]              havoc __ret_0_isOwner;
[L7105]              havoc newOwner_s564;
[L7106]              havoc __ret_0_paused;
[L7107]              havoc amount_s764;
[L7108]              havoc account_s779;
[L7109]              havoc amount_s779;
[L7110]              havoc __ret_0_name;
[L7111]              havoc __ret_0_symbol;
[L7112]              havoc __ret_0_decimals;
[L7113]              havoc tmpNow;
[L7114]              havoc gas;
[L7115]              assume gas > 4000000 && gas <= 8000000;
[L7116]              tmpNow := now;
[L7117]              havoc now;
[L7118]              assume now > tmpNow;
[L7119]              assume msgsender_MSG != null;
[L7120]              assume DType[msgsender_MSG] != SafeMath;
[L7121]              assume DType[msgsender_MSG] != IERC20;
[L7122]              assume DType[msgsender_MSG] != StandardToken;
[L7123]              assume DType[msgsender_MSG] != Ownable;
[L7124]              assume DType[msgsender_MSG] != Pausable;
[L7125]              assume DType[msgsender_MSG] != PausableToken;
[L7126]              assume DType[msgsender_MSG] != BurnableToken;
[L7127]              assume DType[msgsender_MSG] != LUCKYToken;
[L7128]              Alloc[msgsender_MSG] := true;
[L7129]  COND TRUE   choice == 19
[L7130]              gas := gas - 21000;
[L7131]  COND TRUE   gas >= 0
[L7132]              assume _value_s670 >= 0 && _value_s670 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7133]              assume msgvalue_MSG == 0;
[L7134]  CALL        call __ret_0_transfer := transfer~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s670 && _value_s670 <= _balances_StandardToken[this][msgsender_MSG]) && _value_s670 >= 0) && _value_s670 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][_to_s670] >= 0) && _balances_StandardToken[this][_to_s670] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][msgsender_MSG] >= 0) && _balances_StandardToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_PausableToken0 := true;
[L2]                 call_transfer_PausableToken0 := false;
[L2]                 revert := revert_hold;
[L1329]              havoc __exception;
[L1330]              revert := false;
[L1331]  COND TRUE   __exception
[L1332]              __tmp__Balance := Balance;
[L1333]              __tmp__DType := DType;
[L1334]              __tmp__Alloc := Alloc;
[L1335]              __tmp__balance_ADDR := balance_ADDR;
[L1336]              __tmp__M_Ref_int := M_Ref_int;
[L1337]              __tmp__sum__balances0 := sum__balances0;
[L1338]              __tmp__alloc__allowed_StandardToken_lvl0 := alloc__allowed_StandardToken_lvl0;
[L1339]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1340]              __tmp__sum__allowed1 := sum__allowed1;
[L1341]              __tmp__Length := Length;
[L1342]              __tmp__now := now;
[L1343]              __tmp___balances_StandardToken := _balances_StandardToken;
[L1344]              __tmp___allowed_StandardToken := _allowed_StandardToken;
[L1345]              __tmp___totalSupply_StandardToken := _totalSupply_StandardToken;
[L1346]              __tmp___owner_Ownable := _owner_Ownable;
[L1347]              __tmp__paused_Pausable := paused_Pausable;
[L1348]              __tmp__name_LUCKYToken := name_LUCKYToken;
[L1349]              __tmp__symbol_LUCKYToken := symbol_LUCKYToken;
[L1350]              __tmp__decimals_LUCKYToken := decimals_LUCKYToken;
[L1351]              __tmp__INIT_TOTALSUPPLY_LUCKYToken := INIT_TOTALSUPPLY_LUCKYToken;
[L1352]              __tmp___tokenOwner_LUCKYToken := _tokenOwner_LUCKYToken;
[L1353]  CALL        call __ret_0_ := transfer~address~uint256_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L4110]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6236]  COND FALSE  !(!!__tmp__paused_Pausable[this])
[L4110]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4111]  COND FALSE  !(revert)
[L4114]  COND TRUE   __tmp__DType[this] == LUCKYToken
[L4115]  CALL        call __var_15 := transfer~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L3166]  COND TRUE   __tmp__DType[this] == LUCKYToken
[L3167]  CALL        call _transfer~address~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s246, value_s246);
[L3535]              __var_4 := null;
[L3536]  COND TRUE   !(to_s401 != null)
[L3537]              revert := true;
[L3167]  RET         call _transfer~address~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s246, value_s246);
[L3168]  COND TRUE   revert
[L4115]  RET         call __var_15 := transfer~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L4116]  COND TRUE   revert
[L1353]  RET         call __ret_0_ := transfer~address~uint256_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L1354]              assume revert || gas < 0;
[L7134]  RET         call __ret_0_transfer := transfer~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L7268]  RET         call CorralChoice_LUCKYToken(this);

[2020-11-24 20:40:58,610 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:40:58,610 INFO  L82        PathProgramCache]: Analyzing trace with hash -487968105, now seen corresponding path program 1 times
[2020-11-24 20:40:58,611 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:40:58,622 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:40:58,687 INFO  L134       CoverageAnalysis]: Checked inductivity of 332 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 332 trivial. 0 not checked.
[2020-11-24 20:40:58,687 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:40:58,688 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-24 20:40:58,688 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:40:58,688 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-24 20:40:58,688 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-24 20:40:58,688 INFO  L87              Difference]: Start difference. First operand 4478 states and 5198 transitions. cyclomatic complexity: 724 Second operand 8 states.
[2020-11-24 20:40:58,781 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:40:58,781 INFO  L93              Difference]: Finished difference Result 4610 states and 5356 transitions.
[2020-11-24 20:40:58,781 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-24 20:40:58,781 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4610 states and 5356 transitions.
[2020-11-24 20:40:58,790 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-24 20:40:58,801 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4610 states to 4602 states and 5348 transitions.
[2020-11-24 20:40:58,801 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1353
[2020-11-24 20:40:58,802 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1353
[2020-11-24 20:40:58,802 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4602 states and 5348 transitions.
[2020-11-24 20:40:58,806 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:40:58,806 INFO  L728         BuchiCegarLoop]: Abstraction has 4602 states and 5348 transitions.
[2020-11-24 20:40:58,809 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4602 states and 5348 transitions.
[2020-11-24 20:40:58,840 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4602 to 4585.
[2020-11-24 20:40:58,840 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4585 states.
[2020-11-24 20:40:58,845 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4585 states to 4585 states and 5329 transitions.
[2020-11-24 20:40:58,846 INFO  L751         BuchiCegarLoop]: Abstraction has 4585 states and 5329 transitions.
[2020-11-24 20:40:58,846 INFO  L631         BuchiCegarLoop]: Abstraction has 4585 states and 5329 transitions.
[2020-11-24 20:40:58,846 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-24 20:40:58,846 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4585 states and 5329 transitions.
[2020-11-24 20:40:58,851 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-24 20:40:58,851 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:40:58,851 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:40:58,853 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:40:58,853 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_PausableToken0 := false;
[L2]                 call_transfer_PausableToken0 := false;
[L2]     CALL        call main();
[L7258]              assume null == 0;
[L7259]  CALL        call this := FreshRefGenerator__success();
[L2904]              havoc newRef;
[L2905]              assume Alloc[newRef] == false;
[L2906]              Alloc[newRef] := true;
[L2907]              assume newRef != null;
[L7259]  RET         call this := FreshRefGenerator__success();
[L7260]              assume now >= 0;
[L7261]              assume DType[this] == LUCKYToken;
[L7262]              assume msgvalue_MSG == 0;
[L7263]              gas := gas - 53000;
[L7264]  CALL        call LUCKYToken_LUCKYToken(this, msgsender_MSG, msgvalue_MSG);
[L1849]              havoc __exception;
[L1850]              revert := false;
[L1851]  COND FALSE  !(__exception)
[L1876]  CALL        call LUCKYToken_LUCKYToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4580]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4580]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4581]  COND FALSE  !(revert)
[L4584]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3118]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L3118]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3119]  COND FALSE  !(revert)
[L3122]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3094]              assume msgsender_MSG != null;
[L3095]              Balance[this] := 0;
[L3096]              _balances_StandardToken[this] := zeroRefintArr();
[L3097]              sum__balances0[this] := 0;
[L3098]              _allowed_StandardToken[this] := zeroRefRefintArr();
[L3099]              sum__allowed1[this] := 0;
[L3100]              _totalSupply_StandardToken[this] := 0;
[L3122]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4584]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4585]  COND FALSE  !(revert)
[L4588]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L4588]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4589]  COND FALSE  !(revert)
[L4592]  CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4394]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4394]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4395]  COND FALSE  !(revert)
[L4398]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3118]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L3118]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3119]  COND FALSE  !(revert)
[L3122]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3094]              assume msgsender_MSG != null;
[L3095]              Balance[this] := 0;
[L3096]              _balances_StandardToken[this] := zeroRefintArr();
[L3097]              sum__balances0[this] := 0;
[L3098]              _allowed_StandardToken[this] := zeroRefRefintArr();
[L3099]              sum__allowed1[this] := 0;
[L3100]              _totalSupply_StandardToken[this] := 0;
[L3122]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4398]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4399]  COND FALSE  !(revert)
[L4402]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L4402]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4403]  COND FALSE  !(revert)
[L4406]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4367]              assume msgsender_MSG != null;
[L4368]              Balance[this] := 0;
[L4406]  RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4407]  COND FALSE  !(revert)
[L4592]  RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4593]  COND FALSE  !(revert)
[L4596]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3966]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L3966]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3967]  COND FALSE  !(revert)
[L3970]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3946]              assume msgsender_MSG != null;
[L3947]              Balance[this] := 0;
[L3948]              paused_Pausable[this] := false;
[L3970]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3971]  COND FALSE  !(revert)
[L4596]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4597]  COND FALSE  !(revert)
[L4600]  CALL        call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4084]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4084]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4085]  COND FALSE  !(revert)
[L4088]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3118]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L3118]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3119]  COND FALSE  !(revert)
[L3122]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3094]              assume msgsender_MSG != null;
[L3095]              Balance[this] := 0;
[L3096]              _balances_StandardToken[this] := zeroRefintArr();
[L3097]              sum__balances0[this] := 0;
[L3098]              _allowed_StandardToken[this] := zeroRefRefintArr();
[L3099]              sum__allowed1[this] := 0;
[L3100]              _totalSupply_StandardToken[this] := 0;
[L3122]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4088]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4089]  COND FALSE  !(revert)
[L4092]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L4092]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]  COND FALSE  !(revert)
[L4096]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3966]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L3966]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3967]  COND FALSE  !(revert)
[L3970]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3946]              assume msgsender_MSG != null;
[L3947]              Balance[this] := 0;
[L3948]              paused_Pausable[this] := false;
[L3970]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3971]  COND FALSE  !(revert)
[L4096]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4097]  COND FALSE  !(revert)
[L4100]  CALL        call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4053]              assume msgsender_MSG != null;
[L4054]              Balance[this] := 0;
[L4100]  RET         call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4101]  COND FALSE  !(revert)
[L4600]  RET         call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4601]  COND FALSE  !(revert)
[L4604]  CALL        call LUCKYToken_LUCKYToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4523]              assume msgsender_MSG != null;
[L4524]              Balance[this] := 0;
[L4525]              name_LUCKYToken[this] := -927166810;
[L4526]              symbol_LUCKYToken[this] := -927166810;
[L4527]              decimals_LUCKYToken[this] := 18;
[L4528]              INIT_TOTALSUPPLY_LUCKYToken[this] := 10000000000;
[L4529]              __var_26 := ConstantToRef(625314775344980695514831456764478199936221022047);
[L4530]              _tokenOwner_LUCKYToken[this] := ConstantToRef(625314775344980695514831456764478199936221022047);
[L4532]              __var_25 := decimals_LUCKYToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4533]              _totalSupply_StandardToken[this] := nonlinearMul(INIT_TOTALSUPPLY_LUCKYToken[this], nonlinearPow(10, decimals_LUCKYToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4534]              _owner_Ownable[this] := _tokenOwner_LUCKYToken[this];
[L4535]              assert { :EventEmitted "OwnershipTransferred_LUCKYToken" } true;
[L4536]              sum__balances0[this] := sum__balances0[this] - _balances_StandardToken[this][_owner_Ownable[this]];
[L4537]              _balances_StandardToken[this][_owner_Ownable[this]] := _totalSupply_StandardToken[this];
[L4538]              sum__balances0[this] := sum__balances0[this] + _balances_StandardToken[this][_owner_Ownable[this]];
[L4539]              assert { :EventEmitted "Transfer_LUCKYToken" } true;
[L4604]  RET         call LUCKYToken_LUCKYToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4605]  COND FALSE  !(revert)
[L1876]  RET         call LUCKYToken_LUCKYToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1877]              assume !revert && gas >= 0;
[L7264]  RET         call LUCKYToken_LUCKYToken(this, msgsender_MSG, msgvalue_MSG);
[L7265]              assume !revert && gas >= 0;
[L7268]  CALL        call CorralChoice_LUCKYToken(this);
[L7078]              havoc msgsender_MSG;
[L7079]              havoc msgvalue_MSG;
[L7080]              havoc choice;
[L7081]              havoc _to_s670;
[L7082]              havoc _value_s670;
[L7083]              havoc __ret_0_transfer;
[L7084]              havoc _spender_s709;
[L7085]              havoc _value_s709;
[L7086]              havoc __ret_0_approve;
[L7087]              havoc _from_s691;
[L7088]              havoc _to_s691;
[L7089]              havoc _value_s691;
[L7090]              havoc __ret_0_transferFrom;
[L7091]              havoc __ret_0_totalSupply;
[L7092]              havoc owner_s211;
[L7093]              havoc __ret_0_balanceOf;
[L7094]              havoc owner_s227;
[L7095]              havoc spender_s227;
[L7096]              havoc __ret_0_allowance;
[L7097]              havoc _spender_s727;
[L7098]              havoc _addedValue_s727;
[L7099]              havoc success_s727;
[L7100]              havoc _spender_s745;
[L7101]              havoc _subtractedValue_s745;
[L7102]              havoc success_s745;
[L7103]              havoc __ret_0_owner;
[L7104]              havoc __ret_0_isOwner;
[L7105]              havoc newOwner_s564;
[L7106]              havoc __ret_0_paused;
[L7107]              havoc amount_s764;
[L7108]              havoc account_s779;
[L7109]              havoc amount_s779;
[L7110]              havoc __ret_0_name;
[L7111]              havoc __ret_0_symbol;
[L7112]              havoc __ret_0_decimals;
[L7113]              havoc tmpNow;
[L7114]              havoc gas;
[L7115]              assume gas > 4000000 && gas <= 8000000;
[L7116]              tmpNow := now;
[L7117]              havoc now;
[L7118]              assume now > tmpNow;
[L7119]              assume msgsender_MSG != null;
[L7120]              assume DType[msgsender_MSG] != SafeMath;
[L7121]              assume DType[msgsender_MSG] != IERC20;
[L7122]              assume DType[msgsender_MSG] != StandardToken;
[L7123]              assume DType[msgsender_MSG] != Ownable;
[L7124]              assume DType[msgsender_MSG] != Pausable;
[L7125]              assume DType[msgsender_MSG] != PausableToken;
[L7126]              assume DType[msgsender_MSG] != BurnableToken;
[L7127]              assume DType[msgsender_MSG] != LUCKYToken;
[L7128]              Alloc[msgsender_MSG] := true;
[L7129]  COND TRUE   choice == 19
[L7130]              gas := gas - 21000;
[L7131]  COND TRUE   gas >= 0
[L7132]              assume _value_s670 >= 0 && _value_s670 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7133]              assume msgvalue_MSG == 0;
[L7134]  CALL        call __ret_0_transfer := transfer~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s670 && _value_s670 <= _balances_StandardToken[this][msgsender_MSG]) && _value_s670 >= 0) && _value_s670 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][_to_s670] >= 0) && _balances_StandardToken[this][_to_s670] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][msgsender_MSG] >= 0) && _balances_StandardToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_PausableToken0 := true;
[L2]                 call_transfer_PausableToken0 := false;
[L2]                 revert := revert_hold;
[L1329]              havoc __exception;
[L1330]              revert := false;
[L1331]  COND TRUE   __exception
[L1332]              __tmp__Balance := Balance;
[L1333]              __tmp__DType := DType;
[L1334]              __tmp__Alloc := Alloc;
[L1335]              __tmp__balance_ADDR := balance_ADDR;
[L1336]              __tmp__M_Ref_int := M_Ref_int;
[L1337]              __tmp__sum__balances0 := sum__balances0;
[L1338]              __tmp__alloc__allowed_StandardToken_lvl0 := alloc__allowed_StandardToken_lvl0;
[L1339]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1340]              __tmp__sum__allowed1 := sum__allowed1;
[L1341]              __tmp__Length := Length;
[L1342]              __tmp__now := now;
[L1343]              __tmp___balances_StandardToken := _balances_StandardToken;
[L1344]              __tmp___allowed_StandardToken := _allowed_StandardToken;
[L1345]              __tmp___totalSupply_StandardToken := _totalSupply_StandardToken;
[L1346]              __tmp___owner_Ownable := _owner_Ownable;
[L1347]              __tmp__paused_Pausable := paused_Pausable;
[L1348]              __tmp__name_LUCKYToken := name_LUCKYToken;
[L1349]              __tmp__symbol_LUCKYToken := symbol_LUCKYToken;
[L1350]              __tmp__decimals_LUCKYToken := decimals_LUCKYToken;
[L1351]              __tmp__INIT_TOTALSUPPLY_LUCKYToken := INIT_TOTALSUPPLY_LUCKYToken;
[L1352]              __tmp___tokenOwner_LUCKYToken := _tokenOwner_LUCKYToken;
[L1353]  CALL        call __ret_0_ := transfer~address~uint256_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L4110]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6236]  COND FALSE  !(!!__tmp__paused_Pausable[this])
[L4110]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4111]  COND FALSE  !(revert)
[L4114]  COND TRUE   __tmp__DType[this] == LUCKYToken
[L4115]  CALL        call __var_15 := transfer~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L3166]  COND TRUE   __tmp__DType[this] == LUCKYToken
[L3167]  CALL        call _transfer~address~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s246, value_s246);
[L3535]              __var_4 := null;
[L3536]  COND FALSE  !(!(to_s401 != null))
[L3540]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_StandardToken[this][from_s401], value_s401);
[L3001]  COND TRUE   !(b_s82 <= a_s82)
[L3002]              revert := true;
[L3540]  RET         call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_StandardToken[this][from_s401], value_s401);
[L3541]  COND TRUE   revert
[L3167]  RET         call _transfer~address~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s246, value_s246);
[L3168]  COND TRUE   revert
[L4115]  RET         call __var_15 := transfer~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L4116]  COND TRUE   revert
[L1353]  RET         call __ret_0_ := transfer~address~uint256_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L1354]              assume revert || gas < 0;
[L7134]  RET         call __ret_0_transfer := transfer~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L7268]  RET         call CorralChoice_LUCKYToken(this);

Loop:
[L7268]  CALL        call CorralChoice_LUCKYToken(this);
[L7078]              havoc msgsender_MSG;
[L7079]              havoc msgvalue_MSG;
[L7080]              havoc choice;
[L7081]              havoc _to_s670;
[L7082]              havoc _value_s670;
[L7083]              havoc __ret_0_transfer;
[L7084]              havoc _spender_s709;
[L7085]              havoc _value_s709;
[L7086]              havoc __ret_0_approve;
[L7087]              havoc _from_s691;
[L7088]              havoc _to_s691;
[L7089]              havoc _value_s691;
[L7090]              havoc __ret_0_transferFrom;
[L7091]              havoc __ret_0_totalSupply;
[L7092]              havoc owner_s211;
[L7093]              havoc __ret_0_balanceOf;
[L7094]              havoc owner_s227;
[L7095]              havoc spender_s227;
[L7096]              havoc __ret_0_allowance;
[L7097]              havoc _spender_s727;
[L7098]              havoc _addedValue_s727;
[L7099]              havoc success_s727;
[L7100]              havoc _spender_s745;
[L7101]              havoc _subtractedValue_s745;
[L7102]              havoc success_s745;
[L7103]              havoc __ret_0_owner;
[L7104]              havoc __ret_0_isOwner;
[L7105]              havoc newOwner_s564;
[L7106]              havoc __ret_0_paused;
[L7107]              havoc amount_s764;
[L7108]              havoc account_s779;
[L7109]              havoc amount_s779;
[L7110]              havoc __ret_0_name;
[L7111]              havoc __ret_0_symbol;
[L7112]              havoc __ret_0_decimals;
[L7113]              havoc tmpNow;
[L7114]              havoc gas;
[L7115]              assume gas > 4000000 && gas <= 8000000;
[L7116]              tmpNow := now;
[L7117]              havoc now;
[L7118]              assume now > tmpNow;
[L7119]              assume msgsender_MSG != null;
[L7120]              assume DType[msgsender_MSG] != SafeMath;
[L7121]              assume DType[msgsender_MSG] != IERC20;
[L7122]              assume DType[msgsender_MSG] != StandardToken;
[L7123]              assume DType[msgsender_MSG] != Ownable;
[L7124]              assume DType[msgsender_MSG] != Pausable;
[L7125]              assume DType[msgsender_MSG] != PausableToken;
[L7126]              assume DType[msgsender_MSG] != BurnableToken;
[L7127]              assume DType[msgsender_MSG] != LUCKYToken;
[L7128]              Alloc[msgsender_MSG] := true;
[L7129]  COND TRUE   choice == 19
[L7130]              gas := gas - 21000;
[L7131]  COND TRUE   gas >= 0
[L7132]              assume _value_s670 >= 0 && _value_s670 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7133]              assume msgvalue_MSG == 0;
[L7134]  CALL        call __ret_0_transfer := transfer~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s670 && _value_s670 <= _balances_StandardToken[this][msgsender_MSG]) && _value_s670 >= 0) && _value_s670 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][_to_s670] >= 0) && _balances_StandardToken[this][_to_s670] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][msgsender_MSG] >= 0) && _balances_StandardToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_PausableToken0 := true;
[L2]                 call_transfer_PausableToken0 := false;
[L2]                 revert := revert_hold;
[L1329]              havoc __exception;
[L1330]              revert := false;
[L1331]  COND TRUE   __exception
[L1332]              __tmp__Balance := Balance;
[L1333]              __tmp__DType := DType;
[L1334]              __tmp__Alloc := Alloc;
[L1335]              __tmp__balance_ADDR := balance_ADDR;
[L1336]              __tmp__M_Ref_int := M_Ref_int;
[L1337]              __tmp__sum__balances0 := sum__balances0;
[L1338]              __tmp__alloc__allowed_StandardToken_lvl0 := alloc__allowed_StandardToken_lvl0;
[L1339]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1340]              __tmp__sum__allowed1 := sum__allowed1;
[L1341]              __tmp__Length := Length;
[L1342]              __tmp__now := now;
[L1343]              __tmp___balances_StandardToken := _balances_StandardToken;
[L1344]              __tmp___allowed_StandardToken := _allowed_StandardToken;
[L1345]              __tmp___totalSupply_StandardToken := _totalSupply_StandardToken;
[L1346]              __tmp___owner_Ownable := _owner_Ownable;
[L1347]              __tmp__paused_Pausable := paused_Pausable;
[L1348]              __tmp__name_LUCKYToken := name_LUCKYToken;
[L1349]              __tmp__symbol_LUCKYToken := symbol_LUCKYToken;
[L1350]              __tmp__decimals_LUCKYToken := decimals_LUCKYToken;
[L1351]              __tmp__INIT_TOTALSUPPLY_LUCKYToken := INIT_TOTALSUPPLY_LUCKYToken;
[L1352]              __tmp___tokenOwner_LUCKYToken := _tokenOwner_LUCKYToken;
[L1353]  CALL        call __ret_0_ := transfer~address~uint256_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L4110]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6236]  COND FALSE  !(!!__tmp__paused_Pausable[this])
[L4110]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4111]  COND FALSE  !(revert)
[L4114]  COND TRUE   __tmp__DType[this] == LUCKYToken
[L4115]  CALL        call __var_15 := transfer~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L3166]  COND TRUE   __tmp__DType[this] == LUCKYToken
[L3167]  CALL        call _transfer~address~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s246, value_s246);
[L3535]              __var_4 := null;
[L3536]  COND FALSE  !(!(to_s401 != null))
[L3540]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_StandardToken[this][from_s401], value_s401);
[L3001]  COND TRUE   !(b_s82 <= a_s82)
[L3002]              revert := true;
[L3540]  RET         call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_StandardToken[this][from_s401], value_s401);
[L3541]  COND TRUE   revert
[L3167]  RET         call _transfer~address~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s246, value_s246);
[L3168]  COND TRUE   revert
[L4115]  RET         call __var_15 := transfer~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L4116]  COND TRUE   revert
[L1353]  RET         call __ret_0_ := transfer~address~uint256_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L1354]              assume revert || gas < 0;
[L7134]  RET         call __ret_0_transfer := transfer~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L7268]  RET         call CorralChoice_LUCKYToken(this);

[2020-11-24 20:40:58,857 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:40:58,857 INFO  L82        PathProgramCache]: Analyzing trace with hash 640645083, now seen corresponding path program 1 times
[2020-11-24 20:40:58,857 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:40:58,872 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:40:59,027 INFO  L134       CoverageAnalysis]: Checked inductivity of 332 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 332 trivial. 0 not checked.
[2020-11-24 20:40:59,027 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:40:59,027 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-24 20:40:59,027 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:40:59,027 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-24 20:40:59,027 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-24 20:40:59,028 INFO  L87              Difference]: Start difference. First operand 4585 states and 5329 transitions. cyclomatic complexity: 748 Second operand 9 states.
[2020-11-24 20:41:00,730 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:41:00,730 INFO  L93              Difference]: Finished difference Result 4784 states and 5605 transitions.
[2020-11-24 20:41:00,730 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-24 20:41:00,730 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4784 states and 5605 transitions.
[2020-11-24 20:41:00,740 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-24 20:41:00,752 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4784 states to 4784 states and 5605 transitions.
[2020-11-24 20:41:00,752 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1428
[2020-11-24 20:41:00,753 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1428
[2020-11-24 20:41:00,753 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4784 states and 5605 transitions.
[2020-11-24 20:41:00,757 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:41:00,757 INFO  L728         BuchiCegarLoop]: Abstraction has 4784 states and 5605 transitions.
[2020-11-24 20:41:00,760 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4784 states and 5605 transitions.
[2020-11-24 20:41:00,820 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4784 to 4587.
[2020-11-24 20:41:00,820 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4587 states.
[2020-11-24 20:41:00,825 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4587 states to 4587 states and 5332 transitions.
[2020-11-24 20:41:00,825 INFO  L751         BuchiCegarLoop]: Abstraction has 4587 states and 5332 transitions.
[2020-11-24 20:41:00,825 INFO  L631         BuchiCegarLoop]: Abstraction has 4587 states and 5332 transitions.
[2020-11-24 20:41:00,825 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-24 20:41:00,825 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4587 states and 5332 transitions.
[2020-11-24 20:41:00,829 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-24 20:41:00,829 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:41:00,829 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:41:00,831 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:41:00,831 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_PausableToken0 := false;
[L2]                 call_transfer_PausableToken0 := false;
[L2]     CALL        call main();
[L7258]              assume null == 0;
[L7259]  CALL        call this := FreshRefGenerator__success();
[L2904]              havoc newRef;
[L2905]              assume Alloc[newRef] == false;
[L2906]              Alloc[newRef] := true;
[L2907]              assume newRef != null;
[L7259]  RET         call this := FreshRefGenerator__success();
[L7260]              assume now >= 0;
[L7261]              assume DType[this] == LUCKYToken;
[L7262]              assume msgvalue_MSG == 0;
[L7263]              gas := gas - 53000;
[L7264]  CALL        call LUCKYToken_LUCKYToken(this, msgsender_MSG, msgvalue_MSG);
[L1849]              havoc __exception;
[L1850]              revert := false;
[L1851]  COND FALSE  !(__exception)
[L1876]  CALL        call LUCKYToken_LUCKYToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4580]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4580]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4581]  COND FALSE  !(revert)
[L4584]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3118]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L3118]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3119]  COND FALSE  !(revert)
[L3122]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3094]              assume msgsender_MSG != null;
[L3095]              Balance[this] := 0;
[L3096]              _balances_StandardToken[this] := zeroRefintArr();
[L3097]              sum__balances0[this] := 0;
[L3098]              _allowed_StandardToken[this] := zeroRefRefintArr();
[L3099]              sum__allowed1[this] := 0;
[L3100]              _totalSupply_StandardToken[this] := 0;
[L3122]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4584]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4585]  COND FALSE  !(revert)
[L4588]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L4588]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4589]  COND FALSE  !(revert)
[L4592]  CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4394]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4394]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4395]  COND FALSE  !(revert)
[L4398]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3118]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L3118]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3119]  COND FALSE  !(revert)
[L3122]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3094]              assume msgsender_MSG != null;
[L3095]              Balance[this] := 0;
[L3096]              _balances_StandardToken[this] := zeroRefintArr();
[L3097]              sum__balances0[this] := 0;
[L3098]              _allowed_StandardToken[this] := zeroRefRefintArr();
[L3099]              sum__allowed1[this] := 0;
[L3100]              _totalSupply_StandardToken[this] := 0;
[L3122]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4398]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4399]  COND FALSE  !(revert)
[L4402]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L4402]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4403]  COND FALSE  !(revert)
[L4406]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4367]              assume msgsender_MSG != null;
[L4368]              Balance[this] := 0;
[L4406]  RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4407]  COND FALSE  !(revert)
[L4592]  RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4593]  COND FALSE  !(revert)
[L4596]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3966]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L3966]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3967]  COND FALSE  !(revert)
[L3970]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3946]              assume msgsender_MSG != null;
[L3947]              Balance[this] := 0;
[L3948]              paused_Pausable[this] := false;
[L3970]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3971]  COND FALSE  !(revert)
[L4596]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4597]  COND FALSE  !(revert)
[L4600]  CALL        call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4084]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4084]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4085]  COND FALSE  !(revert)
[L4088]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3118]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L3118]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3119]  COND FALSE  !(revert)
[L3122]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3094]              assume msgsender_MSG != null;
[L3095]              Balance[this] := 0;
[L3096]              _balances_StandardToken[this] := zeroRefintArr();
[L3097]              sum__balances0[this] := 0;
[L3098]              _allowed_StandardToken[this] := zeroRefRefintArr();
[L3099]              sum__allowed1[this] := 0;
[L3100]              _totalSupply_StandardToken[this] := 0;
[L3122]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4088]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4089]  COND FALSE  !(revert)
[L4092]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L4092]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]  COND FALSE  !(revert)
[L4096]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3966]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L3966]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3967]  COND FALSE  !(revert)
[L3970]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3946]              assume msgsender_MSG != null;
[L3947]              Balance[this] := 0;
[L3948]              paused_Pausable[this] := false;
[L3970]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3971]  COND FALSE  !(revert)
[L4096]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4097]  COND FALSE  !(revert)
[L4100]  CALL        call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4053]              assume msgsender_MSG != null;
[L4054]              Balance[this] := 0;
[L4100]  RET         call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4101]  COND FALSE  !(revert)
[L4600]  RET         call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4601]  COND FALSE  !(revert)
[L4604]  CALL        call LUCKYToken_LUCKYToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4523]              assume msgsender_MSG != null;
[L4524]              Balance[this] := 0;
[L4525]              name_LUCKYToken[this] := -927166810;
[L4526]              symbol_LUCKYToken[this] := -927166810;
[L4527]              decimals_LUCKYToken[this] := 18;
[L4528]              INIT_TOTALSUPPLY_LUCKYToken[this] := 10000000000;
[L4529]              __var_26 := ConstantToRef(625314775344980695514831456764478199936221022047);
[L4530]              _tokenOwner_LUCKYToken[this] := ConstantToRef(625314775344980695514831456764478199936221022047);
[L4532]              __var_25 := decimals_LUCKYToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4533]              _totalSupply_StandardToken[this] := nonlinearMul(INIT_TOTALSUPPLY_LUCKYToken[this], nonlinearPow(10, decimals_LUCKYToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4534]              _owner_Ownable[this] := _tokenOwner_LUCKYToken[this];
[L4535]              assert { :EventEmitted "OwnershipTransferred_LUCKYToken" } true;
[L4536]              sum__balances0[this] := sum__balances0[this] - _balances_StandardToken[this][_owner_Ownable[this]];
[L4537]              _balances_StandardToken[this][_owner_Ownable[this]] := _totalSupply_StandardToken[this];
[L4538]              sum__balances0[this] := sum__balances0[this] + _balances_StandardToken[this][_owner_Ownable[this]];
[L4539]              assert { :EventEmitted "Transfer_LUCKYToken" } true;
[L4604]  RET         call LUCKYToken_LUCKYToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4605]  COND FALSE  !(revert)
[L1876]  RET         call LUCKYToken_LUCKYToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1877]              assume !revert && gas >= 0;
[L7264]  RET         call LUCKYToken_LUCKYToken(this, msgsender_MSG, msgvalue_MSG);
[L7265]              assume !revert && gas >= 0;
[L7268]  CALL        call CorralChoice_LUCKYToken(this);
[L7078]              havoc msgsender_MSG;
[L7079]              havoc msgvalue_MSG;
[L7080]              havoc choice;
[L7081]              havoc _to_s670;
[L7082]              havoc _value_s670;
[L7083]              havoc __ret_0_transfer;
[L7084]              havoc _spender_s709;
[L7085]              havoc _value_s709;
[L7086]              havoc __ret_0_approve;
[L7087]              havoc _from_s691;
[L7088]              havoc _to_s691;
[L7089]              havoc _value_s691;
[L7090]              havoc __ret_0_transferFrom;
[L7091]              havoc __ret_0_totalSupply;
[L7092]              havoc owner_s211;
[L7093]              havoc __ret_0_balanceOf;
[L7094]              havoc owner_s227;
[L7095]              havoc spender_s227;
[L7096]              havoc __ret_0_allowance;
[L7097]              havoc _spender_s727;
[L7098]              havoc _addedValue_s727;
[L7099]              havoc success_s727;
[L7100]              havoc _spender_s745;
[L7101]              havoc _subtractedValue_s745;
[L7102]              havoc success_s745;
[L7103]              havoc __ret_0_owner;
[L7104]              havoc __ret_0_isOwner;
[L7105]              havoc newOwner_s564;
[L7106]              havoc __ret_0_paused;
[L7107]              havoc amount_s764;
[L7108]              havoc account_s779;
[L7109]              havoc amount_s779;
[L7110]              havoc __ret_0_name;
[L7111]              havoc __ret_0_symbol;
[L7112]              havoc __ret_0_decimals;
[L7113]              havoc tmpNow;
[L7114]              havoc gas;
[L7115]              assume gas > 4000000 && gas <= 8000000;
[L7116]              tmpNow := now;
[L7117]              havoc now;
[L7118]              assume now > tmpNow;
[L7119]              assume msgsender_MSG != null;
[L7120]              assume DType[msgsender_MSG] != SafeMath;
[L7121]              assume DType[msgsender_MSG] != IERC20;
[L7122]              assume DType[msgsender_MSG] != StandardToken;
[L7123]              assume DType[msgsender_MSG] != Ownable;
[L7124]              assume DType[msgsender_MSG] != Pausable;
[L7125]              assume DType[msgsender_MSG] != PausableToken;
[L7126]              assume DType[msgsender_MSG] != BurnableToken;
[L7127]              assume DType[msgsender_MSG] != LUCKYToken;
[L7128]              Alloc[msgsender_MSG] := true;
[L7129]  COND TRUE   choice == 19
[L7130]              gas := gas - 21000;
[L7131]  COND TRUE   gas >= 0
[L7132]              assume _value_s670 >= 0 && _value_s670 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7133]              assume msgvalue_MSG == 0;
[L7134]  CALL        call __ret_0_transfer := transfer~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s670 && _value_s670 <= _balances_StandardToken[this][msgsender_MSG]) && _value_s670 >= 0) && _value_s670 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][_to_s670] >= 0) && _balances_StandardToken[this][_to_s670] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][msgsender_MSG] >= 0) && _balances_StandardToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_PausableToken0 := true;
[L2]                 call_transfer_PausableToken0 := false;
[L2]                 revert := revert_hold;
[L1329]              havoc __exception;
[L1330]              revert := false;
[L1331]  COND FALSE  !(__exception)
[L1356]  CALL        call __ret_0_ := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L4135]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6244]  COND FALSE  !(!!paused_Pausable[this])
[L4135]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4136]  COND FALSE  !(revert)
[L4139]  COND TRUE   DType[this] == LUCKYToken
[L4140]  CALL        call __var_15 := transfer~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L3195]  COND TRUE   DType[this] == LUCKYToken
[L3196]  CALL        call _transfer~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s246, value_s246);
[L3561]              __var_4 := null;
[L3562]  COND FALSE  !(!(to_s401 != null))
[L3566]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_StandardToken[this][from_s401], value_s401);
[L3013]  COND FALSE  !(!(b_s82 <= a_s82))
[L3017]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3018]              __ret_0_ := c_s82;
[L3566]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_StandardToken[this][from_s401], value_s401);
[L3567]  COND FALSE  !(revert)
[L3570]              sum__balances0[this] := sum__balances0[this] - _balances_StandardToken[this][from_s401];
[L3571]              _balances_StandardToken[this][from_s401] := __var_5;
[L3572]              sum__balances0[this] := sum__balances0[this] + _balances_StandardToken[this][from_s401];
[L3573]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_StandardToken[this][to_s401], value_s401);
[L3037]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3038]  COND FALSE  !(!(c_s106 >= a_s106))
[L3042]              __ret_0_ := c_s106;
[L3573]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_StandardToken[this][to_s401], value_s401);
[L3574]  COND FALSE  !(revert)
[L3577]              sum__balances0[this] := sum__balances0[this] - _balances_StandardToken[this][to_s401];
[L3578]              _balances_StandardToken[this][to_s401] := __var_6;
[L3579]              sum__balances0[this] := sum__balances0[this] + _balances_StandardToken[this][to_s401];
[L3580]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L3196]  RET         call _transfer~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s246, value_s246);
[L3197]  COND FALSE  !(revert)
[L3218]              __ret_0_ := true;
[L4140]  RET         call __var_15 := transfer~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L4141]  COND FALSE  !(revert)
[L4152]              __ret_0_ := __var_15;
[L1356]  RET         call __ret_0_ := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L1357]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((__ret_0_ == true && _totalSupply_StandardToken[this] == old(_totalSupply_StandardToken[this])) && _balances_StandardToken[this] == old(_balances_StandardToken[this])) && _allowed_StandardToken[this] == old(_allowed_StandardToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L7134]  RET         call __ret_0_transfer := transfer~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L7268]  RET         call CorralChoice_LUCKYToken(this);

Loop:
[L7268]  CALL        call CorralChoice_LUCKYToken(this);
[L7078]              havoc msgsender_MSG;
[L7079]              havoc msgvalue_MSG;
[L7080]              havoc choice;
[L7081]              havoc _to_s670;
[L7082]              havoc _value_s670;
[L7083]              havoc __ret_0_transfer;
[L7084]              havoc _spender_s709;
[L7085]              havoc _value_s709;
[L7086]              havoc __ret_0_approve;
[L7087]              havoc _from_s691;
[L7088]              havoc _to_s691;
[L7089]              havoc _value_s691;
[L7090]              havoc __ret_0_transferFrom;
[L7091]              havoc __ret_0_totalSupply;
[L7092]              havoc owner_s211;
[L7093]              havoc __ret_0_balanceOf;
[L7094]              havoc owner_s227;
[L7095]              havoc spender_s227;
[L7096]              havoc __ret_0_allowance;
[L7097]              havoc _spender_s727;
[L7098]              havoc _addedValue_s727;
[L7099]              havoc success_s727;
[L7100]              havoc _spender_s745;
[L7101]              havoc _subtractedValue_s745;
[L7102]              havoc success_s745;
[L7103]              havoc __ret_0_owner;
[L7104]              havoc __ret_0_isOwner;
[L7105]              havoc newOwner_s564;
[L7106]              havoc __ret_0_paused;
[L7107]              havoc amount_s764;
[L7108]              havoc account_s779;
[L7109]              havoc amount_s779;
[L7110]              havoc __ret_0_name;
[L7111]              havoc __ret_0_symbol;
[L7112]              havoc __ret_0_decimals;
[L7113]              havoc tmpNow;
[L7114]              havoc gas;
[L7115]              assume gas > 4000000 && gas <= 8000000;
[L7116]              tmpNow := now;
[L7117]              havoc now;
[L7118]              assume now > tmpNow;
[L7119]              assume msgsender_MSG != null;
[L7120]              assume DType[msgsender_MSG] != SafeMath;
[L7121]              assume DType[msgsender_MSG] != IERC20;
[L7122]              assume DType[msgsender_MSG] != StandardToken;
[L7123]              assume DType[msgsender_MSG] != Ownable;
[L7124]              assume DType[msgsender_MSG] != Pausable;
[L7125]              assume DType[msgsender_MSG] != PausableToken;
[L7126]              assume DType[msgsender_MSG] != BurnableToken;
[L7127]              assume DType[msgsender_MSG] != LUCKYToken;
[L7128]              Alloc[msgsender_MSG] := true;
[L7129]  COND TRUE   choice == 19
[L7130]              gas := gas - 21000;
[L7131]  COND TRUE   gas >= 0
[L7132]              assume _value_s670 >= 0 && _value_s670 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7133]              assume msgvalue_MSG == 0;
[L7134]  CALL        call __ret_0_transfer := transfer~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s670 && _value_s670 <= _balances_StandardToken[this][msgsender_MSG]) && _value_s670 >= 0) && _value_s670 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][_to_s670] >= 0) && _balances_StandardToken[this][_to_s670] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][msgsender_MSG] >= 0) && _balances_StandardToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_PausableToken0 := true;
[L2]                 call_transfer_PausableToken0 := false;
[L2]                 revert := revert_hold;
[L1329]              havoc __exception;
[L1330]              revert := false;
[L1331]  COND FALSE  !(__exception)
[L1356]  CALL        call __ret_0_ := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L4135]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6244]  COND FALSE  !(!!paused_Pausable[this])
[L4135]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4136]  COND FALSE  !(revert)
[L4139]  COND TRUE   DType[this] == LUCKYToken
[L4140]  CALL        call __var_15 := transfer~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L3195]  COND TRUE   DType[this] == LUCKYToken
[L3196]  CALL        call _transfer~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s246, value_s246);
[L3561]              __var_4 := null;
[L3562]  COND FALSE  !(!(to_s401 != null))
[L3566]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_StandardToken[this][from_s401], value_s401);
[L3013]  COND FALSE  !(!(b_s82 <= a_s82))
[L3017]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3018]              __ret_0_ := c_s82;
[L3566]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_StandardToken[this][from_s401], value_s401);
[L3567]  COND FALSE  !(revert)
[L3570]              sum__balances0[this] := sum__balances0[this] - _balances_StandardToken[this][from_s401];
[L3571]              _balances_StandardToken[this][from_s401] := __var_5;
[L3572]              sum__balances0[this] := sum__balances0[this] + _balances_StandardToken[this][from_s401];
[L3573]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_StandardToken[this][to_s401], value_s401);
[L3037]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3038]  COND FALSE  !(!(c_s106 >= a_s106))
[L3042]              __ret_0_ := c_s106;
[L3573]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_StandardToken[this][to_s401], value_s401);
[L3574]  COND FALSE  !(revert)
[L3577]              sum__balances0[this] := sum__balances0[this] - _balances_StandardToken[this][to_s401];
[L3578]              _balances_StandardToken[this][to_s401] := __var_6;
[L3579]              sum__balances0[this] := sum__balances0[this] + _balances_StandardToken[this][to_s401];
[L3580]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L3196]  RET         call _transfer~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s246, value_s246);
[L3197]  COND FALSE  !(revert)
[L3218]              __ret_0_ := true;
[L4140]  RET         call __var_15 := transfer~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L4141]  COND FALSE  !(revert)
[L4152]              __ret_0_ := __var_15;
[L1356]  RET         call __ret_0_ := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L1357]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((__ret_0_ == true && _totalSupply_StandardToken[this] == old(_totalSupply_StandardToken[this])) && _balances_StandardToken[this] == old(_balances_StandardToken[this])) && _allowed_StandardToken[this] == old(_allowed_StandardToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L7134]  RET         call __ret_0_transfer := transfer~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L7268]  RET         call CorralChoice_LUCKYToken(this);

[2020-11-24 20:41:00,845 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:41:00,845 INFO  L82        PathProgramCache]: Analyzing trace with hash 1259568727, now seen corresponding path program 1 times
[2020-11-24 20:41:00,846 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:41:00,901 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:41:01,610 INFO  L134       CoverageAnalysis]: Checked inductivity of 332 backedges. 20 proven. 0 refuted. 0 times theorem prover too weak. 312 trivial. 0 not checked.
[2020-11-24 20:41:01,610 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:41:01,610 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [28] imperfect sequences [] total 28
[2020-11-24 20:41:01,610 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:41:01,610 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 29 interpolants.
[2020-11-24 20:41:01,611 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=70, Invalid=742, Unknown=0, NotChecked=0, Total=812
[2020-11-24 20:41:01,611 INFO  L87              Difference]: Start difference. First operand 4587 states and 5332 transitions. cyclomatic complexity: 749 Second operand 29 states.
[2020-11-24 20:41:09,286 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:41:09,286 INFO  L93              Difference]: Finished difference Result 4648 states and 5449 transitions.
[2020-11-24 20:41:09,287 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 29 states. 
[2020-11-24 20:41:09,287 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4648 states and 5449 transitions.
[2020-11-24 20:41:09,296 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-24 20:41:09,306 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4648 states to 4648 states and 5449 transitions.
[2020-11-24 20:41:09,306 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1375
[2020-11-24 20:41:09,307 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1375
[2020-11-24 20:41:09,307 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4648 states and 5449 transitions.
[2020-11-24 20:41:09,310 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:41:09,310 INFO  L728         BuchiCegarLoop]: Abstraction has 4648 states and 5449 transitions.
[2020-11-24 20:41:09,314 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4648 states and 5449 transitions.
[2020-11-24 20:41:09,340 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4648 to 4637.
[2020-11-24 20:41:09,340 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4637 states.
[2020-11-24 20:41:09,345 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4637 states to 4637 states and 5438 transitions.
[2020-11-24 20:41:09,345 INFO  L751         BuchiCegarLoop]: Abstraction has 4637 states and 5438 transitions.
[2020-11-24 20:41:09,345 INFO  L631         BuchiCegarLoop]: Abstraction has 4637 states and 5438 transitions.
[2020-11-24 20:41:09,345 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-24 20:41:09,345 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4637 states and 5438 transitions.
[2020-11-24 20:41:09,350 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-24 20:41:09,350 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:41:09,350 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:41:09,351 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:41:09,351 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_PausableToken0 := false;
[L2]                 call_transfer_PausableToken0 := false;
[L2]     CALL        call main();
[L7258]              assume null == 0;
[L7259]  CALL        call this := FreshRefGenerator__success();
[L2904]              havoc newRef;
[L2905]              assume Alloc[newRef] == false;
[L2906]              Alloc[newRef] := true;
[L2907]              assume newRef != null;
[L7259]  RET         call this := FreshRefGenerator__success();
[L7260]              assume now >= 0;
[L7261]              assume DType[this] == LUCKYToken;
[L7262]              assume msgvalue_MSG == 0;
[L7263]              gas := gas - 53000;
[L7264]  CALL        call LUCKYToken_LUCKYToken(this, msgsender_MSG, msgvalue_MSG);
[L1849]              havoc __exception;
[L1850]              revert := false;
[L1851]  COND FALSE  !(__exception)
[L1876]  CALL        call LUCKYToken_LUCKYToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4580]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4580]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4581]  COND FALSE  !(revert)
[L4584]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3118]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L3118]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3119]  COND FALSE  !(revert)
[L3122]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3094]              assume msgsender_MSG != null;
[L3095]              Balance[this] := 0;
[L3096]              _balances_StandardToken[this] := zeroRefintArr();
[L3097]              sum__balances0[this] := 0;
[L3098]              _allowed_StandardToken[this] := zeroRefRefintArr();
[L3099]              sum__allowed1[this] := 0;
[L3100]              _totalSupply_StandardToken[this] := 0;
[L3122]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4584]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4585]  COND FALSE  !(revert)
[L4588]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L4588]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4589]  COND FALSE  !(revert)
[L4592]  CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4394]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4394]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4395]  COND FALSE  !(revert)
[L4398]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3118]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L3118]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3119]  COND FALSE  !(revert)
[L3122]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3094]              assume msgsender_MSG != null;
[L3095]              Balance[this] := 0;
[L3096]              _balances_StandardToken[this] := zeroRefintArr();
[L3097]              sum__balances0[this] := 0;
[L3098]              _allowed_StandardToken[this] := zeroRefRefintArr();
[L3099]              sum__allowed1[this] := 0;
[L3100]              _totalSupply_StandardToken[this] := 0;
[L3122]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4398]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4399]  COND FALSE  !(revert)
[L4402]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L4402]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4403]  COND FALSE  !(revert)
[L4406]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4367]              assume msgsender_MSG != null;
[L4368]              Balance[this] := 0;
[L4406]  RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4407]  COND FALSE  !(revert)
[L4592]  RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4593]  COND FALSE  !(revert)
[L4596]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3966]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L3966]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3967]  COND FALSE  !(revert)
[L3970]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3946]              assume msgsender_MSG != null;
[L3947]              Balance[this] := 0;
[L3948]              paused_Pausable[this] := false;
[L3970]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3971]  COND FALSE  !(revert)
[L4596]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4597]  COND FALSE  !(revert)
[L4600]  CALL        call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4084]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4084]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4085]  COND FALSE  !(revert)
[L4088]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3118]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L3118]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3119]  COND FALSE  !(revert)
[L3122]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3094]              assume msgsender_MSG != null;
[L3095]              Balance[this] := 0;
[L3096]              _balances_StandardToken[this] := zeroRefintArr();
[L3097]              sum__balances0[this] := 0;
[L3098]              _allowed_StandardToken[this] := zeroRefRefintArr();
[L3099]              sum__allowed1[this] := 0;
[L3100]              _totalSupply_StandardToken[this] := 0;
[L3122]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4088]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4089]  COND FALSE  !(revert)
[L4092]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L4092]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]  COND FALSE  !(revert)
[L4096]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3966]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L3966]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3967]  COND FALSE  !(revert)
[L3970]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3946]              assume msgsender_MSG != null;
[L3947]              Balance[this] := 0;
[L3948]              paused_Pausable[this] := false;
[L3970]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3971]  COND FALSE  !(revert)
[L4096]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4097]  COND FALSE  !(revert)
[L4100]  CALL        call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4053]              assume msgsender_MSG != null;
[L4054]              Balance[this] := 0;
[L4100]  RET         call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4101]  COND FALSE  !(revert)
[L4600]  RET         call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4601]  COND FALSE  !(revert)
[L4604]  CALL        call LUCKYToken_LUCKYToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4523]              assume msgsender_MSG != null;
[L4524]              Balance[this] := 0;
[L4525]              name_LUCKYToken[this] := -927166810;
[L4526]              symbol_LUCKYToken[this] := -927166810;
[L4527]              decimals_LUCKYToken[this] := 18;
[L4528]              INIT_TOTALSUPPLY_LUCKYToken[this] := 10000000000;
[L4529]              __var_26 := ConstantToRef(625314775344980695514831456764478199936221022047);
[L4530]              _tokenOwner_LUCKYToken[this] := ConstantToRef(625314775344980695514831456764478199936221022047);
[L4532]              __var_25 := decimals_LUCKYToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4533]              _totalSupply_StandardToken[this] := nonlinearMul(INIT_TOTALSUPPLY_LUCKYToken[this], nonlinearPow(10, decimals_LUCKYToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4534]              _owner_Ownable[this] := _tokenOwner_LUCKYToken[this];
[L4535]              assert { :EventEmitted "OwnershipTransferred_LUCKYToken" } true;
[L4536]              sum__balances0[this] := sum__balances0[this] - _balances_StandardToken[this][_owner_Ownable[this]];
[L4537]              _balances_StandardToken[this][_owner_Ownable[this]] := _totalSupply_StandardToken[this];
[L4538]              sum__balances0[this] := sum__balances0[this] + _balances_StandardToken[this][_owner_Ownable[this]];
[L4539]              assert { :EventEmitted "Transfer_LUCKYToken" } true;
[L4604]  RET         call LUCKYToken_LUCKYToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4605]  COND FALSE  !(revert)
[L1876]  RET         call LUCKYToken_LUCKYToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1877]              assume !revert && gas >= 0;
[L7264]  RET         call LUCKYToken_LUCKYToken(this, msgsender_MSG, msgvalue_MSG);
[L7265]              assume !revert && gas >= 0;
[L7268]  CALL        call CorralChoice_LUCKYToken(this);
[L7078]              havoc msgsender_MSG;
[L7079]              havoc msgvalue_MSG;
[L7080]              havoc choice;
[L7081]              havoc _to_s670;
[L7082]              havoc _value_s670;
[L7083]              havoc __ret_0_transfer;
[L7084]              havoc _spender_s709;
[L7085]              havoc _value_s709;
[L7086]              havoc __ret_0_approve;
[L7087]              havoc _from_s691;
[L7088]              havoc _to_s691;
[L7089]              havoc _value_s691;
[L7090]              havoc __ret_0_transferFrom;
[L7091]              havoc __ret_0_totalSupply;
[L7092]              havoc owner_s211;
[L7093]              havoc __ret_0_balanceOf;
[L7094]              havoc owner_s227;
[L7095]              havoc spender_s227;
[L7096]              havoc __ret_0_allowance;
[L7097]              havoc _spender_s727;
[L7098]              havoc _addedValue_s727;
[L7099]              havoc success_s727;
[L7100]              havoc _spender_s745;
[L7101]              havoc _subtractedValue_s745;
[L7102]              havoc success_s745;
[L7103]              havoc __ret_0_owner;
[L7104]              havoc __ret_0_isOwner;
[L7105]              havoc newOwner_s564;
[L7106]              havoc __ret_0_paused;
[L7107]              havoc amount_s764;
[L7108]              havoc account_s779;
[L7109]              havoc amount_s779;
[L7110]              havoc __ret_0_name;
[L7111]              havoc __ret_0_symbol;
[L7112]              havoc __ret_0_decimals;
[L7113]              havoc tmpNow;
[L7114]              havoc gas;
[L7115]              assume gas > 4000000 && gas <= 8000000;
[L7116]              tmpNow := now;
[L7117]              havoc now;
[L7118]              assume now > tmpNow;
[L7119]              assume msgsender_MSG != null;
[L7120]              assume DType[msgsender_MSG] != SafeMath;
[L7121]              assume DType[msgsender_MSG] != IERC20;
[L7122]              assume DType[msgsender_MSG] != StandardToken;
[L7123]              assume DType[msgsender_MSG] != Ownable;
[L7124]              assume DType[msgsender_MSG] != Pausable;
[L7125]              assume DType[msgsender_MSG] != PausableToken;
[L7126]              assume DType[msgsender_MSG] != BurnableToken;
[L7127]              assume DType[msgsender_MSG] != LUCKYToken;
[L7128]              Alloc[msgsender_MSG] := true;
[L7129]  COND TRUE   choice == 19
[L7130]              gas := gas - 21000;
[L7131]  COND TRUE   gas >= 0
[L7132]              assume _value_s670 >= 0 && _value_s670 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7133]              assume msgvalue_MSG == 0;
[L7134]  CALL        call __ret_0_transfer := transfer~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s670 && _value_s670 <= _balances_StandardToken[this][msgsender_MSG]) && _value_s670 >= 0) && _value_s670 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][_to_s670] >= 0) && _balances_StandardToken[this][_to_s670] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][msgsender_MSG] >= 0) && _balances_StandardToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_PausableToken0 := true;
[L2]                 call_transfer_PausableToken0 := false;
[L2]                 revert := revert_hold;
[L1329]              havoc __exception;
[L1330]              revert := false;
[L1331]  COND TRUE   __exception
[L1332]              __tmp__Balance := Balance;
[L1333]              __tmp__DType := DType;
[L1334]              __tmp__Alloc := Alloc;
[L1335]              __tmp__balance_ADDR := balance_ADDR;
[L1336]              __tmp__M_Ref_int := M_Ref_int;
[L1337]              __tmp__sum__balances0 := sum__balances0;
[L1338]              __tmp__alloc__allowed_StandardToken_lvl0 := alloc__allowed_StandardToken_lvl0;
[L1339]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1340]              __tmp__sum__allowed1 := sum__allowed1;
[L1341]              __tmp__Length := Length;
[L1342]              __tmp__now := now;
[L1343]              __tmp___balances_StandardToken := _balances_StandardToken;
[L1344]              __tmp___allowed_StandardToken := _allowed_StandardToken;
[L1345]              __tmp___totalSupply_StandardToken := _totalSupply_StandardToken;
[L1346]              __tmp___owner_Ownable := _owner_Ownable;
[L1347]              __tmp__paused_Pausable := paused_Pausable;
[L1348]              __tmp__name_LUCKYToken := name_LUCKYToken;
[L1349]              __tmp__symbol_LUCKYToken := symbol_LUCKYToken;
[L1350]              __tmp__decimals_LUCKYToken := decimals_LUCKYToken;
[L1351]              __tmp__INIT_TOTALSUPPLY_LUCKYToken := INIT_TOTALSUPPLY_LUCKYToken;
[L1352]              __tmp___tokenOwner_LUCKYToken := _tokenOwner_LUCKYToken;
[L1353]  CALL        call __ret_0_ := transfer~address~uint256_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L4110]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6236]  COND FALSE  !(!!__tmp__paused_Pausable[this])
[L4110]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4111]  COND FALSE  !(revert)
[L4114]  COND TRUE   __tmp__DType[this] == LUCKYToken
[L4115]  CALL        call __var_15 := transfer~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L3166]  COND TRUE   __tmp__DType[this] == LUCKYToken
[L3167]  CALL        call _transfer~address~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s246, value_s246);
[L3535]              __var_4 := null;
[L3536]  COND FALSE  !(!(to_s401 != null))
[L3540]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_StandardToken[this][from_s401], value_s401);
[L3001]  COND FALSE  !(!(b_s82 <= a_s82))
[L3005]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3006]              __ret_0_ := c_s82;
[L3540]  RET         call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_StandardToken[this][from_s401], value_s401);
[L3541]  COND FALSE  !(revert)
[L3544]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_StandardToken[this][from_s401];
[L3545]              __tmp___balances_StandardToken[this][from_s401] := __var_5;
[L3546]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_StandardToken[this][from_s401];
[L3547]  CALL        call __var_6 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_StandardToken[this][to_s401], value_s401);
[L3025]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3026]  COND TRUE   !(c_s106 >= a_s106)
[L3027]              revert := true;
[L3547]  RET         call __var_6 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_StandardToken[this][to_s401], value_s401);
[L3548]  COND TRUE   revert
[L3167]  RET         call _transfer~address~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s246, value_s246);
[L3168]  COND TRUE   revert
[L4115]  RET         call __var_15 := transfer~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L4116]  COND TRUE   revert
[L1353]  RET         call __ret_0_ := transfer~address~uint256_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L1354]              assume revert || gas < 0;
[L7134]  RET         call __ret_0_transfer := transfer~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L7268]  RET         call CorralChoice_LUCKYToken(this);

Loop:
[L7268]  CALL        call CorralChoice_LUCKYToken(this);
[L7078]              havoc msgsender_MSG;
[L7079]              havoc msgvalue_MSG;
[L7080]              havoc choice;
[L7081]              havoc _to_s670;
[L7082]              havoc _value_s670;
[L7083]              havoc __ret_0_transfer;
[L7084]              havoc _spender_s709;
[L7085]              havoc _value_s709;
[L7086]              havoc __ret_0_approve;
[L7087]              havoc _from_s691;
[L7088]              havoc _to_s691;
[L7089]              havoc _value_s691;
[L7090]              havoc __ret_0_transferFrom;
[L7091]              havoc __ret_0_totalSupply;
[L7092]              havoc owner_s211;
[L7093]              havoc __ret_0_balanceOf;
[L7094]              havoc owner_s227;
[L7095]              havoc spender_s227;
[L7096]              havoc __ret_0_allowance;
[L7097]              havoc _spender_s727;
[L7098]              havoc _addedValue_s727;
[L7099]              havoc success_s727;
[L7100]              havoc _spender_s745;
[L7101]              havoc _subtractedValue_s745;
[L7102]              havoc success_s745;
[L7103]              havoc __ret_0_owner;
[L7104]              havoc __ret_0_isOwner;
[L7105]              havoc newOwner_s564;
[L7106]              havoc __ret_0_paused;
[L7107]              havoc amount_s764;
[L7108]              havoc account_s779;
[L7109]              havoc amount_s779;
[L7110]              havoc __ret_0_name;
[L7111]              havoc __ret_0_symbol;
[L7112]              havoc __ret_0_decimals;
[L7113]              havoc tmpNow;
[L7114]              havoc gas;
[L7115]              assume gas > 4000000 && gas <= 8000000;
[L7116]              tmpNow := now;
[L7117]              havoc now;
[L7118]              assume now > tmpNow;
[L7119]              assume msgsender_MSG != null;
[L7120]              assume DType[msgsender_MSG] != SafeMath;
[L7121]              assume DType[msgsender_MSG] != IERC20;
[L7122]              assume DType[msgsender_MSG] != StandardToken;
[L7123]              assume DType[msgsender_MSG] != Ownable;
[L7124]              assume DType[msgsender_MSG] != Pausable;
[L7125]              assume DType[msgsender_MSG] != PausableToken;
[L7126]              assume DType[msgsender_MSG] != BurnableToken;
[L7127]              assume DType[msgsender_MSG] != LUCKYToken;
[L7128]              Alloc[msgsender_MSG] := true;
[L7129]  COND TRUE   choice == 19
[L7130]              gas := gas - 21000;
[L7131]  COND TRUE   gas >= 0
[L7132]              assume _value_s670 >= 0 && _value_s670 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7133]              assume msgvalue_MSG == 0;
[L7134]  CALL        call __ret_0_transfer := transfer~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s670 && _value_s670 <= _balances_StandardToken[this][msgsender_MSG]) && _value_s670 >= 0) && _value_s670 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][_to_s670] >= 0) && _balances_StandardToken[this][_to_s670] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][msgsender_MSG] >= 0) && _balances_StandardToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_PausableToken0 := true;
[L2]                 call_transfer_PausableToken0 := false;
[L2]                 revert := revert_hold;
[L1329]              havoc __exception;
[L1330]              revert := false;
[L1331]  COND TRUE   __exception
[L1332]              __tmp__Balance := Balance;
[L1333]              __tmp__DType := DType;
[L1334]              __tmp__Alloc := Alloc;
[L1335]              __tmp__balance_ADDR := balance_ADDR;
[L1336]              __tmp__M_Ref_int := M_Ref_int;
[L1337]              __tmp__sum__balances0 := sum__balances0;
[L1338]              __tmp__alloc__allowed_StandardToken_lvl0 := alloc__allowed_StandardToken_lvl0;
[L1339]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1340]              __tmp__sum__allowed1 := sum__allowed1;
[L1341]              __tmp__Length := Length;
[L1342]              __tmp__now := now;
[L1343]              __tmp___balances_StandardToken := _balances_StandardToken;
[L1344]              __tmp___allowed_StandardToken := _allowed_StandardToken;
[L1345]              __tmp___totalSupply_StandardToken := _totalSupply_StandardToken;
[L1346]              __tmp___owner_Ownable := _owner_Ownable;
[L1347]              __tmp__paused_Pausable := paused_Pausable;
[L1348]              __tmp__name_LUCKYToken := name_LUCKYToken;
[L1349]              __tmp__symbol_LUCKYToken := symbol_LUCKYToken;
[L1350]              __tmp__decimals_LUCKYToken := decimals_LUCKYToken;
[L1351]              __tmp__INIT_TOTALSUPPLY_LUCKYToken := INIT_TOTALSUPPLY_LUCKYToken;
[L1352]              __tmp___tokenOwner_LUCKYToken := _tokenOwner_LUCKYToken;
[L1353]  CALL        call __ret_0_ := transfer~address~uint256_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L4110]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6236]  COND FALSE  !(!!__tmp__paused_Pausable[this])
[L4110]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4111]  COND FALSE  !(revert)
[L4114]  COND TRUE   __tmp__DType[this] == LUCKYToken
[L4115]  CALL        call __var_15 := transfer~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L3166]  COND TRUE   __tmp__DType[this] == LUCKYToken
[L3167]  CALL        call _transfer~address~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s246, value_s246);
[L3535]              __var_4 := null;
[L3536]  COND FALSE  !(!(to_s401 != null))
[L3540]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_StandardToken[this][from_s401], value_s401);
[L3001]  COND FALSE  !(!(b_s82 <= a_s82))
[L3005]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3006]              __ret_0_ := c_s82;
[L3540]  RET         call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_StandardToken[this][from_s401], value_s401);
[L3541]  COND FALSE  !(revert)
[L3544]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_StandardToken[this][from_s401];
[L3545]              __tmp___balances_StandardToken[this][from_s401] := __var_5;
[L3546]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_StandardToken[this][from_s401];
[L3547]  CALL        call __var_6 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_StandardToken[this][to_s401], value_s401);
[L3025]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3026]  COND TRUE   !(c_s106 >= a_s106)
[L3027]              revert := true;
[L3547]  RET         call __var_6 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_StandardToken[this][to_s401], value_s401);
[L3548]  COND TRUE   revert
[L3167]  RET         call _transfer~address~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s246, value_s246);
[L3168]  COND TRUE   revert
[L4115]  RET         call __var_15 := transfer~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L4116]  COND TRUE   revert
[L1353]  RET         call __ret_0_ := transfer~address~uint256_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L1354]              assume revert || gas < 0;
[L7134]  RET         call __ret_0_transfer := transfer~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L7268]  RET         call CorralChoice_LUCKYToken(this);

[2020-11-24 20:41:09,355 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:41:09,355 INFO  L82        PathProgramCache]: Analyzing trace with hash -1127821322, now seen corresponding path program 1 times
[2020-11-24 20:41:09,356 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:41:09,370 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:41:09,515 INFO  L134       CoverageAnalysis]: Checked inductivity of 332 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 332 trivial. 0 not checked.
[2020-11-24 20:41:09,515 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:41:09,515 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-24 20:41:09,515 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:41:09,516 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-24 20:41:09,516 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=26, Invalid=156, Unknown=0, NotChecked=0, Total=182
[2020-11-24 20:41:09,516 INFO  L87              Difference]: Start difference. First operand 4637 states and 5438 transitions. cyclomatic complexity: 809 Second operand 14 states.
[2020-11-24 20:41:13,308 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:41:13,308 INFO  L93              Difference]: Finished difference Result 4782 states and 5659 transitions.
[2020-11-24 20:41:13,308 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-11-24 20:41:13,308 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4782 states and 5659 transitions.
[2020-11-24 20:41:13,318 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 24
[2020-11-24 20:41:13,330 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4782 states to 4782 states and 5659 transitions.
[2020-11-24 20:41:13,330 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1421
[2020-11-24 20:41:13,330 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1421
[2020-11-24 20:41:13,330 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4782 states and 5659 transitions.
[2020-11-24 20:41:13,333 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:41:13,333 INFO  L728         BuchiCegarLoop]: Abstraction has 4782 states and 5659 transitions.
[2020-11-24 20:41:13,337 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4782 states and 5659 transitions.
[2020-11-24 20:41:13,361 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4782 to 4464.
[2020-11-24 20:41:13,361 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4464 states.
[2020-11-24 20:41:13,366 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4464 states to 4464 states and 5168 transitions.
[2020-11-24 20:41:13,366 INFO  L751         BuchiCegarLoop]: Abstraction has 4464 states and 5168 transitions.
[2020-11-24 20:41:13,366 INFO  L631         BuchiCegarLoop]: Abstraction has 4464 states and 5168 transitions.
[2020-11-24 20:41:13,366 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-24 20:41:13,366 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4464 states and 5168 transitions.
[2020-11-24 20:41:13,371 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-24 20:41:13,371 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:41:13,371 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:41:13,372 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:41:13,372 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_PausableToken0 := false;
[L2]                 call_transfer_PausableToken0 := false;
[L2]     CALL        call main();
[L7258]              assume null == 0;
[L7259]  CALL        call this := FreshRefGenerator__success();
[L2904]              havoc newRef;
[L2905]              assume Alloc[newRef] == false;
[L2906]              Alloc[newRef] := true;
[L2907]              assume newRef != null;
[L7259]  RET         call this := FreshRefGenerator__success();
[L7260]              assume now >= 0;
[L7261]              assume DType[this] == LUCKYToken;
[L7262]              assume msgvalue_MSG == 0;
[L7263]              gas := gas - 53000;
[L7264]  CALL        call LUCKYToken_LUCKYToken(this, msgsender_MSG, msgvalue_MSG);
[L1849]              havoc __exception;
[L1850]              revert := false;
[L1851]  COND FALSE  !(__exception)
[L1876]  CALL        call LUCKYToken_LUCKYToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4580]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4580]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4581]  COND FALSE  !(revert)
[L4584]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3118]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L3118]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3119]  COND FALSE  !(revert)
[L3122]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3094]              assume msgsender_MSG != null;
[L3095]              Balance[this] := 0;
[L3096]              _balances_StandardToken[this] := zeroRefintArr();
[L3097]              sum__balances0[this] := 0;
[L3098]              _allowed_StandardToken[this] := zeroRefRefintArr();
[L3099]              sum__allowed1[this] := 0;
[L3100]              _totalSupply_StandardToken[this] := 0;
[L3122]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4584]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4585]  COND FALSE  !(revert)
[L4588]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L4588]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4589]  COND FALSE  !(revert)
[L4592]  CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4394]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4394]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4395]  COND FALSE  !(revert)
[L4398]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3118]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L3118]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3119]  COND FALSE  !(revert)
[L3122]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3094]              assume msgsender_MSG != null;
[L3095]              Balance[this] := 0;
[L3096]              _balances_StandardToken[this] := zeroRefintArr();
[L3097]              sum__balances0[this] := 0;
[L3098]              _allowed_StandardToken[this] := zeroRefRefintArr();
[L3099]              sum__allowed1[this] := 0;
[L3100]              _totalSupply_StandardToken[this] := 0;
[L3122]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4398]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4399]  COND FALSE  !(revert)
[L4402]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L4402]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4403]  COND FALSE  !(revert)
[L4406]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4367]              assume msgsender_MSG != null;
[L4368]              Balance[this] := 0;
[L4406]  RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4407]  COND FALSE  !(revert)
[L4592]  RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4593]  COND FALSE  !(revert)
[L4596]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3966]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L3966]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3967]  COND FALSE  !(revert)
[L3970]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3946]              assume msgsender_MSG != null;
[L3947]              Balance[this] := 0;
[L3948]              paused_Pausable[this] := false;
[L3970]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3971]  COND FALSE  !(revert)
[L4596]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4597]  COND FALSE  !(revert)
[L4600]  CALL        call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4084]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4084]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4085]  COND FALSE  !(revert)
[L4088]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3118]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L3118]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3119]  COND FALSE  !(revert)
[L3122]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3094]              assume msgsender_MSG != null;
[L3095]              Balance[this] := 0;
[L3096]              _balances_StandardToken[this] := zeroRefintArr();
[L3097]              sum__balances0[this] := 0;
[L3098]              _allowed_StandardToken[this] := zeroRefRefintArr();
[L3099]              sum__allowed1[this] := 0;
[L3100]              _totalSupply_StandardToken[this] := 0;
[L3122]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4088]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4089]  COND FALSE  !(revert)
[L4092]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L4092]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]  COND FALSE  !(revert)
[L4096]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3966]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L3966]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3967]  COND FALSE  !(revert)
[L3970]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3946]              assume msgsender_MSG != null;
[L3947]              Balance[this] := 0;
[L3948]              paused_Pausable[this] := false;
[L3970]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3971]  COND FALSE  !(revert)
[L4096]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4097]  COND FALSE  !(revert)
[L4100]  CALL        call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4053]              assume msgsender_MSG != null;
[L4054]              Balance[this] := 0;
[L4100]  RET         call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4101]  COND FALSE  !(revert)
[L4600]  RET         call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4601]  COND FALSE  !(revert)
[L4604]  CALL        call LUCKYToken_LUCKYToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4523]              assume msgsender_MSG != null;
[L4524]              Balance[this] := 0;
[L4525]              name_LUCKYToken[this] := -927166810;
[L4526]              symbol_LUCKYToken[this] := -927166810;
[L4527]              decimals_LUCKYToken[this] := 18;
[L4528]              INIT_TOTALSUPPLY_LUCKYToken[this] := 10000000000;
[L4529]              __var_26 := ConstantToRef(625314775344980695514831456764478199936221022047);
[L4530]              _tokenOwner_LUCKYToken[this] := ConstantToRef(625314775344980695514831456764478199936221022047);
[L4532]              __var_25 := decimals_LUCKYToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4533]              _totalSupply_StandardToken[this] := nonlinearMul(INIT_TOTALSUPPLY_LUCKYToken[this], nonlinearPow(10, decimals_LUCKYToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4534]              _owner_Ownable[this] := _tokenOwner_LUCKYToken[this];
[L4535]              assert { :EventEmitted "OwnershipTransferred_LUCKYToken" } true;
[L4536]              sum__balances0[this] := sum__balances0[this] - _balances_StandardToken[this][_owner_Ownable[this]];
[L4537]              _balances_StandardToken[this][_owner_Ownable[this]] := _totalSupply_StandardToken[this];
[L4538]              sum__balances0[this] := sum__balances0[this] + _balances_StandardToken[this][_owner_Ownable[this]];
[L4539]              assert { :EventEmitted "Transfer_LUCKYToken" } true;
[L4604]  RET         call LUCKYToken_LUCKYToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4605]  COND FALSE  !(revert)
[L1876]  RET         call LUCKYToken_LUCKYToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1877]              assume !revert && gas >= 0;
[L7264]  RET         call LUCKYToken_LUCKYToken(this, msgsender_MSG, msgvalue_MSG);
[L7265]              assume !revert && gas >= 0;
[L7268]  CALL        call CorralChoice_LUCKYToken(this);
[L7078]              havoc msgsender_MSG;
[L7079]              havoc msgvalue_MSG;
[L7080]              havoc choice;
[L7081]              havoc _to_s670;
[L7082]              havoc _value_s670;
[L7083]              havoc __ret_0_transfer;
[L7084]              havoc _spender_s709;
[L7085]              havoc _value_s709;
[L7086]              havoc __ret_0_approve;
[L7087]              havoc _from_s691;
[L7088]              havoc _to_s691;
[L7089]              havoc _value_s691;
[L7090]              havoc __ret_0_transferFrom;
[L7091]              havoc __ret_0_totalSupply;
[L7092]              havoc owner_s211;
[L7093]              havoc __ret_0_balanceOf;
[L7094]              havoc owner_s227;
[L7095]              havoc spender_s227;
[L7096]              havoc __ret_0_allowance;
[L7097]              havoc _spender_s727;
[L7098]              havoc _addedValue_s727;
[L7099]              havoc success_s727;
[L7100]              havoc _spender_s745;
[L7101]              havoc _subtractedValue_s745;
[L7102]              havoc success_s745;
[L7103]              havoc __ret_0_owner;
[L7104]              havoc __ret_0_isOwner;
[L7105]              havoc newOwner_s564;
[L7106]              havoc __ret_0_paused;
[L7107]              havoc amount_s764;
[L7108]              havoc account_s779;
[L7109]              havoc amount_s779;
[L7110]              havoc __ret_0_name;
[L7111]              havoc __ret_0_symbol;
[L7112]              havoc __ret_0_decimals;
[L7113]              havoc tmpNow;
[L7114]              havoc gas;
[L7115]              assume gas > 4000000 && gas <= 8000000;
[L7116]              tmpNow := now;
[L7117]              havoc now;
[L7118]              assume now > tmpNow;
[L7119]              assume msgsender_MSG != null;
[L7120]              assume DType[msgsender_MSG] != SafeMath;
[L7121]              assume DType[msgsender_MSG] != IERC20;
[L7122]              assume DType[msgsender_MSG] != StandardToken;
[L7123]              assume DType[msgsender_MSG] != Ownable;
[L7124]              assume DType[msgsender_MSG] != Pausable;
[L7125]              assume DType[msgsender_MSG] != PausableToken;
[L7126]              assume DType[msgsender_MSG] != BurnableToken;
[L7127]              assume DType[msgsender_MSG] != LUCKYToken;
[L7128]              Alloc[msgsender_MSG] := true;
[L7129]  COND TRUE   choice == 19
[L7130]              gas := gas - 21000;
[L7131]  COND TRUE   gas >= 0
[L7132]              assume _value_s670 >= 0 && _value_s670 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7133]              assume msgvalue_MSG == 0;
[L7134]  CALL        call __ret_0_transfer := transfer~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s670 && _value_s670 <= _balances_StandardToken[this][msgsender_MSG]) && _value_s670 >= 0) && _value_s670 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][_to_s670] >= 0) && _balances_StandardToken[this][_to_s670] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][msgsender_MSG] >= 0) && _balances_StandardToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_PausableToken0 := true;
[L2]                 call_transfer_PausableToken0 := false;
[L2]                 revert := revert_hold;
[L1329]              havoc __exception;
[L1330]              revert := false;
[L1331]  COND TRUE   __exception
[L1332]              __tmp__Balance := Balance;
[L1333]              __tmp__DType := DType;
[L1334]              __tmp__Alloc := Alloc;
[L1335]              __tmp__balance_ADDR := balance_ADDR;
[L1336]              __tmp__M_Ref_int := M_Ref_int;
[L1337]              __tmp__sum__balances0 := sum__balances0;
[L1338]              __tmp__alloc__allowed_StandardToken_lvl0 := alloc__allowed_StandardToken_lvl0;
[L1339]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1340]              __tmp__sum__allowed1 := sum__allowed1;
[L1341]              __tmp__Length := Length;
[L1342]              __tmp__now := now;
[L1343]              __tmp___balances_StandardToken := _balances_StandardToken;
[L1344]              __tmp___allowed_StandardToken := _allowed_StandardToken;
[L1345]              __tmp___totalSupply_StandardToken := _totalSupply_StandardToken;
[L1346]              __tmp___owner_Ownable := _owner_Ownable;
[L1347]              __tmp__paused_Pausable := paused_Pausable;
[L1348]              __tmp__name_LUCKYToken := name_LUCKYToken;
[L1349]              __tmp__symbol_LUCKYToken := symbol_LUCKYToken;
[L1350]              __tmp__decimals_LUCKYToken := decimals_LUCKYToken;
[L1351]              __tmp__INIT_TOTALSUPPLY_LUCKYToken := INIT_TOTALSUPPLY_LUCKYToken;
[L1352]              __tmp___tokenOwner_LUCKYToken := _tokenOwner_LUCKYToken;
[L1353]  CALL        call __ret_0_ := transfer~address~uint256_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L4110]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6236]  COND FALSE  !(!!__tmp__paused_Pausable[this])
[L4110]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4111]  COND FALSE  !(revert)
[L4114]  COND TRUE   __tmp__DType[this] == LUCKYToken
[L4115]  CALL        call __var_15 := transfer~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L3166]  COND TRUE   __tmp__DType[this] == LUCKYToken
[L3167]  CALL        call _transfer~address~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s246, value_s246);
[L3535]              __var_4 := null;
[L3536]  COND FALSE  !(!(to_s401 != null))
[L3540]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_StandardToken[this][from_s401], value_s401);
[L3001]  COND FALSE  !(!(b_s82 <= a_s82))
[L3005]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3006]              __ret_0_ := c_s82;
[L3540]  RET         call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_StandardToken[this][from_s401], value_s401);
[L3541]  COND FALSE  !(revert)
[L3544]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_StandardToken[this][from_s401];
[L3545]              __tmp___balances_StandardToken[this][from_s401] := __var_5;
[L3546]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_StandardToken[this][from_s401];
[L3547]  CALL        call __var_6 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_StandardToken[this][to_s401], value_s401);
[L3025]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3026]  COND FALSE  !(!(c_s106 >= a_s106))
[L3030]              __ret_0_ := c_s106;
[L3547]  RET         call __var_6 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_StandardToken[this][to_s401], value_s401);
[L3548]  COND FALSE  !(revert)
[L3551]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_StandardToken[this][to_s401];
[L3552]              __tmp___balances_StandardToken[this][to_s401] := __var_6;
[L3553]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_StandardToken[this][to_s401];
[L3167]  RET         call _transfer~address~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s246, value_s246);
[L3168]  COND FALSE  !(revert)
[L3189]              __ret_0_ := true;
[L4115]  RET         call __var_15 := transfer~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L4116]  COND FALSE  !(revert)
[L4127]              __ret_0_ := __var_15;
[L1353]  RET         call __ret_0_ := transfer~address~uint256_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L1354]              assume revert || gas < 0;
[L7134]  RET         call __ret_0_transfer := transfer~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L7268]  RET         call CorralChoice_LUCKYToken(this);

Loop:
[L7268]  CALL        call CorralChoice_LUCKYToken(this);
[L7078]              havoc msgsender_MSG;
[L7079]              havoc msgvalue_MSG;
[L7080]              havoc choice;
[L7081]              havoc _to_s670;
[L7082]              havoc _value_s670;
[L7083]              havoc __ret_0_transfer;
[L7084]              havoc _spender_s709;
[L7085]              havoc _value_s709;
[L7086]              havoc __ret_0_approve;
[L7087]              havoc _from_s691;
[L7088]              havoc _to_s691;
[L7089]              havoc _value_s691;
[L7090]              havoc __ret_0_transferFrom;
[L7091]              havoc __ret_0_totalSupply;
[L7092]              havoc owner_s211;
[L7093]              havoc __ret_0_balanceOf;
[L7094]              havoc owner_s227;
[L7095]              havoc spender_s227;
[L7096]              havoc __ret_0_allowance;
[L7097]              havoc _spender_s727;
[L7098]              havoc _addedValue_s727;
[L7099]              havoc success_s727;
[L7100]              havoc _spender_s745;
[L7101]              havoc _subtractedValue_s745;
[L7102]              havoc success_s745;
[L7103]              havoc __ret_0_owner;
[L7104]              havoc __ret_0_isOwner;
[L7105]              havoc newOwner_s564;
[L7106]              havoc __ret_0_paused;
[L7107]              havoc amount_s764;
[L7108]              havoc account_s779;
[L7109]              havoc amount_s779;
[L7110]              havoc __ret_0_name;
[L7111]              havoc __ret_0_symbol;
[L7112]              havoc __ret_0_decimals;
[L7113]              havoc tmpNow;
[L7114]              havoc gas;
[L7115]              assume gas > 4000000 && gas <= 8000000;
[L7116]              tmpNow := now;
[L7117]              havoc now;
[L7118]              assume now > tmpNow;
[L7119]              assume msgsender_MSG != null;
[L7120]              assume DType[msgsender_MSG] != SafeMath;
[L7121]              assume DType[msgsender_MSG] != IERC20;
[L7122]              assume DType[msgsender_MSG] != StandardToken;
[L7123]              assume DType[msgsender_MSG] != Ownable;
[L7124]              assume DType[msgsender_MSG] != Pausable;
[L7125]              assume DType[msgsender_MSG] != PausableToken;
[L7126]              assume DType[msgsender_MSG] != BurnableToken;
[L7127]              assume DType[msgsender_MSG] != LUCKYToken;
[L7128]              Alloc[msgsender_MSG] := true;
[L7129]  COND TRUE   choice == 19
[L7130]              gas := gas - 21000;
[L7131]  COND FALSE  !(gas >= 0)
[L7268]  RET         call CorralChoice_LUCKYToken(this);

[2020-11-24 20:41:13,375 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:41:13,375 INFO  L82        PathProgramCache]: Analyzing trace with hash 1836866983, now seen corresponding path program 1 times
[2020-11-24 20:41:13,377 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:41:13,392 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:41:13,454 INFO  L134       CoverageAnalysis]: Checked inductivity of 332 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 332 trivial. 0 not checked.
[2020-11-24 20:41:13,454 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:41:13,454 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-24 20:41:13,454 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:41:13,454 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-24 20:41:13,454 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-24 20:41:13,455 INFO  L87              Difference]: Start difference. First operand 4464 states and 5168 transitions. cyclomatic complexity: 712 Second operand 5 states.
[2020-11-24 20:41:14,327 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:41:14,327 INFO  L93              Difference]: Finished difference Result 5095 states and 6065 transitions.
[2020-11-24 20:41:14,328 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 20:41:14,328 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5095 states and 6065 transitions.
[2020-11-24 20:41:14,340 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 24
[2020-11-24 20:41:14,356 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5095 states to 4267 states and 5176 transitions.
[2020-11-24 20:41:14,356 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 956
[2020-11-24 20:41:14,356 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 956
[2020-11-24 20:41:14,357 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4267 states and 5176 transitions.
[2020-11-24 20:41:14,359 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:41:14,359 INFO  L728         BuchiCegarLoop]: Abstraction has 4267 states and 5176 transitions.
[2020-11-24 20:41:14,362 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4267 states and 5176 transitions.
[2020-11-24 20:41:14,383 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4267 to 3611.
[2020-11-24 20:41:14,383 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3611 states.
[2020-11-24 20:41:14,387 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3611 states to 3611 states and 4204 transitions.
[2020-11-24 20:41:14,387 INFO  L751         BuchiCegarLoop]: Abstraction has 3611 states and 4204 transitions.
[2020-11-24 20:41:14,387 INFO  L631         BuchiCegarLoop]: Abstraction has 3611 states and 4204 transitions.
[2020-11-24 20:41:14,387 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-24 20:41:14,387 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3611 states and 4204 transitions.
[2020-11-24 20:41:14,390 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-24 20:41:14,390 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:41:14,390 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:41:14,392 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:41:14,392 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_PausableToken0 := false;
[L2]                 call_transfer_PausableToken0 := false;
[L2]     CALL        call main();
[L7258]              assume null == 0;
[L7259]  CALL        call this := FreshRefGenerator__success();
[L2904]              havoc newRef;
[L2905]              assume Alloc[newRef] == false;
[L2906]              Alloc[newRef] := true;
[L2907]              assume newRef != null;
[L7259]  RET         call this := FreshRefGenerator__success();
[L7260]              assume now >= 0;
[L7261]              assume DType[this] == LUCKYToken;
[L7262]              assume msgvalue_MSG == 0;
[L7263]              gas := gas - 53000;
[L7264]  CALL        call LUCKYToken_LUCKYToken(this, msgsender_MSG, msgvalue_MSG);
[L1849]              havoc __exception;
[L1850]              revert := false;
[L1851]  COND FALSE  !(__exception)
[L1876]  CALL        call LUCKYToken_LUCKYToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4580]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4580]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4581]  COND FALSE  !(revert)
[L4584]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3118]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L3118]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3119]  COND FALSE  !(revert)
[L3122]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3094]              assume msgsender_MSG != null;
[L3095]              Balance[this] := 0;
[L3096]              _balances_StandardToken[this] := zeroRefintArr();
[L3097]              sum__balances0[this] := 0;
[L3098]              _allowed_StandardToken[this] := zeroRefRefintArr();
[L3099]              sum__allowed1[this] := 0;
[L3100]              _totalSupply_StandardToken[this] := 0;
[L3122]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4584]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4585]  COND FALSE  !(revert)
[L4588]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L4588]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4589]  COND FALSE  !(revert)
[L4592]  CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4394]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4394]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4395]  COND FALSE  !(revert)
[L4398]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3118]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L3118]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3119]  COND FALSE  !(revert)
[L3122]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3094]              assume msgsender_MSG != null;
[L3095]              Balance[this] := 0;
[L3096]              _balances_StandardToken[this] := zeroRefintArr();
[L3097]              sum__balances0[this] := 0;
[L3098]              _allowed_StandardToken[this] := zeroRefRefintArr();
[L3099]              sum__allowed1[this] := 0;
[L3100]              _totalSupply_StandardToken[this] := 0;
[L3122]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4398]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4399]  COND FALSE  !(revert)
[L4402]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L4402]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4403]  COND FALSE  !(revert)
[L4406]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4367]              assume msgsender_MSG != null;
[L4368]              Balance[this] := 0;
[L4406]  RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4407]  COND FALSE  !(revert)
[L4592]  RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4593]  COND FALSE  !(revert)
[L4596]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3966]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L3966]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3967]  COND FALSE  !(revert)
[L3970]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3946]              assume msgsender_MSG != null;
[L3947]              Balance[this] := 0;
[L3948]              paused_Pausable[this] := false;
[L3970]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3971]  COND FALSE  !(revert)
[L4596]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4597]  COND FALSE  !(revert)
[L4600]  CALL        call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4084]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4084]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4085]  COND FALSE  !(revert)
[L4088]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3118]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L3118]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3119]  COND FALSE  !(revert)
[L3122]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3094]              assume msgsender_MSG != null;
[L3095]              Balance[this] := 0;
[L3096]              _balances_StandardToken[this] := zeroRefintArr();
[L3097]              sum__balances0[this] := 0;
[L3098]              _allowed_StandardToken[this] := zeroRefRefintArr();
[L3099]              sum__allowed1[this] := 0;
[L3100]              _totalSupply_StandardToken[this] := 0;
[L3122]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4088]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4089]  COND FALSE  !(revert)
[L4092]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L4092]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]  COND FALSE  !(revert)
[L4096]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3966]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L3966]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3967]  COND FALSE  !(revert)
[L3970]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3946]              assume msgsender_MSG != null;
[L3947]              Balance[this] := 0;
[L3948]              paused_Pausable[this] := false;
[L3970]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3971]  COND FALSE  !(revert)
[L4096]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4097]  COND FALSE  !(revert)
[L4100]  CALL        call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4053]              assume msgsender_MSG != null;
[L4054]              Balance[this] := 0;
[L4100]  RET         call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4101]  COND FALSE  !(revert)
[L4600]  RET         call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4601]  COND FALSE  !(revert)
[L4604]  CALL        call LUCKYToken_LUCKYToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4523]              assume msgsender_MSG != null;
[L4524]              Balance[this] := 0;
[L4525]              name_LUCKYToken[this] := -927166810;
[L4526]              symbol_LUCKYToken[this] := -927166810;
[L4527]              decimals_LUCKYToken[this] := 18;
[L4528]              INIT_TOTALSUPPLY_LUCKYToken[this] := 10000000000;
[L4529]              __var_26 := ConstantToRef(625314775344980695514831456764478199936221022047);
[L4530]              _tokenOwner_LUCKYToken[this] := ConstantToRef(625314775344980695514831456764478199936221022047);
[L4532]              __var_25 := decimals_LUCKYToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4533]              _totalSupply_StandardToken[this] := nonlinearMul(INIT_TOTALSUPPLY_LUCKYToken[this], nonlinearPow(10, decimals_LUCKYToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4534]              _owner_Ownable[this] := _tokenOwner_LUCKYToken[this];
[L4535]              assert { :EventEmitted "OwnershipTransferred_LUCKYToken" } true;
[L4536]              sum__balances0[this] := sum__balances0[this] - _balances_StandardToken[this][_owner_Ownable[this]];
[L4537]              _balances_StandardToken[this][_owner_Ownable[this]] := _totalSupply_StandardToken[this];
[L4538]              sum__balances0[this] := sum__balances0[this] + _balances_StandardToken[this][_owner_Ownable[this]];
[L4539]              assert { :EventEmitted "Transfer_LUCKYToken" } true;
[L4604]  RET         call LUCKYToken_LUCKYToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4605]  COND FALSE  !(revert)
[L1876]  RET         call LUCKYToken_LUCKYToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1877]              assume !revert && gas >= 0;
[L7264]  RET         call LUCKYToken_LUCKYToken(this, msgsender_MSG, msgvalue_MSG);
[L7265]              assume !revert && gas >= 0;
[L7268]  CALL        call CorralChoice_LUCKYToken(this);
[L7078]              havoc msgsender_MSG;
[L7079]              havoc msgvalue_MSG;
[L7080]              havoc choice;
[L7081]              havoc _to_s670;
[L7082]              havoc _value_s670;
[L7083]              havoc __ret_0_transfer;
[L7084]              havoc _spender_s709;
[L7085]              havoc _value_s709;
[L7086]              havoc __ret_0_approve;
[L7087]              havoc _from_s691;
[L7088]              havoc _to_s691;
[L7089]              havoc _value_s691;
[L7090]              havoc __ret_0_transferFrom;
[L7091]              havoc __ret_0_totalSupply;
[L7092]              havoc owner_s211;
[L7093]              havoc __ret_0_balanceOf;
[L7094]              havoc owner_s227;
[L7095]              havoc spender_s227;
[L7096]              havoc __ret_0_allowance;
[L7097]              havoc _spender_s727;
[L7098]              havoc _addedValue_s727;
[L7099]              havoc success_s727;
[L7100]              havoc _spender_s745;
[L7101]              havoc _subtractedValue_s745;
[L7102]              havoc success_s745;
[L7103]              havoc __ret_0_owner;
[L7104]              havoc __ret_0_isOwner;
[L7105]              havoc newOwner_s564;
[L7106]              havoc __ret_0_paused;
[L7107]              havoc amount_s764;
[L7108]              havoc account_s779;
[L7109]              havoc amount_s779;
[L7110]              havoc __ret_0_name;
[L7111]              havoc __ret_0_symbol;
[L7112]              havoc __ret_0_decimals;
[L7113]              havoc tmpNow;
[L7114]              havoc gas;
[L7115]              assume gas > 4000000 && gas <= 8000000;
[L7116]              tmpNow := now;
[L7117]              havoc now;
[L7118]              assume now > tmpNow;
[L7119]              assume msgsender_MSG != null;
[L7120]              assume DType[msgsender_MSG] != SafeMath;
[L7121]              assume DType[msgsender_MSG] != IERC20;
[L7122]              assume DType[msgsender_MSG] != StandardToken;
[L7123]              assume DType[msgsender_MSG] != Ownable;
[L7124]              assume DType[msgsender_MSG] != Pausable;
[L7125]              assume DType[msgsender_MSG] != PausableToken;
[L7126]              assume DType[msgsender_MSG] != BurnableToken;
[L7127]              assume DType[msgsender_MSG] != LUCKYToken;
[L7128]              Alloc[msgsender_MSG] := true;
[L7129]  COND FALSE  !(choice == 19)
[L7136]  COND FALSE  !(choice == 18)
[L7143]  COND FALSE  !(choice == 17)
[L7150]  COND FALSE  !(choice == 16)
[L7156]  COND FALSE  !(choice == 15)
[L7162]  COND FALSE  !(choice == 14)
[L7168]  COND FALSE  !(choice == 13)
[L7175]  COND FALSE  !(choice == 12)
[L7182]  COND FALSE  !(choice == 11)
[L7188]  COND FALSE  !(choice == 10)
[L7194]  COND FALSE  !(choice == 9)
[L7200]  COND FALSE  !(choice == 8)
[L7206]  COND FALSE  !(choice == 7)
[L7212]  COND TRUE   choice == 6
[L7213]              gas := gas - 21000;
[L7214]  COND TRUE   gas >= 0
[L7215]              assume msgvalue_MSG == 0;
[L7216]  CALL        call unpause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L1143]              havoc __exception;
[L1144]              revert := false;
[L1145]  COND FALSE  !(__exception)
[L1170]  CALL        call unpause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4018]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6200]  COND FALSE  !(DType[this] == LUCKYToken)
[L6205]  COND FALSE  !(DType[this] == BurnableToken)
[L6210]  COND FALSE  !(DType[this] == PausableToken)
[L6215]  COND TRUE   DType[this] == Pausable
[L6216]  CALL        call __var_13 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3835]              __ret_0_ := msgsender_MSG == _owner_Ownable[this];
[L6216]  RET         call __var_13 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6217]  COND FALSE  !(revert)
[L6228]  COND FALSE  !(!__var_13)
[L4018]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4019]  COND FALSE  !(revert)
[L4022]  CALL        call whenPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6260]  COND FALSE  !(!paused_Pausable[this])
[L4022]  RET         call whenPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4023]  COND FALSE  !(revert)
[L4026]              paused_Pausable[this] := false;
[L4027]              assert { :EventEmitted "Unpause_Pausable" } true;
[L1170]  RET         call unpause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L1171]              assume !revert && gas >= 0;
[L7216]  RET         call unpause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L7268]  RET         call CorralChoice_LUCKYToken(this);
[L7268]  CALL        call CorralChoice_LUCKYToken(this);
[L7078]              havoc msgsender_MSG;
[L7079]              havoc msgvalue_MSG;
[L7080]              havoc choice;
[L7081]              havoc _to_s670;
[L7082]              havoc _value_s670;
[L7083]              havoc __ret_0_transfer;
[L7084]              havoc _spender_s709;
[L7085]              havoc _value_s709;
[L7086]              havoc __ret_0_approve;
[L7087]              havoc _from_s691;
[L7088]              havoc _to_s691;
[L7089]              havoc _value_s691;
[L7090]              havoc __ret_0_transferFrom;
[L7091]              havoc __ret_0_totalSupply;
[L7092]              havoc owner_s211;
[L7093]              havoc __ret_0_balanceOf;
[L7094]              havoc owner_s227;
[L7095]              havoc spender_s227;
[L7096]              havoc __ret_0_allowance;
[L7097]              havoc _spender_s727;
[L7098]              havoc _addedValue_s727;
[L7099]              havoc success_s727;
[L7100]              havoc _spender_s745;
[L7101]              havoc _subtractedValue_s745;
[L7102]              havoc success_s745;
[L7103]              havoc __ret_0_owner;
[L7104]              havoc __ret_0_isOwner;
[L7105]              havoc newOwner_s564;
[L7106]              havoc __ret_0_paused;
[L7107]              havoc amount_s764;
[L7108]              havoc account_s779;
[L7109]              havoc amount_s779;
[L7110]              havoc __ret_0_name;
[L7111]              havoc __ret_0_symbol;
[L7112]              havoc __ret_0_decimals;
[L7113]              havoc tmpNow;
[L7114]              havoc gas;
[L7115]              assume gas > 4000000 && gas <= 8000000;
[L7116]              tmpNow := now;
[L7117]              havoc now;
[L7118]              assume now > tmpNow;
[L7119]              assume msgsender_MSG != null;
[L7120]              assume DType[msgsender_MSG] != SafeMath;
[L7121]              assume DType[msgsender_MSG] != IERC20;
[L7122]              assume DType[msgsender_MSG] != StandardToken;
[L7123]              assume DType[msgsender_MSG] != Ownable;
[L7124]              assume DType[msgsender_MSG] != Pausable;
[L7125]              assume DType[msgsender_MSG] != PausableToken;
[L7126]              assume DType[msgsender_MSG] != BurnableToken;
[L7127]              assume DType[msgsender_MSG] != LUCKYToken;
[L7128]              Alloc[msgsender_MSG] := true;
[L7129]  COND TRUE   choice == 19
[L7130]              gas := gas - 21000;
[L7131]  COND TRUE   gas >= 0
[L7132]              assume _value_s670 >= 0 && _value_s670 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7133]              assume msgvalue_MSG == 0;
[L7134]  CALL        call __ret_0_transfer := transfer~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s670 && _value_s670 <= _balances_StandardToken[this][msgsender_MSG]) && _value_s670 >= 0) && _value_s670 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][_to_s670] >= 0) && _balances_StandardToken[this][_to_s670] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][msgsender_MSG] >= 0) && _balances_StandardToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_PausableToken0 := true;
[L2]                 call_transfer_PausableToken0 := false;
[L2]                 revert := revert_hold;
[L1329]              havoc __exception;
[L1330]              revert := false;
[L1331]  COND TRUE   __exception
[L1332]              __tmp__Balance := Balance;
[L1333]              __tmp__DType := DType;
[L1334]              __tmp__Alloc := Alloc;
[L1335]              __tmp__balance_ADDR := balance_ADDR;
[L1336]              __tmp__M_Ref_int := M_Ref_int;
[L1337]              __tmp__sum__balances0 := sum__balances0;
[L1338]              __tmp__alloc__allowed_StandardToken_lvl0 := alloc__allowed_StandardToken_lvl0;
[L1339]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1340]              __tmp__sum__allowed1 := sum__allowed1;
[L1341]              __tmp__Length := Length;
[L1342]              __tmp__now := now;
[L1343]              __tmp___balances_StandardToken := _balances_StandardToken;
[L1344]              __tmp___allowed_StandardToken := _allowed_StandardToken;
[L1345]              __tmp___totalSupply_StandardToken := _totalSupply_StandardToken;
[L1346]              __tmp___owner_Ownable := _owner_Ownable;
[L1347]              __tmp__paused_Pausable := paused_Pausable;
[L1348]              __tmp__name_LUCKYToken := name_LUCKYToken;
[L1349]              __tmp__symbol_LUCKYToken := symbol_LUCKYToken;
[L1350]              __tmp__decimals_LUCKYToken := decimals_LUCKYToken;
[L1351]              __tmp__INIT_TOTALSUPPLY_LUCKYToken := INIT_TOTALSUPPLY_LUCKYToken;
[L1352]              __tmp___tokenOwner_LUCKYToken := _tokenOwner_LUCKYToken;
[L1353]  CALL        call __ret_0_ := transfer~address~uint256_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L4110]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6236]  COND TRUE   !!__tmp__paused_Pausable[this]
[L6237]              revert := true;
[L4110]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4111]  COND TRUE   revert
[L1353]  RET         call __ret_0_ := transfer~address~uint256_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L1354]              assume revert || gas < 0;
[L7134]  RET         call __ret_0_transfer := transfer~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L7268]  RET         call CorralChoice_LUCKYToken(this);

Loop:
[L7268]  CALL        call CorralChoice_LUCKYToken(this);
[L7078]              havoc msgsender_MSG;
[L7079]              havoc msgvalue_MSG;
[L7080]              havoc choice;
[L7081]              havoc _to_s670;
[L7082]              havoc _value_s670;
[L7083]              havoc __ret_0_transfer;
[L7084]              havoc _spender_s709;
[L7085]              havoc _value_s709;
[L7086]              havoc __ret_0_approve;
[L7087]              havoc _from_s691;
[L7088]              havoc _to_s691;
[L7089]              havoc _value_s691;
[L7090]              havoc __ret_0_transferFrom;
[L7091]              havoc __ret_0_totalSupply;
[L7092]              havoc owner_s211;
[L7093]              havoc __ret_0_balanceOf;
[L7094]              havoc owner_s227;
[L7095]              havoc spender_s227;
[L7096]              havoc __ret_0_allowance;
[L7097]              havoc _spender_s727;
[L7098]              havoc _addedValue_s727;
[L7099]              havoc success_s727;
[L7100]              havoc _spender_s745;
[L7101]              havoc _subtractedValue_s745;
[L7102]              havoc success_s745;
[L7103]              havoc __ret_0_owner;
[L7104]              havoc __ret_0_isOwner;
[L7105]              havoc newOwner_s564;
[L7106]              havoc __ret_0_paused;
[L7107]              havoc amount_s764;
[L7108]              havoc account_s779;
[L7109]              havoc amount_s779;
[L7110]              havoc __ret_0_name;
[L7111]              havoc __ret_0_symbol;
[L7112]              havoc __ret_0_decimals;
[L7113]              havoc tmpNow;
[L7114]              havoc gas;
[L7115]              assume gas > 4000000 && gas <= 8000000;
[L7116]              tmpNow := now;
[L7117]              havoc now;
[L7118]              assume now > tmpNow;
[L7119]              assume msgsender_MSG != null;
[L7120]              assume DType[msgsender_MSG] != SafeMath;
[L7121]              assume DType[msgsender_MSG] != IERC20;
[L7122]              assume DType[msgsender_MSG] != StandardToken;
[L7123]              assume DType[msgsender_MSG] != Ownable;
[L7124]              assume DType[msgsender_MSG] != Pausable;
[L7125]              assume DType[msgsender_MSG] != PausableToken;
[L7126]              assume DType[msgsender_MSG] != BurnableToken;
[L7127]              assume DType[msgsender_MSG] != LUCKYToken;
[L7128]              Alloc[msgsender_MSG] := true;
[L7129]  COND TRUE   choice == 19
[L7130]              gas := gas - 21000;
[L7131]  COND FALSE  !(gas >= 0)
[L7268]  RET         call CorralChoice_LUCKYToken(this);

[2020-11-24 20:41:14,395 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:41:14,395 INFO  L82        PathProgramCache]: Analyzing trace with hash 1012186327, now seen corresponding path program 1 times
[2020-11-24 20:41:14,396 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:41:14,406 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:41:14,515 INFO  L134       CoverageAnalysis]: Checked inductivity of 386 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 385 trivial. 0 not checked.
[2020-11-24 20:41:14,515 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:41:14,515 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 20:41:14,516 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:41:14,516 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 20:41:14,516 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 20:41:14,516 INFO  L87              Difference]: Start difference. First operand 3611 states and 4204 transitions. cyclomatic complexity: 600 Second operand 7 states.
[2020-11-24 20:41:14,597 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:41:14,597 INFO  L93              Difference]: Finished difference Result 3649 states and 4250 transitions.
[2020-11-24 20:41:14,597 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 20:41:14,597 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3649 states and 4250 transitions.
[2020-11-24 20:41:14,603 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-24 20:41:14,610 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3649 states to 3617 states and 4216 transitions.
[2020-11-24 20:41:14,610 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 851
[2020-11-24 20:41:14,611 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 851
[2020-11-24 20:41:14,611 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3617 states and 4216 transitions.
[2020-11-24 20:41:14,613 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:41:14,613 INFO  L728         BuchiCegarLoop]: Abstraction has 3617 states and 4216 transitions.
[2020-11-24 20:41:14,615 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3617 states and 4216 transitions.
[2020-11-24 20:41:14,630 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3617 to 3617.
[2020-11-24 20:41:14,630 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3617 states.
[2020-11-24 20:41:14,634 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3617 states to 3617 states and 4216 transitions.
[2020-11-24 20:41:14,634 INFO  L751         BuchiCegarLoop]: Abstraction has 3617 states and 4216 transitions.
[2020-11-24 20:41:14,634 INFO  L631         BuchiCegarLoop]: Abstraction has 3617 states and 4216 transitions.
[2020-11-24 20:41:14,634 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-24 20:41:14,634 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3617 states and 4216 transitions.
[2020-11-24 20:41:14,637 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-24 20:41:14,637 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:41:14,637 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:41:14,638 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:41:14,638 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_PausableToken0 := false;
[L2]                 call_transfer_PausableToken0 := false;
[L2]     CALL        call main();
[L7258]              assume null == 0;
[L7259]  CALL        call this := FreshRefGenerator__success();
[L2904]              havoc newRef;
[L2905]              assume Alloc[newRef] == false;
[L2906]              Alloc[newRef] := true;
[L2907]              assume newRef != null;
[L7259]  RET         call this := FreshRefGenerator__success();
[L7260]              assume now >= 0;
[L7261]              assume DType[this] == LUCKYToken;
[L7262]              assume msgvalue_MSG == 0;
[L7263]              gas := gas - 53000;
[L7264]  CALL        call LUCKYToken_LUCKYToken(this, msgsender_MSG, msgvalue_MSG);
[L1849]              havoc __exception;
[L1850]              revert := false;
[L1851]  COND FALSE  !(__exception)
[L1876]  CALL        call LUCKYToken_LUCKYToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4580]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4580]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4581]  COND FALSE  !(revert)
[L4584]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3118]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L3118]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3119]  COND FALSE  !(revert)
[L3122]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3094]              assume msgsender_MSG != null;
[L3095]              Balance[this] := 0;
[L3096]              _balances_StandardToken[this] := zeroRefintArr();
[L3097]              sum__balances0[this] := 0;
[L3098]              _allowed_StandardToken[this] := zeroRefRefintArr();
[L3099]              sum__allowed1[this] := 0;
[L3100]              _totalSupply_StandardToken[this] := 0;
[L3122]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4584]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4585]  COND FALSE  !(revert)
[L4588]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L4588]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4589]  COND FALSE  !(revert)
[L4592]  CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4394]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4394]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4395]  COND FALSE  !(revert)
[L4398]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3118]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L3118]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3119]  COND FALSE  !(revert)
[L3122]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3094]              assume msgsender_MSG != null;
[L3095]              Balance[this] := 0;
[L3096]              _balances_StandardToken[this] := zeroRefintArr();
[L3097]              sum__balances0[this] := 0;
[L3098]              _allowed_StandardToken[this] := zeroRefRefintArr();
[L3099]              sum__allowed1[this] := 0;
[L3100]              _totalSupply_StandardToken[this] := 0;
[L3122]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4398]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4399]  COND FALSE  !(revert)
[L4402]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L4402]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4403]  COND FALSE  !(revert)
[L4406]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4367]              assume msgsender_MSG != null;
[L4368]              Balance[this] := 0;
[L4406]  RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4407]  COND FALSE  !(revert)
[L4592]  RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4593]  COND FALSE  !(revert)
[L4596]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3966]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L3966]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3967]  COND FALSE  !(revert)
[L3970]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3946]              assume msgsender_MSG != null;
[L3947]              Balance[this] := 0;
[L3948]              paused_Pausable[this] := false;
[L3970]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3971]  COND FALSE  !(revert)
[L4596]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4597]  COND FALSE  !(revert)
[L4600]  CALL        call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4084]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4084]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4085]  COND FALSE  !(revert)
[L4088]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3118]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L3118]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3119]  COND FALSE  !(revert)
[L3122]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3094]              assume msgsender_MSG != null;
[L3095]              Balance[this] := 0;
[L3096]              _balances_StandardToken[this] := zeroRefintArr();
[L3097]              sum__balances0[this] := 0;
[L3098]              _allowed_StandardToken[this] := zeroRefRefintArr();
[L3099]              sum__allowed1[this] := 0;
[L3100]              _totalSupply_StandardToken[this] := 0;
[L3122]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4088]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4089]  COND FALSE  !(revert)
[L4092]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L4092]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]  COND FALSE  !(revert)
[L4096]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3966]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L3966]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3967]  COND FALSE  !(revert)
[L3970]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3946]              assume msgsender_MSG != null;
[L3947]              Balance[this] := 0;
[L3948]              paused_Pausable[this] := false;
[L3970]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3971]  COND FALSE  !(revert)
[L4096]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4097]  COND FALSE  !(revert)
[L4100]  CALL        call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4053]              assume msgsender_MSG != null;
[L4054]              Balance[this] := 0;
[L4100]  RET         call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4101]  COND FALSE  !(revert)
[L4600]  RET         call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4601]  COND FALSE  !(revert)
[L4604]  CALL        call LUCKYToken_LUCKYToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4523]              assume msgsender_MSG != null;
[L4524]              Balance[this] := 0;
[L4525]              name_LUCKYToken[this] := -927166810;
[L4526]              symbol_LUCKYToken[this] := -927166810;
[L4527]              decimals_LUCKYToken[this] := 18;
[L4528]              INIT_TOTALSUPPLY_LUCKYToken[this] := 10000000000;
[L4529]              __var_26 := ConstantToRef(625314775344980695514831456764478199936221022047);
[L4530]              _tokenOwner_LUCKYToken[this] := ConstantToRef(625314775344980695514831456764478199936221022047);
[L4532]              __var_25 := decimals_LUCKYToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4533]              _totalSupply_StandardToken[this] := nonlinearMul(INIT_TOTALSUPPLY_LUCKYToken[this], nonlinearPow(10, decimals_LUCKYToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4534]              _owner_Ownable[this] := _tokenOwner_LUCKYToken[this];
[L4535]              assert { :EventEmitted "OwnershipTransferred_LUCKYToken" } true;
[L4536]              sum__balances0[this] := sum__balances0[this] - _balances_StandardToken[this][_owner_Ownable[this]];
[L4537]              _balances_StandardToken[this][_owner_Ownable[this]] := _totalSupply_StandardToken[this];
[L4538]              sum__balances0[this] := sum__balances0[this] + _balances_StandardToken[this][_owner_Ownable[this]];
[L4539]              assert { :EventEmitted "Transfer_LUCKYToken" } true;
[L4604]  RET         call LUCKYToken_LUCKYToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4605]  COND FALSE  !(revert)
[L1876]  RET         call LUCKYToken_LUCKYToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1877]              assume !revert && gas >= 0;
[L7264]  RET         call LUCKYToken_LUCKYToken(this, msgsender_MSG, msgvalue_MSG);
[L7265]              assume !revert && gas >= 0;
[L7268]  CALL        call CorralChoice_LUCKYToken(this);
[L7078]              havoc msgsender_MSG;
[L7079]              havoc msgvalue_MSG;
[L7080]              havoc choice;
[L7081]              havoc _to_s670;
[L7082]              havoc _value_s670;
[L7083]              havoc __ret_0_transfer;
[L7084]              havoc _spender_s709;
[L7085]              havoc _value_s709;
[L7086]              havoc __ret_0_approve;
[L7087]              havoc _from_s691;
[L7088]              havoc _to_s691;
[L7089]              havoc _value_s691;
[L7090]              havoc __ret_0_transferFrom;
[L7091]              havoc __ret_0_totalSupply;
[L7092]              havoc owner_s211;
[L7093]              havoc __ret_0_balanceOf;
[L7094]              havoc owner_s227;
[L7095]              havoc spender_s227;
[L7096]              havoc __ret_0_allowance;
[L7097]              havoc _spender_s727;
[L7098]              havoc _addedValue_s727;
[L7099]              havoc success_s727;
[L7100]              havoc _spender_s745;
[L7101]              havoc _subtractedValue_s745;
[L7102]              havoc success_s745;
[L7103]              havoc __ret_0_owner;
[L7104]              havoc __ret_0_isOwner;
[L7105]              havoc newOwner_s564;
[L7106]              havoc __ret_0_paused;
[L7107]              havoc amount_s764;
[L7108]              havoc account_s779;
[L7109]              havoc amount_s779;
[L7110]              havoc __ret_0_name;
[L7111]              havoc __ret_0_symbol;
[L7112]              havoc __ret_0_decimals;
[L7113]              havoc tmpNow;
[L7114]              havoc gas;
[L7115]              assume gas > 4000000 && gas <= 8000000;
[L7116]              tmpNow := now;
[L7117]              havoc now;
[L7118]              assume now > tmpNow;
[L7119]              assume msgsender_MSG != null;
[L7120]              assume DType[msgsender_MSG] != SafeMath;
[L7121]              assume DType[msgsender_MSG] != IERC20;
[L7122]              assume DType[msgsender_MSG] != StandardToken;
[L7123]              assume DType[msgsender_MSG] != Ownable;
[L7124]              assume DType[msgsender_MSG] != Pausable;
[L7125]              assume DType[msgsender_MSG] != PausableToken;
[L7126]              assume DType[msgsender_MSG] != BurnableToken;
[L7127]              assume DType[msgsender_MSG] != LUCKYToken;
[L7128]              Alloc[msgsender_MSG] := true;
[L7129]  COND FALSE  !(choice == 19)
[L7136]  COND FALSE  !(choice == 18)
[L7143]  COND FALSE  !(choice == 17)
[L7150]  COND FALSE  !(choice == 16)
[L7156]  COND FALSE  !(choice == 15)
[L7162]  COND FALSE  !(choice == 14)
[L7168]  COND FALSE  !(choice == 13)
[L7175]  COND FALSE  !(choice == 12)
[L7182]  COND FALSE  !(choice == 11)
[L7188]  COND FALSE  !(choice == 10)
[L7194]  COND FALSE  !(choice == 9)
[L7200]  COND FALSE  !(choice == 8)
[L7206]  COND FALSE  !(choice == 7)
[L7212]  COND TRUE   choice == 6
[L7213]              gas := gas - 21000;
[L7214]  COND TRUE   gas >= 0
[L7215]              assume msgvalue_MSG == 0;
[L7216]  CALL        call unpause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L1143]              havoc __exception;
[L1144]              revert := false;
[L1145]  COND FALSE  !(__exception)
[L1170]  CALL        call unpause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4018]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6200]  COND FALSE  !(DType[this] == LUCKYToken)
[L6205]  COND FALSE  !(DType[this] == BurnableToken)
[L6210]  COND FALSE  !(DType[this] == PausableToken)
[L6215]  COND FALSE  !(DType[this] == Pausable)
[L6220]  COND TRUE   DType[this] == Ownable
[L6221]  CALL        call __var_13 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3835]              __ret_0_ := msgsender_MSG == _owner_Ownable[this];
[L6221]  RET         call __var_13 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6222]  COND FALSE  !(revert)
[L6228]  COND FALSE  !(!__var_13)
[L4018]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4019]  COND FALSE  !(revert)
[L4022]  CALL        call whenPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6260]  COND FALSE  !(!paused_Pausable[this])
[L4022]  RET         call whenPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4023]  COND FALSE  !(revert)
[L4026]              paused_Pausable[this] := false;
[L4027]              assert { :EventEmitted "Unpause_Pausable" } true;
[L1170]  RET         call unpause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L1171]              assume !revert && gas >= 0;
[L7216]  RET         call unpause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L7268]  RET         call CorralChoice_LUCKYToken(this);
[L7268]  CALL        call CorralChoice_LUCKYToken(this);
[L7078]              havoc msgsender_MSG;
[L7079]              havoc msgvalue_MSG;
[L7080]              havoc choice;
[L7081]              havoc _to_s670;
[L7082]              havoc _value_s670;
[L7083]              havoc __ret_0_transfer;
[L7084]              havoc _spender_s709;
[L7085]              havoc _value_s709;
[L7086]              havoc __ret_0_approve;
[L7087]              havoc _from_s691;
[L7088]              havoc _to_s691;
[L7089]              havoc _value_s691;
[L7090]              havoc __ret_0_transferFrom;
[L7091]              havoc __ret_0_totalSupply;
[L7092]              havoc owner_s211;
[L7093]              havoc __ret_0_balanceOf;
[L7094]              havoc owner_s227;
[L7095]              havoc spender_s227;
[L7096]              havoc __ret_0_allowance;
[L7097]              havoc _spender_s727;
[L7098]              havoc _addedValue_s727;
[L7099]              havoc success_s727;
[L7100]              havoc _spender_s745;
[L7101]              havoc _subtractedValue_s745;
[L7102]              havoc success_s745;
[L7103]              havoc __ret_0_owner;
[L7104]              havoc __ret_0_isOwner;
[L7105]              havoc newOwner_s564;
[L7106]              havoc __ret_0_paused;
[L7107]              havoc amount_s764;
[L7108]              havoc account_s779;
[L7109]              havoc amount_s779;
[L7110]              havoc __ret_0_name;
[L7111]              havoc __ret_0_symbol;
[L7112]              havoc __ret_0_decimals;
[L7113]              havoc tmpNow;
[L7114]              havoc gas;
[L7115]              assume gas > 4000000 && gas <= 8000000;
[L7116]              tmpNow := now;
[L7117]              havoc now;
[L7118]              assume now > tmpNow;
[L7119]              assume msgsender_MSG != null;
[L7120]              assume DType[msgsender_MSG] != SafeMath;
[L7121]              assume DType[msgsender_MSG] != IERC20;
[L7122]              assume DType[msgsender_MSG] != StandardToken;
[L7123]              assume DType[msgsender_MSG] != Ownable;
[L7124]              assume DType[msgsender_MSG] != Pausable;
[L7125]              assume DType[msgsender_MSG] != PausableToken;
[L7126]              assume DType[msgsender_MSG] != BurnableToken;
[L7127]              assume DType[msgsender_MSG] != LUCKYToken;
[L7128]              Alloc[msgsender_MSG] := true;
[L7129]  COND TRUE   choice == 19
[L7130]              gas := gas - 21000;
[L7131]  COND TRUE   gas >= 0
[L7132]              assume _value_s670 >= 0 && _value_s670 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7133]              assume msgvalue_MSG == 0;
[L7134]  CALL        call __ret_0_transfer := transfer~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s670 && _value_s670 <= _balances_StandardToken[this][msgsender_MSG]) && _value_s670 >= 0) && _value_s670 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][_to_s670] >= 0) && _balances_StandardToken[this][_to_s670] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][msgsender_MSG] >= 0) && _balances_StandardToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_PausableToken0 := true;
[L2]                 call_transfer_PausableToken0 := false;
[L2]                 revert := revert_hold;
[L1329]              havoc __exception;
[L1330]              revert := false;
[L1331]  COND TRUE   __exception
[L1332]              __tmp__Balance := Balance;
[L1333]              __tmp__DType := DType;
[L1334]              __tmp__Alloc := Alloc;
[L1335]              __tmp__balance_ADDR := balance_ADDR;
[L1336]              __tmp__M_Ref_int := M_Ref_int;
[L1337]              __tmp__sum__balances0 := sum__balances0;
[L1338]              __tmp__alloc__allowed_StandardToken_lvl0 := alloc__allowed_StandardToken_lvl0;
[L1339]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1340]              __tmp__sum__allowed1 := sum__allowed1;
[L1341]              __tmp__Length := Length;
[L1342]              __tmp__now := now;
[L1343]              __tmp___balances_StandardToken := _balances_StandardToken;
[L1344]              __tmp___allowed_StandardToken := _allowed_StandardToken;
[L1345]              __tmp___totalSupply_StandardToken := _totalSupply_StandardToken;
[L1346]              __tmp___owner_Ownable := _owner_Ownable;
[L1347]              __tmp__paused_Pausable := paused_Pausable;
[L1348]              __tmp__name_LUCKYToken := name_LUCKYToken;
[L1349]              __tmp__symbol_LUCKYToken := symbol_LUCKYToken;
[L1350]              __tmp__decimals_LUCKYToken := decimals_LUCKYToken;
[L1351]              __tmp__INIT_TOTALSUPPLY_LUCKYToken := INIT_TOTALSUPPLY_LUCKYToken;
[L1352]              __tmp___tokenOwner_LUCKYToken := _tokenOwner_LUCKYToken;
[L1353]  CALL        call __ret_0_ := transfer~address~uint256_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L4110]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6236]  COND TRUE   !!__tmp__paused_Pausable[this]
[L6237]              revert := true;
[L4110]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4111]  COND TRUE   revert
[L1353]  RET         call __ret_0_ := transfer~address~uint256_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L1354]              assume revert || gas < 0;
[L7134]  RET         call __ret_0_transfer := transfer~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L7268]  RET         call CorralChoice_LUCKYToken(this);

Loop:
[L7268]  CALL        call CorralChoice_LUCKYToken(this);
[L7078]              havoc msgsender_MSG;
[L7079]              havoc msgvalue_MSG;
[L7080]              havoc choice;
[L7081]              havoc _to_s670;
[L7082]              havoc _value_s670;
[L7083]              havoc __ret_0_transfer;
[L7084]              havoc _spender_s709;
[L7085]              havoc _value_s709;
[L7086]              havoc __ret_0_approve;
[L7087]              havoc _from_s691;
[L7088]              havoc _to_s691;
[L7089]              havoc _value_s691;
[L7090]              havoc __ret_0_transferFrom;
[L7091]              havoc __ret_0_totalSupply;
[L7092]              havoc owner_s211;
[L7093]              havoc __ret_0_balanceOf;
[L7094]              havoc owner_s227;
[L7095]              havoc spender_s227;
[L7096]              havoc __ret_0_allowance;
[L7097]              havoc _spender_s727;
[L7098]              havoc _addedValue_s727;
[L7099]              havoc success_s727;
[L7100]              havoc _spender_s745;
[L7101]              havoc _subtractedValue_s745;
[L7102]              havoc success_s745;
[L7103]              havoc __ret_0_owner;
[L7104]              havoc __ret_0_isOwner;
[L7105]              havoc newOwner_s564;
[L7106]              havoc __ret_0_paused;
[L7107]              havoc amount_s764;
[L7108]              havoc account_s779;
[L7109]              havoc amount_s779;
[L7110]              havoc __ret_0_name;
[L7111]              havoc __ret_0_symbol;
[L7112]              havoc __ret_0_decimals;
[L7113]              havoc tmpNow;
[L7114]              havoc gas;
[L7115]              assume gas > 4000000 && gas <= 8000000;
[L7116]              tmpNow := now;
[L7117]              havoc now;
[L7118]              assume now > tmpNow;
[L7119]              assume msgsender_MSG != null;
[L7120]              assume DType[msgsender_MSG] != SafeMath;
[L7121]              assume DType[msgsender_MSG] != IERC20;
[L7122]              assume DType[msgsender_MSG] != StandardToken;
[L7123]              assume DType[msgsender_MSG] != Ownable;
[L7124]              assume DType[msgsender_MSG] != Pausable;
[L7125]              assume DType[msgsender_MSG] != PausableToken;
[L7126]              assume DType[msgsender_MSG] != BurnableToken;
[L7127]              assume DType[msgsender_MSG] != LUCKYToken;
[L7128]              Alloc[msgsender_MSG] := true;
[L7129]  COND TRUE   choice == 19
[L7130]              gas := gas - 21000;
[L7131]  COND FALSE  !(gas >= 0)
[L7268]  RET         call CorralChoice_LUCKYToken(this);

[2020-11-24 20:41:14,642 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:41:14,642 INFO  L82        PathProgramCache]: Analyzing trace with hash -453704264, now seen corresponding path program 1 times
[2020-11-24 20:41:14,642 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:41:14,653 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:41:14,733 INFO  L134       CoverageAnalysis]: Checked inductivity of 386 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 385 trivial. 0 not checked.
[2020-11-24 20:41:14,734 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:41:14,734 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 20:41:14,734 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:41:14,734 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 20:41:14,734 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 20:41:14,734 INFO  L87              Difference]: Start difference. First operand 3617 states and 4216 transitions. cyclomatic complexity: 606 Second operand 7 states.
[2020-11-24 20:41:14,812 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:41:14,812 INFO  L93              Difference]: Finished difference Result 3655 states and 4262 transitions.
[2020-11-24 20:41:14,812 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 20:41:14,812 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3655 states and 4262 transitions.
[2020-11-24 20:41:14,819 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-24 20:41:14,826 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3655 states to 3623 states and 4228 transitions.
[2020-11-24 20:41:14,826 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 851
[2020-11-24 20:41:14,827 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 851
[2020-11-24 20:41:14,827 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3623 states and 4228 transitions.
[2020-11-24 20:41:14,829 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:41:14,829 INFO  L728         BuchiCegarLoop]: Abstraction has 3623 states and 4228 transitions.
[2020-11-24 20:41:14,831 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3623 states and 4228 transitions.
[2020-11-24 20:41:14,847 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3623 to 3617.
[2020-11-24 20:41:14,847 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3617 states.
[2020-11-24 20:41:14,851 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3617 states to 3617 states and 4216 transitions.
[2020-11-24 20:41:14,851 INFO  L751         BuchiCegarLoop]: Abstraction has 3617 states and 4216 transitions.
[2020-11-24 20:41:14,851 INFO  L631         BuchiCegarLoop]: Abstraction has 3617 states and 4216 transitions.
[2020-11-24 20:41:14,851 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-24 20:41:14,851 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3617 states and 4216 transitions.
[2020-11-24 20:41:14,855 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-24 20:41:14,855 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:41:14,855 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:41:14,856 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:41:14,856 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_PausableToken0 := false;
[L2]                 call_transfer_PausableToken0 := false;
[L2]     CALL        call main();
[L7258]              assume null == 0;
[L7259]  CALL        call this := FreshRefGenerator__success();
[L2904]              havoc newRef;
[L2905]              assume Alloc[newRef] == false;
[L2906]              Alloc[newRef] := true;
[L2907]              assume newRef != null;
[L7259]  RET         call this := FreshRefGenerator__success();
[L7260]              assume now >= 0;
[L7261]              assume DType[this] == LUCKYToken;
[L7262]              assume msgvalue_MSG == 0;
[L7263]              gas := gas - 53000;
[L7264]  CALL        call LUCKYToken_LUCKYToken(this, msgsender_MSG, msgvalue_MSG);
[L1849]              havoc __exception;
[L1850]              revert := false;
[L1851]  COND FALSE  !(__exception)
[L1876]  CALL        call LUCKYToken_LUCKYToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4580]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4580]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4581]  COND FALSE  !(revert)
[L4584]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3118]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L3118]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3119]  COND FALSE  !(revert)
[L3122]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3094]              assume msgsender_MSG != null;
[L3095]              Balance[this] := 0;
[L3096]              _balances_StandardToken[this] := zeroRefintArr();
[L3097]              sum__balances0[this] := 0;
[L3098]              _allowed_StandardToken[this] := zeroRefRefintArr();
[L3099]              sum__allowed1[this] := 0;
[L3100]              _totalSupply_StandardToken[this] := 0;
[L3122]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4584]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4585]  COND FALSE  !(revert)
[L4588]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L4588]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4589]  COND FALSE  !(revert)
[L4592]  CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4394]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4394]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4395]  COND FALSE  !(revert)
[L4398]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3118]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L3118]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3119]  COND FALSE  !(revert)
[L3122]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3094]              assume msgsender_MSG != null;
[L3095]              Balance[this] := 0;
[L3096]              _balances_StandardToken[this] := zeroRefintArr();
[L3097]              sum__balances0[this] := 0;
[L3098]              _allowed_StandardToken[this] := zeroRefRefintArr();
[L3099]              sum__allowed1[this] := 0;
[L3100]              _totalSupply_StandardToken[this] := 0;
[L3122]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4398]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4399]  COND FALSE  !(revert)
[L4402]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L4402]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4403]  COND FALSE  !(revert)
[L4406]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4367]              assume msgsender_MSG != null;
[L4368]              Balance[this] := 0;
[L4406]  RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4407]  COND FALSE  !(revert)
[L4592]  RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4593]  COND FALSE  !(revert)
[L4596]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3966]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L3966]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3967]  COND FALSE  !(revert)
[L3970]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3946]              assume msgsender_MSG != null;
[L3947]              Balance[this] := 0;
[L3948]              paused_Pausable[this] := false;
[L3970]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3971]  COND FALSE  !(revert)
[L4596]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4597]  COND FALSE  !(revert)
[L4600]  CALL        call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4084]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4084]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4085]  COND FALSE  !(revert)
[L4088]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3118]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L3118]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3119]  COND FALSE  !(revert)
[L3122]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3094]              assume msgsender_MSG != null;
[L3095]              Balance[this] := 0;
[L3096]              _balances_StandardToken[this] := zeroRefintArr();
[L3097]              sum__balances0[this] := 0;
[L3098]              _allowed_StandardToken[this] := zeroRefRefintArr();
[L3099]              sum__allowed1[this] := 0;
[L3100]              _totalSupply_StandardToken[this] := 0;
[L3122]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4088]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4089]  COND FALSE  !(revert)
[L4092]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L4092]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]  COND FALSE  !(revert)
[L4096]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3966]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L3966]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3967]  COND FALSE  !(revert)
[L3970]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3946]              assume msgsender_MSG != null;
[L3947]              Balance[this] := 0;
[L3948]              paused_Pausable[this] := false;
[L3970]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3971]  COND FALSE  !(revert)
[L4096]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4097]  COND FALSE  !(revert)
[L4100]  CALL        call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4053]              assume msgsender_MSG != null;
[L4054]              Balance[this] := 0;
[L4100]  RET         call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4101]  COND FALSE  !(revert)
[L4600]  RET         call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4601]  COND FALSE  !(revert)
[L4604]  CALL        call LUCKYToken_LUCKYToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4523]              assume msgsender_MSG != null;
[L4524]              Balance[this] := 0;
[L4525]              name_LUCKYToken[this] := -927166810;
[L4526]              symbol_LUCKYToken[this] := -927166810;
[L4527]              decimals_LUCKYToken[this] := 18;
[L4528]              INIT_TOTALSUPPLY_LUCKYToken[this] := 10000000000;
[L4529]              __var_26 := ConstantToRef(625314775344980695514831456764478199936221022047);
[L4530]              _tokenOwner_LUCKYToken[this] := ConstantToRef(625314775344980695514831456764478199936221022047);
[L4532]              __var_25 := decimals_LUCKYToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4533]              _totalSupply_StandardToken[this] := nonlinearMul(INIT_TOTALSUPPLY_LUCKYToken[this], nonlinearPow(10, decimals_LUCKYToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4534]              _owner_Ownable[this] := _tokenOwner_LUCKYToken[this];
[L4535]              assert { :EventEmitted "OwnershipTransferred_LUCKYToken" } true;
[L4536]              sum__balances0[this] := sum__balances0[this] - _balances_StandardToken[this][_owner_Ownable[this]];
[L4537]              _balances_StandardToken[this][_owner_Ownable[this]] := _totalSupply_StandardToken[this];
[L4538]              sum__balances0[this] := sum__balances0[this] + _balances_StandardToken[this][_owner_Ownable[this]];
[L4539]              assert { :EventEmitted "Transfer_LUCKYToken" } true;
[L4604]  RET         call LUCKYToken_LUCKYToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4605]  COND FALSE  !(revert)
[L1876]  RET         call LUCKYToken_LUCKYToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1877]              assume !revert && gas >= 0;
[L7264]  RET         call LUCKYToken_LUCKYToken(this, msgsender_MSG, msgvalue_MSG);
[L7265]              assume !revert && gas >= 0;
[L7268]  CALL        call CorralChoice_LUCKYToken(this);
[L7078]              havoc msgsender_MSG;
[L7079]              havoc msgvalue_MSG;
[L7080]              havoc choice;
[L7081]              havoc _to_s670;
[L7082]              havoc _value_s670;
[L7083]              havoc __ret_0_transfer;
[L7084]              havoc _spender_s709;
[L7085]              havoc _value_s709;
[L7086]              havoc __ret_0_approve;
[L7087]              havoc _from_s691;
[L7088]              havoc _to_s691;
[L7089]              havoc _value_s691;
[L7090]              havoc __ret_0_transferFrom;
[L7091]              havoc __ret_0_totalSupply;
[L7092]              havoc owner_s211;
[L7093]              havoc __ret_0_balanceOf;
[L7094]              havoc owner_s227;
[L7095]              havoc spender_s227;
[L7096]              havoc __ret_0_allowance;
[L7097]              havoc _spender_s727;
[L7098]              havoc _addedValue_s727;
[L7099]              havoc success_s727;
[L7100]              havoc _spender_s745;
[L7101]              havoc _subtractedValue_s745;
[L7102]              havoc success_s745;
[L7103]              havoc __ret_0_owner;
[L7104]              havoc __ret_0_isOwner;
[L7105]              havoc newOwner_s564;
[L7106]              havoc __ret_0_paused;
[L7107]              havoc amount_s764;
[L7108]              havoc account_s779;
[L7109]              havoc amount_s779;
[L7110]              havoc __ret_0_name;
[L7111]              havoc __ret_0_symbol;
[L7112]              havoc __ret_0_decimals;
[L7113]              havoc tmpNow;
[L7114]              havoc gas;
[L7115]              assume gas > 4000000 && gas <= 8000000;
[L7116]              tmpNow := now;
[L7117]              havoc now;
[L7118]              assume now > tmpNow;
[L7119]              assume msgsender_MSG != null;
[L7120]              assume DType[msgsender_MSG] != SafeMath;
[L7121]              assume DType[msgsender_MSG] != IERC20;
[L7122]              assume DType[msgsender_MSG] != StandardToken;
[L7123]              assume DType[msgsender_MSG] != Ownable;
[L7124]              assume DType[msgsender_MSG] != Pausable;
[L7125]              assume DType[msgsender_MSG] != PausableToken;
[L7126]              assume DType[msgsender_MSG] != BurnableToken;
[L7127]              assume DType[msgsender_MSG] != LUCKYToken;
[L7128]              Alloc[msgsender_MSG] := true;
[L7129]  COND FALSE  !(choice == 19)
[L7136]  COND FALSE  !(choice == 18)
[L7143]  COND FALSE  !(choice == 17)
[L7150]  COND FALSE  !(choice == 16)
[L7156]  COND FALSE  !(choice == 15)
[L7162]  COND FALSE  !(choice == 14)
[L7168]  COND FALSE  !(choice == 13)
[L7175]  COND FALSE  !(choice == 12)
[L7182]  COND FALSE  !(choice == 11)
[L7188]  COND FALSE  !(choice == 10)
[L7194]  COND FALSE  !(choice == 9)
[L7200]  COND FALSE  !(choice == 8)
[L7206]  COND FALSE  !(choice == 7)
[L7212]  COND TRUE   choice == 6
[L7213]              gas := gas - 21000;
[L7214]  COND TRUE   gas >= 0
[L7215]              assume msgvalue_MSG == 0;
[L7216]  CALL        call unpause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L1143]              havoc __exception;
[L1144]              revert := false;
[L1145]  COND FALSE  !(__exception)
[L1170]  CALL        call unpause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4018]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6200]  COND TRUE   DType[this] == LUCKYToken
[L6201]  CALL        call __var_13 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3835]              __ret_0_ := msgsender_MSG == _owner_Ownable[this];
[L6201]  RET         call __var_13 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6202]  COND FALSE  !(revert)
[L6228]  COND FALSE  !(!__var_13)
[L4018]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4019]  COND FALSE  !(revert)
[L4022]  CALL        call whenPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6260]  COND FALSE  !(!paused_Pausable[this])
[L4022]  RET         call whenPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4023]  COND FALSE  !(revert)
[L4026]              paused_Pausable[this] := false;
[L4027]              assert { :EventEmitted "Unpause_Pausable" } true;
[L1170]  RET         call unpause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L1171]              assume !revert && gas >= 0;
[L7216]  RET         call unpause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L7268]  RET         call CorralChoice_LUCKYToken(this);
[L7268]  CALL        call CorralChoice_LUCKYToken(this);
[L7078]              havoc msgsender_MSG;
[L7079]              havoc msgvalue_MSG;
[L7080]              havoc choice;
[L7081]              havoc _to_s670;
[L7082]              havoc _value_s670;
[L7083]              havoc __ret_0_transfer;
[L7084]              havoc _spender_s709;
[L7085]              havoc _value_s709;
[L7086]              havoc __ret_0_approve;
[L7087]              havoc _from_s691;
[L7088]              havoc _to_s691;
[L7089]              havoc _value_s691;
[L7090]              havoc __ret_0_transferFrom;
[L7091]              havoc __ret_0_totalSupply;
[L7092]              havoc owner_s211;
[L7093]              havoc __ret_0_balanceOf;
[L7094]              havoc owner_s227;
[L7095]              havoc spender_s227;
[L7096]              havoc __ret_0_allowance;
[L7097]              havoc _spender_s727;
[L7098]              havoc _addedValue_s727;
[L7099]              havoc success_s727;
[L7100]              havoc _spender_s745;
[L7101]              havoc _subtractedValue_s745;
[L7102]              havoc success_s745;
[L7103]              havoc __ret_0_owner;
[L7104]              havoc __ret_0_isOwner;
[L7105]              havoc newOwner_s564;
[L7106]              havoc __ret_0_paused;
[L7107]              havoc amount_s764;
[L7108]              havoc account_s779;
[L7109]              havoc amount_s779;
[L7110]              havoc __ret_0_name;
[L7111]              havoc __ret_0_symbol;
[L7112]              havoc __ret_0_decimals;
[L7113]              havoc tmpNow;
[L7114]              havoc gas;
[L7115]              assume gas > 4000000 && gas <= 8000000;
[L7116]              tmpNow := now;
[L7117]              havoc now;
[L7118]              assume now > tmpNow;
[L7119]              assume msgsender_MSG != null;
[L7120]              assume DType[msgsender_MSG] != SafeMath;
[L7121]              assume DType[msgsender_MSG] != IERC20;
[L7122]              assume DType[msgsender_MSG] != StandardToken;
[L7123]              assume DType[msgsender_MSG] != Ownable;
[L7124]              assume DType[msgsender_MSG] != Pausable;
[L7125]              assume DType[msgsender_MSG] != PausableToken;
[L7126]              assume DType[msgsender_MSG] != BurnableToken;
[L7127]              assume DType[msgsender_MSG] != LUCKYToken;
[L7128]              Alloc[msgsender_MSG] := true;
[L7129]  COND TRUE   choice == 19
[L7130]              gas := gas - 21000;
[L7131]  COND TRUE   gas >= 0
[L7132]              assume _value_s670 >= 0 && _value_s670 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7133]              assume msgvalue_MSG == 0;
[L7134]  CALL        call __ret_0_transfer := transfer~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s670 && _value_s670 <= _balances_StandardToken[this][msgsender_MSG]) && _value_s670 >= 0) && _value_s670 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][_to_s670] >= 0) && _balances_StandardToken[this][_to_s670] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][msgsender_MSG] >= 0) && _balances_StandardToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_PausableToken0 := true;
[L2]                 call_transfer_PausableToken0 := false;
[L2]                 revert := revert_hold;
[L1329]              havoc __exception;
[L1330]              revert := false;
[L1331]  COND TRUE   __exception
[L1332]              __tmp__Balance := Balance;
[L1333]              __tmp__DType := DType;
[L1334]              __tmp__Alloc := Alloc;
[L1335]              __tmp__balance_ADDR := balance_ADDR;
[L1336]              __tmp__M_Ref_int := M_Ref_int;
[L1337]              __tmp__sum__balances0 := sum__balances0;
[L1338]              __tmp__alloc__allowed_StandardToken_lvl0 := alloc__allowed_StandardToken_lvl0;
[L1339]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1340]              __tmp__sum__allowed1 := sum__allowed1;
[L1341]              __tmp__Length := Length;
[L1342]              __tmp__now := now;
[L1343]              __tmp___balances_StandardToken := _balances_StandardToken;
[L1344]              __tmp___allowed_StandardToken := _allowed_StandardToken;
[L1345]              __tmp___totalSupply_StandardToken := _totalSupply_StandardToken;
[L1346]              __tmp___owner_Ownable := _owner_Ownable;
[L1347]              __tmp__paused_Pausable := paused_Pausable;
[L1348]              __tmp__name_LUCKYToken := name_LUCKYToken;
[L1349]              __tmp__symbol_LUCKYToken := symbol_LUCKYToken;
[L1350]              __tmp__decimals_LUCKYToken := decimals_LUCKYToken;
[L1351]              __tmp__INIT_TOTALSUPPLY_LUCKYToken := INIT_TOTALSUPPLY_LUCKYToken;
[L1352]              __tmp___tokenOwner_LUCKYToken := _tokenOwner_LUCKYToken;
[L1353]  CALL        call __ret_0_ := transfer~address~uint256_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L4110]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6236]  COND TRUE   !!__tmp__paused_Pausable[this]
[L6237]              revert := true;
[L4110]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4111]  COND TRUE   revert
[L1353]  RET         call __ret_0_ := transfer~address~uint256_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L1354]              assume revert || gas < 0;
[L7134]  RET         call __ret_0_transfer := transfer~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L7268]  RET         call CorralChoice_LUCKYToken(this);

Loop:
[L7268]  CALL        call CorralChoice_LUCKYToken(this);
[L7078]              havoc msgsender_MSG;
[L7079]              havoc msgvalue_MSG;
[L7080]              havoc choice;
[L7081]              havoc _to_s670;
[L7082]              havoc _value_s670;
[L7083]              havoc __ret_0_transfer;
[L7084]              havoc _spender_s709;
[L7085]              havoc _value_s709;
[L7086]              havoc __ret_0_approve;
[L7087]              havoc _from_s691;
[L7088]              havoc _to_s691;
[L7089]              havoc _value_s691;
[L7090]              havoc __ret_0_transferFrom;
[L7091]              havoc __ret_0_totalSupply;
[L7092]              havoc owner_s211;
[L7093]              havoc __ret_0_balanceOf;
[L7094]              havoc owner_s227;
[L7095]              havoc spender_s227;
[L7096]              havoc __ret_0_allowance;
[L7097]              havoc _spender_s727;
[L7098]              havoc _addedValue_s727;
[L7099]              havoc success_s727;
[L7100]              havoc _spender_s745;
[L7101]              havoc _subtractedValue_s745;
[L7102]              havoc success_s745;
[L7103]              havoc __ret_0_owner;
[L7104]              havoc __ret_0_isOwner;
[L7105]              havoc newOwner_s564;
[L7106]              havoc __ret_0_paused;
[L7107]              havoc amount_s764;
[L7108]              havoc account_s779;
[L7109]              havoc amount_s779;
[L7110]              havoc __ret_0_name;
[L7111]              havoc __ret_0_symbol;
[L7112]              havoc __ret_0_decimals;
[L7113]              havoc tmpNow;
[L7114]              havoc gas;
[L7115]              assume gas > 4000000 && gas <= 8000000;
[L7116]              tmpNow := now;
[L7117]              havoc now;
[L7118]              assume now > tmpNow;
[L7119]              assume msgsender_MSG != null;
[L7120]              assume DType[msgsender_MSG] != SafeMath;
[L7121]              assume DType[msgsender_MSG] != IERC20;
[L7122]              assume DType[msgsender_MSG] != StandardToken;
[L7123]              assume DType[msgsender_MSG] != Ownable;
[L7124]              assume DType[msgsender_MSG] != Pausable;
[L7125]              assume DType[msgsender_MSG] != PausableToken;
[L7126]              assume DType[msgsender_MSG] != BurnableToken;
[L7127]              assume DType[msgsender_MSG] != LUCKYToken;
[L7128]              Alloc[msgsender_MSG] := true;
[L7129]  COND TRUE   choice == 19
[L7130]              gas := gas - 21000;
[L7131]  COND FALSE  !(gas >= 0)
[L7268]  RET         call CorralChoice_LUCKYToken(this);

[2020-11-24 20:41:14,859 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:41:14,860 INFO  L82        PathProgramCache]: Analyzing trace with hash -1428135347, now seen corresponding path program 1 times
[2020-11-24 20:41:14,860 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:41:14,872 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:41:14,969 INFO  L134       CoverageAnalysis]: Checked inductivity of 386 backedges. 7 proven. 53 refuted. 0 times theorem prover too weak. 326 trivial. 0 not checked.
[2020-11-24 20:41:14,969 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 20:41:14,969 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [14] total 14
[2020-11-24 20:41:14,969 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:41:14,970 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-24 20:41:14,970 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=155, Unknown=0, NotChecked=0, Total=182
[2020-11-24 20:41:14,970 INFO  L87              Difference]: Start difference. First operand 3617 states and 4216 transitions. cyclomatic complexity: 606 Second operand 14 states.
[2020-11-24 20:41:16,778 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:41:16,778 INFO  L93              Difference]: Finished difference Result 3621 states and 4222 transitions.
[2020-11-24 20:41:16,778 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-11-24 20:41:16,779 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3621 states and 4222 transitions.
[2020-11-24 20:41:16,786 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-24 20:41:16,794 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3621 states to 3621 states and 4222 transitions.
[2020-11-24 20:41:16,794 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 853
[2020-11-24 20:41:16,794 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 853
[2020-11-24 20:41:16,794 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3621 states and 4222 transitions.
[2020-11-24 20:41:16,796 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:41:16,796 INFO  L728         BuchiCegarLoop]: Abstraction has 3621 states and 4222 transitions.
[2020-11-24 20:41:16,799 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3621 states and 4222 transitions.
[2020-11-24 20:41:16,814 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3621 to 3619.
[2020-11-24 20:41:16,814 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3619 states.
[2020-11-24 20:41:16,818 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3619 states to 3619 states and 4219 transitions.
[2020-11-24 20:41:16,818 INFO  L751         BuchiCegarLoop]: Abstraction has 3619 states and 4219 transitions.
[2020-11-24 20:41:16,818 INFO  L631         BuchiCegarLoop]: Abstraction has 3619 states and 4219 transitions.
[2020-11-24 20:41:16,818 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-24 20:41:16,818 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3619 states and 4219 transitions.
[2020-11-24 20:41:16,822 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-24 20:41:16,822 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:41:16,822 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:41:16,823 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:41:16,823 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_PausableToken0 := false;
[L2]                 call_transfer_PausableToken0 := false;
[L2]     CALL        call main();
[L7258]              assume null == 0;
[L7259]  CALL        call this := FreshRefGenerator__success();
[L2904]              havoc newRef;
[L2905]              assume Alloc[newRef] == false;
[L2906]              Alloc[newRef] := true;
[L2907]              assume newRef != null;
[L7259]  RET         call this := FreshRefGenerator__success();
[L7260]              assume now >= 0;
[L7261]              assume DType[this] == LUCKYToken;
[L7262]              assume msgvalue_MSG == 0;
[L7263]              gas := gas - 53000;
[L7264]  CALL        call LUCKYToken_LUCKYToken(this, msgsender_MSG, msgvalue_MSG);
[L1849]              havoc __exception;
[L1850]              revert := false;
[L1851]  COND FALSE  !(__exception)
[L1876]  CALL        call LUCKYToken_LUCKYToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4580]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4580]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4581]  COND FALSE  !(revert)
[L4584]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3118]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L3118]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3119]  COND FALSE  !(revert)
[L3122]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3094]              assume msgsender_MSG != null;
[L3095]              Balance[this] := 0;
[L3096]              _balances_StandardToken[this] := zeroRefintArr();
[L3097]              sum__balances0[this] := 0;
[L3098]              _allowed_StandardToken[this] := zeroRefRefintArr();
[L3099]              sum__allowed1[this] := 0;
[L3100]              _totalSupply_StandardToken[this] := 0;
[L3122]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4584]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4585]  COND FALSE  !(revert)
[L4588]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L4588]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4589]  COND FALSE  !(revert)
[L4592]  CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4394]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4394]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4395]  COND FALSE  !(revert)
[L4398]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3118]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L3118]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3119]  COND FALSE  !(revert)
[L3122]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3094]              assume msgsender_MSG != null;
[L3095]              Balance[this] := 0;
[L3096]              _balances_StandardToken[this] := zeroRefintArr();
[L3097]              sum__balances0[this] := 0;
[L3098]              _allowed_StandardToken[this] := zeroRefRefintArr();
[L3099]              sum__allowed1[this] := 0;
[L3100]              _totalSupply_StandardToken[this] := 0;
[L3122]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4398]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4399]  COND FALSE  !(revert)
[L4402]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L4402]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4403]  COND FALSE  !(revert)
[L4406]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4367]              assume msgsender_MSG != null;
[L4368]              Balance[this] := 0;
[L4406]  RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4407]  COND FALSE  !(revert)
[L4592]  RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4593]  COND FALSE  !(revert)
[L4596]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3966]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L3966]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3967]  COND FALSE  !(revert)
[L3970]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3946]              assume msgsender_MSG != null;
[L3947]              Balance[this] := 0;
[L3948]              paused_Pausable[this] := false;
[L3970]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3971]  COND FALSE  !(revert)
[L4596]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4597]  COND FALSE  !(revert)
[L4600]  CALL        call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4084]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4084]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4085]  COND FALSE  !(revert)
[L4088]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3118]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L3118]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3119]  COND FALSE  !(revert)
[L3122]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3094]              assume msgsender_MSG != null;
[L3095]              Balance[this] := 0;
[L3096]              _balances_StandardToken[this] := zeroRefintArr();
[L3097]              sum__balances0[this] := 0;
[L3098]              _allowed_StandardToken[this] := zeroRefRefintArr();
[L3099]              sum__allowed1[this] := 0;
[L3100]              _totalSupply_StandardToken[this] := 0;
[L3122]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4088]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4089]  COND FALSE  !(revert)
[L4092]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L4092]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]  COND FALSE  !(revert)
[L4096]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3966]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L3966]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3967]  COND FALSE  !(revert)
[L3970]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3946]              assume msgsender_MSG != null;
[L3947]              Balance[this] := 0;
[L3948]              paused_Pausable[this] := false;
[L3970]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3971]  COND FALSE  !(revert)
[L4096]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4097]  COND FALSE  !(revert)
[L4100]  CALL        call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4053]              assume msgsender_MSG != null;
[L4054]              Balance[this] := 0;
[L4100]  RET         call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4101]  COND FALSE  !(revert)
[L4600]  RET         call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4601]  COND FALSE  !(revert)
[L4604]  CALL        call LUCKYToken_LUCKYToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4523]              assume msgsender_MSG != null;
[L4524]              Balance[this] := 0;
[L4525]              name_LUCKYToken[this] := -927166810;
[L4526]              symbol_LUCKYToken[this] := -927166810;
[L4527]              decimals_LUCKYToken[this] := 18;
[L4528]              INIT_TOTALSUPPLY_LUCKYToken[this] := 10000000000;
[L4529]              __var_26 := ConstantToRef(625314775344980695514831456764478199936221022047);
[L4530]              _tokenOwner_LUCKYToken[this] := ConstantToRef(625314775344980695514831456764478199936221022047);
[L4532]              __var_25 := decimals_LUCKYToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4533]              _totalSupply_StandardToken[this] := nonlinearMul(INIT_TOTALSUPPLY_LUCKYToken[this], nonlinearPow(10, decimals_LUCKYToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4534]              _owner_Ownable[this] := _tokenOwner_LUCKYToken[this];
[L4535]              assert { :EventEmitted "OwnershipTransferred_LUCKYToken" } true;
[L4536]              sum__balances0[this] := sum__balances0[this] - _balances_StandardToken[this][_owner_Ownable[this]];
[L4537]              _balances_StandardToken[this][_owner_Ownable[this]] := _totalSupply_StandardToken[this];
[L4538]              sum__balances0[this] := sum__balances0[this] + _balances_StandardToken[this][_owner_Ownable[this]];
[L4539]              assert { :EventEmitted "Transfer_LUCKYToken" } true;
[L4604]  RET         call LUCKYToken_LUCKYToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4605]  COND FALSE  !(revert)
[L1876]  RET         call LUCKYToken_LUCKYToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1877]              assume !revert && gas >= 0;
[L7264]  RET         call LUCKYToken_LUCKYToken(this, msgsender_MSG, msgvalue_MSG);
[L7265]              assume !revert && gas >= 0;
[L7268]  CALL        call CorralChoice_LUCKYToken(this);
[L7078]              havoc msgsender_MSG;
[L7079]              havoc msgvalue_MSG;
[L7080]              havoc choice;
[L7081]              havoc _to_s670;
[L7082]              havoc _value_s670;
[L7083]              havoc __ret_0_transfer;
[L7084]              havoc _spender_s709;
[L7085]              havoc _value_s709;
[L7086]              havoc __ret_0_approve;
[L7087]              havoc _from_s691;
[L7088]              havoc _to_s691;
[L7089]              havoc _value_s691;
[L7090]              havoc __ret_0_transferFrom;
[L7091]              havoc __ret_0_totalSupply;
[L7092]              havoc owner_s211;
[L7093]              havoc __ret_0_balanceOf;
[L7094]              havoc owner_s227;
[L7095]              havoc spender_s227;
[L7096]              havoc __ret_0_allowance;
[L7097]              havoc _spender_s727;
[L7098]              havoc _addedValue_s727;
[L7099]              havoc success_s727;
[L7100]              havoc _spender_s745;
[L7101]              havoc _subtractedValue_s745;
[L7102]              havoc success_s745;
[L7103]              havoc __ret_0_owner;
[L7104]              havoc __ret_0_isOwner;
[L7105]              havoc newOwner_s564;
[L7106]              havoc __ret_0_paused;
[L7107]              havoc amount_s764;
[L7108]              havoc account_s779;
[L7109]              havoc amount_s779;
[L7110]              havoc __ret_0_name;
[L7111]              havoc __ret_0_symbol;
[L7112]              havoc __ret_0_decimals;
[L7113]              havoc tmpNow;
[L7114]              havoc gas;
[L7115]              assume gas > 4000000 && gas <= 8000000;
[L7116]              tmpNow := now;
[L7117]              havoc now;
[L7118]              assume now > tmpNow;
[L7119]              assume msgsender_MSG != null;
[L7120]              assume DType[msgsender_MSG] != SafeMath;
[L7121]              assume DType[msgsender_MSG] != IERC20;
[L7122]              assume DType[msgsender_MSG] != StandardToken;
[L7123]              assume DType[msgsender_MSG] != Ownable;
[L7124]              assume DType[msgsender_MSG] != Pausable;
[L7125]              assume DType[msgsender_MSG] != PausableToken;
[L7126]              assume DType[msgsender_MSG] != BurnableToken;
[L7127]              assume DType[msgsender_MSG] != LUCKYToken;
[L7128]              Alloc[msgsender_MSG] := true;
[L7129]  COND FALSE  !(choice == 19)
[L7136]  COND FALSE  !(choice == 18)
[L7143]  COND FALSE  !(choice == 17)
[L7150]  COND FALSE  !(choice == 16)
[L7156]  COND FALSE  !(choice == 15)
[L7162]  COND FALSE  !(choice == 14)
[L7168]  COND FALSE  !(choice == 13)
[L7175]  COND FALSE  !(choice == 12)
[L7182]  COND FALSE  !(choice == 11)
[L7188]  COND FALSE  !(choice == 10)
[L7194]  COND FALSE  !(choice == 9)
[L7200]  COND FALSE  !(choice == 8)
[L7206]  COND TRUE   choice == 7
[L7207]              gas := gas - 21000;
[L7208]  COND TRUE   gas >= 0
[L7209]              assume msgvalue_MSG == 0;
[L7210]  CALL        call pause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L1084]              havoc __exception;
[L1085]              revert := false;
[L1086]  COND FALSE  !(__exception)
[L1111]  CALL        call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3991]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6200]  COND FALSE  !(DType[this] == LUCKYToken)
[L6205]  COND FALSE  !(DType[this] == BurnableToken)
[L6210]  COND FALSE  !(DType[this] == PausableToken)
[L6215]  COND TRUE   DType[this] == Pausable
[L6216]  CALL        call __var_13 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3835]              __ret_0_ := msgsender_MSG == _owner_Ownable[this];
[L6216]  RET         call __var_13 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6217]  COND FALSE  !(revert)
[L6228]  COND FALSE  !(!__var_13)
[L3991]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3992]  COND FALSE  !(revert)
[L3995]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6244]  COND FALSE  !(!!paused_Pausable[this])
[L3995]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3996]  COND FALSE  !(revert)
[L3999]              paused_Pausable[this] := true;
[L4000]              assert { :EventEmitted "Pause_Pausable" } true;
[L1111]  RET         call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]              assume !revert && gas >= 0;
[L7210]  RET         call pause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L7268]  RET         call CorralChoice_LUCKYToken(this);
[L7268]  CALL        call CorralChoice_LUCKYToken(this);
[L7078]              havoc msgsender_MSG;
[L7079]              havoc msgvalue_MSG;
[L7080]              havoc choice;
[L7081]              havoc _to_s670;
[L7082]              havoc _value_s670;
[L7083]              havoc __ret_0_transfer;
[L7084]              havoc _spender_s709;
[L7085]              havoc _value_s709;
[L7086]              havoc __ret_0_approve;
[L7087]              havoc _from_s691;
[L7088]              havoc _to_s691;
[L7089]              havoc _value_s691;
[L7090]              havoc __ret_0_transferFrom;
[L7091]              havoc __ret_0_totalSupply;
[L7092]              havoc owner_s211;
[L7093]              havoc __ret_0_balanceOf;
[L7094]              havoc owner_s227;
[L7095]              havoc spender_s227;
[L7096]              havoc __ret_0_allowance;
[L7097]              havoc _spender_s727;
[L7098]              havoc _addedValue_s727;
[L7099]              havoc success_s727;
[L7100]              havoc _spender_s745;
[L7101]              havoc _subtractedValue_s745;
[L7102]              havoc success_s745;
[L7103]              havoc __ret_0_owner;
[L7104]              havoc __ret_0_isOwner;
[L7105]              havoc newOwner_s564;
[L7106]              havoc __ret_0_paused;
[L7107]              havoc amount_s764;
[L7108]              havoc account_s779;
[L7109]              havoc amount_s779;
[L7110]              havoc __ret_0_name;
[L7111]              havoc __ret_0_symbol;
[L7112]              havoc __ret_0_decimals;
[L7113]              havoc tmpNow;
[L7114]              havoc gas;
[L7115]              assume gas > 4000000 && gas <= 8000000;
[L7116]              tmpNow := now;
[L7117]              havoc now;
[L7118]              assume now > tmpNow;
[L7119]              assume msgsender_MSG != null;
[L7120]              assume DType[msgsender_MSG] != SafeMath;
[L7121]              assume DType[msgsender_MSG] != IERC20;
[L7122]              assume DType[msgsender_MSG] != StandardToken;
[L7123]              assume DType[msgsender_MSG] != Ownable;
[L7124]              assume DType[msgsender_MSG] != Pausable;
[L7125]              assume DType[msgsender_MSG] != PausableToken;
[L7126]              assume DType[msgsender_MSG] != BurnableToken;
[L7127]              assume DType[msgsender_MSG] != LUCKYToken;
[L7128]              Alloc[msgsender_MSG] := true;
[L7129]  COND TRUE   choice == 19
[L7130]              gas := gas - 21000;
[L7131]  COND TRUE   gas >= 0
[L7132]              assume _value_s670 >= 0 && _value_s670 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7133]              assume msgvalue_MSG == 0;
[L7134]  CALL        call __ret_0_transfer := transfer~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s670 && _value_s670 <= _balances_StandardToken[this][msgsender_MSG]) && _value_s670 >= 0) && _value_s670 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][_to_s670] >= 0) && _balances_StandardToken[this][_to_s670] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][msgsender_MSG] >= 0) && _balances_StandardToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_PausableToken0 := true;
[L2]                 call_transfer_PausableToken0 := false;
[L2]                 revert := revert_hold;
[L1329]              havoc __exception;
[L1330]              revert := false;
[L1331]  COND TRUE   __exception
[L1332]              __tmp__Balance := Balance;
[L1333]              __tmp__DType := DType;
[L1334]              __tmp__Alloc := Alloc;
[L1335]              __tmp__balance_ADDR := balance_ADDR;
[L1336]              __tmp__M_Ref_int := M_Ref_int;
[L1337]              __tmp__sum__balances0 := sum__balances0;
[L1338]              __tmp__alloc__allowed_StandardToken_lvl0 := alloc__allowed_StandardToken_lvl0;
[L1339]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1340]              __tmp__sum__allowed1 := sum__allowed1;
[L1341]              __tmp__Length := Length;
[L1342]              __tmp__now := now;
[L1343]              __tmp___balances_StandardToken := _balances_StandardToken;
[L1344]              __tmp___allowed_StandardToken := _allowed_StandardToken;
[L1345]              __tmp___totalSupply_StandardToken := _totalSupply_StandardToken;
[L1346]              __tmp___owner_Ownable := _owner_Ownable;
[L1347]              __tmp__paused_Pausable := paused_Pausable;
[L1348]              __tmp__name_LUCKYToken := name_LUCKYToken;
[L1349]              __tmp__symbol_LUCKYToken := symbol_LUCKYToken;
[L1350]              __tmp__decimals_LUCKYToken := decimals_LUCKYToken;
[L1351]              __tmp__INIT_TOTALSUPPLY_LUCKYToken := INIT_TOTALSUPPLY_LUCKYToken;
[L1352]              __tmp___tokenOwner_LUCKYToken := _tokenOwner_LUCKYToken;
[L1353]  CALL        call __ret_0_ := transfer~address~uint256_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L4110]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6236]  COND TRUE   !!__tmp__paused_Pausable[this]
[L6237]              revert := true;
[L4110]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4111]  COND TRUE   revert
[L1353]  RET         call __ret_0_ := transfer~address~uint256_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L1354]              assume revert || gas < 0;
[L7134]  RET         call __ret_0_transfer := transfer~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L7268]  RET         call CorralChoice_LUCKYToken(this);

Loop:
[L7268]  CALL        call CorralChoice_LUCKYToken(this);
[L7078]              havoc msgsender_MSG;
[L7079]              havoc msgvalue_MSG;
[L7080]              havoc choice;
[L7081]              havoc _to_s670;
[L7082]              havoc _value_s670;
[L7083]              havoc __ret_0_transfer;
[L7084]              havoc _spender_s709;
[L7085]              havoc _value_s709;
[L7086]              havoc __ret_0_approve;
[L7087]              havoc _from_s691;
[L7088]              havoc _to_s691;
[L7089]              havoc _value_s691;
[L7090]              havoc __ret_0_transferFrom;
[L7091]              havoc __ret_0_totalSupply;
[L7092]              havoc owner_s211;
[L7093]              havoc __ret_0_balanceOf;
[L7094]              havoc owner_s227;
[L7095]              havoc spender_s227;
[L7096]              havoc __ret_0_allowance;
[L7097]              havoc _spender_s727;
[L7098]              havoc _addedValue_s727;
[L7099]              havoc success_s727;
[L7100]              havoc _spender_s745;
[L7101]              havoc _subtractedValue_s745;
[L7102]              havoc success_s745;
[L7103]              havoc __ret_0_owner;
[L7104]              havoc __ret_0_isOwner;
[L7105]              havoc newOwner_s564;
[L7106]              havoc __ret_0_paused;
[L7107]              havoc amount_s764;
[L7108]              havoc account_s779;
[L7109]              havoc amount_s779;
[L7110]              havoc __ret_0_name;
[L7111]              havoc __ret_0_symbol;
[L7112]              havoc __ret_0_decimals;
[L7113]              havoc tmpNow;
[L7114]              havoc gas;
[L7115]              assume gas > 4000000 && gas <= 8000000;
[L7116]              tmpNow := now;
[L7117]              havoc now;
[L7118]              assume now > tmpNow;
[L7119]              assume msgsender_MSG != null;
[L7120]              assume DType[msgsender_MSG] != SafeMath;
[L7121]              assume DType[msgsender_MSG] != IERC20;
[L7122]              assume DType[msgsender_MSG] != StandardToken;
[L7123]              assume DType[msgsender_MSG] != Ownable;
[L7124]              assume DType[msgsender_MSG] != Pausable;
[L7125]              assume DType[msgsender_MSG] != PausableToken;
[L7126]              assume DType[msgsender_MSG] != BurnableToken;
[L7127]              assume DType[msgsender_MSG] != LUCKYToken;
[L7128]              Alloc[msgsender_MSG] := true;
[L7129]  COND FALSE  !(choice == 19)
[L7136]  COND FALSE  !(choice == 18)
[L7143]  COND FALSE  !(choice == 17)
[L7150]  COND FALSE  !(choice == 16)
[L7156]  COND FALSE  !(choice == 15)
[L7162]  COND FALSE  !(choice == 14)
[L7168]  COND FALSE  !(choice == 13)
[L7175]  COND FALSE  !(choice == 12)
[L7182]  COND FALSE  !(choice == 11)
[L7188]  COND FALSE  !(choice == 10)
[L7194]  COND FALSE  !(choice == 9)
[L7200]  COND FALSE  !(choice == 8)
[L7206]  COND TRUE   choice == 7
[L7207]              gas := gas - 21000;
[L7208]  COND TRUE   gas >= 0
[L7209]              assume msgvalue_MSG == 0;
[L7210]  CALL        call pause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L1084]              havoc __exception;
[L1085]              revert := false;
[L1086]  COND FALSE  !(__exception)
[L1111]  CALL        call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3991]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6200]  COND FALSE  !(DType[this] == LUCKYToken)
[L6205]  COND FALSE  !(DType[this] == BurnableToken)
[L6210]  COND FALSE  !(DType[this] == PausableToken)
[L6215]  COND TRUE   DType[this] == Pausable
[L6216]  CALL        call __var_13 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3835]              __ret_0_ := msgsender_MSG == _owner_Ownable[this];
[L6216]  RET         call __var_13 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6217]  COND FALSE  !(revert)
[L6228]  COND FALSE  !(!__var_13)
[L3991]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3992]  COND FALSE  !(revert)
[L3995]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6244]  COND FALSE  !(!!paused_Pausable[this])
[L3995]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3996]  COND FALSE  !(revert)
[L3999]              paused_Pausable[this] := true;
[L4000]              assert { :EventEmitted "Pause_Pausable" } true;
[L1111]  RET         call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]              assume !revert && gas >= 0;
[L7210]  RET         call pause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L7268]  RET         call CorralChoice_LUCKYToken(this);

[2020-11-24 20:41:16,827 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:41:16,827 INFO  L82        PathProgramCache]: Analyzing trace with hash -1790929379, now seen corresponding path program 1 times
[2020-11-24 20:41:16,828 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:41:16,838 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:41:16,943 INFO  L134       CoverageAnalysis]: Checked inductivity of 386 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 385 trivial. 0 not checked.
[2020-11-24 20:41:16,943 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:41:16,943 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 20:41:16,944 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:41:16,944 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 20:41:16,944 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 20:41:16,944 INFO  L87              Difference]: Start difference. First operand 3619 states and 4219 transitions. cyclomatic complexity: 607 Second operand 7 states.
[2020-11-24 20:41:17,022 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:41:17,022 INFO  L93              Difference]: Finished difference Result 3657 states and 4263 transitions.
[2020-11-24 20:41:17,022 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 20:41:17,022 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3657 states and 4263 transitions.
[2020-11-24 20:41:17,028 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-24 20:41:17,036 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3657 states to 3625 states and 4229 transitions.
[2020-11-24 20:41:17,036 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 853
[2020-11-24 20:41:17,036 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 853
[2020-11-24 20:41:17,036 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3625 states and 4229 transitions.
[2020-11-24 20:41:17,038 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:41:17,038 INFO  L728         BuchiCegarLoop]: Abstraction has 3625 states and 4229 transitions.
[2020-11-24 20:41:17,041 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3625 states and 4229 transitions.
[2020-11-24 20:41:17,057 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3625 to 3625.
[2020-11-24 20:41:17,057 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3625 states.
[2020-11-24 20:41:17,060 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3625 states to 3625 states and 4229 transitions.
[2020-11-24 20:41:17,060 INFO  L751         BuchiCegarLoop]: Abstraction has 3625 states and 4229 transitions.
[2020-11-24 20:41:17,061 INFO  L631         BuchiCegarLoop]: Abstraction has 3625 states and 4229 transitions.
[2020-11-24 20:41:17,061 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-24 20:41:17,061 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3625 states and 4229 transitions.
[2020-11-24 20:41:17,064 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-24 20:41:17,064 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:41:17,064 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:41:17,065 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:41:17,065 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_PausableToken0 := false;
[L2]                 call_transfer_PausableToken0 := false;
[L2]     CALL        call main();
[L7258]              assume null == 0;
[L7259]  CALL        call this := FreshRefGenerator__success();
[L2904]              havoc newRef;
[L2905]              assume Alloc[newRef] == false;
[L2906]              Alloc[newRef] := true;
[L2907]              assume newRef != null;
[L7259]  RET         call this := FreshRefGenerator__success();
[L7260]              assume now >= 0;
[L7261]              assume DType[this] == LUCKYToken;
[L7262]              assume msgvalue_MSG == 0;
[L7263]              gas := gas - 53000;
[L7264]  CALL        call LUCKYToken_LUCKYToken(this, msgsender_MSG, msgvalue_MSG);
[L1849]              havoc __exception;
[L1850]              revert := false;
[L1851]  COND FALSE  !(__exception)
[L1876]  CALL        call LUCKYToken_LUCKYToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4580]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4580]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4581]  COND FALSE  !(revert)
[L4584]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3118]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L3118]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3119]  COND FALSE  !(revert)
[L3122]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3094]              assume msgsender_MSG != null;
[L3095]              Balance[this] := 0;
[L3096]              _balances_StandardToken[this] := zeroRefintArr();
[L3097]              sum__balances0[this] := 0;
[L3098]              _allowed_StandardToken[this] := zeroRefRefintArr();
[L3099]              sum__allowed1[this] := 0;
[L3100]              _totalSupply_StandardToken[this] := 0;
[L3122]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4584]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4585]  COND FALSE  !(revert)
[L4588]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L4588]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4589]  COND FALSE  !(revert)
[L4592]  CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4394]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4394]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4395]  COND FALSE  !(revert)
[L4398]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3118]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L3118]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3119]  COND FALSE  !(revert)
[L3122]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3094]              assume msgsender_MSG != null;
[L3095]              Balance[this] := 0;
[L3096]              _balances_StandardToken[this] := zeroRefintArr();
[L3097]              sum__balances0[this] := 0;
[L3098]              _allowed_StandardToken[this] := zeroRefRefintArr();
[L3099]              sum__allowed1[this] := 0;
[L3100]              _totalSupply_StandardToken[this] := 0;
[L3122]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4398]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4399]  COND FALSE  !(revert)
[L4402]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L4402]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4403]  COND FALSE  !(revert)
[L4406]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4367]              assume msgsender_MSG != null;
[L4368]              Balance[this] := 0;
[L4406]  RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4407]  COND FALSE  !(revert)
[L4592]  RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4593]  COND FALSE  !(revert)
[L4596]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3966]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L3966]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3967]  COND FALSE  !(revert)
[L3970]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3946]              assume msgsender_MSG != null;
[L3947]              Balance[this] := 0;
[L3948]              paused_Pausable[this] := false;
[L3970]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3971]  COND FALSE  !(revert)
[L4596]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4597]  COND FALSE  !(revert)
[L4600]  CALL        call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4084]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4084]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4085]  COND FALSE  !(revert)
[L4088]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3118]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L3118]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3119]  COND FALSE  !(revert)
[L3122]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3094]              assume msgsender_MSG != null;
[L3095]              Balance[this] := 0;
[L3096]              _balances_StandardToken[this] := zeroRefintArr();
[L3097]              sum__balances0[this] := 0;
[L3098]              _allowed_StandardToken[this] := zeroRefRefintArr();
[L3099]              sum__allowed1[this] := 0;
[L3100]              _totalSupply_StandardToken[this] := 0;
[L3122]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4088]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4089]  COND FALSE  !(revert)
[L4092]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L4092]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]  COND FALSE  !(revert)
[L4096]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3966]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L3966]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3967]  COND FALSE  !(revert)
[L3970]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3946]              assume msgsender_MSG != null;
[L3947]              Balance[this] := 0;
[L3948]              paused_Pausable[this] := false;
[L3970]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3971]  COND FALSE  !(revert)
[L4096]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4097]  COND FALSE  !(revert)
[L4100]  CALL        call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4053]              assume msgsender_MSG != null;
[L4054]              Balance[this] := 0;
[L4100]  RET         call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4101]  COND FALSE  !(revert)
[L4600]  RET         call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4601]  COND FALSE  !(revert)
[L4604]  CALL        call LUCKYToken_LUCKYToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4523]              assume msgsender_MSG != null;
[L4524]              Balance[this] := 0;
[L4525]              name_LUCKYToken[this] := -927166810;
[L4526]              symbol_LUCKYToken[this] := -927166810;
[L4527]              decimals_LUCKYToken[this] := 18;
[L4528]              INIT_TOTALSUPPLY_LUCKYToken[this] := 10000000000;
[L4529]              __var_26 := ConstantToRef(625314775344980695514831456764478199936221022047);
[L4530]              _tokenOwner_LUCKYToken[this] := ConstantToRef(625314775344980695514831456764478199936221022047);
[L4532]              __var_25 := decimals_LUCKYToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4533]              _totalSupply_StandardToken[this] := nonlinearMul(INIT_TOTALSUPPLY_LUCKYToken[this], nonlinearPow(10, decimals_LUCKYToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4534]              _owner_Ownable[this] := _tokenOwner_LUCKYToken[this];
[L4535]              assert { :EventEmitted "OwnershipTransferred_LUCKYToken" } true;
[L4536]              sum__balances0[this] := sum__balances0[this] - _balances_StandardToken[this][_owner_Ownable[this]];
[L4537]              _balances_StandardToken[this][_owner_Ownable[this]] := _totalSupply_StandardToken[this];
[L4538]              sum__balances0[this] := sum__balances0[this] + _balances_StandardToken[this][_owner_Ownable[this]];
[L4539]              assert { :EventEmitted "Transfer_LUCKYToken" } true;
[L4604]  RET         call LUCKYToken_LUCKYToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4605]  COND FALSE  !(revert)
[L1876]  RET         call LUCKYToken_LUCKYToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1877]              assume !revert && gas >= 0;
[L7264]  RET         call LUCKYToken_LUCKYToken(this, msgsender_MSG, msgvalue_MSG);
[L7265]              assume !revert && gas >= 0;
[L7268]  CALL        call CorralChoice_LUCKYToken(this);
[L7078]              havoc msgsender_MSG;
[L7079]              havoc msgvalue_MSG;
[L7080]              havoc choice;
[L7081]              havoc _to_s670;
[L7082]              havoc _value_s670;
[L7083]              havoc __ret_0_transfer;
[L7084]              havoc _spender_s709;
[L7085]              havoc _value_s709;
[L7086]              havoc __ret_0_approve;
[L7087]              havoc _from_s691;
[L7088]              havoc _to_s691;
[L7089]              havoc _value_s691;
[L7090]              havoc __ret_0_transferFrom;
[L7091]              havoc __ret_0_totalSupply;
[L7092]              havoc owner_s211;
[L7093]              havoc __ret_0_balanceOf;
[L7094]              havoc owner_s227;
[L7095]              havoc spender_s227;
[L7096]              havoc __ret_0_allowance;
[L7097]              havoc _spender_s727;
[L7098]              havoc _addedValue_s727;
[L7099]              havoc success_s727;
[L7100]              havoc _spender_s745;
[L7101]              havoc _subtractedValue_s745;
[L7102]              havoc success_s745;
[L7103]              havoc __ret_0_owner;
[L7104]              havoc __ret_0_isOwner;
[L7105]              havoc newOwner_s564;
[L7106]              havoc __ret_0_paused;
[L7107]              havoc amount_s764;
[L7108]              havoc account_s779;
[L7109]              havoc amount_s779;
[L7110]              havoc __ret_0_name;
[L7111]              havoc __ret_0_symbol;
[L7112]              havoc __ret_0_decimals;
[L7113]              havoc tmpNow;
[L7114]              havoc gas;
[L7115]              assume gas > 4000000 && gas <= 8000000;
[L7116]              tmpNow := now;
[L7117]              havoc now;
[L7118]              assume now > tmpNow;
[L7119]              assume msgsender_MSG != null;
[L7120]              assume DType[msgsender_MSG] != SafeMath;
[L7121]              assume DType[msgsender_MSG] != IERC20;
[L7122]              assume DType[msgsender_MSG] != StandardToken;
[L7123]              assume DType[msgsender_MSG] != Ownable;
[L7124]              assume DType[msgsender_MSG] != Pausable;
[L7125]              assume DType[msgsender_MSG] != PausableToken;
[L7126]              assume DType[msgsender_MSG] != BurnableToken;
[L7127]              assume DType[msgsender_MSG] != LUCKYToken;
[L7128]              Alloc[msgsender_MSG] := true;
[L7129]  COND FALSE  !(choice == 19)
[L7136]  COND FALSE  !(choice == 18)
[L7143]  COND FALSE  !(choice == 17)
[L7150]  COND FALSE  !(choice == 16)
[L7156]  COND FALSE  !(choice == 15)
[L7162]  COND FALSE  !(choice == 14)
[L7168]  COND FALSE  !(choice == 13)
[L7175]  COND FALSE  !(choice == 12)
[L7182]  COND FALSE  !(choice == 11)
[L7188]  COND FALSE  !(choice == 10)
[L7194]  COND FALSE  !(choice == 9)
[L7200]  COND FALSE  !(choice == 8)
[L7206]  COND TRUE   choice == 7
[L7207]              gas := gas - 21000;
[L7208]  COND TRUE   gas >= 0
[L7209]              assume msgvalue_MSG == 0;
[L7210]  CALL        call pause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L1084]              havoc __exception;
[L1085]              revert := false;
[L1086]  COND FALSE  !(__exception)
[L1111]  CALL        call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3991]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6200]  COND FALSE  !(DType[this] == LUCKYToken)
[L6205]  COND FALSE  !(DType[this] == BurnableToken)
[L6210]  COND FALSE  !(DType[this] == PausableToken)
[L6215]  COND FALSE  !(DType[this] == Pausable)
[L6220]  COND TRUE   DType[this] == Ownable
[L6221]  CALL        call __var_13 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3835]              __ret_0_ := msgsender_MSG == _owner_Ownable[this];
[L6221]  RET         call __var_13 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6222]  COND FALSE  !(revert)
[L6228]  COND FALSE  !(!__var_13)
[L3991]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3992]  COND FALSE  !(revert)
[L3995]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6244]  COND FALSE  !(!!paused_Pausable[this])
[L3995]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3996]  COND FALSE  !(revert)
[L3999]              paused_Pausable[this] := true;
[L4000]              assert { :EventEmitted "Pause_Pausable" } true;
[L1111]  RET         call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]              assume !revert && gas >= 0;
[L7210]  RET         call pause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L7268]  RET         call CorralChoice_LUCKYToken(this);
[L7268]  CALL        call CorralChoice_LUCKYToken(this);
[L7078]              havoc msgsender_MSG;
[L7079]              havoc msgvalue_MSG;
[L7080]              havoc choice;
[L7081]              havoc _to_s670;
[L7082]              havoc _value_s670;
[L7083]              havoc __ret_0_transfer;
[L7084]              havoc _spender_s709;
[L7085]              havoc _value_s709;
[L7086]              havoc __ret_0_approve;
[L7087]              havoc _from_s691;
[L7088]              havoc _to_s691;
[L7089]              havoc _value_s691;
[L7090]              havoc __ret_0_transferFrom;
[L7091]              havoc __ret_0_totalSupply;
[L7092]              havoc owner_s211;
[L7093]              havoc __ret_0_balanceOf;
[L7094]              havoc owner_s227;
[L7095]              havoc spender_s227;
[L7096]              havoc __ret_0_allowance;
[L7097]              havoc _spender_s727;
[L7098]              havoc _addedValue_s727;
[L7099]              havoc success_s727;
[L7100]              havoc _spender_s745;
[L7101]              havoc _subtractedValue_s745;
[L7102]              havoc success_s745;
[L7103]              havoc __ret_0_owner;
[L7104]              havoc __ret_0_isOwner;
[L7105]              havoc newOwner_s564;
[L7106]              havoc __ret_0_paused;
[L7107]              havoc amount_s764;
[L7108]              havoc account_s779;
[L7109]              havoc amount_s779;
[L7110]              havoc __ret_0_name;
[L7111]              havoc __ret_0_symbol;
[L7112]              havoc __ret_0_decimals;
[L7113]              havoc tmpNow;
[L7114]              havoc gas;
[L7115]              assume gas > 4000000 && gas <= 8000000;
[L7116]              tmpNow := now;
[L7117]              havoc now;
[L7118]              assume now > tmpNow;
[L7119]              assume msgsender_MSG != null;
[L7120]              assume DType[msgsender_MSG] != SafeMath;
[L7121]              assume DType[msgsender_MSG] != IERC20;
[L7122]              assume DType[msgsender_MSG] != StandardToken;
[L7123]              assume DType[msgsender_MSG] != Ownable;
[L7124]              assume DType[msgsender_MSG] != Pausable;
[L7125]              assume DType[msgsender_MSG] != PausableToken;
[L7126]              assume DType[msgsender_MSG] != BurnableToken;
[L7127]              assume DType[msgsender_MSG] != LUCKYToken;
[L7128]              Alloc[msgsender_MSG] := true;
[L7129]  COND TRUE   choice == 19
[L7130]              gas := gas - 21000;
[L7131]  COND TRUE   gas >= 0
[L7132]              assume _value_s670 >= 0 && _value_s670 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7133]              assume msgvalue_MSG == 0;
[L7134]  CALL        call __ret_0_transfer := transfer~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s670 && _value_s670 <= _balances_StandardToken[this][msgsender_MSG]) && _value_s670 >= 0) && _value_s670 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][_to_s670] >= 0) && _balances_StandardToken[this][_to_s670] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][msgsender_MSG] >= 0) && _balances_StandardToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_PausableToken0 := true;
[L2]                 call_transfer_PausableToken0 := false;
[L2]                 revert := revert_hold;
[L1329]              havoc __exception;
[L1330]              revert := false;
[L1331]  COND TRUE   __exception
[L1332]              __tmp__Balance := Balance;
[L1333]              __tmp__DType := DType;
[L1334]              __tmp__Alloc := Alloc;
[L1335]              __tmp__balance_ADDR := balance_ADDR;
[L1336]              __tmp__M_Ref_int := M_Ref_int;
[L1337]              __tmp__sum__balances0 := sum__balances0;
[L1338]              __tmp__alloc__allowed_StandardToken_lvl0 := alloc__allowed_StandardToken_lvl0;
[L1339]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1340]              __tmp__sum__allowed1 := sum__allowed1;
[L1341]              __tmp__Length := Length;
[L1342]              __tmp__now := now;
[L1343]              __tmp___balances_StandardToken := _balances_StandardToken;
[L1344]              __tmp___allowed_StandardToken := _allowed_StandardToken;
[L1345]              __tmp___totalSupply_StandardToken := _totalSupply_StandardToken;
[L1346]              __tmp___owner_Ownable := _owner_Ownable;
[L1347]              __tmp__paused_Pausable := paused_Pausable;
[L1348]              __tmp__name_LUCKYToken := name_LUCKYToken;
[L1349]              __tmp__symbol_LUCKYToken := symbol_LUCKYToken;
[L1350]              __tmp__decimals_LUCKYToken := decimals_LUCKYToken;
[L1351]              __tmp__INIT_TOTALSUPPLY_LUCKYToken := INIT_TOTALSUPPLY_LUCKYToken;
[L1352]              __tmp___tokenOwner_LUCKYToken := _tokenOwner_LUCKYToken;
[L1353]  CALL        call __ret_0_ := transfer~address~uint256_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L4110]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6236]  COND TRUE   !!__tmp__paused_Pausable[this]
[L6237]              revert := true;
[L4110]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4111]  COND TRUE   revert
[L1353]  RET         call __ret_0_ := transfer~address~uint256_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L1354]              assume revert || gas < 0;
[L7134]  RET         call __ret_0_transfer := transfer~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L7268]  RET         call CorralChoice_LUCKYToken(this);

Loop:
[L7268]  CALL        call CorralChoice_LUCKYToken(this);
[L7078]              havoc msgsender_MSG;
[L7079]              havoc msgvalue_MSG;
[L7080]              havoc choice;
[L7081]              havoc _to_s670;
[L7082]              havoc _value_s670;
[L7083]              havoc __ret_0_transfer;
[L7084]              havoc _spender_s709;
[L7085]              havoc _value_s709;
[L7086]              havoc __ret_0_approve;
[L7087]              havoc _from_s691;
[L7088]              havoc _to_s691;
[L7089]              havoc _value_s691;
[L7090]              havoc __ret_0_transferFrom;
[L7091]              havoc __ret_0_totalSupply;
[L7092]              havoc owner_s211;
[L7093]              havoc __ret_0_balanceOf;
[L7094]              havoc owner_s227;
[L7095]              havoc spender_s227;
[L7096]              havoc __ret_0_allowance;
[L7097]              havoc _spender_s727;
[L7098]              havoc _addedValue_s727;
[L7099]              havoc success_s727;
[L7100]              havoc _spender_s745;
[L7101]              havoc _subtractedValue_s745;
[L7102]              havoc success_s745;
[L7103]              havoc __ret_0_owner;
[L7104]              havoc __ret_0_isOwner;
[L7105]              havoc newOwner_s564;
[L7106]              havoc __ret_0_paused;
[L7107]              havoc amount_s764;
[L7108]              havoc account_s779;
[L7109]              havoc amount_s779;
[L7110]              havoc __ret_0_name;
[L7111]              havoc __ret_0_symbol;
[L7112]              havoc __ret_0_decimals;
[L7113]              havoc tmpNow;
[L7114]              havoc gas;
[L7115]              assume gas > 4000000 && gas <= 8000000;
[L7116]              tmpNow := now;
[L7117]              havoc now;
[L7118]              assume now > tmpNow;
[L7119]              assume msgsender_MSG != null;
[L7120]              assume DType[msgsender_MSG] != SafeMath;
[L7121]              assume DType[msgsender_MSG] != IERC20;
[L7122]              assume DType[msgsender_MSG] != StandardToken;
[L7123]              assume DType[msgsender_MSG] != Ownable;
[L7124]              assume DType[msgsender_MSG] != Pausable;
[L7125]              assume DType[msgsender_MSG] != PausableToken;
[L7126]              assume DType[msgsender_MSG] != BurnableToken;
[L7127]              assume DType[msgsender_MSG] != LUCKYToken;
[L7128]              Alloc[msgsender_MSG] := true;
[L7129]  COND TRUE   choice == 19
[L7130]              gas := gas - 21000;
[L7131]  COND FALSE  !(gas >= 0)
[L7268]  RET         call CorralChoice_LUCKYToken(this);

[2020-11-24 20:41:17,069 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:41:17,069 INFO  L82        PathProgramCache]: Analyzing trace with hash 1134604636, now seen corresponding path program 1 times
[2020-11-24 20:41:17,069 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:41:17,080 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:41:17,161 INFO  L134       CoverageAnalysis]: Checked inductivity of 386 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 385 trivial. 0 not checked.
[2020-11-24 20:41:17,162 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:41:17,162 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 20:41:17,162 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:41:17,162 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 20:41:17,162 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 20:41:17,162 INFO  L87              Difference]: Start difference. First operand 3625 states and 4229 transitions. cyclomatic complexity: 611 Second operand 7 states.
[2020-11-24 20:41:17,238 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:41:17,238 INFO  L93              Difference]: Finished difference Result 3657 states and 4261 transitions.
[2020-11-24 20:41:17,238 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 20:41:17,238 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3657 states and 4261 transitions.
[2020-11-24 20:41:17,244 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-24 20:41:17,251 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3657 states to 3625 states and 4227 transitions.
[2020-11-24 20:41:17,251 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 853
[2020-11-24 20:41:17,252 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 853
[2020-11-24 20:41:17,252 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3625 states and 4227 transitions.
[2020-11-24 20:41:17,254 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:41:17,254 INFO  L728         BuchiCegarLoop]: Abstraction has 3625 states and 4227 transitions.
[2020-11-24 20:41:17,257 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3625 states and 4227 transitions.
[2020-11-24 20:41:17,272 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3625 to 3619.
[2020-11-24 20:41:17,272 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3619 states.
[2020-11-24 20:41:17,276 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3619 states to 3619 states and 4217 transitions.
[2020-11-24 20:41:17,276 INFO  L751         BuchiCegarLoop]: Abstraction has 3619 states and 4217 transitions.
[2020-11-24 20:41:17,276 INFO  L631         BuchiCegarLoop]: Abstraction has 3619 states and 4217 transitions.
[2020-11-24 20:41:17,276 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-24 20:41:17,276 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3619 states and 4217 transitions.
[2020-11-24 20:41:17,280 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-24 20:41:17,280 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:41:17,280 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:41:17,281 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:41:17,281 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_PausableToken0 := false;
[L2]                 call_transfer_PausableToken0 := false;
[L2]     CALL        call main();
[L7258]              assume null == 0;
[L7259]  CALL        call this := FreshRefGenerator__success();
[L2904]              havoc newRef;
[L2905]              assume Alloc[newRef] == false;
[L2906]              Alloc[newRef] := true;
[L2907]              assume newRef != null;
[L7259]  RET         call this := FreshRefGenerator__success();
[L7260]              assume now >= 0;
[L7261]              assume DType[this] == LUCKYToken;
[L7262]              assume msgvalue_MSG == 0;
[L7263]              gas := gas - 53000;
[L7264]  CALL        call LUCKYToken_LUCKYToken(this, msgsender_MSG, msgvalue_MSG);
[L1849]              havoc __exception;
[L1850]              revert := false;
[L1851]  COND FALSE  !(__exception)
[L1876]  CALL        call LUCKYToken_LUCKYToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4580]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4580]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4581]  COND FALSE  !(revert)
[L4584]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3118]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L3118]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3119]  COND FALSE  !(revert)
[L3122]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3094]              assume msgsender_MSG != null;
[L3095]              Balance[this] := 0;
[L3096]              _balances_StandardToken[this] := zeroRefintArr();
[L3097]              sum__balances0[this] := 0;
[L3098]              _allowed_StandardToken[this] := zeroRefRefintArr();
[L3099]              sum__allowed1[this] := 0;
[L3100]              _totalSupply_StandardToken[this] := 0;
[L3122]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4584]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4585]  COND FALSE  !(revert)
[L4588]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L4588]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4589]  COND FALSE  !(revert)
[L4592]  CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4394]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4394]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4395]  COND FALSE  !(revert)
[L4398]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3118]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L3118]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3119]  COND FALSE  !(revert)
[L3122]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3094]              assume msgsender_MSG != null;
[L3095]              Balance[this] := 0;
[L3096]              _balances_StandardToken[this] := zeroRefintArr();
[L3097]              sum__balances0[this] := 0;
[L3098]              _allowed_StandardToken[this] := zeroRefRefintArr();
[L3099]              sum__allowed1[this] := 0;
[L3100]              _totalSupply_StandardToken[this] := 0;
[L3122]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4398]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4399]  COND FALSE  !(revert)
[L4402]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L4402]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4403]  COND FALSE  !(revert)
[L4406]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4367]              assume msgsender_MSG != null;
[L4368]              Balance[this] := 0;
[L4406]  RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4407]  COND FALSE  !(revert)
[L4592]  RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4593]  COND FALSE  !(revert)
[L4596]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3966]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L3966]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3967]  COND FALSE  !(revert)
[L3970]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3946]              assume msgsender_MSG != null;
[L3947]              Balance[this] := 0;
[L3948]              paused_Pausable[this] := false;
[L3970]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3971]  COND FALSE  !(revert)
[L4596]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4597]  COND FALSE  !(revert)
[L4600]  CALL        call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4084]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4084]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4085]  COND FALSE  !(revert)
[L4088]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3118]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L3118]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3119]  COND FALSE  !(revert)
[L3122]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3094]              assume msgsender_MSG != null;
[L3095]              Balance[this] := 0;
[L3096]              _balances_StandardToken[this] := zeroRefintArr();
[L3097]              sum__balances0[this] := 0;
[L3098]              _allowed_StandardToken[this] := zeroRefRefintArr();
[L3099]              sum__allowed1[this] := 0;
[L3100]              _totalSupply_StandardToken[this] := 0;
[L3122]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4088]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4089]  COND FALSE  !(revert)
[L4092]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L4092]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]  COND FALSE  !(revert)
[L4096]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3966]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L3966]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3967]  COND FALSE  !(revert)
[L3970]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3946]              assume msgsender_MSG != null;
[L3947]              Balance[this] := 0;
[L3948]              paused_Pausable[this] := false;
[L3970]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3971]  COND FALSE  !(revert)
[L4096]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4097]  COND FALSE  !(revert)
[L4100]  CALL        call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4053]              assume msgsender_MSG != null;
[L4054]              Balance[this] := 0;
[L4100]  RET         call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4101]  COND FALSE  !(revert)
[L4600]  RET         call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4601]  COND FALSE  !(revert)
[L4604]  CALL        call LUCKYToken_LUCKYToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4523]              assume msgsender_MSG != null;
[L4524]              Balance[this] := 0;
[L4525]              name_LUCKYToken[this] := -927166810;
[L4526]              symbol_LUCKYToken[this] := -927166810;
[L4527]              decimals_LUCKYToken[this] := 18;
[L4528]              INIT_TOTALSUPPLY_LUCKYToken[this] := 10000000000;
[L4529]              __var_26 := ConstantToRef(625314775344980695514831456764478199936221022047);
[L4530]              _tokenOwner_LUCKYToken[this] := ConstantToRef(625314775344980695514831456764478199936221022047);
[L4532]              __var_25 := decimals_LUCKYToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4533]              _totalSupply_StandardToken[this] := nonlinearMul(INIT_TOTALSUPPLY_LUCKYToken[this], nonlinearPow(10, decimals_LUCKYToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4534]              _owner_Ownable[this] := _tokenOwner_LUCKYToken[this];
[L4535]              assert { :EventEmitted "OwnershipTransferred_LUCKYToken" } true;
[L4536]              sum__balances0[this] := sum__balances0[this] - _balances_StandardToken[this][_owner_Ownable[this]];
[L4537]              _balances_StandardToken[this][_owner_Ownable[this]] := _totalSupply_StandardToken[this];
[L4538]              sum__balances0[this] := sum__balances0[this] + _balances_StandardToken[this][_owner_Ownable[this]];
[L4539]              assert { :EventEmitted "Transfer_LUCKYToken" } true;
[L4604]  RET         call LUCKYToken_LUCKYToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4605]  COND FALSE  !(revert)
[L1876]  RET         call LUCKYToken_LUCKYToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1877]              assume !revert && gas >= 0;
[L7264]  RET         call LUCKYToken_LUCKYToken(this, msgsender_MSG, msgvalue_MSG);
[L7265]              assume !revert && gas >= 0;
[L7268]  CALL        call CorralChoice_LUCKYToken(this);
[L7078]              havoc msgsender_MSG;
[L7079]              havoc msgvalue_MSG;
[L7080]              havoc choice;
[L7081]              havoc _to_s670;
[L7082]              havoc _value_s670;
[L7083]              havoc __ret_0_transfer;
[L7084]              havoc _spender_s709;
[L7085]              havoc _value_s709;
[L7086]              havoc __ret_0_approve;
[L7087]              havoc _from_s691;
[L7088]              havoc _to_s691;
[L7089]              havoc _value_s691;
[L7090]              havoc __ret_0_transferFrom;
[L7091]              havoc __ret_0_totalSupply;
[L7092]              havoc owner_s211;
[L7093]              havoc __ret_0_balanceOf;
[L7094]              havoc owner_s227;
[L7095]              havoc spender_s227;
[L7096]              havoc __ret_0_allowance;
[L7097]              havoc _spender_s727;
[L7098]              havoc _addedValue_s727;
[L7099]              havoc success_s727;
[L7100]              havoc _spender_s745;
[L7101]              havoc _subtractedValue_s745;
[L7102]              havoc success_s745;
[L7103]              havoc __ret_0_owner;
[L7104]              havoc __ret_0_isOwner;
[L7105]              havoc newOwner_s564;
[L7106]              havoc __ret_0_paused;
[L7107]              havoc amount_s764;
[L7108]              havoc account_s779;
[L7109]              havoc amount_s779;
[L7110]              havoc __ret_0_name;
[L7111]              havoc __ret_0_symbol;
[L7112]              havoc __ret_0_decimals;
[L7113]              havoc tmpNow;
[L7114]              havoc gas;
[L7115]              assume gas > 4000000 && gas <= 8000000;
[L7116]              tmpNow := now;
[L7117]              havoc now;
[L7118]              assume now > tmpNow;
[L7119]              assume msgsender_MSG != null;
[L7120]              assume DType[msgsender_MSG] != SafeMath;
[L7121]              assume DType[msgsender_MSG] != IERC20;
[L7122]              assume DType[msgsender_MSG] != StandardToken;
[L7123]              assume DType[msgsender_MSG] != Ownable;
[L7124]              assume DType[msgsender_MSG] != Pausable;
[L7125]              assume DType[msgsender_MSG] != PausableToken;
[L7126]              assume DType[msgsender_MSG] != BurnableToken;
[L7127]              assume DType[msgsender_MSG] != LUCKYToken;
[L7128]              Alloc[msgsender_MSG] := true;
[L7129]  COND FALSE  !(choice == 19)
[L7136]  COND FALSE  !(choice == 18)
[L7143]  COND FALSE  !(choice == 17)
[L7150]  COND FALSE  !(choice == 16)
[L7156]  COND FALSE  !(choice == 15)
[L7162]  COND FALSE  !(choice == 14)
[L7168]  COND FALSE  !(choice == 13)
[L7175]  COND FALSE  !(choice == 12)
[L7182]  COND FALSE  !(choice == 11)
[L7188]  COND FALSE  !(choice == 10)
[L7194]  COND FALSE  !(choice == 9)
[L7200]  COND FALSE  !(choice == 8)
[L7206]  COND TRUE   choice == 7
[L7207]              gas := gas - 21000;
[L7208]  COND TRUE   gas >= 0
[L7209]              assume msgvalue_MSG == 0;
[L7210]  CALL        call pause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L1084]              havoc __exception;
[L1085]              revert := false;
[L1086]  COND FALSE  !(__exception)
[L1111]  CALL        call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3991]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6200]  COND TRUE   DType[this] == LUCKYToken
[L6201]  CALL        call __var_13 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3835]              __ret_0_ := msgsender_MSG == _owner_Ownable[this];
[L6201]  RET         call __var_13 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6202]  COND FALSE  !(revert)
[L6228]  COND FALSE  !(!__var_13)
[L3991]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3992]  COND FALSE  !(revert)
[L3995]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6244]  COND FALSE  !(!!paused_Pausable[this])
[L3995]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3996]  COND FALSE  !(revert)
[L3999]              paused_Pausable[this] := true;
[L4000]              assert { :EventEmitted "Pause_Pausable" } true;
[L1111]  RET         call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]              assume !revert && gas >= 0;
[L7210]  RET         call pause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L7268]  RET         call CorralChoice_LUCKYToken(this);
[L7268]  CALL        call CorralChoice_LUCKYToken(this);
[L7078]              havoc msgsender_MSG;
[L7079]              havoc msgvalue_MSG;
[L7080]              havoc choice;
[L7081]              havoc _to_s670;
[L7082]              havoc _value_s670;
[L7083]              havoc __ret_0_transfer;
[L7084]              havoc _spender_s709;
[L7085]              havoc _value_s709;
[L7086]              havoc __ret_0_approve;
[L7087]              havoc _from_s691;
[L7088]              havoc _to_s691;
[L7089]              havoc _value_s691;
[L7090]              havoc __ret_0_transferFrom;
[L7091]              havoc __ret_0_totalSupply;
[L7092]              havoc owner_s211;
[L7093]              havoc __ret_0_balanceOf;
[L7094]              havoc owner_s227;
[L7095]              havoc spender_s227;
[L7096]              havoc __ret_0_allowance;
[L7097]              havoc _spender_s727;
[L7098]              havoc _addedValue_s727;
[L7099]              havoc success_s727;
[L7100]              havoc _spender_s745;
[L7101]              havoc _subtractedValue_s745;
[L7102]              havoc success_s745;
[L7103]              havoc __ret_0_owner;
[L7104]              havoc __ret_0_isOwner;
[L7105]              havoc newOwner_s564;
[L7106]              havoc __ret_0_paused;
[L7107]              havoc amount_s764;
[L7108]              havoc account_s779;
[L7109]              havoc amount_s779;
[L7110]              havoc __ret_0_name;
[L7111]              havoc __ret_0_symbol;
[L7112]              havoc __ret_0_decimals;
[L7113]              havoc tmpNow;
[L7114]              havoc gas;
[L7115]              assume gas > 4000000 && gas <= 8000000;
[L7116]              tmpNow := now;
[L7117]              havoc now;
[L7118]              assume now > tmpNow;
[L7119]              assume msgsender_MSG != null;
[L7120]              assume DType[msgsender_MSG] != SafeMath;
[L7121]              assume DType[msgsender_MSG] != IERC20;
[L7122]              assume DType[msgsender_MSG] != StandardToken;
[L7123]              assume DType[msgsender_MSG] != Ownable;
[L7124]              assume DType[msgsender_MSG] != Pausable;
[L7125]              assume DType[msgsender_MSG] != PausableToken;
[L7126]              assume DType[msgsender_MSG] != BurnableToken;
[L7127]              assume DType[msgsender_MSG] != LUCKYToken;
[L7128]              Alloc[msgsender_MSG] := true;
[L7129]  COND TRUE   choice == 19
[L7130]              gas := gas - 21000;
[L7131]  COND TRUE   gas >= 0
[L7132]              assume _value_s670 >= 0 && _value_s670 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7133]              assume msgvalue_MSG == 0;
[L7134]  CALL        call __ret_0_transfer := transfer~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s670 && _value_s670 <= _balances_StandardToken[this][msgsender_MSG]) && _value_s670 >= 0) && _value_s670 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][_to_s670] >= 0) && _balances_StandardToken[this][_to_s670] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][msgsender_MSG] >= 0) && _balances_StandardToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_PausableToken0 := true;
[L2]                 call_transfer_PausableToken0 := false;
[L2]                 revert := revert_hold;
[L1329]              havoc __exception;
[L1330]              revert := false;
[L1331]  COND TRUE   __exception
[L1332]              __tmp__Balance := Balance;
[L1333]              __tmp__DType := DType;
[L1334]              __tmp__Alloc := Alloc;
[L1335]              __tmp__balance_ADDR := balance_ADDR;
[L1336]              __tmp__M_Ref_int := M_Ref_int;
[L1337]              __tmp__sum__balances0 := sum__balances0;
[L1338]              __tmp__alloc__allowed_StandardToken_lvl0 := alloc__allowed_StandardToken_lvl0;
[L1339]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1340]              __tmp__sum__allowed1 := sum__allowed1;
[L1341]              __tmp__Length := Length;
[L1342]              __tmp__now := now;
[L1343]              __tmp___balances_StandardToken := _balances_StandardToken;
[L1344]              __tmp___allowed_StandardToken := _allowed_StandardToken;
[L1345]              __tmp___totalSupply_StandardToken := _totalSupply_StandardToken;
[L1346]              __tmp___owner_Ownable := _owner_Ownable;
[L1347]              __tmp__paused_Pausable := paused_Pausable;
[L1348]              __tmp__name_LUCKYToken := name_LUCKYToken;
[L1349]              __tmp__symbol_LUCKYToken := symbol_LUCKYToken;
[L1350]              __tmp__decimals_LUCKYToken := decimals_LUCKYToken;
[L1351]              __tmp__INIT_TOTALSUPPLY_LUCKYToken := INIT_TOTALSUPPLY_LUCKYToken;
[L1352]              __tmp___tokenOwner_LUCKYToken := _tokenOwner_LUCKYToken;
[L1353]  CALL        call __ret_0_ := transfer~address~uint256_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L4110]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6236]  COND TRUE   !!__tmp__paused_Pausable[this]
[L6237]              revert := true;
[L4110]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4111]  COND TRUE   revert
[L1353]  RET         call __ret_0_ := transfer~address~uint256_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L1354]              assume revert || gas < 0;
[L7134]  RET         call __ret_0_transfer := transfer~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L7268]  RET         call CorralChoice_LUCKYToken(this);

Loop:
[L7268]  CALL        call CorralChoice_LUCKYToken(this);
[L7078]              havoc msgsender_MSG;
[L7079]              havoc msgvalue_MSG;
[L7080]              havoc choice;
[L7081]              havoc _to_s670;
[L7082]              havoc _value_s670;
[L7083]              havoc __ret_0_transfer;
[L7084]              havoc _spender_s709;
[L7085]              havoc _value_s709;
[L7086]              havoc __ret_0_approve;
[L7087]              havoc _from_s691;
[L7088]              havoc _to_s691;
[L7089]              havoc _value_s691;
[L7090]              havoc __ret_0_transferFrom;
[L7091]              havoc __ret_0_totalSupply;
[L7092]              havoc owner_s211;
[L7093]              havoc __ret_0_balanceOf;
[L7094]              havoc owner_s227;
[L7095]              havoc spender_s227;
[L7096]              havoc __ret_0_allowance;
[L7097]              havoc _spender_s727;
[L7098]              havoc _addedValue_s727;
[L7099]              havoc success_s727;
[L7100]              havoc _spender_s745;
[L7101]              havoc _subtractedValue_s745;
[L7102]              havoc success_s745;
[L7103]              havoc __ret_0_owner;
[L7104]              havoc __ret_0_isOwner;
[L7105]              havoc newOwner_s564;
[L7106]              havoc __ret_0_paused;
[L7107]              havoc amount_s764;
[L7108]              havoc account_s779;
[L7109]              havoc amount_s779;
[L7110]              havoc __ret_0_name;
[L7111]              havoc __ret_0_symbol;
[L7112]              havoc __ret_0_decimals;
[L7113]              havoc tmpNow;
[L7114]              havoc gas;
[L7115]              assume gas > 4000000 && gas <= 8000000;
[L7116]              tmpNow := now;
[L7117]              havoc now;
[L7118]              assume now > tmpNow;
[L7119]              assume msgsender_MSG != null;
[L7120]              assume DType[msgsender_MSG] != SafeMath;
[L7121]              assume DType[msgsender_MSG] != IERC20;
[L7122]              assume DType[msgsender_MSG] != StandardToken;
[L7123]              assume DType[msgsender_MSG] != Ownable;
[L7124]              assume DType[msgsender_MSG] != Pausable;
[L7125]              assume DType[msgsender_MSG] != PausableToken;
[L7126]              assume DType[msgsender_MSG] != BurnableToken;
[L7127]              assume DType[msgsender_MSG] != LUCKYToken;
[L7128]              Alloc[msgsender_MSG] := true;
[L7129]  COND FALSE  !(choice == 19)
[L7136]  COND FALSE  !(choice == 18)
[L7143]  COND FALSE  !(choice == 17)
[L7150]  COND FALSE  !(choice == 16)
[L7156]  COND FALSE  !(choice == 15)
[L7162]  COND FALSE  !(choice == 14)
[L7168]  COND FALSE  !(choice == 13)
[L7175]  COND FALSE  !(choice == 12)
[L7182]  COND FALSE  !(choice == 11)
[L7188]  COND FALSE  !(choice == 10)
[L7194]  COND FALSE  !(choice == 9)
[L7200]  COND FALSE  !(choice == 8)
[L7206]  COND TRUE   choice == 7
[L7207]              gas := gas - 21000;
[L7208]  COND TRUE   gas >= 0
[L7209]              assume msgvalue_MSG == 0;
[L7210]  CALL        call pause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L1084]              havoc __exception;
[L1085]              revert := false;
[L1086]  COND FALSE  !(__exception)
[L1111]  CALL        call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3991]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6200]  COND TRUE   DType[this] == LUCKYToken
[L6201]  CALL        call __var_13 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3835]              __ret_0_ := msgsender_MSG == _owner_Ownable[this];
[L6201]  RET         call __var_13 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6202]  COND FALSE  !(revert)
[L6228]  COND FALSE  !(!__var_13)
[L3991]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3992]  COND FALSE  !(revert)
[L3995]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6244]  COND FALSE  !(!!paused_Pausable[this])
[L3995]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3996]  COND FALSE  !(revert)
[L3999]              paused_Pausable[this] := true;
[L4000]              assert { :EventEmitted "Pause_Pausable" } true;
[L1111]  RET         call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]              assume !revert && gas >= 0;
[L7210]  RET         call pause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L7268]  RET         call CorralChoice_LUCKYToken(this);

[2020-11-24 20:41:17,284 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:41:17,284 INFO  L82        PathProgramCache]: Analyzing trace with hash 932152689, now seen corresponding path program 1 times
[2020-11-24 20:41:17,285 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:41:17,298 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:41:17,314 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:41:17,402 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:41:17,402 INFO  L82        PathProgramCache]: Analyzing trace with hash 923304324, now seen corresponding path program 1 times
[2020-11-24 20:41:17,403 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:41:17,406 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:41:17,409 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:41:17,416 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:41:17,416 INFO  L82        PathProgramCache]: Analyzing trace with hash 1860469492, now seen corresponding path program 1 times
[2020-11-24 20:41:17,417 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:41:17,431 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:41:17,587 INFO  L134       CoverageAnalysis]: Checked inductivity of 388 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 386 trivial. 0 not checked.
[2020-11-24 20:41:17,587 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 20:41:17,588 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [13] total 13
[2020-11-24 20:41:17,589 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-24 20:41:17,589 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=30, Invalid=152, Unknown=0, NotChecked=0, Total=182
[2020-11-24 20:41:17,589 INFO  L87              Difference]: Start difference. First operand 3619 states and 4217 transitions. cyclomatic complexity: 605 Second operand 14 states.
[2020-11-24 20:41:20,369 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:41:20,369 INFO  L93              Difference]: Finished difference Result 6261 states and 7399 transitions.
[2020-11-24 20:41:20,369 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-24 20:41:20,370 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6261 states and 7399 transitions.
[2020-11-24 20:41:20,389 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-24 20:41:20,403 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6261 states to 6261 states and 7399 transitions.
[2020-11-24 20:41:20,403 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1426
[2020-11-24 20:41:20,404 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1474
[2020-11-24 20:41:20,405 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6261 states and 7399 transitions.
[2020-11-24 20:41:20,408 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:41:20,408 INFO  L728         BuchiCegarLoop]: Abstraction has 6261 states and 7399 transitions.
[2020-11-24 20:41:20,412 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6261 states and 7399 transitions.
[2020-11-24 20:41:20,438 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6261 to 5861.
[2020-11-24 20:41:20,438 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5861 states.
[2020-11-24 20:41:20,446 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5861 states to 5861 states and 6998 transitions.
[2020-11-24 20:41:20,446 INFO  L751         BuchiCegarLoop]: Abstraction has 5861 states and 6998 transitions.
[2020-11-24 20:41:20,446 INFO  L631         BuchiCegarLoop]: Abstraction has 5861 states and 6998 transitions.
[2020-11-24 20:41:20,446 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-24 20:41:20,446 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5861 states and 6998 transitions.
[2020-11-24 20:41:20,455 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-24 20:41:20,455 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:41:20,455 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:41:20,456 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:41:20,456 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_PausableToken0 := false;
[L2]                 call_transfer_PausableToken0 := false;
[L2]     CALL        call main();
[L7258]              assume null == 0;
[L7259]  CALL        call this := FreshRefGenerator__success();
[L2904]              havoc newRef;
[L2905]              assume Alloc[newRef] == false;
[L2906]              Alloc[newRef] := true;
[L2907]              assume newRef != null;
[L7259]  RET         call this := FreshRefGenerator__success();
[L7260]              assume now >= 0;
[L7261]              assume DType[this] == LUCKYToken;
[L7262]              assume msgvalue_MSG == 0;
[L7263]              gas := gas - 53000;
[L7264]  CALL        call LUCKYToken_LUCKYToken(this, msgsender_MSG, msgvalue_MSG);
[L1849]              havoc __exception;
[L1850]              revert := false;
[L1851]  COND FALSE  !(__exception)
[L1876]  CALL        call LUCKYToken_LUCKYToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4580]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4580]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4581]  COND FALSE  !(revert)
[L4584]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3118]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L3118]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3119]  COND FALSE  !(revert)
[L3122]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3094]              assume msgsender_MSG != null;
[L3095]              Balance[this] := 0;
[L3096]              _balances_StandardToken[this] := zeroRefintArr();
[L3097]              sum__balances0[this] := 0;
[L3098]              _allowed_StandardToken[this] := zeroRefRefintArr();
[L3099]              sum__allowed1[this] := 0;
[L3100]              _totalSupply_StandardToken[this] := 0;
[L3122]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4584]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4585]  COND FALSE  !(revert)
[L4588]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L4588]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4589]  COND FALSE  !(revert)
[L4592]  CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4394]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4394]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4395]  COND FALSE  !(revert)
[L4398]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3118]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L3118]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3119]  COND FALSE  !(revert)
[L3122]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3094]              assume msgsender_MSG != null;
[L3095]              Balance[this] := 0;
[L3096]              _balances_StandardToken[this] := zeroRefintArr();
[L3097]              sum__balances0[this] := 0;
[L3098]              _allowed_StandardToken[this] := zeroRefRefintArr();
[L3099]              sum__allowed1[this] := 0;
[L3100]              _totalSupply_StandardToken[this] := 0;
[L3122]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4398]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4399]  COND FALSE  !(revert)
[L4402]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L4402]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4403]  COND FALSE  !(revert)
[L4406]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4367]              assume msgsender_MSG != null;
[L4368]              Balance[this] := 0;
[L4406]  RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4407]  COND FALSE  !(revert)
[L4592]  RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4593]  COND FALSE  !(revert)
[L4596]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3966]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L3966]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3967]  COND FALSE  !(revert)
[L3970]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3946]              assume msgsender_MSG != null;
[L3947]              Balance[this] := 0;
[L3948]              paused_Pausable[this] := false;
[L3970]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3971]  COND FALSE  !(revert)
[L4596]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4597]  COND FALSE  !(revert)
[L4600]  CALL        call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4084]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4084]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4085]  COND FALSE  !(revert)
[L4088]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3118]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L3118]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3119]  COND FALSE  !(revert)
[L3122]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3094]              assume msgsender_MSG != null;
[L3095]              Balance[this] := 0;
[L3096]              _balances_StandardToken[this] := zeroRefintArr();
[L3097]              sum__balances0[this] := 0;
[L3098]              _allowed_StandardToken[this] := zeroRefRefintArr();
[L3099]              sum__allowed1[this] := 0;
[L3100]              _totalSupply_StandardToken[this] := 0;
[L3122]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4088]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4089]  COND FALSE  !(revert)
[L4092]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L4092]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]  COND FALSE  !(revert)
[L4096]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3966]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L3966]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3967]  COND FALSE  !(revert)
[L3970]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3946]              assume msgsender_MSG != null;
[L3947]              Balance[this] := 0;
[L3948]              paused_Pausable[this] := false;
[L3970]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3971]  COND FALSE  !(revert)
[L4096]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4097]  COND FALSE  !(revert)
[L4100]  CALL        call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4053]              assume msgsender_MSG != null;
[L4054]              Balance[this] := 0;
[L4100]  RET         call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4101]  COND FALSE  !(revert)
[L4600]  RET         call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4601]  COND FALSE  !(revert)
[L4604]  CALL        call LUCKYToken_LUCKYToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4523]              assume msgsender_MSG != null;
[L4524]              Balance[this] := 0;
[L4525]              name_LUCKYToken[this] := -927166810;
[L4526]              symbol_LUCKYToken[this] := -927166810;
[L4527]              decimals_LUCKYToken[this] := 18;
[L4528]              INIT_TOTALSUPPLY_LUCKYToken[this] := 10000000000;
[L4529]              __var_26 := ConstantToRef(625314775344980695514831456764478199936221022047);
[L4530]              _tokenOwner_LUCKYToken[this] := ConstantToRef(625314775344980695514831456764478199936221022047);
[L4532]              __var_25 := decimals_LUCKYToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4533]              _totalSupply_StandardToken[this] := nonlinearMul(INIT_TOTALSUPPLY_LUCKYToken[this], nonlinearPow(10, decimals_LUCKYToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4534]              _owner_Ownable[this] := _tokenOwner_LUCKYToken[this];
[L4535]              assert { :EventEmitted "OwnershipTransferred_LUCKYToken" } true;
[L4536]              sum__balances0[this] := sum__balances0[this] - _balances_StandardToken[this][_owner_Ownable[this]];
[L4537]              _balances_StandardToken[this][_owner_Ownable[this]] := _totalSupply_StandardToken[this];
[L4538]              sum__balances0[this] := sum__balances0[this] + _balances_StandardToken[this][_owner_Ownable[this]];
[L4539]              assert { :EventEmitted "Transfer_LUCKYToken" } true;
[L4604]  RET         call LUCKYToken_LUCKYToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4605]  COND FALSE  !(revert)
[L1876]  RET         call LUCKYToken_LUCKYToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1877]              assume !revert && gas >= 0;
[L7264]  RET         call LUCKYToken_LUCKYToken(this, msgsender_MSG, msgvalue_MSG);
[L7265]              assume !revert && gas >= 0;
[L7268]  CALL        call CorralChoice_LUCKYToken(this);
[L7078]              havoc msgsender_MSG;
[L7079]              havoc msgvalue_MSG;
[L7080]              havoc choice;
[L7081]              havoc _to_s670;
[L7082]              havoc _value_s670;
[L7083]              havoc __ret_0_transfer;
[L7084]              havoc _spender_s709;
[L7085]              havoc _value_s709;
[L7086]              havoc __ret_0_approve;
[L7087]              havoc _from_s691;
[L7088]              havoc _to_s691;
[L7089]              havoc _value_s691;
[L7090]              havoc __ret_0_transferFrom;
[L7091]              havoc __ret_0_totalSupply;
[L7092]              havoc owner_s211;
[L7093]              havoc __ret_0_balanceOf;
[L7094]              havoc owner_s227;
[L7095]              havoc spender_s227;
[L7096]              havoc __ret_0_allowance;
[L7097]              havoc _spender_s727;
[L7098]              havoc _addedValue_s727;
[L7099]              havoc success_s727;
[L7100]              havoc _spender_s745;
[L7101]              havoc _subtractedValue_s745;
[L7102]              havoc success_s745;
[L7103]              havoc __ret_0_owner;
[L7104]              havoc __ret_0_isOwner;
[L7105]              havoc newOwner_s564;
[L7106]              havoc __ret_0_paused;
[L7107]              havoc amount_s764;
[L7108]              havoc account_s779;
[L7109]              havoc amount_s779;
[L7110]              havoc __ret_0_name;
[L7111]              havoc __ret_0_symbol;
[L7112]              havoc __ret_0_decimals;
[L7113]              havoc tmpNow;
[L7114]              havoc gas;
[L7115]              assume gas > 4000000 && gas <= 8000000;
[L7116]              tmpNow := now;
[L7117]              havoc now;
[L7118]              assume now > tmpNow;
[L7119]              assume msgsender_MSG != null;
[L7120]              assume DType[msgsender_MSG] != SafeMath;
[L7121]              assume DType[msgsender_MSG] != IERC20;
[L7122]              assume DType[msgsender_MSG] != StandardToken;
[L7123]              assume DType[msgsender_MSG] != Ownable;
[L7124]              assume DType[msgsender_MSG] != Pausable;
[L7125]              assume DType[msgsender_MSG] != PausableToken;
[L7126]              assume DType[msgsender_MSG] != BurnableToken;
[L7127]              assume DType[msgsender_MSG] != LUCKYToken;
[L7128]              Alloc[msgsender_MSG] := true;
[L7129]  COND FALSE  !(choice == 19)
[L7136]  COND FALSE  !(choice == 18)
[L7143]  COND FALSE  !(choice == 17)
[L7150]  COND FALSE  !(choice == 16)
[L7156]  COND FALSE  !(choice == 15)
[L7162]  COND FALSE  !(choice == 14)
[L7168]  COND FALSE  !(choice == 13)
[L7175]  COND FALSE  !(choice == 12)
[L7182]  COND FALSE  !(choice == 11)
[L7188]  COND FALSE  !(choice == 10)
[L7194]  COND FALSE  !(choice == 9)
[L7200]  COND FALSE  !(choice == 8)
[L7206]  COND TRUE   choice == 7
[L7207]              gas := gas - 21000;
[L7208]  COND TRUE   gas >= 0
[L7209]              assume msgvalue_MSG == 0;
[L7210]  CALL        call pause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L1084]              havoc __exception;
[L1085]              revert := false;
[L1086]  COND FALSE  !(__exception)
[L1111]  CALL        call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3991]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6200]  COND TRUE   DType[this] == LUCKYToken
[L6201]  CALL        call __var_13 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3835]              __ret_0_ := msgsender_MSG == _owner_Ownable[this];
[L6201]  RET         call __var_13 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6202]  COND FALSE  !(revert)
[L6228]  COND FALSE  !(!__var_13)
[L3991]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3992]  COND FALSE  !(revert)
[L3995]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6244]  COND FALSE  !(!!paused_Pausable[this])
[L3995]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3996]  COND FALSE  !(revert)
[L3999]              paused_Pausable[this] := true;
[L4000]              assert { :EventEmitted "Pause_Pausable" } true;
[L1111]  RET         call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]              assume !revert && gas >= 0;
[L7210]  RET         call pause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L7268]  RET         call CorralChoice_LUCKYToken(this);
[L7268]  CALL        call CorralChoice_LUCKYToken(this);
[L7078]              havoc msgsender_MSG;
[L7079]              havoc msgvalue_MSG;
[L7080]              havoc choice;
[L7081]              havoc _to_s670;
[L7082]              havoc _value_s670;
[L7083]              havoc __ret_0_transfer;
[L7084]              havoc _spender_s709;
[L7085]              havoc _value_s709;
[L7086]              havoc __ret_0_approve;
[L7087]              havoc _from_s691;
[L7088]              havoc _to_s691;
[L7089]              havoc _value_s691;
[L7090]              havoc __ret_0_transferFrom;
[L7091]              havoc __ret_0_totalSupply;
[L7092]              havoc owner_s211;
[L7093]              havoc __ret_0_balanceOf;
[L7094]              havoc owner_s227;
[L7095]              havoc spender_s227;
[L7096]              havoc __ret_0_allowance;
[L7097]              havoc _spender_s727;
[L7098]              havoc _addedValue_s727;
[L7099]              havoc success_s727;
[L7100]              havoc _spender_s745;
[L7101]              havoc _subtractedValue_s745;
[L7102]              havoc success_s745;
[L7103]              havoc __ret_0_owner;
[L7104]              havoc __ret_0_isOwner;
[L7105]              havoc newOwner_s564;
[L7106]              havoc __ret_0_paused;
[L7107]              havoc amount_s764;
[L7108]              havoc account_s779;
[L7109]              havoc amount_s779;
[L7110]              havoc __ret_0_name;
[L7111]              havoc __ret_0_symbol;
[L7112]              havoc __ret_0_decimals;
[L7113]              havoc tmpNow;
[L7114]              havoc gas;
[L7115]              assume gas > 4000000 && gas <= 8000000;
[L7116]              tmpNow := now;
[L7117]              havoc now;
[L7118]              assume now > tmpNow;
[L7119]              assume msgsender_MSG != null;
[L7120]              assume DType[msgsender_MSG] != SafeMath;
[L7121]              assume DType[msgsender_MSG] != IERC20;
[L7122]              assume DType[msgsender_MSG] != StandardToken;
[L7123]              assume DType[msgsender_MSG] != Ownable;
[L7124]              assume DType[msgsender_MSG] != Pausable;
[L7125]              assume DType[msgsender_MSG] != PausableToken;
[L7126]              assume DType[msgsender_MSG] != BurnableToken;
[L7127]              assume DType[msgsender_MSG] != LUCKYToken;
[L7128]              Alloc[msgsender_MSG] := true;
[L7129]  COND TRUE   choice == 19
[L7130]              gas := gas - 21000;
[L7131]  COND TRUE   gas >= 0
[L7132]              assume _value_s670 >= 0 && _value_s670 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7133]              assume msgvalue_MSG == 0;
[L7134]  CALL        call __ret_0_transfer := transfer~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s670 && _value_s670 <= _balances_StandardToken[this][msgsender_MSG]) && _value_s670 >= 0) && _value_s670 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][_to_s670] >= 0) && _balances_StandardToken[this][_to_s670] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][msgsender_MSG] >= 0) && _balances_StandardToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_PausableToken0 := true;
[L2]                 call_transfer_PausableToken0 := false;
[L2]                 revert := revert_hold;
[L1329]              havoc __exception;
[L1330]              revert := false;
[L1331]  COND TRUE   __exception
[L1332]              __tmp__Balance := Balance;
[L1333]              __tmp__DType := DType;
[L1334]              __tmp__Alloc := Alloc;
[L1335]              __tmp__balance_ADDR := balance_ADDR;
[L1336]              __tmp__M_Ref_int := M_Ref_int;
[L1337]              __tmp__sum__balances0 := sum__balances0;
[L1338]              __tmp__alloc__allowed_StandardToken_lvl0 := alloc__allowed_StandardToken_lvl0;
[L1339]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1340]              __tmp__sum__allowed1 := sum__allowed1;
[L1341]              __tmp__Length := Length;
[L1342]              __tmp__now := now;
[L1343]              __tmp___balances_StandardToken := _balances_StandardToken;
[L1344]              __tmp___allowed_StandardToken := _allowed_StandardToken;
[L1345]              __tmp___totalSupply_StandardToken := _totalSupply_StandardToken;
[L1346]              __tmp___owner_Ownable := _owner_Ownable;
[L1347]              __tmp__paused_Pausable := paused_Pausable;
[L1348]              __tmp__name_LUCKYToken := name_LUCKYToken;
[L1349]              __tmp__symbol_LUCKYToken := symbol_LUCKYToken;
[L1350]              __tmp__decimals_LUCKYToken := decimals_LUCKYToken;
[L1351]              __tmp__INIT_TOTALSUPPLY_LUCKYToken := INIT_TOTALSUPPLY_LUCKYToken;
[L1352]              __tmp___tokenOwner_LUCKYToken := _tokenOwner_LUCKYToken;
[L1353]  CALL        call __ret_0_ := transfer~address~uint256_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L4110]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6236]  COND TRUE   !!__tmp__paused_Pausable[this]
[L6237]              revert := true;
[L4110]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4111]  COND TRUE   revert
[L1353]  RET         call __ret_0_ := transfer~address~uint256_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L1354]              assume revert || gas < 0;
[L7134]  RET         call __ret_0_transfer := transfer~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L7268]  RET         call CorralChoice_LUCKYToken(this);

Loop:
[L7268]  CALL       call CorralChoice_LUCKYToken(this);
[L7078]             havoc msgsender_MSG;
[L7079]             havoc msgvalue_MSG;
[L7080]             havoc choice;
[L7081]             havoc _to_s670;
[L7082]             havoc _value_s670;
[L7083]             havoc __ret_0_transfer;
[L7084]             havoc _spender_s709;
[L7085]             havoc _value_s709;
[L7086]             havoc __ret_0_approve;
[L7087]             havoc _from_s691;
[L7088]             havoc _to_s691;
[L7089]             havoc _value_s691;
[L7090]             havoc __ret_0_transferFrom;
[L7091]             havoc __ret_0_totalSupply;
[L7092]             havoc owner_s211;
[L7093]             havoc __ret_0_balanceOf;
[L7094]             havoc owner_s227;
[L7095]             havoc spender_s227;
[L7096]             havoc __ret_0_allowance;
[L7097]             havoc _spender_s727;
[L7098]             havoc _addedValue_s727;
[L7099]             havoc success_s727;
[L7100]             havoc _spender_s745;
[L7101]             havoc _subtractedValue_s745;
[L7102]             havoc success_s745;
[L7103]             havoc __ret_0_owner;
[L7104]             havoc __ret_0_isOwner;
[L7105]             havoc newOwner_s564;
[L7106]             havoc __ret_0_paused;
[L7107]             havoc amount_s764;
[L7108]             havoc account_s779;
[L7109]             havoc amount_s779;
[L7110]             havoc __ret_0_name;
[L7111]             havoc __ret_0_symbol;
[L7112]             havoc __ret_0_decimals;
[L7113]             havoc tmpNow;
[L7114]             havoc gas;
[L7115]             assume gas > 4000000 && gas <= 8000000;
[L7116]             tmpNow := now;
[L7117]             havoc now;
[L7118]             assume now > tmpNow;
[L7119]             assume msgsender_MSG != null;
[L7120]             assume DType[msgsender_MSG] != SafeMath;
[L7121]             assume DType[msgsender_MSG] != IERC20;
[L7122]             assume DType[msgsender_MSG] != StandardToken;
[L7123]             assume DType[msgsender_MSG] != Ownable;
[L7124]             assume DType[msgsender_MSG] != Pausable;
[L7125]             assume DType[msgsender_MSG] != PausableToken;
[L7126]             assume DType[msgsender_MSG] != BurnableToken;
[L7127]             assume DType[msgsender_MSG] != LUCKYToken;
[L7128]             Alloc[msgsender_MSG] := true;
[L7129]  COND TRUE  choice == 19
[L7130]             gas := gas - 21000;
[L7131]  COND TRUE  gas >= 0
[L7132]             assume _value_s670 >= 0 && _value_s670 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7133]             assume msgvalue_MSG == 0;
[L7134]  CALL       call __ret_0_transfer := transfer~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L2]                revert_hold := revert;
[L2]                revert := false;
[L2]                assume ((((((msgsender_MSG == _to_s670 && _value_s670 <= _balances_StandardToken[this][msgsender_MSG]) && _value_s670 >= 0) && _value_s670 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][_to_s670] >= 0) && _balances_StandardToken[this][_to_s670] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][msgsender_MSG] >= 0) && _balances_StandardToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                call_transfer_PausableToken0 := true;
[L2]                call_transfer_PausableToken0 := false;
[L2]                revert := revert_hold;
[L1329]             havoc __exception;
[L1330]             revert := false;
[L1331]  COND TRUE  __exception
[L1332]             __tmp__Balance := Balance;
[L1333]             __tmp__DType := DType;
[L1334]             __tmp__Alloc := Alloc;
[L1335]             __tmp__balance_ADDR := balance_ADDR;
[L1336]             __tmp__M_Ref_int := M_Ref_int;
[L1337]             __tmp__sum__balances0 := sum__balances0;
[L1338]             __tmp__alloc__allowed_StandardToken_lvl0 := alloc__allowed_StandardToken_lvl0;
[L1339]             __tmp__M_Ref_Ref := M_Ref_Ref;
[L1340]             __tmp__sum__allowed1 := sum__allowed1;
[L1341]             __tmp__Length := Length;
[L1342]             __tmp__now := now;
[L1343]             __tmp___balances_StandardToken := _balances_StandardToken;
[L1344]             __tmp___allowed_StandardToken := _allowed_StandardToken;
[L1345]             __tmp___totalSupply_StandardToken := _totalSupply_StandardToken;
[L1346]             __tmp___owner_Ownable := _owner_Ownable;
[L1347]             __tmp__paused_Pausable := paused_Pausable;
[L1348]             __tmp__name_LUCKYToken := name_LUCKYToken;
[L1349]             __tmp__symbol_LUCKYToken := symbol_LUCKYToken;
[L1350]             __tmp__decimals_LUCKYToken := decimals_LUCKYToken;
[L1351]             __tmp__INIT_TOTALSUPPLY_LUCKYToken := INIT_TOTALSUPPLY_LUCKYToken;
[L1352]             __tmp___tokenOwner_LUCKYToken := _tokenOwner_LUCKYToken;
[L1353]  CALL       call __ret_0_ := transfer~address~uint256_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L4110]  CALL       call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6236]  COND TRUE  !!__tmp__paused_Pausable[this]
[L6237]             revert := true;
[L4110]  RET        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4111]  COND TRUE  revert
[L1353]  RET        call __ret_0_ := transfer~address~uint256_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L1354]             assume revert || gas < 0;
[L7134]  RET        call __ret_0_transfer := transfer~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L7268]  RET        call CorralChoice_LUCKYToken(this);

[2020-11-24 20:41:20,460 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:41:20,460 INFO  L82        PathProgramCache]: Analyzing trace with hash 932152689, now seen corresponding path program 2 times
[2020-11-24 20:41:20,460 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:41:20,474 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:41:20,488 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:41:20,528 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:41:20,528 INFO  L82        PathProgramCache]: Analyzing trace with hash 812427451, now seen corresponding path program 1 times
[2020-11-24 20:41:20,529 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:41:20,532 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:41:20,535 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:41:20,541 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:41:20,542 INFO  L82        PathProgramCache]: Analyzing trace with hash 1749592619, now seen corresponding path program 1 times
[2020-11-24 20:41:20,542 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:41:20,558 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:41:20,577 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1571 to 3137
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #6: 1237 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1237 to 2473
Garbage collection #7: 2473 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2473 to 4943
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 3019 to 6037
[2020-11-24 20:41:20,972 WARN  L188               SmtUtils]: Spent 118.00 ms on a formula simplification that was a NOOP. DAG size: 190
[2020-11-24 20:41:21,288 WARN  L188               SmtUtils]: Spent 312.00 ms on a formula simplification. DAG size of input: 244 DAG size of output: 240
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 2647 to 5281
Garbage collection #7: 5281 nodes / 0 free / 0.001s / 0.004s total
Resizing node table from 5281 to 10559
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1759 to 3517
[2020-11-24 20:41:21,513 WARN  L188               SmtUtils]: Spent 129.00 ms on a formula simplification that was a NOOP. DAG size: 308
Garbage collection #1: 127 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 3967 to 7933
[2020-11-24 20:41:21,623 WARN  L188               SmtUtils]: Spent 103.00 ms on a formula simplification that was a NOOP. DAG size: 247
[2020-11-24 20:41:21,737 WARN  L188               SmtUtils]: Spent 112.00 ms on a formula simplification that was a NOOP. DAG size: 247
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
[2020-11-24 20:41:21,838 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
[2020-11-24 20:41:22,640 WARN  L188               SmtUtils]: Spent 489.00 ms on a formula simplification. DAG size of input: 294 DAG size of output: 282
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #6: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #7: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
[2020-11-24 20:41:23,830 WARN  L188               SmtUtils]: Spent 418.00 ms on a formula simplification. DAG size of input: 243 DAG size of output: 240
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #7: 5281 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5281 to 10559
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #7: 3517 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3517 to 7027
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
[2020-11-24 20:41:25,408 WARN  L188               SmtUtils]: Spent 1.29 s on a formula simplification. DAG size of input: 637 DAG size of output: 625
Garbage collection #1: 263 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 263 to 523
Garbage collection #2: 523 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 523 to 1039
Garbage collection #3: 1039 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1039 to 2069
Garbage collection #4: 2069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2069 to 4133
Garbage collection #5: 4133 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4133 to 8263
Garbage collection #6: 8263 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8263 to 16519
Garbage collection #7: 16519 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 16519 to 33037
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
[2020-11-24 20:41:25,577 WARN  L188               SmtUtils]: Spent 151.00 ms on a formula simplification. DAG size of input: 215 DAG size of output: 212
[2020-11-24 20:41:25,724 WARN  L188               SmtUtils]: Spent 131.00 ms on a formula simplification that was a NOOP. DAG size: 318
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
[2020-11-24 20:41:26,043 WARN  L188               SmtUtils]: Spent 252.00 ms on a formula simplification. DAG size of input: 320 DAG size of output: 319
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
[2020-11-24 20:41:26,170 WARN  L188               SmtUtils]: Spent 124.00 ms on a formula simplification that was a NOOP. DAG size: 315
[2020-11-24 20:41:26,187 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:41:26,207 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:41:26,216 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 08:41:26 BasicIcfg
[2020-11-24 20:41:26,216 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-24 20:41:26,216 INFO  L168              Benchmark]: Toolchain (without parser) took 37999.66 ms. Allocated memory was 1.0 GB in the beginning and 2.6 GB in the end (delta: 1.6 GB). Free memory was 929.8 MB in the beginning and 1.2 GB in the end (delta: -248.1 MB). Peak memory consumption was 1.6 GB. Max. memory is 15.3 GB.
[2020-11-24 20:41:26,216 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 20:41:26,217 INFO  L168              Benchmark]: Boogie Preprocessor took 92.05 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.7 MB in the end (delta: 16.2 MB). Peak memory consumption was 16.2 MB. Max. memory is 15.3 GB.
[2020-11-24 20:41:26,217 INFO  L168              Benchmark]: UtopiaSpecLang took 64.72 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 908.3 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-24 20:41:26,218 INFO  L168              Benchmark]: Boogie Printer took 21.23 ms. Allocated memory is still 1.0 GB. Free memory was 908.3 MB in the beginning and 902.9 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-24 20:41:26,218 INFO  L168              Benchmark]: RCFGBuilder took 1068.63 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 62.9 MB). Free memory was 902.9 MB in the beginning and 977.7 MB in the end (delta: -74.8 MB). Peak memory consumption was 191.6 MB. Max. memory is 15.3 GB.
[2020-11-24 20:41:26,218 INFO  L168              Benchmark]: UtopiaLTL2Aut took 42.35 ms. Allocated memory is still 1.1 GB. Free memory was 977.7 MB in the beginning and 968.2 MB in the end (delta: 9.5 MB). Peak memory consumption was 9.5 MB. Max. memory is 15.3 GB.
[2020-11-24 20:41:26,218 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1714.94 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 161.5 MB). Free memory was 968.2 MB in the beginning and 827.9 MB in the end (delta: 140.3 MB). Peak memory consumption was 471.7 MB. Max. memory is 15.3 GB.
[2020-11-24 20:41:26,219 INFO  L168              Benchmark]: BlockEncodingV2 took 197.79 ms. Allocated memory is still 1.3 GB. Free memory was 827.9 MB in the beginning and 726.3 MB in the end (delta: 101.6 MB). Peak memory consumption was 101.6 MB. Max. memory is 15.3 GB.
[2020-11-24 20:41:26,219 INFO  L168              Benchmark]: BuchiAutomizer took 34795.44 ms. Allocated memory was 1.3 GB in the beginning and 2.6 GB in the end (delta: 1.3 GB). Free memory was 726.3 MB in the beginning and 1.2 GB in the end (delta: -451.7 MB). Peak memory consumption was 1.2 GB. Max. memory is 15.3 GB.
[2020-11-24 20:41:26,221 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    6836 locations, 12831 edges
  - StatisticsResult: Encoded RCFG
    6716 locations, 12500 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 92.05 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.7 MB in the end (delta: 16.2 MB). Peak memory consumption was 16.2 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 64.72 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 908.3 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 21.23 ms. Allocated memory is still 1.0 GB. Free memory was 908.3 MB in the beginning and 902.9 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1068.63 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 62.9 MB). Free memory was 902.9 MB in the beginning and 977.7 MB in the end (delta: -74.8 MB). Peak memory consumption was 191.6 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 42.35 ms. Allocated memory is still 1.1 GB. Free memory was 977.7 MB in the beginning and 968.2 MB in the end (delta: 9.5 MB). Peak memory consumption was 9.5 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1714.94 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 161.5 MB). Free memory was 968.2 MB in the beginning and 827.9 MB in the end (delta: 140.3 MB). Peak memory consumption was 471.7 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 197.79 ms. Allocated memory is still 1.3 GB. Free memory was 827.9 MB in the beginning and 726.3 MB in the end (delta: 101.6 MB). Peak memory consumption was 101.6 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 34795.44 ms. Allocated memory was 1.3 GB in the beginning and 2.6 GB in the end (delta: 1.3 GB). Free memory was 726.3 MB in the beginning and 1.2 GB in the end (delta: -451.7 MB). Peak memory consumption was 1.2 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2615 locations, 3887 edges
  - StatisticsResult: BuchiProgram size
    6836 locations, 12831 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 15 terminating modules (15 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.15 modules have a trivial ranking function, the largest among these consists of 29 locations. The remainder module has 5861 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 34.7s and 16 iterations.  TraceHistogramMax:6. Analysis of lassos took 8.7s. Construction of modules took 19.3s. BÃ¼chi inclusion checks took 5.2s. Highest rank in rank-based complementation 0. Minimization of det autom 15. Minimization of nondet autom 0. Automata minimization 0.5s AutomataMinimizationTime, 15 MinimizatonAttempts, 5497 StatesRemovedByMinimization, 12 NontrivialMinimizations. Non-live state removal took 0.3s Buchi closure took 0.0s. Biggest automaton had 5861 states and ocurred in iteration 15.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 67020 SDtfs, 52382 SDslu, 205037 SDs, 0 SdLazy, 257239 SolverSat, 10886 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 19.3s Time	LassoAnalysisResults: nont1 unkn0 SFLI0 SFLT0 conc1 concLT0 SILN0 SILU14 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(115792089237316195423570985008687907853269984665640564039457584007913129639943) = (new LUCKYToken)({from : 115792089237316195423570985008687907853269984665640564039457584007913129639948});
[L1849]              havoc __exception;
[L1850]              revert := false;
[L1851]  COND FALSE  !(__exception)
[L1876]  CALL        call LUCKYToken_LUCKYToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4580]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4580]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4581]  COND FALSE  !(revert)
[L4584]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3118]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L3118]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3119]  COND FALSE  !(revert)
[L3122]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3094]              assume msgsender_MSG != null;
[L3095]              Balance[this] := 0;
[L3096]              _balances_StandardToken[this] := zeroRefintArr();
[L3097]              sum__balances0[this] := 0;
[L3098]              _allowed_StandardToken[this] := zeroRefRefintArr();
[L3099]              sum__allowed1[this] := 0;
[L3100]              _totalSupply_StandardToken[this] := 0;
[L3122]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4584]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4585]  COND FALSE  !(revert)
[L4588]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L4588]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4589]  COND FALSE  !(revert)
[L4592]  CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4394]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4394]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4395]  COND FALSE  !(revert)
[L4398]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3118]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L3118]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3119]  COND FALSE  !(revert)
[L3122]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3094]              assume msgsender_MSG != null;
[L3095]              Balance[this] := 0;
[L3096]              _balances_StandardToken[this] := zeroRefintArr();
[L3097]              sum__balances0[this] := 0;
[L3098]              _allowed_StandardToken[this] := zeroRefRefintArr();
[L3099]              sum__allowed1[this] := 0;
[L3100]              _totalSupply_StandardToken[this] := 0;
[L3122]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4398]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4399]  COND FALSE  !(revert)
[L4402]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L4402]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4403]  COND FALSE  !(revert)
[L4406]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4367]              assume msgsender_MSG != null;
[L4368]              Balance[this] := 0;
[L4406]  RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4407]  COND FALSE  !(revert)
[L4592]  RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4593]  COND FALSE  !(revert)
[L4596]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3966]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L3966]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3967]  COND FALSE  !(revert)
[L3970]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3946]              assume msgsender_MSG != null;
[L3947]              Balance[this] := 0;
[L3948]              paused_Pausable[this] := false;
[L3970]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3971]  COND FALSE  !(revert)
[L4596]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4597]  COND FALSE  !(revert)
[L4600]  CALL        call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4084]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4084]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4085]  COND FALSE  !(revert)
[L4088]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3118]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L3118]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3119]  COND FALSE  !(revert)
[L3122]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3094]              assume msgsender_MSG != null;
[L3095]              Balance[this] := 0;
[L3096]              _balances_StandardToken[this] := zeroRefintArr();
[L3097]              sum__balances0[this] := 0;
[L3098]              _allowed_StandardToken[this] := zeroRefRefintArr();
[L3099]              sum__allowed1[this] := 0;
[L3100]              _totalSupply_StandardToken[this] := 0;
[L3122]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4088]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4089]  COND FALSE  !(revert)
[L4092]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L4092]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]  COND FALSE  !(revert)
[L4096]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3966]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L3966]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3967]  COND FALSE  !(revert)
[L3970]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3946]              assume msgsender_MSG != null;
[L3947]              Balance[this] := 0;
[L3948]              paused_Pausable[this] := false;
[L3970]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3971]  COND FALSE  !(revert)
[L4096]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4097]  COND FALSE  !(revert)
[L4100]  CALL        call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4053]              assume msgsender_MSG != null;
[L4054]              Balance[this] := 0;
[L4100]  RET         call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4101]  COND FALSE  !(revert)
[L4600]  RET         call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4601]  COND FALSE  !(revert)
[L4604]  CALL        call LUCKYToken_LUCKYToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4523]              assume msgsender_MSG != null;
[L4524]              Balance[this] := 0;
[L4525]              name_LUCKYToken[this] := -927166810;
[L4526]              symbol_LUCKYToken[this] := -927166810;
[L4527]              decimals_LUCKYToken[this] := 18;
[L4528]              INIT_TOTALSUPPLY_LUCKYToken[this] := 10000000000;
[L4529]              __var_26 := ConstantToRef(625314775344980695514831456764478199936221022047);
[L4530]              _tokenOwner_LUCKYToken[this] := ConstantToRef(625314775344980695514831456764478199936221022047);
[L4532]              __var_25 := decimals_LUCKYToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4533]              _totalSupply_StandardToken[this] := nonlinearMul(INIT_TOTALSUPPLY_LUCKYToken[this], nonlinearPow(10, decimals_LUCKYToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4534]              _owner_Ownable[this] := _tokenOwner_LUCKYToken[this];
[L4535]              assert { :EventEmitted "OwnershipTransferred_LUCKYToken" } true;
[L4536]              sum__balances0[this] := sum__balances0[this] - _balances_StandardToken[this][_owner_Ownable[this]];
[L4537]              _balances_StandardToken[this][_owner_Ownable[this]] := _totalSupply_StandardToken[this];
[L4538]              sum__balances0[this] := sum__balances0[this] + _balances_StandardToken[this][_owner_Ownable[this]];
[L4539]              assert { :EventEmitted "Transfer_LUCKYToken" } true;
[L4604]  RET         call LUCKYToken_LUCKYToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4605]  COND FALSE  !(revert)
[L1876]  RET         call LUCKYToken_LUCKYToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1877]              assume !revert && gas >= 0;
[L7264]  RET         call LUCKYToken_LUCKYToken(this, msgsender_MSG, msgvalue_MSG);
Pausable(115792089237316195423570985008687907853269984665640564039457584007913129639943).pause.gas(3979002)({from : 625314775344980695514831456764478199936221022047});
[L1084]              havoc __exception;
[L1085]              revert := false;
[L1086]  COND FALSE  !(__exception)
[L1111]  CALL        call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3991]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6200]  COND TRUE   DType[this] == LUCKYToken
[L6201]  CALL        call __var_13 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3835]              __ret_0_ := msgsender_MSG == _owner_Ownable[this];
[L6201]  RET         call __var_13 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6202]  COND FALSE  !(revert)
[L6228]  COND FALSE  !(!__var_13)
[L3991]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3992]  COND FALSE  !(revert)
[L3995]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6244]  COND FALSE  !(!!paused_Pausable[this])
[L3995]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3996]  COND FALSE  !(revert)
[L3999]              paused_Pausable[this] := true;
[L4000]              assert { :EventEmitted "Pause_Pausable" } true;
[L1111]  RET         call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]              assume !revert && gas >= 0;
[L7210]  RET         call pause_Pausable(this, msgsender_MSG, msgvalue_MSG);
PausableToken(115792089237316195423570985008687907853269984665640564039457584007913129639943).transfer~address~uint256.gas(3979003)({from : 115792089237316195423570985008687907853269984665640564039457584007913129639949, _to : 115792089237316195423570985008687907853269984665640564039457584007913129639949, _value : 0});
[L2]                revert_hold := revert;
[L2]                revert := false;
[L2]                assume ((((((msgsender_MSG == _to_s670 && _value_s670 <= _balances_StandardToken[this][msgsender_MSG]) && _value_s670 >= 0) && _value_s670 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][_to_s670] >= 0) && _balances_StandardToken[this][_to_s670] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][msgsender_MSG] >= 0) && _balances_StandardToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                call_transfer_PausableToken0 := true;
[L2]                call_transfer_PausableToken0 := false;
[L2]                revert := revert_hold;
[L1329]             havoc __exception;
[L1330]             revert := false;
[L1331]  COND TRUE  __exception
[L1332]             __tmp__Balance := Balance;
[L1333]             __tmp__DType := DType;
[L1334]             __tmp__Alloc := Alloc;
[L1335]             __tmp__balance_ADDR := balance_ADDR;
[L1336]             __tmp__M_Ref_int := M_Ref_int;
[L1337]             __tmp__sum__balances0 := sum__balances0;
[L1338]             __tmp__alloc__allowed_StandardToken_lvl0 := alloc__allowed_StandardToken_lvl0;
[L1339]             __tmp__M_Ref_Ref := M_Ref_Ref;
[L1340]             __tmp__sum__allowed1 := sum__allowed1;
[L1341]             __tmp__Length := Length;
[L1342]             __tmp__now := now;
[L1343]             __tmp___balances_StandardToken := _balances_StandardToken;
[L1344]             __tmp___allowed_StandardToken := _allowed_StandardToken;
[L1345]             __tmp___totalSupply_StandardToken := _totalSupply_StandardToken;
[L1346]             __tmp___owner_Ownable := _owner_Ownable;
[L1347]             __tmp__paused_Pausable := paused_Pausable;
[L1348]             __tmp__name_LUCKYToken := name_LUCKYToken;
[L1349]             __tmp__symbol_LUCKYToken := symbol_LUCKYToken;
[L1350]             __tmp__decimals_LUCKYToken := decimals_LUCKYToken;
[L1351]             __tmp__INIT_TOTALSUPPLY_LUCKYToken := INIT_TOTALSUPPLY_LUCKYToken;
[L1352]             __tmp___tokenOwner_LUCKYToken := _tokenOwner_LUCKYToken;
[L1353]  CALL       call __ret_0_ := transfer~address~uint256_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L4110]  CALL       call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6236]  COND TRUE  !!__tmp__paused_Pausable[this]
[L6237]             revert := true;
[L4110]  RET        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4111]  COND TRUE  revert
[L1353]  RET        call __ret_0_ := transfer~address~uint256_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L1354]             assume revert || gas < 0;
[L7134]  RET        call __ret_0_transfer := transfer~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);

Loop:
PausableToken(115792089237316195423570985008687907853269984665640564039457584007913129639943).transfer~address~uint256.gas(3979001)({from : 625314775344980695514831456764478199936221022047, _to : 625314775344980695514831456764478199936221022047, _value : 0});
[L2]                revert_hold := revert;
[L2]                revert := false;
[L2]                assume ((((((msgsender_MSG == _to_s670 && _value_s670 <= _balances_StandardToken[this][msgsender_MSG]) && _value_s670 >= 0) && _value_s670 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][_to_s670] >= 0) && _balances_StandardToken[this][_to_s670] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][msgsender_MSG] >= 0) && _balances_StandardToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                call_transfer_PausableToken0 := true;
[L2]                call_transfer_PausableToken0 := false;
[L2]                revert := revert_hold;
[L1329]             havoc __exception;
[L1330]             revert := false;
[L1331]  COND TRUE  __exception
[L1332]             __tmp__Balance := Balance;
[L1333]             __tmp__DType := DType;
[L1334]             __tmp__Alloc := Alloc;
[L1335]             __tmp__balance_ADDR := balance_ADDR;
[L1336]             __tmp__M_Ref_int := M_Ref_int;
[L1337]             __tmp__sum__balances0 := sum__balances0;
[L1338]             __tmp__alloc__allowed_StandardToken_lvl0 := alloc__allowed_StandardToken_lvl0;
[L1339]             __tmp__M_Ref_Ref := M_Ref_Ref;
[L1340]             __tmp__sum__allowed1 := sum__allowed1;
[L1341]             __tmp__Length := Length;
[L1342]             __tmp__now := now;
[L1343]             __tmp___balances_StandardToken := _balances_StandardToken;
[L1344]             __tmp___allowed_StandardToken := _allowed_StandardToken;
[L1345]             __tmp___totalSupply_StandardToken := _totalSupply_StandardToken;
[L1346]             __tmp___owner_Ownable := _owner_Ownable;
[L1347]             __tmp__paused_Pausable := paused_Pausable;
[L1348]             __tmp__name_LUCKYToken := name_LUCKYToken;
[L1349]             __tmp__symbol_LUCKYToken := symbol_LUCKYToken;
[L1350]             __tmp__decimals_LUCKYToken := decimals_LUCKYToken;
[L1351]             __tmp__INIT_TOTALSUPPLY_LUCKYToken := INIT_TOTALSUPPLY_LUCKYToken;
[L1352]             __tmp___tokenOwner_LUCKYToken := _tokenOwner_LUCKYToken;
[L1353]  CALL       call __ret_0_ := transfer~address~uint256_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L4110]  CALL       call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6236]  COND TRUE  !!__tmp__paused_Pausable[this]
[L6237]             revert := true;
[L4110]  RET        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4111]  COND TRUE  revert
[L1353]  RET        call __ret_0_ := transfer~address~uint256_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);
[L1354]             assume revert || gas < 0;
[L7134]  RET        call __ret_0_transfer := transfer~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _to_s670, _value_s670);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
