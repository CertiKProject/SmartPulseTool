This is Ultimate 0.1.24-f1553f5-m
[2020-11-24 21:41:00,123 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-24 21:41:00,124 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-24 21:41:00,136 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-24 21:41:00,136 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-24 21:41:00,137 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-24 21:41:00,138 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-24 21:41:00,140 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-24 21:41:00,142 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-24 21:41:00,143 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-24 21:41:00,144 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-24 21:41:00,144 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-24 21:41:00,145 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-24 21:41:00,146 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-24 21:41:00,147 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-24 21:41:00,147 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-24 21:41:00,148 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-24 21:41:00,150 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-24 21:41:00,151 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-24 21:41:00,152 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-24 21:41:00,153 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-24 21:41:00,154 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-24 21:41:00,156 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-24 21:41:00,156 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-24 21:41:00,156 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-24 21:41:00,157 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-24 21:41:00,157 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-24 21:41:00,158 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-24 21:41:00,158 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-24 21:41:00,158 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-24 21:41:00,159 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-24 21:41:00,159 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-24 21:41:00,160 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-24 21:41:00,160 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-24 21:41:00,161 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-24 21:41:00,161 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-24 21:41:00,162 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-24 21:41:00,162 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-24 21:41:00,162 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-24 21:41:00,163 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-24 21:41:00,163 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-24 21:41:00,163 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-24 21:41:00,172 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-24 21:41:00,172 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-24 21:41:00,173 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-24 21:41:00,173 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-24 21:41:00,173 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-24 21:41:00,173 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-24 21:41:00,173 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-24 21:41:00,173 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-24 21:41:00,173 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-24 21:41:00,174 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-24 21:41:00,174 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-24 21:41:00,174 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-24 21:41:00,174 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-24 21:41:00,175 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-24 21:41:00,175 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-24 21:41:00,175 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-24 21:41:00,175 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-24 21:41:00,175 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-24 21:41:00,175 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-24 21:41:00,175 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-24 21:41:00,175 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-24 21:41:00,175 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-24 21:41:00,176 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-24 21:41:00,176 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-24 21:41:00,176 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-24 21:41:00,176 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-24 21:41:00,198 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-24 21:41:00,212 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-24 21:41:00,215 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-24 21:41:00,216 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-24 21:41:00,216 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-24 21:41:00,217 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/MainToken_0xa2d0e29a9627e20FD886a8106DD0AE429403a57d_transferfrom-self.bpl
[2020-11-24 21:41:00,217 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/MainToken_0xa2d0e29a9627e20FD886a8106DD0AE429403a57d_transferfrom-self.bpl'
[2020-11-24 21:41:00,379 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-24 21:41:00,380 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-24 21:41:00,380 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-24 21:41:00,380 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-24 21:41:00,380 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-24 21:41:00,397 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "MainToken_0xa2d0e29a9627e20FD886a8106DD0AE429403a57d_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:41:00" (1/1) ...
[2020-11-24 21:41:00,399 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "MainToken_0xa2d0e29a9627e20FD886a8106DD0AE429403a57d_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:41:00" (1/1) ...
[2020-11-24 21:41:00,454 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "MainToken_0xa2d0e29a9627e20FD886a8106DD0AE429403a57d_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:41:00" (1/1) ...
[2020-11-24 21:41:00,455 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "MainToken_0xa2d0e29a9627e20FD886a8106DD0AE429403a57d_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:41:00" (1/1) ...
[2020-11-24 21:41:00,503 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "MainToken_0xa2d0e29a9627e20FD886a8106DD0AE429403a57d_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:41:00" (1/1) ...
[2020-11-24 21:41:00,529 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "MainToken_0xa2d0e29a9627e20FD886a8106DD0AE429403a57d_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:41:00" (1/1) ...
[2020-11-24 21:41:00,550 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "MainToken_0xa2d0e29a9627e20FD886a8106DD0AE429403a57d_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:41:00" (1/1) ...
[2020-11-24 21:41:00,576 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-24 21:41:00,577 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-24 21:41:00,577 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-24 21:41:00,579 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-24 21:41:00,583 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "MainToken_0xa2d0e29a9627e20FD886a8106DD0AE429403a57d_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:41:00" (1/1) ...
[2020-11-24 21:41:00,616 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(MainToken.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= balances_BasicToken[this][from] && value <= allowed_StandardToken[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][from] >= 0 &&  balances_BasicToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_StandardToken[this][from][msg.sender] >= 0 && allowed_StandardToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(MainToken.transferFrom(from, to, value), return == true && allowed_StandardToken[this][from][msg.sender] == old(allowed_StandardToken[this][from][msg.sender]) - value && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 21:41:00,622 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(MainToken.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= balances_BasicToken[this][from] && value <= allowed_StandardToken[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][from] >= 0 &&  balances_BasicToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_StandardToken[this][from][msg.sender] >= 0 && allowed_StandardToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(MainToken.transferFrom(from, to, value), return == true && allowed_StandardToken[this][from][msg.sender] == old(allowed_StandardToken[this][from][msg.sender]) - value && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 21:41:00,631 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(MainToken.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= balances_BasicToken[this][from] && value <= allowed_StandardToken[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][from] >= 0 &&  balances_BasicToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_StandardToken[this][from][msg.sender] >= 0 && allowed_StandardToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(MainToken.transferFrom(from, to, value), return == true && allowed_StandardToken[this][from][msg.sender] == old(allowed_StandardToken[this][from][msg.sender]) - value && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 21:41:00,646 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( p1!=_from_s1551 || p2!=msg.sender ) && _from_s1551==_to_s1551 ) && _value_s1551<=balances_BasicToken[this][_from_s1551] ) && _value_s1551<=allowed_StandardToken[this][_from_s1551][msg.sender] ) && _value_s1551>=0 ) && _value_s1551<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BasicToken[this][_to_s1551]>=0 ) && balances_BasicToken[this][_to_s1551]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BasicToken[this][_from_s1551]>=0 ) && balances_BasicToken[this][_from_s1551]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && allowed_StandardToken[this][_from_s1551][msg.sender]>=0 ) && allowed_StandardToken[this][_from_s1551][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[_from_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]],BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],BinaryExpression[COMPEQ,IdentifierExpression[_from_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>],IdentifierExpression[_to_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],BinaryExpression[COMPLEQ,IdentifierExpression[_value_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[_from_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]]]],BinaryExpression[COMPLEQ,IdentifierExpression[_value_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[_from_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[_value_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_value_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[_to_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[_to_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[_from_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[_from_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[_from_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[_from_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-24 21:41:00,650 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( _success_s1551==true && allowed_StandardToken[this][_from_s1551][msg.sender]==( ( old(allowed_StandardToken[this][_from_s1551][msg.sender]) ) - _value_s1551 ) ) && totalSupply__BasicToken[this]==( old(totalSupply__BasicToken[this]) ) ) && balances_BasicToken[this]==( old(balances_BasicToken[this]) ) ) && allowed_StandardToken[this][p1][p2]==( old(allowed_StandardToken[this][p1][p2]) ) ) && initialized_MainToken[this]==( old(initialized_MainToken[this]) ) ) && paused_Pausable[this]==( old(paused_Pausable[this]) ) ) && mintingFinished_MintableToken[this]==( old(mintingFinished_MintableToken[this]) ) ) && owner_Ownable[this]==( old(owner_Ownable[this]) ) ) && chains_FreezableToken[this]==( old(chains_FreezableToken[this]) ) ) && freezings_FreezableToken[this]==( old(freezings_FreezableToken[this]) ) ) && freezingBalance_FreezableToken[this]==( old(freezingBalance_FreezableToken[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[_success_s1551,<IMPLEMENTATION_OUTPARAM,transferFrom~address~address~uint256_MainToken>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[_from_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[_from_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]]],IdentifierExpression[_value_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[initialized_MainToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[initialized_MainToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[mintingFinished_MintableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[mintingFinished_MintableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[chains_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[chains_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[freezings_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[freezings_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[freezingBalance_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[freezingBalance_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]]]]]
[2020-11-24 21:41:00,658 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(MainToken.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= balances_BasicToken[this][from] && value <= allowed_StandardToken[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][from] >= 0 &&  balances_BasicToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_StandardToken[this][from][msg.sender] >= 0 && allowed_StandardToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(MainToken.transferFrom(from, to, value), return == true && allowed_StandardToken[this][from][msg.sender] == old(allowed_StandardToken[this][from][msg.sender]) - value && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 21:41:00,659 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_MainToken0) ==> ( <>AP(success_transferFrom_MainToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-24 21:41:00,684 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:41:00 PropertyContainer
[2020-11-24 21:41:00,684 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-24 21:41:00,685 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-24 21:41:00,685 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-24 21:41:00,685 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-24 21:41:00,686 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "MainToken_0xa2d0e29a9627e20FD886a8106DD0AE429403a57d_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:41:00" (1/2) ...
[2020-11-24 21:41:00,686 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-24 21:41:00,686 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-24 21:41:00,721 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:41:00" (2/2) ...
[2020-11-24 21:41:00,721 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-24 21:41:00,721 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-24 21:41:00,721 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-24 21:41:00,721 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-24 21:41:00,722 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "MainToken_0xa2d0e29a9627e20FD886a8106DD0AE429403a57d_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:41:00" (1/2) ...
[2020-11-24 21:41:00,778 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-24 21:41:00,778 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-24 21:41:00,778 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic
[2020-11-24 21:41:00,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic
[2020-11-24 21:41:00,778 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Basic
[2020-11-24 21:41:00,778 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Basic
[2020-11-24 21:41:00,778 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Basic
[2020-11-24 21:41:00,779 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 21:41:00,779 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-24 21:41:00,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-24 21:41:00,779 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 21:41:00,779 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 21:41:00,779 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 21:41:00,779 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 21:41:00,779 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-24 21:41:00,780 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken
[2020-11-24 21:41:00,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken
[2020-11-24 21:41:00,780 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken
[2020-11-24 21:41:00,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken
[2020-11-24 21:41:00,780 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken
[2020-11-24 21:41:00,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken
[2020-11-24 21:41:00,781 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken
[2020-11-24 21:41:00,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken
[2020-11-24 21:41:00,781 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 21:41:00,781 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-24 21:41:00,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-24 21:41:00,781 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-24 21:41:00,781 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-24 21:41:00,781 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-24 21:41:00,781 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-24 21:41:00,781 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken
[2020-11-24 21:41:00,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken
[2020-11-24 21:41:00,782 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-24 21:41:00,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-24 21:41:00,782 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken
[2020-11-24 21:41:00,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken
[2020-11-24 21:41:00,782 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken
[2020-11-24 21:41:00,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken
[2020-11-24 21:41:00,782 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken
[2020-11-24 21:41:00,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken
[2020-11-24 21:41:00,782 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-24 21:41:00,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-24 21:41:00,783 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 21:41:00,783 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-24 21:41:00,783 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-24 21:41:00,783 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable
[2020-11-24 21:41:00,783 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable
[2020-11-24 21:41:00,783 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-24 21:41:00,783 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-24 21:41:00,783 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__success
[2020-11-24 21:41:00,783 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-24 21:41:00,783 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-24 21:41:00,784 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-24 21:41:00,784 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken
[2020-11-24 21:41:00,784 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken
[2020-11-24 21:41:00,784 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken
[2020-11-24 21:41:00,784 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken
[2020-11-24 21:41:00,784 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken
[2020-11-24 21:41:00,784 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken
[2020-11-24 21:41:00,784 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken
[2020-11-24 21:41:00,784 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken
[2020-11-24 21:41:00,784 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken_NoBaseCtor__success
[2020-11-24 21:41:00,784 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken
[2020-11-24 21:41:00,785 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken
[2020-11-24 21:41:00,785 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken
[2020-11-24 21:41:00,785 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken
[2020-11-24 21:41:00,785 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken
[2020-11-24 21:41:00,785 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken
[2020-11-24 21:41:00,785 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken
[2020-11-24 21:41:00,785 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken
[2020-11-24 21:41:00,785 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken
[2020-11-24 21:41:00,785 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken
[2020-11-24 21:41:00,785 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken
[2020-11-24 21:41:00,785 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken
[2020-11-24 21:41:00,786 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken
[2020-11-24 21:41:00,786 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken
[2020-11-24 21:41:00,786 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken
[2020-11-24 21:41:00,786 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken
[2020-11-24 21:41:00,786 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken
[2020-11-24 21:41:00,786 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken
[2020-11-24 21:41:00,786 INFO  L130     BoogieDeclarations]: Found specification of procedure toKey~address~uint256_FreezableToken__success
[2020-11-24 21:41:00,786 INFO  L130     BoogieDeclarations]: Found specification of procedure freeze~address~uint64_FreezableToken__success
[2020-11-24 21:41:00,786 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-24 21:41:00,786 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken
[2020-11-24 21:41:00,787 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken
[2020-11-24 21:41:00,787 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken
[2020-11-24 21:41:00,787 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken
[2020-11-24 21:41:00,787 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_BurnableToken__success
[2020-11-24 21:41:00,787 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-24 21:41:00,787 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-24 21:41:00,787 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-24 21:41:00,787 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-24 21:41:00,787 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-24 21:41:00,787 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-24 21:41:00,787 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-24 21:41:00,788 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-24 21:41:00,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-24 21:41:00,788 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success
[2020-11-24 21:41:00,788 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken
[2020-11-24 21:41:00,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken
[2020-11-24 21:41:00,788 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken
[2020-11-24 21:41:00,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken
[2020-11-24 21:41:00,788 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts_NoBaseCtor__success
[2020-11-24 21:41:00,788 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts
[2020-11-24 21:41:00,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts
[2020-11-24 21:41:00,788 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts
[2020-11-24 21:41:00,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts
[2020-11-24 21:41:00,789 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts
[2020-11-24 21:41:00,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts
[2020-11-24 21:41:00,789 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts
[2020-11-24 21:41:00,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts
[2020-11-24 21:41:00,789 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts
[2020-11-24 21:41:00,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts
[2020-11-24 21:41:00,789 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts
[2020-11-24 21:41:00,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts
[2020-11-24 21:41:00,789 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts
[2020-11-24 21:41:00,790 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts
[2020-11-24 21:41:00,790 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts
[2020-11-24 21:41:00,790 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts
[2020-11-24 21:41:00,790 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts
[2020-11-24 21:41:00,790 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts
[2020-11-24 21:41:00,790 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken_NoBaseCtor__success
[2020-11-24 21:41:00,790 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken
[2020-11-24 21:41:00,790 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken
[2020-11-24 21:41:00,790 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken
[2020-11-24 21:41:00,790 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken
[2020-11-24 21:41:00,791 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken
[2020-11-24 21:41:00,791 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken
[2020-11-24 21:41:00,791 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken
[2020-11-24 21:41:00,791 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken
[2020-11-24 21:41:00,791 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken
[2020-11-24 21:41:00,791 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken
[2020-11-24 21:41:00,791 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken
[2020-11-24 21:41:00,791 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken
[2020-11-24 21:41:00,791 INFO  L130     BoogieDeclarations]: Found specification of procedure init_MainToken__success
[2020-11-24 21:41:00,791 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken
[2020-11-24 21:41:00,792 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken
[2020-11-24 21:41:00,792 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-24 21:41:00,792 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-24 21:41:00,792 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-24 21:41:00,792 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-24 21:41:00,792 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__success
[2020-11-24 21:41:00,792 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__success
[2020-11-24 21:41:00,792 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-24 21:41:00,792 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-24 21:41:00,793 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Basic
[2020-11-24 21:41:00,793 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Basic
[2020-11-24 21:41:00,793 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-24 21:41:00,793 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-24 21:41:00,793 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BasicToken
[2020-11-24 21:41:00,793 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BasicToken
[2020-11-24 21:41:00,793 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-24 21:41:00,793 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-24 21:41:00,794 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_StandardToken
[2020-11-24 21:41:00,794 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_StandardToken
[2020-11-24 21:41:00,794 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-24 21:41:00,794 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-24 21:41:00,794 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MintableToken
[2020-11-24 21:41:00,794 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MintableToken
[2020-11-24 21:41:00,794 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_FreezableToken
[2020-11-24 21:41:00,794 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_FreezableToken
[2020-11-24 21:41:00,794 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BurnableToken
[2020-11-24 21:41:00,794 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BurnableToken
[2020-11-24 21:41:00,794 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-24 21:41:00,795 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-24 21:41:00,795 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_FreezableMintableToken
[2020-11-24 21:41:00,795 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_FreezableMintableToken
[2020-11-24 21:41:00,795 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Consts
[2020-11-24 21:41:00,795 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Consts
[2020-11-24 21:41:00,795 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MainToken
[2020-11-24 21:41:00,795 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-24 21:41:00,795 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-24 21:41:00,795 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-24 21:41:00,795 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__success
[2020-11-24 21:41:00,795 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__fail
[2020-11-24 21:41:00,795 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 21:41:00,796 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-24 21:41:00,796 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-24 21:41:00,796 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 21:41:00,796 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 21:41:00,796 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 21:41:00,796 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 21:41:00,796 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-24 21:41:00,796 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__success
[2020-11-24 21:41:00,796 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__fail
[2020-11-24 21:41:00,796 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__success
[2020-11-24 21:41:00,796 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__fail
[2020-11-24 21:41:00,797 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__success
[2020-11-24 21:41:00,797 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__fail
[2020-11-24 21:41:00,797 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__success
[2020-11-24 21:41:00,797 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__fail
[2020-11-24 21:41:00,797 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 21:41:00,797 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-24 21:41:00,797 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-24 21:41:00,797 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-24 21:41:00,797 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__success
[2020-11-24 21:41:00,797 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__fail
[2020-11-24 21:41:00,797 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-24 21:41:00,797 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-24 21:41:00,798 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__success
[2020-11-24 21:41:00,798 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__fail
[2020-11-24 21:41:00,798 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__success
[2020-11-24 21:41:00,798 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__fail
[2020-11-24 21:41:00,798 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:41:00,798 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:41:00,798 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:41:00,798 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:41:00,798 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 21:41:00,798 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-24 21:41:00,798 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-24 21:41:00,798 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__success
[2020-11-24 21:41:00,798 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__fail
[2020-11-24 21:41:00,799 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-24 21:41:00,799 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-24 21:41:00,799 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__fail
[2020-11-24 21:41:00,799 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-24 21:41:00,799 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-24 21:41:00,799 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-24 21:41:00,799 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__success
[2020-11-24 21:41:00,799 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__fail
[2020-11-24 21:41:00,799 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__success
[2020-11-24 21:41:00,799 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__fail
[2020-11-24 21:41:00,799 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__success
[2020-11-24 21:41:00,799 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__fail
[2020-11-24 21:41:00,800 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__success
[2020-11-24 21:41:00,800 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__fail
[2020-11-24 21:41:00,800 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken_NoBaseCtor__fail
[2020-11-24 21:41:00,800 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken__success
[2020-11-24 21:41:00,800 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken__fail
[2020-11-24 21:41:00,800 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken__success
[2020-11-24 21:41:00,800 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken__fail
[2020-11-24 21:41:00,800 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken__success
[2020-11-24 21:41:00,800 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken__fail
[2020-11-24 21:41:00,800 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken__success
[2020-11-24 21:41:00,800 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken__fail
[2020-11-24 21:41:00,800 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken__success
[2020-11-24 21:41:00,801 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken__fail
[2020-11-24 21:41:00,801 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken__success
[2020-11-24 21:41:00,801 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken__fail
[2020-11-24 21:41:00,801 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken__success
[2020-11-24 21:41:00,801 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken__fail
[2020-11-24 21:41:00,801 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken__success
[2020-11-24 21:41:00,801 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken__fail
[2020-11-24 21:41:00,801 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken__success
[2020-11-24 21:41:00,801 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken__fail
[2020-11-24 21:41:00,801 INFO  L130     BoogieDeclarations]: Found specification of procedure toKey~address~uint256_FreezableToken__fail
[2020-11-24 21:41:00,801 INFO  L130     BoogieDeclarations]: Found specification of procedure freeze~address~uint64_FreezableToken__fail
[2020-11-24 21:41:00,801 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-24 21:41:00,802 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__success
[2020-11-24 21:41:00,802 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__fail
[2020-11-24 21:41:00,802 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__success
[2020-11-24 21:41:00,802 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__fail
[2020-11-24 21:41:00,802 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_BurnableToken__fail
[2020-11-24 21:41:00,802 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-24 21:41:00,802 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-24 21:41:00,802 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-24 21:41:00,802 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-24 21:41:00,802 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-24 21:41:00,802 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-24 21:41:00,802 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-24 21:41:00,802 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-24 21:41:00,803 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-24 21:41:00,803 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail
[2020-11-24 21:41:00,803 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken__success
[2020-11-24 21:41:00,803 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken__fail
[2020-11-24 21:41:00,803 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success
[2020-11-24 21:41:00,803 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__fail
[2020-11-24 21:41:00,803 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts_NoBaseCtor__fail
[2020-11-24 21:41:00,803 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts__success
[2020-11-24 21:41:00,803 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts__fail
[2020-11-24 21:41:00,803 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts__success
[2020-11-24 21:41:00,803 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts__fail
[2020-11-24 21:41:00,804 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts__success
[2020-11-24 21:41:00,804 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts__fail
[2020-11-24 21:41:00,804 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__success
[2020-11-24 21:41:00,804 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__fail
[2020-11-24 21:41:00,804 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts__success
[2020-11-24 21:41:00,804 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts__fail
[2020-11-24 21:41:00,805 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts__success
[2020-11-24 21:41:00,805 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts__fail
[2020-11-24 21:41:00,805 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts__success
[2020-11-24 21:41:00,805 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts__fail
[2020-11-24 21:41:00,805 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts__success
[2020-11-24 21:41:00,805 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts__fail
[2020-11-24 21:41:00,805 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts__success
[2020-11-24 21:41:00,805 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts__fail
[2020-11-24 21:41:00,805 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken_NoBaseCtor__fail
[2020-11-24 21:41:00,805 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken__success
[2020-11-24 21:41:00,805 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken__fail
[2020-11-24 21:41:00,805 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken__success
[2020-11-24 21:41:00,806 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken__fail
[2020-11-24 21:41:00,806 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken__success
[2020-11-24 21:41:00,806 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken__fail
[2020-11-24 21:41:00,806 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken__success
[2020-11-24 21:41:00,806 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken__fail
[2020-11-24 21:41:00,806 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken__success
[2020-11-24 21:41:00,806 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken__fail
[2020-11-24 21:41:00,806 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken__success
[2020-11-24 21:41:00,806 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken__fail
[2020-11-24 21:41:00,806 INFO  L130     BoogieDeclarations]: Found specification of procedure init_MainToken__fail
[2020-11-24 21:41:00,806 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken__success
[2020-11-24 21:41:00,806 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken__fail
[2020-11-24 21:41:00,806 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-24 21:41:00,807 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-24 21:41:00,807 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-24 21:41:00,807 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-24 21:41:00,807 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__fail
[2020-11-24 21:41:00,807 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__fail
[2020-11-24 21:41:00,807 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-24 21:41:00,807 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-24 21:41:00,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-24 21:41:00,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-24 21:41:00,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-24 21:41:00,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-24 21:41:00,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__fail
[2020-11-24 21:41:00,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__success
[2020-11-24 21:41:00,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 21:41:00,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 21:41:00,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-24 21:41:00,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-24 21:41:00,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 21:41:00,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 21:41:00,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 21:41:00,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 21:41:00,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 21:41:00,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 21:41:00,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 21:41:00,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 21:41:00,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-24 21:41:00,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-24 21:41:00,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__fail
[2020-11-24 21:41:00,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__success
[2020-11-24 21:41:00,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__fail
[2020-11-24 21:41:00,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__success
[2020-11-24 21:41:00,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__fail
[2020-11-24 21:41:00,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__success
[2020-11-24 21:41:00,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__fail
[2020-11-24 21:41:00,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__success
[2020-11-24 21:41:00,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 21:41:00,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 21:41:00,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-24 21:41:00,810 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-24 21:41:00,810 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-24 21:41:00,810 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-24 21:41:00,810 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__fail
[2020-11-24 21:41:00,810 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__success
[2020-11-24 21:41:00,810 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-24 21:41:00,810 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-24 21:41:00,810 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__fail
[2020-11-24 21:41:00,810 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__success
[2020-11-24 21:41:00,810 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__fail
[2020-11-24 21:41:00,810 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__success
[2020-11-24 21:41:00,810 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:41:00,811 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:41:00,811 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:41:00,811 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:41:00,811 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 21:41:00,811 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 21:41:00,811 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-24 21:41:00,811 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-24 21:41:00,811 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__fail
[2020-11-24 21:41:00,811 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__success
[2020-11-24 21:41:00,811 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-24 21:41:00,811 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-24 21:41:00,811 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__fail
[2020-11-24 21:41:00,811 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__success
[2020-11-24 21:41:00,811 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-24 21:41:00,812 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-24 21:41:00,812 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-24 21:41:00,812 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-24 21:41:00,812 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__fail
[2020-11-24 21:41:00,812 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__success
[2020-11-24 21:41:00,812 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__fail
[2020-11-24 21:41:00,812 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__success
[2020-11-24 21:41:00,812 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__fail
[2020-11-24 21:41:00,812 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__success
[2020-11-24 21:41:00,812 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__fail
[2020-11-24 21:41:00,812 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__success
[2020-11-24 21:41:00,812 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken_NoBaseCtor__fail
[2020-11-24 21:41:00,812 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken_NoBaseCtor__success
[2020-11-24 21:41:00,812 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken__fail
[2020-11-24 21:41:00,812 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken__success
[2020-11-24 21:41:00,813 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken__fail
[2020-11-24 21:41:00,813 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken__success
[2020-11-24 21:41:00,813 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken__fail
[2020-11-24 21:41:00,813 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken__success
[2020-11-24 21:41:00,813 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken__fail
[2020-11-24 21:41:00,813 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken__success
[2020-11-24 21:41:00,813 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken__fail
[2020-11-24 21:41:00,813 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken__success
[2020-11-24 21:41:00,813 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken__fail
[2020-11-24 21:41:00,813 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken__success
[2020-11-24 21:41:00,813 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken__fail
[2020-11-24 21:41:00,813 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken__success
[2020-11-24 21:41:00,813 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken__fail
[2020-11-24 21:41:00,814 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken__success
[2020-11-24 21:41:00,814 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken__fail
[2020-11-24 21:41:00,814 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken__success
[2020-11-24 21:41:00,814 INFO  L138     BoogieDeclarations]: Found implementation of procedure toKey~address~uint256_FreezableToken__fail
[2020-11-24 21:41:00,814 INFO  L138     BoogieDeclarations]: Found implementation of procedure toKey~address~uint256_FreezableToken__success
[2020-11-24 21:41:00,814 INFO  L138     BoogieDeclarations]: Found implementation of procedure freeze~address~uint64_FreezableToken__fail
[2020-11-24 21:41:00,814 INFO  L138     BoogieDeclarations]: Found implementation of procedure freeze~address~uint64_FreezableToken__success
[2020-11-24 21:41:00,814 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-24 21:41:00,814 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-24 21:41:00,814 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__fail
[2020-11-24 21:41:00,814 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__success
[2020-11-24 21:41:00,814 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__fail
[2020-11-24 21:41:00,814 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__success
[2020-11-24 21:41:00,814 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_BurnableToken__fail
[2020-11-24 21:41:00,815 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_BurnableToken__success
[2020-11-24 21:41:00,815 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-24 21:41:00,815 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-24 21:41:00,815 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-24 21:41:00,815 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-24 21:41:00,815 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-24 21:41:00,815 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-24 21:41:00,815 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-24 21:41:00,815 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-24 21:41:00,815 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-24 21:41:00,815 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-24 21:41:00,815 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail
[2020-11-24 21:41:00,815 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success
[2020-11-24 21:41:00,816 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken__fail
[2020-11-24 21:41:00,816 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken__success
[2020-11-24 21:41:00,816 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__fail
[2020-11-24 21:41:00,816 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success
[2020-11-24 21:41:00,816 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts_NoBaseCtor__fail
[2020-11-24 21:41:00,816 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts_NoBaseCtor__success
[2020-11-24 21:41:00,816 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts__fail
[2020-11-24 21:41:00,816 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts__success
[2020-11-24 21:41:00,816 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts__fail
[2020-11-24 21:41:00,816 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts__success
[2020-11-24 21:41:00,816 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts__fail
[2020-11-24 21:41:00,816 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts__success
[2020-11-24 21:41:00,816 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__fail
[2020-11-24 21:41:00,816 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__success
[2020-11-24 21:41:00,817 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts__fail
[2020-11-24 21:41:00,817 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts__success
[2020-11-24 21:41:00,817 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts__fail
[2020-11-24 21:41:00,817 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts__success
[2020-11-24 21:41:00,817 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts__fail
[2020-11-24 21:41:00,817 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts__success
[2020-11-24 21:41:00,817 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts__fail
[2020-11-24 21:41:00,817 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts__success
[2020-11-24 21:41:00,817 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts__fail
[2020-11-24 21:41:00,817 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts__success
[2020-11-24 21:41:00,817 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken_NoBaseCtor__fail
[2020-11-24 21:41:00,817 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken_NoBaseCtor__success
[2020-11-24 21:41:00,817 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken__fail
[2020-11-24 21:41:00,817 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken__success
[2020-11-24 21:41:00,818 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken__fail
[2020-11-24 21:41:00,818 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken__success
[2020-11-24 21:41:00,818 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken__fail
[2020-11-24 21:41:00,818 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken__success
[2020-11-24 21:41:00,818 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken__fail
[2020-11-24 21:41:00,818 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken__success
[2020-11-24 21:41:00,818 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken__fail
[2020-11-24 21:41:00,818 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken__success
[2020-11-24 21:41:00,818 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken__fail
[2020-11-24 21:41:00,818 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken__success
[2020-11-24 21:41:00,818 INFO  L138     BoogieDeclarations]: Found implementation of procedure init_MainToken__fail
[2020-11-24 21:41:00,818 INFO  L138     BoogieDeclarations]: Found implementation of procedure init_MainToken__success
[2020-11-24 21:41:00,818 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken__fail
[2020-11-24 21:41:00,819 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken__success
[2020-11-24 21:41:00,819 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-24 21:41:00,819 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-24 21:41:00,819 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-24 21:41:00,819 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-24 21:41:00,819 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-24 21:41:00,819 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-24 21:41:00,819 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-24 21:41:00,819 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-24 21:41:00,819 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__fail
[2020-11-24 21:41:00,819 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__success
[2020-11-24 21:41:00,819 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__fail
[2020-11-24 21:41:00,819 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__success
[2020-11-24 21:41:00,819 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-24 21:41:00,820 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-24 21:41:00,820 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-24 21:41:00,820 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-24 21:41:00,820 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Basic
[2020-11-24 21:41:00,820 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Basic
[2020-11-24 21:41:00,820 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-24 21:41:00,820 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-24 21:41:00,820 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BasicToken
[2020-11-24 21:41:00,820 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BasicToken
[2020-11-24 21:41:00,820 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-24 21:41:00,820 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-24 21:41:00,820 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_StandardToken
[2020-11-24 21:41:00,820 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_StandardToken
[2020-11-24 21:41:00,820 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-24 21:41:00,821 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-24 21:41:00,821 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MintableToken
[2020-11-24 21:41:00,821 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MintableToken
[2020-11-24 21:41:00,821 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_FreezableToken
[2020-11-24 21:41:00,821 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_FreezableToken
[2020-11-24 21:41:00,821 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BurnableToken
[2020-11-24 21:41:00,821 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BurnableToken
[2020-11-24 21:41:00,821 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-24 21:41:00,821 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-24 21:41:00,821 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_FreezableMintableToken
[2020-11-24 21:41:00,821 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_FreezableMintableToken
[2020-11-24 21:41:00,821 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Consts
[2020-11-24 21:41:00,821 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Consts
[2020-11-24 21:41:00,822 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MainToken
[2020-11-24 21:41:00,822 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-24 21:41:00,822 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-24 21:41:00,822 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-24 21:41:01,942 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 21:41:01,942 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 21:41:01,942 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 21:41:02,084 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 21:41:02,416 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-24 21:41:02,417 INFO  L286             CfgBuilder]: Removed 13 assue(true) statements.
[2020-11-24 21:41:02,420 INFO  L202        PluginConnector]: Adding new model MainToken_0xa2d0e29a9627e20FD886a8106DD0AE429403a57d_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:41:02 BoogieIcfgContainer
[2020-11-24 21:41:02,420 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:41:00" (2/2) ...
[2020-11-24 21:41:02,420 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-24 21:41:02,420 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@48732b81 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:41:02, skipping insertion in model container
[2020-11-24 21:41:02,420 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-24 21:41:02,420 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-24 21:41:02,420 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-24 21:41:02,421 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-24 21:41:02,421 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "MainToken_0xa2d0e29a9627e20FD886a8106DD0AE429403a57d_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:41:00" (1/3) ...
[2020-11-24 21:41:02,422 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@151e9986 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:41:02, skipping insertion in model container
[2020-11-24 21:41:02,422 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:41:00" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-24 21:41:02,451 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:41:02 NWAContainer
[2020-11-24 21:41:02,451 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-24 21:41:02,452 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-24 21:41:02,452 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-24 21:41:02,452 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-24 21:41:02,453 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "MainToken_0xa2d0e29a9627e20FD886a8106DD0AE429403a57d_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:41:02" (3/4) ...
[2020-11-24 21:41:02,453 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@10d0c967 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:41:02, skipping insertion in model container
[2020-11-24 21:41:02,453 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:41:02" (4/4) ...
[2020-11-24 21:41:02,455 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-24 21:41:02,462 INFO  L110   BuchiProductObserver]: Initial RCFG 5386 locations, 7562 edges
[2020-11-24 21:41:02,462 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-24 21:41:02,475 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-24 21:41:06,594 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-24 21:41:06,611 INFO  L110   BuchiProductObserver]: BuchiProgram size 13452 locations, 24723 edges
[2020-11-24 21:41:06,611 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:41:06 BoogieIcfgContainer
[2020-11-24 21:41:06,611 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-24 21:41:06,611 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-24 21:41:06,611 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-24 21:41:06,612 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-24 21:41:06,613 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:41:06" (1/1) ...
[2020-11-24 21:41:06,833 INFO  L313           BlockEncoder]: Initial Icfg 13452 locations, 24723 edges
[2020-11-24 21:41:06,834 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-24 21:41:06,834 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-24 21:41:06,834 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-24 21:41:06,835 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-24 21:41:06,858 INFO  L70    emoveInfeasibleEdges]: Removed 315 edges and 29 locations because of local infeasibility
[2020-11-24 21:41:06,880 INFO  L70        RemoveSinkStates]: Removed 170 edges and 113 locations by removing sink states
[2020-11-24 21:41:06,903 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-24 21:41:06,910 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-24 21:41:06,917 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-24 21:41:06,918 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-24 21:41:06,923 INFO  L313           BlockEncoder]: Encoded RCFG 13242 locations, 24137 edges
[2020-11-24 21:41:06,923 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 09:41:06 BasicIcfg
[2020-11-24 21:41:06,923 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-24 21:41:06,924 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-24 21:41:06,924 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-24 21:41:06,925 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-24 21:41:06,925 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:41:06,925 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MainToken_0xa2d0e29a9627e20FD886a8106DD0AE429403a57d_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:41:00" (1/6) ...
[2020-11-24 21:41:06,927 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1be34fb1 and model type MainToken_0xa2d0e29a9627e20FD886a8106DD0AE429403a57d_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 09:41:06, skipping insertion in model container
[2020-11-24 21:41:06,927 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:41:06,927 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:41:00" (2/6) ...
[2020-11-24 21:41:06,927 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1be34fb1 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 09:41:06, skipping insertion in model container
[2020-11-24 21:41:06,927 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:41:06,927 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MainToken_0xa2d0e29a9627e20FD886a8106DD0AE429403a57d_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:41:02" (3/6) ...
[2020-11-24 21:41:06,927 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1be34fb1 and model type MainToken_0xa2d0e29a9627e20FD886a8106DD0AE429403a57d_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 09:41:06, skipping insertion in model container
[2020-11-24 21:41:06,928 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:41:06,928 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:41:02" (4/6) ...
[2020-11-24 21:41:06,928 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1be34fb1 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 09:41:06, skipping insertion in model container
[2020-11-24 21:41:06,928 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:41:06,928 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:41:06" (5/6) ...
[2020-11-24 21:41:06,928 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1be34fb1 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 24.11 09:41:06, skipping insertion in model container
[2020-11-24 21:41:06,928 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:41:06,928 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 09:41:06" (6/6) ...
[2020-11-24 21:41:06,929 INFO  L404   chiAutomizerObserver]: Analyzing ICFG MainToken_0xa2d0e29a9627e20FD886a8106DD0AE429403a57d_transferfrom-self.bpl_BEv2
[2020-11-24 21:41:06,963 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-24 21:41:06,963 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-24 21:41:06,963 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-24 21:41:06,963 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-24 21:41:06,963 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-24 21:41:06,963 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-24 21:41:06,964 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-24 21:41:06,964 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-24 21:41:06,964 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-24 21:41:07,120 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 13242 states.
[2020-11-24 21:41:07,212 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:41:07,212 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:41:07,212 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:41:07,220 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:41:07,220 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:41:07,220 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-24 21:41:07,220 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 13242 states.
[2020-11-24 21:41:07,267 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:41:07,267 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:41:07,267 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:41:07,269 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:41:07,269 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_MainToken0 := false;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L14768]              assume null == 0;
[L14769]  CALL        call this := FreshRefGenerator__success();
[L6698]               havoc newRef;
[L6699]               assume Alloc[newRef] == false;
[L6700]               Alloc[newRef] := true;
[L6701]               assume newRef != null;
[L14769]  RET         call this := FreshRefGenerator__success();
[L14770]              assume now >= 0;
[L14771]              assume DType[this] == MainToken;
[L14772]              assume msgvalue_MSG == 0;
[L14773]              gas := gas - 53000;
[L14774]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4386]               havoc __exception;
[L4387]               revert := false;
[L4388]   COND FALSE  !(__exception)
[L4427]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9285]               assume msgsender_MSG != null;
[L9286]               Balance[this] := 0;
[L9287]               TOKEN_DECIMALS_Consts[this] := 18;
[L9288]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9289]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9290]               TOKEN_NAME_Consts[this] := 1211920069;
[L9291]               TOKEN_SYMBOL_Consts[this] := 49428998;
[L9292]               PAUSED_Consts[this] := false;
[L9293]               __var_52 := ConstantToRef(207782497573736545615953600095632397981971535507);
[L9294]               TARGET_USER_Consts[this] := ConstantToRef(207782497573736545615953600095632397981971535507);
[L9295]               CONTINUE_MINTING_Consts[this] := true;
[L9309]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9310]   COND FALSE  !(revert)
[L9507]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9508]   COND TRUE   revert
[L4427]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]               assume !revert && gas >= 0;
[L14774]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14775]              assume !revert && gas >= 0;

Loop:
[L14778]  CALL        call CorralChoice_MainToken(this);
[L14435]              havoc msgsender_MSG;
[L14436]              havoc msgvalue_MSG;
[L14437]              havoc choice;
[L14438]              havoc __ret_0_totalSupply;
[L14439]              havoc _owner_s729;
[L14440]              havoc balance_s729;
[L14441]              havoc _to_s1572;
[L14442]              havoc _value_s1572;
[L14443]              havoc _success_s1572;
[L14444]              havoc _owner_s395;
[L14445]              havoc _spender_s395;
[L14446]              havoc __ret_0_allowance;
[L14447]              havoc _from_s1551;
[L14448]              havoc _to_s1551;
[L14449]              havoc _value_s1551;
[L14450]              havoc _success_s1551;
[L14451]              havoc _spender_s379;
[L14452]              havoc _value_s379;
[L14453]              havoc __ret_0_approve;
[L14454]              havoc _spender_s437;
[L14455]              havoc _addedValue_s437;
[L14456]              havoc __ret_0_increaseApproval;
[L14457]              havoc _spender_s497;
[L14458]              havoc _subtractedValue_s497;
[L14459]              havoc __ret_0_decreaseApproval;
[L14460]              havoc __ret_0_owner;
[L14461]              havoc _newOwner_s558;
[L14462]              havoc __ret_0_mintingFinished;
[L14463]              havoc _to_s664;
[L14464]              havoc _amount_s664;
[L14465]              havoc __ret_0_mint;
[L14466]              havoc __ret_0_finishMinting;
[L14467]              havoc _owner_s742;
[L14468]              havoc balance_s742;
[L14469]              havoc _owner_s754;
[L14470]              havoc balance_s754;
[L14471]              havoc _addr_s792;
[L14472]              havoc count_s792;
[L14473]              havoc _addr_s849;
[L14474]              havoc _index_s849;
[L14475]              havoc _release_s849;
[L14476]              havoc _balance_s849;
[L14477]              havoc _to_s938;
[L14478]              havoc _amount_s938;
[L14479]              havoc _until_s938;
[L14480]              havoc tokens_s1107;
[L14481]              havoc _value_s1261;
[L14482]              havoc __ret_0_paused;
[L14483]              havoc _to_s1449;
[L14484]              havoc _amount_s1449;
[L14485]              havoc _until_s1449;
[L14486]              havoc __ret_0_mintAndFreeze;
[L14487]              havoc __ret_0_TOKEN_DECIMALS;
[L14488]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14489]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14490]              havoc __ret_0_TOKEN_NAME;
[L14491]              havoc __ret_0_TOKEN_SYMBOL;
[L14492]              havoc __ret_0_PAUSED;
[L14493]              havoc __ret_0_TARGET_USER;
[L14494]              havoc __ret_0_CONTINUE_MINTING;
[L14495]              havoc __ret_0_initialized;
[L14496]              havoc _name_s1511;
[L14497]              havoc _symbol_s1519;
[L14498]              havoc _decimals_s1527;
[L14499]              havoc tmpNow;
[L14500]              havoc gas;
[L14501]              assume gas > 4000000 && gas <= 8000000;
[L14502]              tmpNow := now;
[L14503]              havoc now;
[L14504]              assume now > tmpNow;
[L14505]              assume msgsender_MSG != null;
[L14506]              assume DType[msgsender_MSG] != ERC20Basic;
[L14507]              assume DType[msgsender_MSG] != SafeMath;
[L14508]              assume DType[msgsender_MSG] != BasicToken;
[L14509]              assume DType[msgsender_MSG] != ERC20;
[L14510]              assume DType[msgsender_MSG] != StandardToken;
[L14511]              assume DType[msgsender_MSG] != Ownable;
[L14512]              assume DType[msgsender_MSG] != MintableToken;
[L14513]              assume DType[msgsender_MSG] != FreezableToken;
[L14514]              assume DType[msgsender_MSG] != BurnableToken;
[L14515]              assume DType[msgsender_MSG] != Pausable;
[L14516]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14517]              assume DType[msgsender_MSG] != Consts;
[L14518]              assume DType[msgsender_MSG] != MainToken;
[L14519]              Alloc[msgsender_MSG] := true;
[L14520]  COND TRUE   choice == 38
[L14521]              gas := gas - 21000;
[L14522]  COND FALSE  !(gas >= 0)
[L14778]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:41:07,286 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:41:07,286 INFO  L82        PathProgramCache]: Analyzing trace with hash -892613841, now seen corresponding path program 1 times
[2020-11-24 21:41:07,292 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:41:07,315 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:41:07,356 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 21:41:07,757 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:41:07,757 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 21:41:07,760 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:41:07,768 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 21:41:07,768 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-24 21:41:07,770 INFO  L87              Difference]: Start difference. First operand 13242 states. Second operand 4 states.
[2020-11-24 21:41:09,021 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:41:09,021 INFO  L93              Difference]: Finished difference Result 8278 states and 9693 transitions.
[2020-11-24 21:41:09,021 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 21:41:09,022 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8278 states and 9693 transitions.
[2020-11-24 21:41:09,056 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:41:09,097 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8278 states to 8274 states and 9685 transitions.
[2020-11-24 21:41:09,097 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-24 21:41:09,102 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1863
[2020-11-24 21:41:09,102 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8274 states and 9685 transitions.
[2020-11-24 21:41:09,118 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:41:09,119 INFO  L728         BuchiCegarLoop]: Abstraction has 8274 states and 9685 transitions.
[2020-11-24 21:41:09,140 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8274 states and 9685 transitions.
[2020-11-24 21:41:09,239 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8274 to 8274.
[2020-11-24 21:41:09,240 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8274 states.
[2020-11-24 21:41:09,253 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8274 states to 8274 states and 9685 transitions.
[2020-11-24 21:41:09,254 INFO  L751         BuchiCegarLoop]: Abstraction has 8274 states and 9685 transitions.
[2020-11-24 21:41:09,254 INFO  L631         BuchiCegarLoop]: Abstraction has 8274 states and 9685 transitions.
[2020-11-24 21:41:09,254 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-24 21:41:09,254 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8274 states and 9685 transitions.
[2020-11-24 21:41:09,268 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:41:09,268 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:41:09,268 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:41:09,270 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:41:09,270 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_MainToken0 := false;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L14768]              assume null == 0;
[L14769]  CALL        call this := FreshRefGenerator__success();
[L6698]               havoc newRef;
[L6699]               assume Alloc[newRef] == false;
[L6700]               Alloc[newRef] := true;
[L6701]               assume newRef != null;
[L14769]  RET         call this := FreshRefGenerator__success();
[L14770]              assume now >= 0;
[L14771]              assume DType[this] == MainToken;
[L14772]              assume msgvalue_MSG == 0;
[L14773]              gas := gas - 53000;
[L14774]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4386]               havoc __exception;
[L4387]               revert := false;
[L4388]   COND FALSE  !(__exception)
[L4427]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9285]               assume msgsender_MSG != null;
[L9286]               Balance[this] := 0;
[L9287]               TOKEN_DECIMALS_Consts[this] := 18;
[L9288]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9289]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9290]               TOKEN_NAME_Consts[this] := 1211920069;
[L9291]               TOKEN_SYMBOL_Consts[this] := 49428998;
[L9292]               PAUSED_Consts[this] := false;
[L9293]               __var_52 := ConstantToRef(207782497573736545615953600095632397981971535507);
[L9294]               TARGET_USER_Consts[this] := ConstantToRef(207782497573736545615953600095632397981971535507);
[L9295]               CONTINUE_MINTING_Consts[this] := true;
[L9309]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9310]   COND FALSE  !(revert)
[L9507]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9508]   COND TRUE   revert
[L4427]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]               assume !revert && gas >= 0;
[L14774]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14775]              assume !revert && gas >= 0;
[L14778]  CALL        call CorralChoice_MainToken(this);
[L14435]              havoc msgsender_MSG;
[L14436]              havoc msgvalue_MSG;
[L14437]              havoc choice;
[L14438]              havoc __ret_0_totalSupply;
[L14439]              havoc _owner_s729;
[L14440]              havoc balance_s729;
[L14441]              havoc _to_s1572;
[L14442]              havoc _value_s1572;
[L14443]              havoc _success_s1572;
[L14444]              havoc _owner_s395;
[L14445]              havoc _spender_s395;
[L14446]              havoc __ret_0_allowance;
[L14447]              havoc _from_s1551;
[L14448]              havoc _to_s1551;
[L14449]              havoc _value_s1551;
[L14450]              havoc _success_s1551;
[L14451]              havoc _spender_s379;
[L14452]              havoc _value_s379;
[L14453]              havoc __ret_0_approve;
[L14454]              havoc _spender_s437;
[L14455]              havoc _addedValue_s437;
[L14456]              havoc __ret_0_increaseApproval;
[L14457]              havoc _spender_s497;
[L14458]              havoc _subtractedValue_s497;
[L14459]              havoc __ret_0_decreaseApproval;
[L14460]              havoc __ret_0_owner;
[L14461]              havoc _newOwner_s558;
[L14462]              havoc __ret_0_mintingFinished;
[L14463]              havoc _to_s664;
[L14464]              havoc _amount_s664;
[L14465]              havoc __ret_0_mint;
[L14466]              havoc __ret_0_finishMinting;
[L14467]              havoc _owner_s742;
[L14468]              havoc balance_s742;
[L14469]              havoc _owner_s754;
[L14470]              havoc balance_s754;
[L14471]              havoc _addr_s792;
[L14472]              havoc count_s792;
[L14473]              havoc _addr_s849;
[L14474]              havoc _index_s849;
[L14475]              havoc _release_s849;
[L14476]              havoc _balance_s849;
[L14477]              havoc _to_s938;
[L14478]              havoc _amount_s938;
[L14479]              havoc _until_s938;
[L14480]              havoc tokens_s1107;
[L14481]              havoc _value_s1261;
[L14482]              havoc __ret_0_paused;
[L14483]              havoc _to_s1449;
[L14484]              havoc _amount_s1449;
[L14485]              havoc _until_s1449;
[L14486]              havoc __ret_0_mintAndFreeze;
[L14487]              havoc __ret_0_TOKEN_DECIMALS;
[L14488]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14489]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14490]              havoc __ret_0_TOKEN_NAME;
[L14491]              havoc __ret_0_TOKEN_SYMBOL;
[L14492]              havoc __ret_0_PAUSED;
[L14493]              havoc __ret_0_TARGET_USER;
[L14494]              havoc __ret_0_CONTINUE_MINTING;
[L14495]              havoc __ret_0_initialized;
[L14496]              havoc _name_s1511;
[L14497]              havoc _symbol_s1519;
[L14498]              havoc _decimals_s1527;
[L14499]              havoc tmpNow;
[L14500]              havoc gas;
[L14501]              assume gas > 4000000 && gas <= 8000000;
[L14502]              tmpNow := now;
[L14503]              havoc now;
[L14504]              assume now > tmpNow;
[L14505]              assume msgsender_MSG != null;
[L14506]              assume DType[msgsender_MSG] != ERC20Basic;
[L14507]              assume DType[msgsender_MSG] != SafeMath;
[L14508]              assume DType[msgsender_MSG] != BasicToken;
[L14509]              assume DType[msgsender_MSG] != ERC20;
[L14510]              assume DType[msgsender_MSG] != StandardToken;
[L14511]              assume DType[msgsender_MSG] != Ownable;
[L14512]              assume DType[msgsender_MSG] != MintableToken;
[L14513]              assume DType[msgsender_MSG] != FreezableToken;
[L14514]              assume DType[msgsender_MSG] != BurnableToken;
[L14515]              assume DType[msgsender_MSG] != Pausable;
[L14516]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14517]              assume DType[msgsender_MSG] != Consts;
[L14518]              assume DType[msgsender_MSG] != MainToken;
[L14519]              Alloc[msgsender_MSG] := true;
[L14520]  COND FALSE  !(choice == 38)
[L14526]  COND FALSE  !(choice == 37)
[L14532]  COND FALSE  !(choice == 36)
[L14539]  COND FALSE  !(choice == 35)
[L14545]  COND TRUE   choice == 34
[L14546]              gas := gas - 21000;
[L14547]  COND TRUE   gas >= 0
[L14548]              assume _value_s1551 >= 0 && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14549]              assume msgvalue_MSG == 0;
[L14550]  CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != _from_s1551 || p2 != msgsender_MSG) && _from_s1551 == _to_s1551) && _value_s1551 <= balances_BasicToken[this][_from_s1551]) && _value_s1551 <= allowed_StandardToken[this][_from_s1551][msgsender_MSG]) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_MainToken0 := true;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]                  revert := revert_hold;
[L4734]               havoc __exception;
[L4735]               revert := false;
[L4736]   COND FALSE  !(__exception)
[L4775]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9617]   COND TRUE   !!paused_Pausable[this]
[L9618]               revert := true;
[L4775]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4776]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((((_success_s1551 == true && allowed_StandardToken[this][_from_s1551][msgsender_MSG] == old(allowed_StandardToken[this][_from_s1551][msgsender_MSG]) - _value_s1551) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L3]                  revert := revert_hold;
[L14550]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L14778]  RET         call CorralChoice_MainToken(this);

Loop:
[L14778]  CALL        call CorralChoice_MainToken(this);
[L14435]              havoc msgsender_MSG;
[L14436]              havoc msgvalue_MSG;
[L14437]              havoc choice;
[L14438]              havoc __ret_0_totalSupply;
[L14439]              havoc _owner_s729;
[L14440]              havoc balance_s729;
[L14441]              havoc _to_s1572;
[L14442]              havoc _value_s1572;
[L14443]              havoc _success_s1572;
[L14444]              havoc _owner_s395;
[L14445]              havoc _spender_s395;
[L14446]              havoc __ret_0_allowance;
[L14447]              havoc _from_s1551;
[L14448]              havoc _to_s1551;
[L14449]              havoc _value_s1551;
[L14450]              havoc _success_s1551;
[L14451]              havoc _spender_s379;
[L14452]              havoc _value_s379;
[L14453]              havoc __ret_0_approve;
[L14454]              havoc _spender_s437;
[L14455]              havoc _addedValue_s437;
[L14456]              havoc __ret_0_increaseApproval;
[L14457]              havoc _spender_s497;
[L14458]              havoc _subtractedValue_s497;
[L14459]              havoc __ret_0_decreaseApproval;
[L14460]              havoc __ret_0_owner;
[L14461]              havoc _newOwner_s558;
[L14462]              havoc __ret_0_mintingFinished;
[L14463]              havoc _to_s664;
[L14464]              havoc _amount_s664;
[L14465]              havoc __ret_0_mint;
[L14466]              havoc __ret_0_finishMinting;
[L14467]              havoc _owner_s742;
[L14468]              havoc balance_s742;
[L14469]              havoc _owner_s754;
[L14470]              havoc balance_s754;
[L14471]              havoc _addr_s792;
[L14472]              havoc count_s792;
[L14473]              havoc _addr_s849;
[L14474]              havoc _index_s849;
[L14475]              havoc _release_s849;
[L14476]              havoc _balance_s849;
[L14477]              havoc _to_s938;
[L14478]              havoc _amount_s938;
[L14479]              havoc _until_s938;
[L14480]              havoc tokens_s1107;
[L14481]              havoc _value_s1261;
[L14482]              havoc __ret_0_paused;
[L14483]              havoc _to_s1449;
[L14484]              havoc _amount_s1449;
[L14485]              havoc _until_s1449;
[L14486]              havoc __ret_0_mintAndFreeze;
[L14487]              havoc __ret_0_TOKEN_DECIMALS;
[L14488]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14489]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14490]              havoc __ret_0_TOKEN_NAME;
[L14491]              havoc __ret_0_TOKEN_SYMBOL;
[L14492]              havoc __ret_0_PAUSED;
[L14493]              havoc __ret_0_TARGET_USER;
[L14494]              havoc __ret_0_CONTINUE_MINTING;
[L14495]              havoc __ret_0_initialized;
[L14496]              havoc _name_s1511;
[L14497]              havoc _symbol_s1519;
[L14498]              havoc _decimals_s1527;
[L14499]              havoc tmpNow;
[L14500]              havoc gas;
[L14501]              assume gas > 4000000 && gas <= 8000000;
[L14502]              tmpNow := now;
[L14503]              havoc now;
[L14504]              assume now > tmpNow;
[L14505]              assume msgsender_MSG != null;
[L14506]              assume DType[msgsender_MSG] != ERC20Basic;
[L14507]              assume DType[msgsender_MSG] != SafeMath;
[L14508]              assume DType[msgsender_MSG] != BasicToken;
[L14509]              assume DType[msgsender_MSG] != ERC20;
[L14510]              assume DType[msgsender_MSG] != StandardToken;
[L14511]              assume DType[msgsender_MSG] != Ownable;
[L14512]              assume DType[msgsender_MSG] != MintableToken;
[L14513]              assume DType[msgsender_MSG] != FreezableToken;
[L14514]              assume DType[msgsender_MSG] != BurnableToken;
[L14515]              assume DType[msgsender_MSG] != Pausable;
[L14516]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14517]              assume DType[msgsender_MSG] != Consts;
[L14518]              assume DType[msgsender_MSG] != MainToken;
[L14519]              Alloc[msgsender_MSG] := true;
[L14520]  COND FALSE  !(choice == 38)
[L14526]  COND FALSE  !(choice == 37)
[L14532]  COND FALSE  !(choice == 36)
[L14539]  COND FALSE  !(choice == 35)
[L14545]  COND TRUE   choice == 34
[L14546]              gas := gas - 21000;
[L14547]  COND TRUE   gas >= 0
[L14548]              assume _value_s1551 >= 0 && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14549]              assume msgvalue_MSG == 0;
[L14550]  CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != _from_s1551 || p2 != msgsender_MSG) && _from_s1551 == _to_s1551) && _value_s1551 <= balances_BasicToken[this][_from_s1551]) && _value_s1551 <= allowed_StandardToken[this][_from_s1551][msgsender_MSG]) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_MainToken0 := true;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]                  revert := revert_hold;
[L4734]               havoc __exception;
[L4735]               revert := false;
[L4736]   COND FALSE  !(__exception)
[L4775]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9617]   COND TRUE   !!paused_Pausable[this]
[L9618]               revert := true;
[L4775]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4776]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((((_success_s1551 == true && allowed_StandardToken[this][_from_s1551][msgsender_MSG] == old(allowed_StandardToken[this][_from_s1551][msgsender_MSG]) - _value_s1551) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L3]                  revert := revert_hold;
[L14550]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L14778]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:41:09,275 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:41:09,275 INFO  L82        PathProgramCache]: Analyzing trace with hash -1099489348, now seen corresponding path program 1 times
[2020-11-24 21:41:09,276 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:41:09,286 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:41:09,313 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 21:41:09,313 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:41:09,314 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:41:09,315 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:41:09,315 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:41:09,315 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:41:09,315 INFO  L87              Difference]: Start difference. First operand 8274 states and 9685 transitions. cyclomatic complexity: 1431 Second operand 3 states.
[2020-11-24 21:41:09,488 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:41:09,488 INFO  L93              Difference]: Finished difference Result 9732 states and 11137 transitions.
[2020-11-24 21:41:09,488 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:41:09,489 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9732 states and 11137 transitions.
[2020-11-24 21:41:09,514 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:41:09,556 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9732 states to 9732 states and 11137 transitions.
[2020-11-24 21:41:09,556 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2286
[2020-11-24 21:41:09,558 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2286
[2020-11-24 21:41:09,558 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9732 states and 11137 transitions.
[2020-11-24 21:41:09,568 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:41:09,568 INFO  L728         BuchiCegarLoop]: Abstraction has 9732 states and 11137 transitions.
[2020-11-24 21:41:09,577 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9732 states and 11137 transitions.
[2020-11-24 21:41:09,663 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9732 to 8650.
[2020-11-24 21:41:09,663 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8650 states.
[2020-11-24 21:41:09,674 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8650 states to 8650 states and 9791 transitions.
[2020-11-24 21:41:09,674 INFO  L751         BuchiCegarLoop]: Abstraction has 8650 states and 9791 transitions.
[2020-11-24 21:41:09,674 INFO  L631         BuchiCegarLoop]: Abstraction has 8650 states and 9791 transitions.
[2020-11-24 21:41:09,675 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-24 21:41:09,675 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8650 states and 9791 transitions.
[2020-11-24 21:41:09,686 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:41:09,686 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:41:09,686 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:41:09,692 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:41:09,692 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_MainToken0 := false;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L14768]              assume null == 0;
[L14769]  CALL        call this := FreshRefGenerator__success();
[L6698]               havoc newRef;
[L6699]               assume Alloc[newRef] == false;
[L6700]               Alloc[newRef] := true;
[L6701]               assume newRef != null;
[L14769]  RET         call this := FreshRefGenerator__success();
[L14770]              assume now >= 0;
[L14771]              assume DType[this] == MainToken;
[L14772]              assume msgvalue_MSG == 0;
[L14773]              gas := gas - 53000;
[L14774]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4386]               havoc __exception;
[L4387]               revert := false;
[L4388]   COND FALSE  !(__exception)
[L4427]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9285]               assume msgsender_MSG != null;
[L9286]               Balance[this] := 0;
[L9287]               TOKEN_DECIMALS_Consts[this] := 18;
[L9288]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9289]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9290]               TOKEN_NAME_Consts[this] := 1211920069;
[L9291]               TOKEN_SYMBOL_Consts[this] := 49428998;
[L9292]               PAUSED_Consts[this] := false;
[L9293]               __var_52 := ConstantToRef(207782497573736545615953600095632397981971535507);
[L9294]               TARGET_USER_Consts[this] := ConstantToRef(207782497573736545615953600095632397981971535507);
[L9295]               CONTINUE_MINTING_Consts[this] := true;
[L9309]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9310]   COND FALSE  !(revert)
[L9507]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9508]   COND FALSE  !(revert)
[L9511]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L9511]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9512]   COND FALSE  !(revert)
[L9515]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L9515]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9516]   COND FALSE  !(revert)
[L9519]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L9519]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9520]   COND FALSE  !(revert)
[L9523]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L9523]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9524]   COND FALSE  !(revert)
[L9527]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7655]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7656]   COND FALSE  !(revert)
[L7659]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7659]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7660]   COND FALSE  !(revert)
[L7663]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7663]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7664]   COND FALSE  !(revert)
[L7667]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7667]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7668]   COND FALSE  !(revert)
[L7671]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7618]               assume msgsender_MSG != null;
[L7619]               Balance[this] := 0;
[L7620]               chains_FreezableToken[this] := zerointintArr();
[L7621]               sum_chains2[this] := 0;
[L7622]               freezings_FreezableToken[this] := zerointintArr();
[L7623]               sum_freezings3[this] := 0;
[L7624]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7625]               sum_freezingBalance4[this] := 0;
[L7671]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7672]   COND FALSE  !(revert)
[L9527]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9528]   COND FALSE  !(revert)
[L9531]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L9531]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9532]   COND FALSE  !(revert)
[L9535]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7474]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7475]   COND FALSE  !(revert)
[L7478]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7478]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7479]   COND FALSE  !(revert)
[L7482]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7482]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7483]   COND FALSE  !(revert)
[L7486]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7486]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7487]   COND FALSE  !(revert)
[L7490]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L7490]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7491]   COND FALSE  !(revert)
[L7494]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7438]               assume msgsender_MSG != null;
[L7439]               Balance[this] := 0;
[L7440]               mintingFinished_MintableToken[this] := false;
[L7494]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7495]   COND FALSE  !(revert)
[L9535]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9536]   COND FALSE  !(revert)
[L9539]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9094]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L9094]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9095]   COND FALSE  !(revert)
[L9098]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L9098]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9099]   COND FALSE  !(revert)
[L9102]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L9102]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9103]   COND FALSE  !(revert)
[L9106]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L9106]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9107]   COND FALSE  !(revert)
[L9110]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7655]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7656]   COND FALSE  !(revert)
[L7659]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7659]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7660]   COND FALSE  !(revert)
[L7663]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7663]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7664]   COND FALSE  !(revert)
[L7667]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7667]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7668]   COND FALSE  !(revert)
[L7671]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7618]               assume msgsender_MSG != null;
[L7619]               Balance[this] := 0;
[L7620]               chains_FreezableToken[this] := zerointintArr();
[L7621]               sum_chains2[this] := 0;
[L7622]               freezings_FreezableToken[this] := zerointintArr();
[L7623]               sum_freezings3[this] := 0;
[L7624]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7625]               sum_freezingBalance4[this] := 0;
[L7671]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7672]   COND FALSE  !(revert)
[L9110]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9111]   COND FALSE  !(revert)
[L9114]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L9114]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9115]   COND FALSE  !(revert)
[L9118]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7474]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7475]   COND FALSE  !(revert)
[L7478]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7478]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7479]   COND FALSE  !(revert)
[L7482]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7482]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7483]   COND FALSE  !(revert)
[L7486]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7486]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7487]   COND FALSE  !(revert)
[L7490]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L7490]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7491]   COND FALSE  !(revert)
[L7494]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7438]               assume msgsender_MSG != null;
[L7439]               Balance[this] := 0;
[L7440]               mintingFinished_MintableToken[this] := false;
[L7494]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7495]   COND FALSE  !(revert)
[L9118]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9119]   COND FALSE  !(revert)
[L9122]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9051]               assume msgsender_MSG != null;
[L9052]               Balance[this] := 0;
[L9122]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9123]   COND FALSE  !(revert)
[L9539]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9540]   COND FALSE  !(revert)
[L9543]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L8838]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8839]   COND FALSE  !(revert)
[L8842]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L8842]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8843]   COND FALSE  !(revert)
[L8846]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8815]               assume msgsender_MSG != null;
[L8816]               Balance[this] := 0;
[L8846]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8847]   COND FALSE  !(revert)
[L9543]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9544]   COND FALSE  !(revert)
[L9547]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8964]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L8964]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8965]   COND FALSE  !(revert)
[L8968]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8944]               assume msgsender_MSG != null;
[L8945]               Balance[this] := 0;
[L8946]               paused_Pausable[this] := false;
[L8968]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8969]   COND FALSE  !(revert)
[L9547]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9548]   COND FALSE  !(revert)
[L9551]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9435]               assume msgsender_MSG != null;
[L9436]               Balance[this] := 0;
[L9437]               initialized_MainToken[this] := false;
[L9439]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9755]   COND TRUE   !!initialized_MainToken[this]
[L9756]               revert := true;
[L9439]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9440]   COND TRUE   revert
[L9551]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9552]   COND FALSE  !(revert)
[L4427]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]               assume !revert && gas >= 0;
[L14774]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14775]              assume !revert && gas >= 0;
[L14778]  CALL        call CorralChoice_MainToken(this);
[L14435]              havoc msgsender_MSG;
[L14436]              havoc msgvalue_MSG;
[L14437]              havoc choice;
[L14438]              havoc __ret_0_totalSupply;
[L14439]              havoc _owner_s729;
[L14440]              havoc balance_s729;
[L14441]              havoc _to_s1572;
[L14442]              havoc _value_s1572;
[L14443]              havoc _success_s1572;
[L14444]              havoc _owner_s395;
[L14445]              havoc _spender_s395;
[L14446]              havoc __ret_0_allowance;
[L14447]              havoc _from_s1551;
[L14448]              havoc _to_s1551;
[L14449]              havoc _value_s1551;
[L14450]              havoc _success_s1551;
[L14451]              havoc _spender_s379;
[L14452]              havoc _value_s379;
[L14453]              havoc __ret_0_approve;
[L14454]              havoc _spender_s437;
[L14455]              havoc _addedValue_s437;
[L14456]              havoc __ret_0_increaseApproval;
[L14457]              havoc _spender_s497;
[L14458]              havoc _subtractedValue_s497;
[L14459]              havoc __ret_0_decreaseApproval;
[L14460]              havoc __ret_0_owner;
[L14461]              havoc _newOwner_s558;
[L14462]              havoc __ret_0_mintingFinished;
[L14463]              havoc _to_s664;
[L14464]              havoc _amount_s664;
[L14465]              havoc __ret_0_mint;
[L14466]              havoc __ret_0_finishMinting;
[L14467]              havoc _owner_s742;
[L14468]              havoc balance_s742;
[L14469]              havoc _owner_s754;
[L14470]              havoc balance_s754;
[L14471]              havoc _addr_s792;
[L14472]              havoc count_s792;
[L14473]              havoc _addr_s849;
[L14474]              havoc _index_s849;
[L14475]              havoc _release_s849;
[L14476]              havoc _balance_s849;
[L14477]              havoc _to_s938;
[L14478]              havoc _amount_s938;
[L14479]              havoc _until_s938;
[L14480]              havoc tokens_s1107;
[L14481]              havoc _value_s1261;
[L14482]              havoc __ret_0_paused;
[L14483]              havoc _to_s1449;
[L14484]              havoc _amount_s1449;
[L14485]              havoc _until_s1449;
[L14486]              havoc __ret_0_mintAndFreeze;
[L14487]              havoc __ret_0_TOKEN_DECIMALS;
[L14488]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14489]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14490]              havoc __ret_0_TOKEN_NAME;
[L14491]              havoc __ret_0_TOKEN_SYMBOL;
[L14492]              havoc __ret_0_PAUSED;
[L14493]              havoc __ret_0_TARGET_USER;
[L14494]              havoc __ret_0_CONTINUE_MINTING;
[L14495]              havoc __ret_0_initialized;
[L14496]              havoc _name_s1511;
[L14497]              havoc _symbol_s1519;
[L14498]              havoc _decimals_s1527;
[L14499]              havoc tmpNow;
[L14500]              havoc gas;
[L14501]              assume gas > 4000000 && gas <= 8000000;
[L14502]              tmpNow := now;
[L14503]              havoc now;
[L14504]              assume now > tmpNow;
[L14505]              assume msgsender_MSG != null;
[L14506]              assume DType[msgsender_MSG] != ERC20Basic;
[L14507]              assume DType[msgsender_MSG] != SafeMath;
[L14508]              assume DType[msgsender_MSG] != BasicToken;
[L14509]              assume DType[msgsender_MSG] != ERC20;
[L14510]              assume DType[msgsender_MSG] != StandardToken;
[L14511]              assume DType[msgsender_MSG] != Ownable;
[L14512]              assume DType[msgsender_MSG] != MintableToken;
[L14513]              assume DType[msgsender_MSG] != FreezableToken;
[L14514]              assume DType[msgsender_MSG] != BurnableToken;
[L14515]              assume DType[msgsender_MSG] != Pausable;
[L14516]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14517]              assume DType[msgsender_MSG] != Consts;
[L14518]              assume DType[msgsender_MSG] != MainToken;
[L14519]              Alloc[msgsender_MSG] := true;
[L14520]  COND FALSE  !(choice == 38)
[L14526]  COND FALSE  !(choice == 37)
[L14532]  COND FALSE  !(choice == 36)
[L14539]  COND FALSE  !(choice == 35)
[L14545]  COND TRUE   choice == 34
[L14546]              gas := gas - 21000;
[L14547]  COND TRUE   gas >= 0
[L14548]              assume _value_s1551 >= 0 && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14549]              assume msgvalue_MSG == 0;
[L14550]  CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != _from_s1551 || p2 != msgsender_MSG) && _from_s1551 == _to_s1551) && _value_s1551 <= balances_BasicToken[this][_from_s1551]) && _value_s1551 <= allowed_StandardToken[this][_from_s1551][msgsender_MSG]) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_MainToken0 := true;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]                  revert := revert_hold;
[L4734]               havoc __exception;
[L4735]               revert := false;
[L4736]   COND FALSE  !(__exception)
[L4775]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9617]   COND TRUE   !!paused_Pausable[this]
[L9618]               revert := true;
[L4775]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4776]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((((_success_s1551 == true && allowed_StandardToken[this][_from_s1551][msgsender_MSG] == old(allowed_StandardToken[this][_from_s1551][msgsender_MSG]) - _value_s1551) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L3]                  revert := revert_hold;
[L14550]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L14778]  RET         call CorralChoice_MainToken(this);

Loop:
[L14778]  CALL        call CorralChoice_MainToken(this);
[L14435]              havoc msgsender_MSG;
[L14436]              havoc msgvalue_MSG;
[L14437]              havoc choice;
[L14438]              havoc __ret_0_totalSupply;
[L14439]              havoc _owner_s729;
[L14440]              havoc balance_s729;
[L14441]              havoc _to_s1572;
[L14442]              havoc _value_s1572;
[L14443]              havoc _success_s1572;
[L14444]              havoc _owner_s395;
[L14445]              havoc _spender_s395;
[L14446]              havoc __ret_0_allowance;
[L14447]              havoc _from_s1551;
[L14448]              havoc _to_s1551;
[L14449]              havoc _value_s1551;
[L14450]              havoc _success_s1551;
[L14451]              havoc _spender_s379;
[L14452]              havoc _value_s379;
[L14453]              havoc __ret_0_approve;
[L14454]              havoc _spender_s437;
[L14455]              havoc _addedValue_s437;
[L14456]              havoc __ret_0_increaseApproval;
[L14457]              havoc _spender_s497;
[L14458]              havoc _subtractedValue_s497;
[L14459]              havoc __ret_0_decreaseApproval;
[L14460]              havoc __ret_0_owner;
[L14461]              havoc _newOwner_s558;
[L14462]              havoc __ret_0_mintingFinished;
[L14463]              havoc _to_s664;
[L14464]              havoc _amount_s664;
[L14465]              havoc __ret_0_mint;
[L14466]              havoc __ret_0_finishMinting;
[L14467]              havoc _owner_s742;
[L14468]              havoc balance_s742;
[L14469]              havoc _owner_s754;
[L14470]              havoc balance_s754;
[L14471]              havoc _addr_s792;
[L14472]              havoc count_s792;
[L14473]              havoc _addr_s849;
[L14474]              havoc _index_s849;
[L14475]              havoc _release_s849;
[L14476]              havoc _balance_s849;
[L14477]              havoc _to_s938;
[L14478]              havoc _amount_s938;
[L14479]              havoc _until_s938;
[L14480]              havoc tokens_s1107;
[L14481]              havoc _value_s1261;
[L14482]              havoc __ret_0_paused;
[L14483]              havoc _to_s1449;
[L14484]              havoc _amount_s1449;
[L14485]              havoc _until_s1449;
[L14486]              havoc __ret_0_mintAndFreeze;
[L14487]              havoc __ret_0_TOKEN_DECIMALS;
[L14488]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14489]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14490]              havoc __ret_0_TOKEN_NAME;
[L14491]              havoc __ret_0_TOKEN_SYMBOL;
[L14492]              havoc __ret_0_PAUSED;
[L14493]              havoc __ret_0_TARGET_USER;
[L14494]              havoc __ret_0_CONTINUE_MINTING;
[L14495]              havoc __ret_0_initialized;
[L14496]              havoc _name_s1511;
[L14497]              havoc _symbol_s1519;
[L14498]              havoc _decimals_s1527;
[L14499]              havoc tmpNow;
[L14500]              havoc gas;
[L14501]              assume gas > 4000000 && gas <= 8000000;
[L14502]              tmpNow := now;
[L14503]              havoc now;
[L14504]              assume now > tmpNow;
[L14505]              assume msgsender_MSG != null;
[L14506]              assume DType[msgsender_MSG] != ERC20Basic;
[L14507]              assume DType[msgsender_MSG] != SafeMath;
[L14508]              assume DType[msgsender_MSG] != BasicToken;
[L14509]              assume DType[msgsender_MSG] != ERC20;
[L14510]              assume DType[msgsender_MSG] != StandardToken;
[L14511]              assume DType[msgsender_MSG] != Ownable;
[L14512]              assume DType[msgsender_MSG] != MintableToken;
[L14513]              assume DType[msgsender_MSG] != FreezableToken;
[L14514]              assume DType[msgsender_MSG] != BurnableToken;
[L14515]              assume DType[msgsender_MSG] != Pausable;
[L14516]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14517]              assume DType[msgsender_MSG] != Consts;
[L14518]              assume DType[msgsender_MSG] != MainToken;
[L14519]              Alloc[msgsender_MSG] := true;
[L14520]  COND FALSE  !(choice == 38)
[L14526]  COND FALSE  !(choice == 37)
[L14532]  COND FALSE  !(choice == 36)
[L14539]  COND FALSE  !(choice == 35)
[L14545]  COND TRUE   choice == 34
[L14546]              gas := gas - 21000;
[L14547]  COND TRUE   gas >= 0
[L14548]              assume _value_s1551 >= 0 && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14549]              assume msgvalue_MSG == 0;
[L14550]  CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != _from_s1551 || p2 != msgsender_MSG) && _from_s1551 == _to_s1551) && _value_s1551 <= balances_BasicToken[this][_from_s1551]) && _value_s1551 <= allowed_StandardToken[this][_from_s1551][msgsender_MSG]) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_MainToken0 := true;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]                  revert := revert_hold;
[L4734]               havoc __exception;
[L4735]               revert := false;
[L4736]   COND FALSE  !(__exception)
[L4775]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9617]   COND TRUE   !!paused_Pausable[this]
[L9618]               revert := true;
[L4775]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4776]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((((_success_s1551 == true && allowed_StandardToken[this][_from_s1551][msgsender_MSG] == old(allowed_StandardToken[this][_from_s1551][msgsender_MSG]) - _value_s1551) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L3]                  revert := revert_hold;
[L14550]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L14778]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:41:09,702 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:41:09,703 INFO  L82        PathProgramCache]: Analyzing trace with hash -1589875728, now seen corresponding path program 1 times
[2020-11-24 21:41:09,704 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:41:09,738 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:41:10,313 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9823 trivial. 0 not checked.
[2020-11-24 21:41:10,313 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:41:10,313 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:41:10,315 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:41:10,315 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:41:10,315 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:41:10,315 INFO  L87              Difference]: Start difference. First operand 8650 states and 9791 transitions. cyclomatic complexity: 1161 Second operand 3 states.
[2020-11-24 21:41:10,438 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:41:10,438 INFO  L93              Difference]: Finished difference Result 9732 states and 10979 transitions.
[2020-11-24 21:41:10,438 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:41:10,438 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9732 states and 10979 transitions.
[2020-11-24 21:41:10,458 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:41:10,486 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9732 states to 9384 states and 10571 transitions.
[2020-11-24 21:41:10,486 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2166
[2020-11-24 21:41:10,488 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2195
[2020-11-24 21:41:10,488 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9384 states and 10571 transitions.
[2020-11-24 21:41:10,496 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:41:10,496 INFO  L728         BuchiCegarLoop]: Abstraction has 9384 states and 10571 transitions.
[2020-11-24 21:41:10,505 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9384 states and 10571 transitions.
[2020-11-24 21:41:10,571 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9384 to 8404.
[2020-11-24 21:41:10,571 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8404 states.
[2020-11-24 21:41:10,580 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8404 states to 8404 states and 9327 transitions.
[2020-11-24 21:41:10,580 INFO  L751         BuchiCegarLoop]: Abstraction has 8404 states and 9327 transitions.
[2020-11-24 21:41:10,580 INFO  L631         BuchiCegarLoop]: Abstraction has 8404 states and 9327 transitions.
[2020-11-24 21:41:10,581 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-24 21:41:10,581 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8404 states and 9327 transitions.
[2020-11-24 21:41:10,591 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:41:10,591 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:41:10,591 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:41:10,595 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:41:10,595 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_MainToken0 := false;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L14768]              assume null == 0;
[L14769]  CALL        call this := FreshRefGenerator__success();
[L6698]               havoc newRef;
[L6699]               assume Alloc[newRef] == false;
[L6700]               Alloc[newRef] := true;
[L6701]               assume newRef != null;
[L14769]  RET         call this := FreshRefGenerator__success();
[L14770]              assume now >= 0;
[L14771]              assume DType[this] == MainToken;
[L14772]              assume msgvalue_MSG == 0;
[L14773]              gas := gas - 53000;
[L14774]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4386]               havoc __exception;
[L4387]               revert := false;
[L4388]   COND FALSE  !(__exception)
[L4427]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9285]               assume msgsender_MSG != null;
[L9286]               Balance[this] := 0;
[L9287]               TOKEN_DECIMALS_Consts[this] := 18;
[L9288]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9289]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9290]               TOKEN_NAME_Consts[this] := 1211920069;
[L9291]               TOKEN_SYMBOL_Consts[this] := 49428998;
[L9292]               PAUSED_Consts[this] := false;
[L9293]               __var_52 := ConstantToRef(207782497573736545615953600095632397981971535507);
[L9294]               TARGET_USER_Consts[this] := ConstantToRef(207782497573736545615953600095632397981971535507);
[L9295]               CONTINUE_MINTING_Consts[this] := true;
[L9309]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9310]   COND FALSE  !(revert)
[L9507]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9508]   COND FALSE  !(revert)
[L9511]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L9511]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9512]   COND FALSE  !(revert)
[L9515]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L9515]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9516]   COND FALSE  !(revert)
[L9519]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L9519]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9520]   COND FALSE  !(revert)
[L9523]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L9523]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9524]   COND FALSE  !(revert)
[L9527]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7655]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7656]   COND FALSE  !(revert)
[L7659]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7659]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7660]   COND FALSE  !(revert)
[L7663]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7663]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7664]   COND FALSE  !(revert)
[L7667]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7667]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7668]   COND FALSE  !(revert)
[L7671]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7618]               assume msgsender_MSG != null;
[L7619]               Balance[this] := 0;
[L7620]               chains_FreezableToken[this] := zerointintArr();
[L7621]               sum_chains2[this] := 0;
[L7622]               freezings_FreezableToken[this] := zerointintArr();
[L7623]               sum_freezings3[this] := 0;
[L7624]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7625]               sum_freezingBalance4[this] := 0;
[L7671]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7672]   COND FALSE  !(revert)
[L9527]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9528]   COND FALSE  !(revert)
[L9531]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L9531]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9532]   COND FALSE  !(revert)
[L9535]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7474]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7475]   COND FALSE  !(revert)
[L7478]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7478]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7479]   COND FALSE  !(revert)
[L7482]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7482]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7483]   COND FALSE  !(revert)
[L7486]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7486]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7487]   COND FALSE  !(revert)
[L7490]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L7490]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7491]   COND FALSE  !(revert)
[L7494]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7438]               assume msgsender_MSG != null;
[L7439]               Balance[this] := 0;
[L7440]               mintingFinished_MintableToken[this] := false;
[L7494]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7495]   COND FALSE  !(revert)
[L9535]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9536]   COND FALSE  !(revert)
[L9539]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9094]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L9094]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9095]   COND FALSE  !(revert)
[L9098]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L9098]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9099]   COND FALSE  !(revert)
[L9102]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L9102]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9103]   COND FALSE  !(revert)
[L9106]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L9106]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9107]   COND FALSE  !(revert)
[L9110]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7655]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7656]   COND FALSE  !(revert)
[L7659]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7659]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7660]   COND FALSE  !(revert)
[L7663]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7663]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7664]   COND FALSE  !(revert)
[L7667]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7667]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7668]   COND FALSE  !(revert)
[L7671]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7618]               assume msgsender_MSG != null;
[L7619]               Balance[this] := 0;
[L7620]               chains_FreezableToken[this] := zerointintArr();
[L7621]               sum_chains2[this] := 0;
[L7622]               freezings_FreezableToken[this] := zerointintArr();
[L7623]               sum_freezings3[this] := 0;
[L7624]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7625]               sum_freezingBalance4[this] := 0;
[L7671]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7672]   COND FALSE  !(revert)
[L9110]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9111]   COND FALSE  !(revert)
[L9114]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L9114]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9115]   COND FALSE  !(revert)
[L9118]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7474]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7475]   COND FALSE  !(revert)
[L7478]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7478]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7479]   COND FALSE  !(revert)
[L7482]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7482]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7483]   COND FALSE  !(revert)
[L7486]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7486]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7487]   COND FALSE  !(revert)
[L7490]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L7490]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7491]   COND FALSE  !(revert)
[L7494]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7438]               assume msgsender_MSG != null;
[L7439]               Balance[this] := 0;
[L7440]               mintingFinished_MintableToken[this] := false;
[L7494]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7495]   COND FALSE  !(revert)
[L9118]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9119]   COND FALSE  !(revert)
[L9122]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9051]               assume msgsender_MSG != null;
[L9052]               Balance[this] := 0;
[L9122]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9123]   COND FALSE  !(revert)
[L9539]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9540]   COND FALSE  !(revert)
[L9543]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L8838]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8839]   COND FALSE  !(revert)
[L8842]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L8842]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8843]   COND FALSE  !(revert)
[L8846]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8815]               assume msgsender_MSG != null;
[L8816]               Balance[this] := 0;
[L8846]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8847]   COND FALSE  !(revert)
[L9543]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9544]   COND FALSE  !(revert)
[L9547]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8964]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L8964]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8965]   COND FALSE  !(revert)
[L8968]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8944]               assume msgsender_MSG != null;
[L8945]               Balance[this] := 0;
[L8946]               paused_Pausable[this] := false;
[L8968]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8969]   COND FALSE  !(revert)
[L9547]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9548]   COND FALSE  !(revert)
[L9551]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9435]               assume msgsender_MSG != null;
[L9436]               Balance[this] := 0;
[L9437]               initialized_MainToken[this] := false;
[L9439]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9755]   COND FALSE  !(!!initialized_MainToken[this])
[L9759]               initialized_MainToken[this] := true;
[L9760]   COND FALSE  !(PAUSED_Consts[this])
[L9770]               __var_57 := ConstantToRef(207782497573736545615953600095632397981971535507);
[L9771]               addresses_s1673 := ConstantToRef(207782497573736545615953600095632397981971535507);
[L9772]               __var_58 := 500000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9773]               amounts_s1673 := 500000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9774]               __var_59 := 0 % 18446744073709551616;
[L9775]               freezes_s1673 := 0 % 18446744073709551616;
[L9776]               i_s1673 := 0;
[L9777]   COND FALSE  !(i_s1673 < Length[addresses_s1673])
[L9801]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9811]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9439]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9440]   COND FALSE  !(revert)
[L9443]   COND TRUE   DType[this] == MainToken
[L9444]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7357]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12722]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7357]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   COND TRUE   DType[this] == MainToken
[L7362]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7405]               __var_11 := null;
[L7406]   COND FALSE  !(!(_newOwner_s581 != null))
[L7410]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7411]               owner_Ownable[this] := _newOwner_s581;
[L7362]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7363]   COND FALSE  !(revert)
[L9444]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9445]   COND FALSE  !(revert)
[L9551]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9552]   COND FALSE  !(revert)
[L4427]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]               assume !revert && gas >= 0;
[L14774]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14775]              assume !revert && gas >= 0;
[L14778]  CALL        call CorralChoice_MainToken(this);
[L14435]              havoc msgsender_MSG;
[L14436]              havoc msgvalue_MSG;
[L14437]              havoc choice;
[L14438]              havoc __ret_0_totalSupply;
[L14439]              havoc _owner_s729;
[L14440]              havoc balance_s729;
[L14441]              havoc _to_s1572;
[L14442]              havoc _value_s1572;
[L14443]              havoc _success_s1572;
[L14444]              havoc _owner_s395;
[L14445]              havoc _spender_s395;
[L14446]              havoc __ret_0_allowance;
[L14447]              havoc _from_s1551;
[L14448]              havoc _to_s1551;
[L14449]              havoc _value_s1551;
[L14450]              havoc _success_s1551;
[L14451]              havoc _spender_s379;
[L14452]              havoc _value_s379;
[L14453]              havoc __ret_0_approve;
[L14454]              havoc _spender_s437;
[L14455]              havoc _addedValue_s437;
[L14456]              havoc __ret_0_increaseApproval;
[L14457]              havoc _spender_s497;
[L14458]              havoc _subtractedValue_s497;
[L14459]              havoc __ret_0_decreaseApproval;
[L14460]              havoc __ret_0_owner;
[L14461]              havoc _newOwner_s558;
[L14462]              havoc __ret_0_mintingFinished;
[L14463]              havoc _to_s664;
[L14464]              havoc _amount_s664;
[L14465]              havoc __ret_0_mint;
[L14466]              havoc __ret_0_finishMinting;
[L14467]              havoc _owner_s742;
[L14468]              havoc balance_s742;
[L14469]              havoc _owner_s754;
[L14470]              havoc balance_s754;
[L14471]              havoc _addr_s792;
[L14472]              havoc count_s792;
[L14473]              havoc _addr_s849;
[L14474]              havoc _index_s849;
[L14475]              havoc _release_s849;
[L14476]              havoc _balance_s849;
[L14477]              havoc _to_s938;
[L14478]              havoc _amount_s938;
[L14479]              havoc _until_s938;
[L14480]              havoc tokens_s1107;
[L14481]              havoc _value_s1261;
[L14482]              havoc __ret_0_paused;
[L14483]              havoc _to_s1449;
[L14484]              havoc _amount_s1449;
[L14485]              havoc _until_s1449;
[L14486]              havoc __ret_0_mintAndFreeze;
[L14487]              havoc __ret_0_TOKEN_DECIMALS;
[L14488]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14489]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14490]              havoc __ret_0_TOKEN_NAME;
[L14491]              havoc __ret_0_TOKEN_SYMBOL;
[L14492]              havoc __ret_0_PAUSED;
[L14493]              havoc __ret_0_TARGET_USER;
[L14494]              havoc __ret_0_CONTINUE_MINTING;
[L14495]              havoc __ret_0_initialized;
[L14496]              havoc _name_s1511;
[L14497]              havoc _symbol_s1519;
[L14498]              havoc _decimals_s1527;
[L14499]              havoc tmpNow;
[L14500]              havoc gas;
[L14501]              assume gas > 4000000 && gas <= 8000000;
[L14502]              tmpNow := now;
[L14503]              havoc now;
[L14504]              assume now > tmpNow;
[L14505]              assume msgsender_MSG != null;
[L14506]              assume DType[msgsender_MSG] != ERC20Basic;
[L14507]              assume DType[msgsender_MSG] != SafeMath;
[L14508]              assume DType[msgsender_MSG] != BasicToken;
[L14509]              assume DType[msgsender_MSG] != ERC20;
[L14510]              assume DType[msgsender_MSG] != StandardToken;
[L14511]              assume DType[msgsender_MSG] != Ownable;
[L14512]              assume DType[msgsender_MSG] != MintableToken;
[L14513]              assume DType[msgsender_MSG] != FreezableToken;
[L14514]              assume DType[msgsender_MSG] != BurnableToken;
[L14515]              assume DType[msgsender_MSG] != Pausable;
[L14516]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14517]              assume DType[msgsender_MSG] != Consts;
[L14518]              assume DType[msgsender_MSG] != MainToken;
[L14519]              Alloc[msgsender_MSG] := true;
[L14520]  COND FALSE  !(choice == 38)
[L14526]  COND FALSE  !(choice == 37)
[L14532]  COND FALSE  !(choice == 36)
[L14539]  COND FALSE  !(choice == 35)
[L14545]  COND TRUE   choice == 34
[L14546]              gas := gas - 21000;
[L14547]  COND TRUE   gas >= 0
[L14548]              assume _value_s1551 >= 0 && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14549]              assume msgvalue_MSG == 0;
[L14550]  CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != _from_s1551 || p2 != msgsender_MSG) && _from_s1551 == _to_s1551) && _value_s1551 <= balances_BasicToken[this][_from_s1551]) && _value_s1551 <= allowed_StandardToken[this][_from_s1551][msgsender_MSG]) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_MainToken0 := true;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]                  revert := revert_hold;
[L4734]               havoc __exception;
[L4735]               revert := false;
[L4736]   COND TRUE   __exception
[L4737]               __tmp__Balance := Balance;
[L4738]               __tmp__DType := DType;
[L4739]               __tmp__Alloc := Alloc;
[L4740]               __tmp__balance_ADDR := balance_ADDR;
[L4741]               __tmp__M_Ref_int := M_Ref_int;
[L4742]               __tmp__sum_balances0 := sum_balances0;
[L4743]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4744]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4745]               __tmp__sum_allowed1 := sum_allowed1;
[L4746]               __tmp__M_int_int := M_int_int;
[L4747]               __tmp__sum_chains2 := sum_chains2;
[L4748]               __tmp__sum_freezings3 := sum_freezings3;
[L4749]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4750]               __tmp__M_int_Ref := M_int_Ref;
[L4751]               __tmp__sum := sum;
[L4752]               __tmp__Length := Length;
[L4753]               __tmp__now := now;
[L4754]               __tmp__balances_BasicToken := balances_BasicToken;
[L4755]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4756]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4757]               __tmp__owner_Ownable := owner_Ownable;
[L4758]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4759]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4760]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4761]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4762]               __tmp__paused_Pausable := paused_Pausable;
[L4763]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4764]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4765]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4766]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4767]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4768]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4769]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4770]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4771]               __tmp__initialized_MainToken := initialized_MainToken;
[L4772]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9597]   COND TRUE   !!__tmp__paused_Pausable[this]
[L9598]               revert := true;
[L4772]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4773]               assume revert || gas < 0;
[L14550]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L14778]  RET         call CorralChoice_MainToken(this);

Loop:
[L14778]  CALL        call CorralChoice_MainToken(this);
[L14435]              havoc msgsender_MSG;
[L14436]              havoc msgvalue_MSG;
[L14437]              havoc choice;
[L14438]              havoc __ret_0_totalSupply;
[L14439]              havoc _owner_s729;
[L14440]              havoc balance_s729;
[L14441]              havoc _to_s1572;
[L14442]              havoc _value_s1572;
[L14443]              havoc _success_s1572;
[L14444]              havoc _owner_s395;
[L14445]              havoc _spender_s395;
[L14446]              havoc __ret_0_allowance;
[L14447]              havoc _from_s1551;
[L14448]              havoc _to_s1551;
[L14449]              havoc _value_s1551;
[L14450]              havoc _success_s1551;
[L14451]              havoc _spender_s379;
[L14452]              havoc _value_s379;
[L14453]              havoc __ret_0_approve;
[L14454]              havoc _spender_s437;
[L14455]              havoc _addedValue_s437;
[L14456]              havoc __ret_0_increaseApproval;
[L14457]              havoc _spender_s497;
[L14458]              havoc _subtractedValue_s497;
[L14459]              havoc __ret_0_decreaseApproval;
[L14460]              havoc __ret_0_owner;
[L14461]              havoc _newOwner_s558;
[L14462]              havoc __ret_0_mintingFinished;
[L14463]              havoc _to_s664;
[L14464]              havoc _amount_s664;
[L14465]              havoc __ret_0_mint;
[L14466]              havoc __ret_0_finishMinting;
[L14467]              havoc _owner_s742;
[L14468]              havoc balance_s742;
[L14469]              havoc _owner_s754;
[L14470]              havoc balance_s754;
[L14471]              havoc _addr_s792;
[L14472]              havoc count_s792;
[L14473]              havoc _addr_s849;
[L14474]              havoc _index_s849;
[L14475]              havoc _release_s849;
[L14476]              havoc _balance_s849;
[L14477]              havoc _to_s938;
[L14478]              havoc _amount_s938;
[L14479]              havoc _until_s938;
[L14480]              havoc tokens_s1107;
[L14481]              havoc _value_s1261;
[L14482]              havoc __ret_0_paused;
[L14483]              havoc _to_s1449;
[L14484]              havoc _amount_s1449;
[L14485]              havoc _until_s1449;
[L14486]              havoc __ret_0_mintAndFreeze;
[L14487]              havoc __ret_0_TOKEN_DECIMALS;
[L14488]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14489]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14490]              havoc __ret_0_TOKEN_NAME;
[L14491]              havoc __ret_0_TOKEN_SYMBOL;
[L14492]              havoc __ret_0_PAUSED;
[L14493]              havoc __ret_0_TARGET_USER;
[L14494]              havoc __ret_0_CONTINUE_MINTING;
[L14495]              havoc __ret_0_initialized;
[L14496]              havoc _name_s1511;
[L14497]              havoc _symbol_s1519;
[L14498]              havoc _decimals_s1527;
[L14499]              havoc tmpNow;
[L14500]              havoc gas;
[L14501]              assume gas > 4000000 && gas <= 8000000;
[L14502]              tmpNow := now;
[L14503]              havoc now;
[L14504]              assume now > tmpNow;
[L14505]              assume msgsender_MSG != null;
[L14506]              assume DType[msgsender_MSG] != ERC20Basic;
[L14507]              assume DType[msgsender_MSG] != SafeMath;
[L14508]              assume DType[msgsender_MSG] != BasicToken;
[L14509]              assume DType[msgsender_MSG] != ERC20;
[L14510]              assume DType[msgsender_MSG] != StandardToken;
[L14511]              assume DType[msgsender_MSG] != Ownable;
[L14512]              assume DType[msgsender_MSG] != MintableToken;
[L14513]              assume DType[msgsender_MSG] != FreezableToken;
[L14514]              assume DType[msgsender_MSG] != BurnableToken;
[L14515]              assume DType[msgsender_MSG] != Pausable;
[L14516]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14517]              assume DType[msgsender_MSG] != Consts;
[L14518]              assume DType[msgsender_MSG] != MainToken;
[L14519]              Alloc[msgsender_MSG] := true;
[L14520]  COND FALSE  !(choice == 38)
[L14526]  COND FALSE  !(choice == 37)
[L14532]  COND FALSE  !(choice == 36)
[L14539]  COND FALSE  !(choice == 35)
[L14545]  COND TRUE   choice == 34
[L14546]              gas := gas - 21000;
[L14547]  COND TRUE   gas >= 0
[L14548]              assume _value_s1551 >= 0 && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14549]              assume msgvalue_MSG == 0;
[L14550]  CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != _from_s1551 || p2 != msgsender_MSG) && _from_s1551 == _to_s1551) && _value_s1551 <= balances_BasicToken[this][_from_s1551]) && _value_s1551 <= allowed_StandardToken[this][_from_s1551][msgsender_MSG]) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_MainToken0 := true;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]                  revert := revert_hold;
[L4734]               havoc __exception;
[L4735]               revert := false;
[L4736]   COND TRUE   __exception
[L4737]               __tmp__Balance := Balance;
[L4738]               __tmp__DType := DType;
[L4739]               __tmp__Alloc := Alloc;
[L4740]               __tmp__balance_ADDR := balance_ADDR;
[L4741]               __tmp__M_Ref_int := M_Ref_int;
[L4742]               __tmp__sum_balances0 := sum_balances0;
[L4743]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4744]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4745]               __tmp__sum_allowed1 := sum_allowed1;
[L4746]               __tmp__M_int_int := M_int_int;
[L4747]               __tmp__sum_chains2 := sum_chains2;
[L4748]               __tmp__sum_freezings3 := sum_freezings3;
[L4749]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4750]               __tmp__M_int_Ref := M_int_Ref;
[L4751]               __tmp__sum := sum;
[L4752]               __tmp__Length := Length;
[L4753]               __tmp__now := now;
[L4754]               __tmp__balances_BasicToken := balances_BasicToken;
[L4755]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4756]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4757]               __tmp__owner_Ownable := owner_Ownable;
[L4758]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4759]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4760]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4761]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4762]               __tmp__paused_Pausable := paused_Pausable;
[L4763]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4764]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4765]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4766]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4767]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4768]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4769]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4770]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4771]               __tmp__initialized_MainToken := initialized_MainToken;
[L4772]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9597]   COND TRUE   !!__tmp__paused_Pausable[this]
[L9598]               revert := true;
[L4772]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4773]               assume revert || gas < 0;
[L14550]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L14778]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:41:10,606 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:41:10,606 INFO  L82        PathProgramCache]: Analyzing trace with hash 1980432510, now seen corresponding path program 1 times
[2020-11-24 21:41:10,607 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:41:10,640 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:41:11,238 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9823 trivial. 0 not checked.
[2020-11-24 21:41:11,238 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:41:11,238 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [11] imperfect sequences [] total 11
[2020-11-24 21:41:11,239 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:41:11,239 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-24 21:41:11,239 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=111, Unknown=0, NotChecked=0, Total=132
[2020-11-24 21:41:11,239 INFO  L87              Difference]: Start difference. First operand 8404 states and 9327 transitions. cyclomatic complexity: 943 Second operand 12 states.
[2020-11-24 21:41:19,703 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:41:19,704 INFO  L93              Difference]: Finished difference Result 13770 states and 15400 transitions.
[2020-11-24 21:41:19,704 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-24 21:41:19,704 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 13770 states and 15400 transitions.
[2020-11-24 21:41:19,730 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 12
[2020-11-24 21:41:19,764 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 13770 states to 13710 states and 15329 transitions.
[2020-11-24 21:41:19,764 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3220
[2020-11-24 21:41:19,765 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3220
[2020-11-24 21:41:19,765 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 13710 states and 15329 transitions.
[2020-11-24 21:41:19,774 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:41:19,774 INFO  L728         BuchiCegarLoop]: Abstraction has 13710 states and 15329 transitions.
[2020-11-24 21:41:19,782 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 13710 states and 15329 transitions.
[2020-11-24 21:41:19,868 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 13710 to 11671.
[2020-11-24 21:41:19,868 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11671 states.
[2020-11-24 21:41:19,882 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11671 states to 11671 states and 13269 transitions.
[2020-11-24 21:41:19,882 INFO  L751         BuchiCegarLoop]: Abstraction has 11671 states and 13269 transitions.
[2020-11-24 21:41:19,882 INFO  L631         BuchiCegarLoop]: Abstraction has 11671 states and 13269 transitions.
[2020-11-24 21:41:19,882 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-24 21:41:19,882 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11671 states and 13269 transitions.
[2020-11-24 21:41:19,895 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-24 21:41:19,895 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:41:19,895 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:41:19,899 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:41:19,899 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_MainToken0 := false;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L14768]              assume null == 0;
[L14769]  CALL        call this := FreshRefGenerator__success();
[L6698]               havoc newRef;
[L6699]               assume Alloc[newRef] == false;
[L6700]               Alloc[newRef] := true;
[L6701]               assume newRef != null;
[L14769]  RET         call this := FreshRefGenerator__success();
[L14770]              assume now >= 0;
[L14771]              assume DType[this] == MainToken;
[L14772]              assume msgvalue_MSG == 0;
[L14773]              gas := gas - 53000;
[L14774]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4386]               havoc __exception;
[L4387]               revert := false;
[L4388]   COND FALSE  !(__exception)
[L4427]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9285]               assume msgsender_MSG != null;
[L9286]               Balance[this] := 0;
[L9287]               TOKEN_DECIMALS_Consts[this] := 18;
[L9288]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9289]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9290]               TOKEN_NAME_Consts[this] := 1211920069;
[L9291]               TOKEN_SYMBOL_Consts[this] := 49428998;
[L9292]               PAUSED_Consts[this] := false;
[L9293]               __var_52 := ConstantToRef(207782497573736545615953600095632397981971535507);
[L9294]               TARGET_USER_Consts[this] := ConstantToRef(207782497573736545615953600095632397981971535507);
[L9295]               CONTINUE_MINTING_Consts[this] := true;
[L9309]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9310]   COND FALSE  !(revert)
[L9507]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9508]   COND FALSE  !(revert)
[L9511]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L9511]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9512]   COND FALSE  !(revert)
[L9515]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L9515]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9516]   COND FALSE  !(revert)
[L9519]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L9519]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9520]   COND FALSE  !(revert)
[L9523]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L9523]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9524]   COND FALSE  !(revert)
[L9527]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7655]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7656]   COND FALSE  !(revert)
[L7659]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7659]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7660]   COND FALSE  !(revert)
[L7663]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7663]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7664]   COND FALSE  !(revert)
[L7667]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7667]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7668]   COND FALSE  !(revert)
[L7671]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7618]               assume msgsender_MSG != null;
[L7619]               Balance[this] := 0;
[L7620]               chains_FreezableToken[this] := zerointintArr();
[L7621]               sum_chains2[this] := 0;
[L7622]               freezings_FreezableToken[this] := zerointintArr();
[L7623]               sum_freezings3[this] := 0;
[L7624]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7625]               sum_freezingBalance4[this] := 0;
[L7671]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7672]   COND FALSE  !(revert)
[L9527]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9528]   COND FALSE  !(revert)
[L9531]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L9531]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9532]   COND FALSE  !(revert)
[L9535]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7474]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7475]   COND FALSE  !(revert)
[L7478]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7478]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7479]   COND FALSE  !(revert)
[L7482]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7482]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7483]   COND FALSE  !(revert)
[L7486]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7486]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7487]   COND FALSE  !(revert)
[L7490]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L7490]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7491]   COND FALSE  !(revert)
[L7494]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7438]               assume msgsender_MSG != null;
[L7439]               Balance[this] := 0;
[L7440]               mintingFinished_MintableToken[this] := false;
[L7494]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7495]   COND FALSE  !(revert)
[L9535]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9536]   COND FALSE  !(revert)
[L9539]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9094]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L9094]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9095]   COND FALSE  !(revert)
[L9098]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L9098]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9099]   COND FALSE  !(revert)
[L9102]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L9102]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9103]   COND FALSE  !(revert)
[L9106]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L9106]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9107]   COND FALSE  !(revert)
[L9110]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7655]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7656]   COND FALSE  !(revert)
[L7659]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7659]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7660]   COND FALSE  !(revert)
[L7663]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7663]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7664]   COND FALSE  !(revert)
[L7667]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7667]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7668]   COND FALSE  !(revert)
[L7671]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7618]               assume msgsender_MSG != null;
[L7619]               Balance[this] := 0;
[L7620]               chains_FreezableToken[this] := zerointintArr();
[L7621]               sum_chains2[this] := 0;
[L7622]               freezings_FreezableToken[this] := zerointintArr();
[L7623]               sum_freezings3[this] := 0;
[L7624]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7625]               sum_freezingBalance4[this] := 0;
[L7671]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7672]   COND FALSE  !(revert)
[L9110]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9111]   COND FALSE  !(revert)
[L9114]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L9114]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9115]   COND FALSE  !(revert)
[L9118]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7474]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7475]   COND FALSE  !(revert)
[L7478]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7478]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7479]   COND FALSE  !(revert)
[L7482]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7482]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7483]   COND FALSE  !(revert)
[L7486]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7486]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7487]   COND FALSE  !(revert)
[L7490]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L7490]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7491]   COND FALSE  !(revert)
[L7494]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7438]               assume msgsender_MSG != null;
[L7439]               Balance[this] := 0;
[L7440]               mintingFinished_MintableToken[this] := false;
[L7494]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7495]   COND FALSE  !(revert)
[L9118]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9119]   COND FALSE  !(revert)
[L9122]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9051]               assume msgsender_MSG != null;
[L9052]               Balance[this] := 0;
[L9122]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9123]   COND FALSE  !(revert)
[L9539]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9540]   COND FALSE  !(revert)
[L9543]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L8838]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8839]   COND FALSE  !(revert)
[L8842]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L8842]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8843]   COND FALSE  !(revert)
[L8846]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8815]               assume msgsender_MSG != null;
[L8816]               Balance[this] := 0;
[L8846]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8847]   COND FALSE  !(revert)
[L9543]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9544]   COND FALSE  !(revert)
[L9547]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8964]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L8964]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8965]   COND FALSE  !(revert)
[L8968]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8944]               assume msgsender_MSG != null;
[L8945]               Balance[this] := 0;
[L8946]               paused_Pausable[this] := false;
[L8968]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8969]   COND FALSE  !(revert)
[L9547]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9548]   COND FALSE  !(revert)
[L9551]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9435]               assume msgsender_MSG != null;
[L9436]               Balance[this] := 0;
[L9437]               initialized_MainToken[this] := false;
[L9439]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9755]   COND FALSE  !(!!initialized_MainToken[this])
[L9759]               initialized_MainToken[this] := true;
[L9760]   COND TRUE   PAUSED_Consts[this]
[L9761]   COND TRUE   DType[this] == MainToken
[L9762]   CALL        call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8989]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12722]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L8989]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8990]   COND FALSE  !(revert)
[L8993]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12770]  COND FALSE  !(!!paused_Pausable[this])
[L8993]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8994]   COND FALSE  !(revert)
[L8997]               paused_Pausable[this] := true;
[L8998]               assert { :EventEmitted "Pause_Pausable" } true;
[L9762]   RET         call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9763]   COND FALSE  !(revert)
[L9770]               __var_57 := ConstantToRef(207782497573736545615953600095632397981971535507);
[L9771]               addresses_s1673 := ConstantToRef(207782497573736545615953600095632397981971535507);
[L9772]               __var_58 := 500000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9773]               amounts_s1673 := 500000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9774]               __var_59 := 0 % 18446744073709551616;
[L9775]               freezes_s1673 := 0 % 18446744073709551616;
[L9776]               i_s1673 := 0;
[L9777]   COND FALSE  !(i_s1673 < Length[addresses_s1673])
[L9801]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9811]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9439]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9440]   COND FALSE  !(revert)
[L9443]   COND TRUE   DType[this] == MainToken
[L9444]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7357]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12722]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7357]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   COND FALSE  !(DType[this] == MainToken)
[L7366]   COND TRUE   DType[this] == FreezableMintableToken
[L7367]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7405]               __var_11 := null;
[L7406]   COND FALSE  !(!(_newOwner_s581 != null))
[L7410]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7411]               owner_Ownable[this] := _newOwner_s581;
[L7367]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7368]   COND FALSE  !(revert)
[L9444]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9445]   COND FALSE  !(revert)
[L9551]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9552]   COND FALSE  !(revert)
[L4427]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]               assume !revert && gas >= 0;
[L14774]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14775]              assume !revert && gas >= 0;
[L14778]  CALL        call CorralChoice_MainToken(this);
[L14435]              havoc msgsender_MSG;
[L14436]              havoc msgvalue_MSG;
[L14437]              havoc choice;
[L14438]              havoc __ret_0_totalSupply;
[L14439]              havoc _owner_s729;
[L14440]              havoc balance_s729;
[L14441]              havoc _to_s1572;
[L14442]              havoc _value_s1572;
[L14443]              havoc _success_s1572;
[L14444]              havoc _owner_s395;
[L14445]              havoc _spender_s395;
[L14446]              havoc __ret_0_allowance;
[L14447]              havoc _from_s1551;
[L14448]              havoc _to_s1551;
[L14449]              havoc _value_s1551;
[L14450]              havoc _success_s1551;
[L14451]              havoc _spender_s379;
[L14452]              havoc _value_s379;
[L14453]              havoc __ret_0_approve;
[L14454]              havoc _spender_s437;
[L14455]              havoc _addedValue_s437;
[L14456]              havoc __ret_0_increaseApproval;
[L14457]              havoc _spender_s497;
[L14458]              havoc _subtractedValue_s497;
[L14459]              havoc __ret_0_decreaseApproval;
[L14460]              havoc __ret_0_owner;
[L14461]              havoc _newOwner_s558;
[L14462]              havoc __ret_0_mintingFinished;
[L14463]              havoc _to_s664;
[L14464]              havoc _amount_s664;
[L14465]              havoc __ret_0_mint;
[L14466]              havoc __ret_0_finishMinting;
[L14467]              havoc _owner_s742;
[L14468]              havoc balance_s742;
[L14469]              havoc _owner_s754;
[L14470]              havoc balance_s754;
[L14471]              havoc _addr_s792;
[L14472]              havoc count_s792;
[L14473]              havoc _addr_s849;
[L14474]              havoc _index_s849;
[L14475]              havoc _release_s849;
[L14476]              havoc _balance_s849;
[L14477]              havoc _to_s938;
[L14478]              havoc _amount_s938;
[L14479]              havoc _until_s938;
[L14480]              havoc tokens_s1107;
[L14481]              havoc _value_s1261;
[L14482]              havoc __ret_0_paused;
[L14483]              havoc _to_s1449;
[L14484]              havoc _amount_s1449;
[L14485]              havoc _until_s1449;
[L14486]              havoc __ret_0_mintAndFreeze;
[L14487]              havoc __ret_0_TOKEN_DECIMALS;
[L14488]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14489]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14490]              havoc __ret_0_TOKEN_NAME;
[L14491]              havoc __ret_0_TOKEN_SYMBOL;
[L14492]              havoc __ret_0_PAUSED;
[L14493]              havoc __ret_0_TARGET_USER;
[L14494]              havoc __ret_0_CONTINUE_MINTING;
[L14495]              havoc __ret_0_initialized;
[L14496]              havoc _name_s1511;
[L14497]              havoc _symbol_s1519;
[L14498]              havoc _decimals_s1527;
[L14499]              havoc tmpNow;
[L14500]              havoc gas;
[L14501]              assume gas > 4000000 && gas <= 8000000;
[L14502]              tmpNow := now;
[L14503]              havoc now;
[L14504]              assume now > tmpNow;
[L14505]              assume msgsender_MSG != null;
[L14506]              assume DType[msgsender_MSG] != ERC20Basic;
[L14507]              assume DType[msgsender_MSG] != SafeMath;
[L14508]              assume DType[msgsender_MSG] != BasicToken;
[L14509]              assume DType[msgsender_MSG] != ERC20;
[L14510]              assume DType[msgsender_MSG] != StandardToken;
[L14511]              assume DType[msgsender_MSG] != Ownable;
[L14512]              assume DType[msgsender_MSG] != MintableToken;
[L14513]              assume DType[msgsender_MSG] != FreezableToken;
[L14514]              assume DType[msgsender_MSG] != BurnableToken;
[L14515]              assume DType[msgsender_MSG] != Pausable;
[L14516]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14517]              assume DType[msgsender_MSG] != Consts;
[L14518]              assume DType[msgsender_MSG] != MainToken;
[L14519]              Alloc[msgsender_MSG] := true;
[L14520]  COND FALSE  !(choice == 38)
[L14526]  COND FALSE  !(choice == 37)
[L14532]  COND FALSE  !(choice == 36)
[L14539]  COND FALSE  !(choice == 35)
[L14545]  COND TRUE   choice == 34
[L14546]              gas := gas - 21000;
[L14547]  COND TRUE   gas >= 0
[L14548]              assume _value_s1551 >= 0 && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14549]              assume msgvalue_MSG == 0;
[L14550]  CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != _from_s1551 || p2 != msgsender_MSG) && _from_s1551 == _to_s1551) && _value_s1551 <= balances_BasicToken[this][_from_s1551]) && _value_s1551 <= allowed_StandardToken[this][_from_s1551][msgsender_MSG]) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_MainToken0 := true;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]                  revert := revert_hold;
[L4734]               havoc __exception;
[L4735]               revert := false;
[L4736]   COND TRUE   __exception
[L4737]               __tmp__Balance := Balance;
[L4738]               __tmp__DType := DType;
[L4739]               __tmp__Alloc := Alloc;
[L4740]               __tmp__balance_ADDR := balance_ADDR;
[L4741]               __tmp__M_Ref_int := M_Ref_int;
[L4742]               __tmp__sum_balances0 := sum_balances0;
[L4743]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4744]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4745]               __tmp__sum_allowed1 := sum_allowed1;
[L4746]               __tmp__M_int_int := M_int_int;
[L4747]               __tmp__sum_chains2 := sum_chains2;
[L4748]               __tmp__sum_freezings3 := sum_freezings3;
[L4749]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4750]               __tmp__M_int_Ref := M_int_Ref;
[L4751]               __tmp__sum := sum;
[L4752]               __tmp__Length := Length;
[L4753]               __tmp__now := now;
[L4754]               __tmp__balances_BasicToken := balances_BasicToken;
[L4755]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4756]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4757]               __tmp__owner_Ownable := owner_Ownable;
[L4758]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4759]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4760]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4761]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4762]               __tmp__paused_Pausable := paused_Pausable;
[L4763]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4764]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4765]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4766]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4767]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4768]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4769]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4770]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4771]               __tmp__initialized_MainToken := initialized_MainToken;
[L4772]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9597]   COND TRUE   !!__tmp__paused_Pausable[this]
[L9598]               revert := true;
[L4772]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4773]               assume revert || gas < 0;
[L14550]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L14778]  RET         call CorralChoice_MainToken(this);

Loop:
[L14778]  CALL        call CorralChoice_MainToken(this);
[L14435]              havoc msgsender_MSG;
[L14436]              havoc msgvalue_MSG;
[L14437]              havoc choice;
[L14438]              havoc __ret_0_totalSupply;
[L14439]              havoc _owner_s729;
[L14440]              havoc balance_s729;
[L14441]              havoc _to_s1572;
[L14442]              havoc _value_s1572;
[L14443]              havoc _success_s1572;
[L14444]              havoc _owner_s395;
[L14445]              havoc _spender_s395;
[L14446]              havoc __ret_0_allowance;
[L14447]              havoc _from_s1551;
[L14448]              havoc _to_s1551;
[L14449]              havoc _value_s1551;
[L14450]              havoc _success_s1551;
[L14451]              havoc _spender_s379;
[L14452]              havoc _value_s379;
[L14453]              havoc __ret_0_approve;
[L14454]              havoc _spender_s437;
[L14455]              havoc _addedValue_s437;
[L14456]              havoc __ret_0_increaseApproval;
[L14457]              havoc _spender_s497;
[L14458]              havoc _subtractedValue_s497;
[L14459]              havoc __ret_0_decreaseApproval;
[L14460]              havoc __ret_0_owner;
[L14461]              havoc _newOwner_s558;
[L14462]              havoc __ret_0_mintingFinished;
[L14463]              havoc _to_s664;
[L14464]              havoc _amount_s664;
[L14465]              havoc __ret_0_mint;
[L14466]              havoc __ret_0_finishMinting;
[L14467]              havoc _owner_s742;
[L14468]              havoc balance_s742;
[L14469]              havoc _owner_s754;
[L14470]              havoc balance_s754;
[L14471]              havoc _addr_s792;
[L14472]              havoc count_s792;
[L14473]              havoc _addr_s849;
[L14474]              havoc _index_s849;
[L14475]              havoc _release_s849;
[L14476]              havoc _balance_s849;
[L14477]              havoc _to_s938;
[L14478]              havoc _amount_s938;
[L14479]              havoc _until_s938;
[L14480]              havoc tokens_s1107;
[L14481]              havoc _value_s1261;
[L14482]              havoc __ret_0_paused;
[L14483]              havoc _to_s1449;
[L14484]              havoc _amount_s1449;
[L14485]              havoc _until_s1449;
[L14486]              havoc __ret_0_mintAndFreeze;
[L14487]              havoc __ret_0_TOKEN_DECIMALS;
[L14488]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14489]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14490]              havoc __ret_0_TOKEN_NAME;
[L14491]              havoc __ret_0_TOKEN_SYMBOL;
[L14492]              havoc __ret_0_PAUSED;
[L14493]              havoc __ret_0_TARGET_USER;
[L14494]              havoc __ret_0_CONTINUE_MINTING;
[L14495]              havoc __ret_0_initialized;
[L14496]              havoc _name_s1511;
[L14497]              havoc _symbol_s1519;
[L14498]              havoc _decimals_s1527;
[L14499]              havoc tmpNow;
[L14500]              havoc gas;
[L14501]              assume gas > 4000000 && gas <= 8000000;
[L14502]              tmpNow := now;
[L14503]              havoc now;
[L14504]              assume now > tmpNow;
[L14505]              assume msgsender_MSG != null;
[L14506]              assume DType[msgsender_MSG] != ERC20Basic;
[L14507]              assume DType[msgsender_MSG] != SafeMath;
[L14508]              assume DType[msgsender_MSG] != BasicToken;
[L14509]              assume DType[msgsender_MSG] != ERC20;
[L14510]              assume DType[msgsender_MSG] != StandardToken;
[L14511]              assume DType[msgsender_MSG] != Ownable;
[L14512]              assume DType[msgsender_MSG] != MintableToken;
[L14513]              assume DType[msgsender_MSG] != FreezableToken;
[L14514]              assume DType[msgsender_MSG] != BurnableToken;
[L14515]              assume DType[msgsender_MSG] != Pausable;
[L14516]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14517]              assume DType[msgsender_MSG] != Consts;
[L14518]              assume DType[msgsender_MSG] != MainToken;
[L14519]              Alloc[msgsender_MSG] := true;
[L14520]  COND FALSE  !(choice == 38)
[L14526]  COND FALSE  !(choice == 37)
[L14532]  COND FALSE  !(choice == 36)
[L14539]  COND FALSE  !(choice == 35)
[L14545]  COND TRUE   choice == 34
[L14546]              gas := gas - 21000;
[L14547]  COND TRUE   gas >= 0
[L14548]              assume _value_s1551 >= 0 && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14549]              assume msgvalue_MSG == 0;
[L14550]  CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != _from_s1551 || p2 != msgsender_MSG) && _from_s1551 == _to_s1551) && _value_s1551 <= balances_BasicToken[this][_from_s1551]) && _value_s1551 <= allowed_StandardToken[this][_from_s1551][msgsender_MSG]) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_MainToken0 := true;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]                  revert := revert_hold;
[L4734]               havoc __exception;
[L4735]               revert := false;
[L4736]   COND TRUE   __exception
[L4737]               __tmp__Balance := Balance;
[L4738]               __tmp__DType := DType;
[L4739]               __tmp__Alloc := Alloc;
[L4740]               __tmp__balance_ADDR := balance_ADDR;
[L4741]               __tmp__M_Ref_int := M_Ref_int;
[L4742]               __tmp__sum_balances0 := sum_balances0;
[L4743]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4744]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4745]               __tmp__sum_allowed1 := sum_allowed1;
[L4746]               __tmp__M_int_int := M_int_int;
[L4747]               __tmp__sum_chains2 := sum_chains2;
[L4748]               __tmp__sum_freezings3 := sum_freezings3;
[L4749]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4750]               __tmp__M_int_Ref := M_int_Ref;
[L4751]               __tmp__sum := sum;
[L4752]               __tmp__Length := Length;
[L4753]               __tmp__now := now;
[L4754]               __tmp__balances_BasicToken := balances_BasicToken;
[L4755]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4756]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4757]               __tmp__owner_Ownable := owner_Ownable;
[L4758]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4759]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4760]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4761]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4762]               __tmp__paused_Pausable := paused_Pausable;
[L4763]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4764]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4765]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4766]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4767]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4768]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4769]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4770]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4771]               __tmp__initialized_MainToken := initialized_MainToken;
[L4772]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9597]   COND FALSE  !(!!__tmp__paused_Pausable[this])
[L9601]   COND TRUE   __tmp__DType[this] == MainToken
[L9602]   CALL        call __var_53 := transferFrom~address~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L7072]               __var_4 := null;
[L7073]   COND TRUE   !(_to_s351 != null)
[L7074]               revert := true;
[L9602]   RET         call __var_53 := transferFrom~address~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9603]   COND TRUE   revert
[L4772]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4773]               assume revert || gas < 0;
[L14550]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L14778]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:41:19,907 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:41:19,908 INFO  L82        PathProgramCache]: Analyzing trace with hash -729656281, now seen corresponding path program 1 times
[2020-11-24 21:41:19,909 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:41:19,940 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:41:20,448 INFO  L134       CoverageAnalysis]: Checked inductivity of 9826 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9826 trivial. 0 not checked.
[2020-11-24 21:41:20,448 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:41:20,448 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 21:41:20,449 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:41:20,449 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 21:41:20,449 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 21:41:20,449 INFO  L87              Difference]: Start difference. First operand 11671 states and 13269 transitions. cyclomatic complexity: 1630 Second operand 7 states.
[2020-11-24 21:41:20,621 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:41:20,621 INFO  L93              Difference]: Finished difference Result 11703 states and 13301 transitions.
[2020-11-24 21:41:20,622 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 21:41:20,622 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11703 states and 13301 transitions.
[2020-11-24 21:41:20,645 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-24 21:41:20,674 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11703 states to 11679 states and 13277 transitions.
[2020-11-24 21:41:20,674 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2654
[2020-11-24 21:41:20,675 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2654
[2020-11-24 21:41:20,675 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11679 states and 13277 transitions.
[2020-11-24 21:41:20,682 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:41:20,683 INFO  L728         BuchiCegarLoop]: Abstraction has 11679 states and 13277 transitions.
[2020-11-24 21:41:20,690 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11679 states and 13277 transitions.
[2020-11-24 21:41:20,761 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11679 to 11673.
[2020-11-24 21:41:20,761 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11673 states.
[2020-11-24 21:41:20,776 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11673 states to 11673 states and 13271 transitions.
[2020-11-24 21:41:20,776 INFO  L751         BuchiCegarLoop]: Abstraction has 11673 states and 13271 transitions.
[2020-11-24 21:41:20,776 INFO  L631         BuchiCegarLoop]: Abstraction has 11673 states and 13271 transitions.
[2020-11-24 21:41:20,776 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-24 21:41:20,776 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11673 states and 13271 transitions.
[2020-11-24 21:41:20,789 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-24 21:41:20,789 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:41:20,789 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:41:20,792 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:41:20,792 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_MainToken0 := false;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L14768]              assume null == 0;
[L14769]  CALL        call this := FreshRefGenerator__success();
[L6698]               havoc newRef;
[L6699]               assume Alloc[newRef] == false;
[L6700]               Alloc[newRef] := true;
[L6701]               assume newRef != null;
[L14769]  RET         call this := FreshRefGenerator__success();
[L14770]              assume now >= 0;
[L14771]              assume DType[this] == MainToken;
[L14772]              assume msgvalue_MSG == 0;
[L14773]              gas := gas - 53000;
[L14774]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4386]               havoc __exception;
[L4387]               revert := false;
[L4388]   COND FALSE  !(__exception)
[L4427]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9285]               assume msgsender_MSG != null;
[L9286]               Balance[this] := 0;
[L9287]               TOKEN_DECIMALS_Consts[this] := 18;
[L9288]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9289]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9290]               TOKEN_NAME_Consts[this] := 1211920069;
[L9291]               TOKEN_SYMBOL_Consts[this] := 49428998;
[L9292]               PAUSED_Consts[this] := false;
[L9293]               __var_52 := ConstantToRef(207782497573736545615953600095632397981971535507);
[L9294]               TARGET_USER_Consts[this] := ConstantToRef(207782497573736545615953600095632397981971535507);
[L9295]               CONTINUE_MINTING_Consts[this] := true;
[L9309]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9310]   COND FALSE  !(revert)
[L9507]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9508]   COND FALSE  !(revert)
[L9511]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L9511]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9512]   COND FALSE  !(revert)
[L9515]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L9515]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9516]   COND FALSE  !(revert)
[L9519]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L9519]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9520]   COND FALSE  !(revert)
[L9523]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L9523]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9524]   COND FALSE  !(revert)
[L9527]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7655]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7656]   COND FALSE  !(revert)
[L7659]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7659]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7660]   COND FALSE  !(revert)
[L7663]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7663]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7664]   COND FALSE  !(revert)
[L7667]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7667]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7668]   COND FALSE  !(revert)
[L7671]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7618]               assume msgsender_MSG != null;
[L7619]               Balance[this] := 0;
[L7620]               chains_FreezableToken[this] := zerointintArr();
[L7621]               sum_chains2[this] := 0;
[L7622]               freezings_FreezableToken[this] := zerointintArr();
[L7623]               sum_freezings3[this] := 0;
[L7624]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7625]               sum_freezingBalance4[this] := 0;
[L7671]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7672]   COND FALSE  !(revert)
[L9527]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9528]   COND FALSE  !(revert)
[L9531]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L9531]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9532]   COND FALSE  !(revert)
[L9535]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7474]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7475]   COND FALSE  !(revert)
[L7478]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7478]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7479]   COND FALSE  !(revert)
[L7482]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7482]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7483]   COND FALSE  !(revert)
[L7486]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7486]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7487]   COND FALSE  !(revert)
[L7490]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L7490]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7491]   COND FALSE  !(revert)
[L7494]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7438]               assume msgsender_MSG != null;
[L7439]               Balance[this] := 0;
[L7440]               mintingFinished_MintableToken[this] := false;
[L7494]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7495]   COND FALSE  !(revert)
[L9535]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9536]   COND FALSE  !(revert)
[L9539]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9094]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L9094]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9095]   COND FALSE  !(revert)
[L9098]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L9098]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9099]   COND FALSE  !(revert)
[L9102]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L9102]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9103]   COND FALSE  !(revert)
[L9106]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L9106]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9107]   COND FALSE  !(revert)
[L9110]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7655]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7656]   COND FALSE  !(revert)
[L7659]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7659]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7660]   COND FALSE  !(revert)
[L7663]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7663]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7664]   COND FALSE  !(revert)
[L7667]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7667]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7668]   COND FALSE  !(revert)
[L7671]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7618]               assume msgsender_MSG != null;
[L7619]               Balance[this] := 0;
[L7620]               chains_FreezableToken[this] := zerointintArr();
[L7621]               sum_chains2[this] := 0;
[L7622]               freezings_FreezableToken[this] := zerointintArr();
[L7623]               sum_freezings3[this] := 0;
[L7624]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7625]               sum_freezingBalance4[this] := 0;
[L7671]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7672]   COND FALSE  !(revert)
[L9110]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9111]   COND FALSE  !(revert)
[L9114]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L9114]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9115]   COND FALSE  !(revert)
[L9118]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7474]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7475]   COND FALSE  !(revert)
[L7478]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7478]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7479]   COND FALSE  !(revert)
[L7482]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7482]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7483]   COND FALSE  !(revert)
[L7486]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7486]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7487]   COND FALSE  !(revert)
[L7490]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L7490]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7491]   COND FALSE  !(revert)
[L7494]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7438]               assume msgsender_MSG != null;
[L7439]               Balance[this] := 0;
[L7440]               mintingFinished_MintableToken[this] := false;
[L7494]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7495]   COND FALSE  !(revert)
[L9118]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9119]   COND FALSE  !(revert)
[L9122]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9051]               assume msgsender_MSG != null;
[L9052]               Balance[this] := 0;
[L9122]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9123]   COND FALSE  !(revert)
[L9539]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9540]   COND FALSE  !(revert)
[L9543]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L8838]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8839]   COND FALSE  !(revert)
[L8842]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L8842]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8843]   COND FALSE  !(revert)
[L8846]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8815]               assume msgsender_MSG != null;
[L8816]               Balance[this] := 0;
[L8846]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8847]   COND FALSE  !(revert)
[L9543]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9544]   COND FALSE  !(revert)
[L9547]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8964]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L8964]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8965]   COND FALSE  !(revert)
[L8968]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8944]               assume msgsender_MSG != null;
[L8945]               Balance[this] := 0;
[L8946]               paused_Pausable[this] := false;
[L8968]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8969]   COND FALSE  !(revert)
[L9547]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9548]   COND FALSE  !(revert)
[L9551]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9435]               assume msgsender_MSG != null;
[L9436]               Balance[this] := 0;
[L9437]               initialized_MainToken[this] := false;
[L9439]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9755]   COND FALSE  !(!!initialized_MainToken[this])
[L9759]               initialized_MainToken[this] := true;
[L9760]   COND TRUE   PAUSED_Consts[this]
[L9761]   COND TRUE   DType[this] == MainToken
[L9762]   CALL        call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8989]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12722]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L8989]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8990]   COND FALSE  !(revert)
[L8993]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12770]  COND FALSE  !(!!paused_Pausable[this])
[L8993]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8994]   COND FALSE  !(revert)
[L8997]               paused_Pausable[this] := true;
[L8998]               assert { :EventEmitted "Pause_Pausable" } true;
[L9762]   RET         call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9763]   COND FALSE  !(revert)
[L9770]               __var_57 := ConstantToRef(207782497573736545615953600095632397981971535507);
[L9771]               addresses_s1673 := ConstantToRef(207782497573736545615953600095632397981971535507);
[L9772]               __var_58 := 500000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9773]               amounts_s1673 := 500000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9774]               __var_59 := 0 % 18446744073709551616;
[L9775]               freezes_s1673 := 0 % 18446744073709551616;
[L9776]               i_s1673 := 0;
[L9777]   COND FALSE  !(i_s1673 < Length[addresses_s1673])
[L9801]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9811]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9439]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9440]   COND FALSE  !(revert)
[L9443]   COND TRUE   DType[this] == MainToken
[L9444]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7357]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12722]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7357]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   COND TRUE   DType[this] == MainToken
[L7362]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7405]               __var_11 := null;
[L7406]   COND FALSE  !(!(_newOwner_s581 != null))
[L7410]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7411]               owner_Ownable[this] := _newOwner_s581;
[L7362]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7363]   COND FALSE  !(revert)
[L9444]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9445]   COND FALSE  !(revert)
[L9551]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9552]   COND FALSE  !(revert)
[L4427]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]               assume !revert && gas >= 0;
[L14774]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14775]              assume !revert && gas >= 0;
[L14778]  CALL        call CorralChoice_MainToken(this);
[L14435]              havoc msgsender_MSG;
[L14436]              havoc msgvalue_MSG;
[L14437]              havoc choice;
[L14438]              havoc __ret_0_totalSupply;
[L14439]              havoc _owner_s729;
[L14440]              havoc balance_s729;
[L14441]              havoc _to_s1572;
[L14442]              havoc _value_s1572;
[L14443]              havoc _success_s1572;
[L14444]              havoc _owner_s395;
[L14445]              havoc _spender_s395;
[L14446]              havoc __ret_0_allowance;
[L14447]              havoc _from_s1551;
[L14448]              havoc _to_s1551;
[L14449]              havoc _value_s1551;
[L14450]              havoc _success_s1551;
[L14451]              havoc _spender_s379;
[L14452]              havoc _value_s379;
[L14453]              havoc __ret_0_approve;
[L14454]              havoc _spender_s437;
[L14455]              havoc _addedValue_s437;
[L14456]              havoc __ret_0_increaseApproval;
[L14457]              havoc _spender_s497;
[L14458]              havoc _subtractedValue_s497;
[L14459]              havoc __ret_0_decreaseApproval;
[L14460]              havoc __ret_0_owner;
[L14461]              havoc _newOwner_s558;
[L14462]              havoc __ret_0_mintingFinished;
[L14463]              havoc _to_s664;
[L14464]              havoc _amount_s664;
[L14465]              havoc __ret_0_mint;
[L14466]              havoc __ret_0_finishMinting;
[L14467]              havoc _owner_s742;
[L14468]              havoc balance_s742;
[L14469]              havoc _owner_s754;
[L14470]              havoc balance_s754;
[L14471]              havoc _addr_s792;
[L14472]              havoc count_s792;
[L14473]              havoc _addr_s849;
[L14474]              havoc _index_s849;
[L14475]              havoc _release_s849;
[L14476]              havoc _balance_s849;
[L14477]              havoc _to_s938;
[L14478]              havoc _amount_s938;
[L14479]              havoc _until_s938;
[L14480]              havoc tokens_s1107;
[L14481]              havoc _value_s1261;
[L14482]              havoc __ret_0_paused;
[L14483]              havoc _to_s1449;
[L14484]              havoc _amount_s1449;
[L14485]              havoc _until_s1449;
[L14486]              havoc __ret_0_mintAndFreeze;
[L14487]              havoc __ret_0_TOKEN_DECIMALS;
[L14488]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14489]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14490]              havoc __ret_0_TOKEN_NAME;
[L14491]              havoc __ret_0_TOKEN_SYMBOL;
[L14492]              havoc __ret_0_PAUSED;
[L14493]              havoc __ret_0_TARGET_USER;
[L14494]              havoc __ret_0_CONTINUE_MINTING;
[L14495]              havoc __ret_0_initialized;
[L14496]              havoc _name_s1511;
[L14497]              havoc _symbol_s1519;
[L14498]              havoc _decimals_s1527;
[L14499]              havoc tmpNow;
[L14500]              havoc gas;
[L14501]              assume gas > 4000000 && gas <= 8000000;
[L14502]              tmpNow := now;
[L14503]              havoc now;
[L14504]              assume now > tmpNow;
[L14505]              assume msgsender_MSG != null;
[L14506]              assume DType[msgsender_MSG] != ERC20Basic;
[L14507]              assume DType[msgsender_MSG] != SafeMath;
[L14508]              assume DType[msgsender_MSG] != BasicToken;
[L14509]              assume DType[msgsender_MSG] != ERC20;
[L14510]              assume DType[msgsender_MSG] != StandardToken;
[L14511]              assume DType[msgsender_MSG] != Ownable;
[L14512]              assume DType[msgsender_MSG] != MintableToken;
[L14513]              assume DType[msgsender_MSG] != FreezableToken;
[L14514]              assume DType[msgsender_MSG] != BurnableToken;
[L14515]              assume DType[msgsender_MSG] != Pausable;
[L14516]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14517]              assume DType[msgsender_MSG] != Consts;
[L14518]              assume DType[msgsender_MSG] != MainToken;
[L14519]              Alloc[msgsender_MSG] := true;
[L14520]  COND FALSE  !(choice == 38)
[L14526]  COND FALSE  !(choice == 37)
[L14532]  COND FALSE  !(choice == 36)
[L14539]  COND FALSE  !(choice == 35)
[L14545]  COND TRUE   choice == 34
[L14546]              gas := gas - 21000;
[L14547]  COND TRUE   gas >= 0
[L14548]              assume _value_s1551 >= 0 && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14549]              assume msgvalue_MSG == 0;
[L14550]  CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != _from_s1551 || p2 != msgsender_MSG) && _from_s1551 == _to_s1551) && _value_s1551 <= balances_BasicToken[this][_from_s1551]) && _value_s1551 <= allowed_StandardToken[this][_from_s1551][msgsender_MSG]) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_MainToken0 := true;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]                  revert := revert_hold;
[L4734]               havoc __exception;
[L4735]               revert := false;
[L4736]   COND TRUE   __exception
[L4737]               __tmp__Balance := Balance;
[L4738]               __tmp__DType := DType;
[L4739]               __tmp__Alloc := Alloc;
[L4740]               __tmp__balance_ADDR := balance_ADDR;
[L4741]               __tmp__M_Ref_int := M_Ref_int;
[L4742]               __tmp__sum_balances0 := sum_balances0;
[L4743]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4744]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4745]               __tmp__sum_allowed1 := sum_allowed1;
[L4746]               __tmp__M_int_int := M_int_int;
[L4747]               __tmp__sum_chains2 := sum_chains2;
[L4748]               __tmp__sum_freezings3 := sum_freezings3;
[L4749]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4750]               __tmp__M_int_Ref := M_int_Ref;
[L4751]               __tmp__sum := sum;
[L4752]               __tmp__Length := Length;
[L4753]               __tmp__now := now;
[L4754]               __tmp__balances_BasicToken := balances_BasicToken;
[L4755]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4756]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4757]               __tmp__owner_Ownable := owner_Ownable;
[L4758]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4759]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4760]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4761]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4762]               __tmp__paused_Pausable := paused_Pausable;
[L4763]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4764]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4765]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4766]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4767]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4768]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4769]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4770]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4771]               __tmp__initialized_MainToken := initialized_MainToken;
[L4772]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9597]   COND TRUE   !!__tmp__paused_Pausable[this]
[L9598]               revert := true;
[L4772]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4773]               assume revert || gas < 0;
[L14550]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L14778]  RET         call CorralChoice_MainToken(this);

Loop:
[L14778]  CALL        call CorralChoice_MainToken(this);
[L14435]              havoc msgsender_MSG;
[L14436]              havoc msgvalue_MSG;
[L14437]              havoc choice;
[L14438]              havoc __ret_0_totalSupply;
[L14439]              havoc _owner_s729;
[L14440]              havoc balance_s729;
[L14441]              havoc _to_s1572;
[L14442]              havoc _value_s1572;
[L14443]              havoc _success_s1572;
[L14444]              havoc _owner_s395;
[L14445]              havoc _spender_s395;
[L14446]              havoc __ret_0_allowance;
[L14447]              havoc _from_s1551;
[L14448]              havoc _to_s1551;
[L14449]              havoc _value_s1551;
[L14450]              havoc _success_s1551;
[L14451]              havoc _spender_s379;
[L14452]              havoc _value_s379;
[L14453]              havoc __ret_0_approve;
[L14454]              havoc _spender_s437;
[L14455]              havoc _addedValue_s437;
[L14456]              havoc __ret_0_increaseApproval;
[L14457]              havoc _spender_s497;
[L14458]              havoc _subtractedValue_s497;
[L14459]              havoc __ret_0_decreaseApproval;
[L14460]              havoc __ret_0_owner;
[L14461]              havoc _newOwner_s558;
[L14462]              havoc __ret_0_mintingFinished;
[L14463]              havoc _to_s664;
[L14464]              havoc _amount_s664;
[L14465]              havoc __ret_0_mint;
[L14466]              havoc __ret_0_finishMinting;
[L14467]              havoc _owner_s742;
[L14468]              havoc balance_s742;
[L14469]              havoc _owner_s754;
[L14470]              havoc balance_s754;
[L14471]              havoc _addr_s792;
[L14472]              havoc count_s792;
[L14473]              havoc _addr_s849;
[L14474]              havoc _index_s849;
[L14475]              havoc _release_s849;
[L14476]              havoc _balance_s849;
[L14477]              havoc _to_s938;
[L14478]              havoc _amount_s938;
[L14479]              havoc _until_s938;
[L14480]              havoc tokens_s1107;
[L14481]              havoc _value_s1261;
[L14482]              havoc __ret_0_paused;
[L14483]              havoc _to_s1449;
[L14484]              havoc _amount_s1449;
[L14485]              havoc _until_s1449;
[L14486]              havoc __ret_0_mintAndFreeze;
[L14487]              havoc __ret_0_TOKEN_DECIMALS;
[L14488]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14489]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14490]              havoc __ret_0_TOKEN_NAME;
[L14491]              havoc __ret_0_TOKEN_SYMBOL;
[L14492]              havoc __ret_0_PAUSED;
[L14493]              havoc __ret_0_TARGET_USER;
[L14494]              havoc __ret_0_CONTINUE_MINTING;
[L14495]              havoc __ret_0_initialized;
[L14496]              havoc _name_s1511;
[L14497]              havoc _symbol_s1519;
[L14498]              havoc _decimals_s1527;
[L14499]              havoc tmpNow;
[L14500]              havoc gas;
[L14501]              assume gas > 4000000 && gas <= 8000000;
[L14502]              tmpNow := now;
[L14503]              havoc now;
[L14504]              assume now > tmpNow;
[L14505]              assume msgsender_MSG != null;
[L14506]              assume DType[msgsender_MSG] != ERC20Basic;
[L14507]              assume DType[msgsender_MSG] != SafeMath;
[L14508]              assume DType[msgsender_MSG] != BasicToken;
[L14509]              assume DType[msgsender_MSG] != ERC20;
[L14510]              assume DType[msgsender_MSG] != StandardToken;
[L14511]              assume DType[msgsender_MSG] != Ownable;
[L14512]              assume DType[msgsender_MSG] != MintableToken;
[L14513]              assume DType[msgsender_MSG] != FreezableToken;
[L14514]              assume DType[msgsender_MSG] != BurnableToken;
[L14515]              assume DType[msgsender_MSG] != Pausable;
[L14516]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14517]              assume DType[msgsender_MSG] != Consts;
[L14518]              assume DType[msgsender_MSG] != MainToken;
[L14519]              Alloc[msgsender_MSG] := true;
[L14520]  COND FALSE  !(choice == 38)
[L14526]  COND FALSE  !(choice == 37)
[L14532]  COND FALSE  !(choice == 36)
[L14539]  COND FALSE  !(choice == 35)
[L14545]  COND TRUE   choice == 34
[L14546]              gas := gas - 21000;
[L14547]  COND TRUE   gas >= 0
[L14548]              assume _value_s1551 >= 0 && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14549]              assume msgvalue_MSG == 0;
[L14550]  CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != _from_s1551 || p2 != msgsender_MSG) && _from_s1551 == _to_s1551) && _value_s1551 <= balances_BasicToken[this][_from_s1551]) && _value_s1551 <= allowed_StandardToken[this][_from_s1551][msgsender_MSG]) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_MainToken0 := true;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]                  revert := revert_hold;
[L4734]               havoc __exception;
[L4735]               revert := false;
[L4736]   COND TRUE   __exception
[L4737]               __tmp__Balance := Balance;
[L4738]               __tmp__DType := DType;
[L4739]               __tmp__Alloc := Alloc;
[L4740]               __tmp__balance_ADDR := balance_ADDR;
[L4741]               __tmp__M_Ref_int := M_Ref_int;
[L4742]               __tmp__sum_balances0 := sum_balances0;
[L4743]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4744]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4745]               __tmp__sum_allowed1 := sum_allowed1;
[L4746]               __tmp__M_int_int := M_int_int;
[L4747]               __tmp__sum_chains2 := sum_chains2;
[L4748]               __tmp__sum_freezings3 := sum_freezings3;
[L4749]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4750]               __tmp__M_int_Ref := M_int_Ref;
[L4751]               __tmp__sum := sum;
[L4752]               __tmp__Length := Length;
[L4753]               __tmp__now := now;
[L4754]               __tmp__balances_BasicToken := balances_BasicToken;
[L4755]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4756]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4757]               __tmp__owner_Ownable := owner_Ownable;
[L4758]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4759]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4760]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4761]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4762]               __tmp__paused_Pausable := paused_Pausable;
[L4763]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4764]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4765]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4766]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4767]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4768]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4769]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4770]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4771]               __tmp__initialized_MainToken := initialized_MainToken;
[L4772]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9597]   COND FALSE  !(!!__tmp__paused_Pausable[this])
[L9601]   COND TRUE   __tmp__DType[this] == MainToken
[L9602]   CALL        call __var_53 := transferFrom~address~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L7072]               __var_4 := null;
[L7073]   COND TRUE   !(_to_s351 != null)
[L7074]               revert := true;
[L9602]   RET         call __var_53 := transferFrom~address~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9603]   COND TRUE   revert
[L4772]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4773]               assume revert || gas < 0;
[L14550]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L14778]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:41:20,800 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:41:20,800 INFO  L82        PathProgramCache]: Analyzing trace with hash -841376516, now seen corresponding path program 1 times
[2020-11-24 21:41:20,801 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:41:20,832 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:41:21,406 INFO  L134       CoverageAnalysis]: Checked inductivity of 9826 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9826 trivial. 0 not checked.
[2020-11-24 21:41:21,407 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:41:21,407 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 21:41:21,407 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:41:21,408 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 21:41:21,408 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 21:41:21,408 INFO  L87              Difference]: Start difference. First operand 11673 states and 13271 transitions. cyclomatic complexity: 1630 Second operand 7 states.
[2020-11-24 21:41:21,528 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:41:21,528 INFO  L93              Difference]: Finished difference Result 11667 states and 13264 transitions.
[2020-11-24 21:41:21,528 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 21:41:21,528 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11667 states and 13264 transitions.
[2020-11-24 21:41:21,553 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-24 21:41:21,584 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11667 states to 11627 states and 13215 transitions.
[2020-11-24 21:41:21,584 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2650
[2020-11-24 21:41:21,585 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2650
[2020-11-24 21:41:21,585 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11627 states and 13215 transitions.
[2020-11-24 21:41:21,592 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:41:21,592 INFO  L728         BuchiCegarLoop]: Abstraction has 11627 states and 13215 transitions.
[2020-11-24 21:41:21,599 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11627 states and 13215 transitions.
[2020-11-24 21:41:21,661 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11627 to 11627.
[2020-11-24 21:41:21,661 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11627 states.
[2020-11-24 21:41:21,674 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11627 states to 11627 states and 13215 transitions.
[2020-11-24 21:41:21,675 INFO  L751         BuchiCegarLoop]: Abstraction has 11627 states and 13215 transitions.
[2020-11-24 21:41:21,675 INFO  L631         BuchiCegarLoop]: Abstraction has 11627 states and 13215 transitions.
[2020-11-24 21:41:21,675 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-24 21:41:21,675 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11627 states and 13215 transitions.
[2020-11-24 21:41:21,686 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-24 21:41:21,686 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:41:21,686 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:41:21,688 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:41:21,688 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_MainToken0 := false;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L14768]              assume null == 0;
[L14769]  CALL        call this := FreshRefGenerator__success();
[L6698]               havoc newRef;
[L6699]               assume Alloc[newRef] == false;
[L6700]               Alloc[newRef] := true;
[L6701]               assume newRef != null;
[L14769]  RET         call this := FreshRefGenerator__success();
[L14770]              assume now >= 0;
[L14771]              assume DType[this] == MainToken;
[L14772]              assume msgvalue_MSG == 0;
[L14773]              gas := gas - 53000;
[L14774]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4386]               havoc __exception;
[L4387]               revert := false;
[L4388]   COND FALSE  !(__exception)
[L4427]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9285]               assume msgsender_MSG != null;
[L9286]               Balance[this] := 0;
[L9287]               TOKEN_DECIMALS_Consts[this] := 18;
[L9288]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9289]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9290]               TOKEN_NAME_Consts[this] := 1211920069;
[L9291]               TOKEN_SYMBOL_Consts[this] := 49428998;
[L9292]               PAUSED_Consts[this] := false;
[L9293]               __var_52 := ConstantToRef(207782497573736545615953600095632397981971535507);
[L9294]               TARGET_USER_Consts[this] := ConstantToRef(207782497573736545615953600095632397981971535507);
[L9295]               CONTINUE_MINTING_Consts[this] := true;
[L9309]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9310]   COND FALSE  !(revert)
[L9507]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9508]   COND FALSE  !(revert)
[L9511]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L9511]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9512]   COND FALSE  !(revert)
[L9515]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L9515]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9516]   COND FALSE  !(revert)
[L9519]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L9519]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9520]   COND FALSE  !(revert)
[L9523]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L9523]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9524]   COND FALSE  !(revert)
[L9527]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7655]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7656]   COND FALSE  !(revert)
[L7659]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7659]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7660]   COND FALSE  !(revert)
[L7663]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7663]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7664]   COND FALSE  !(revert)
[L7667]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7667]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7668]   COND FALSE  !(revert)
[L7671]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7618]               assume msgsender_MSG != null;
[L7619]               Balance[this] := 0;
[L7620]               chains_FreezableToken[this] := zerointintArr();
[L7621]               sum_chains2[this] := 0;
[L7622]               freezings_FreezableToken[this] := zerointintArr();
[L7623]               sum_freezings3[this] := 0;
[L7624]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7625]               sum_freezingBalance4[this] := 0;
[L7671]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7672]   COND FALSE  !(revert)
[L9527]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9528]   COND FALSE  !(revert)
[L9531]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L9531]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9532]   COND FALSE  !(revert)
[L9535]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7474]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7475]   COND FALSE  !(revert)
[L7478]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7478]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7479]   COND FALSE  !(revert)
[L7482]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7482]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7483]   COND FALSE  !(revert)
[L7486]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7486]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7487]   COND FALSE  !(revert)
[L7490]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L7490]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7491]   COND FALSE  !(revert)
[L7494]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7438]               assume msgsender_MSG != null;
[L7439]               Balance[this] := 0;
[L7440]               mintingFinished_MintableToken[this] := false;
[L7494]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7495]   COND FALSE  !(revert)
[L9535]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9536]   COND FALSE  !(revert)
[L9539]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9094]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L9094]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9095]   COND FALSE  !(revert)
[L9098]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L9098]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9099]   COND FALSE  !(revert)
[L9102]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L9102]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9103]   COND FALSE  !(revert)
[L9106]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L9106]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9107]   COND FALSE  !(revert)
[L9110]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7655]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7656]   COND FALSE  !(revert)
[L7659]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7659]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7660]   COND FALSE  !(revert)
[L7663]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7663]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7664]   COND FALSE  !(revert)
[L7667]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7667]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7668]   COND FALSE  !(revert)
[L7671]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7618]               assume msgsender_MSG != null;
[L7619]               Balance[this] := 0;
[L7620]               chains_FreezableToken[this] := zerointintArr();
[L7621]               sum_chains2[this] := 0;
[L7622]               freezings_FreezableToken[this] := zerointintArr();
[L7623]               sum_freezings3[this] := 0;
[L7624]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7625]               sum_freezingBalance4[this] := 0;
[L7671]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7672]   COND FALSE  !(revert)
[L9110]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9111]   COND FALSE  !(revert)
[L9114]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L9114]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9115]   COND FALSE  !(revert)
[L9118]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7474]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7475]   COND FALSE  !(revert)
[L7478]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7478]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7479]   COND FALSE  !(revert)
[L7482]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7482]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7483]   COND FALSE  !(revert)
[L7486]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7486]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7487]   COND FALSE  !(revert)
[L7490]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L7490]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7491]   COND FALSE  !(revert)
[L7494]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7438]               assume msgsender_MSG != null;
[L7439]               Balance[this] := 0;
[L7440]               mintingFinished_MintableToken[this] := false;
[L7494]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7495]   COND FALSE  !(revert)
[L9118]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9119]   COND FALSE  !(revert)
[L9122]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9051]               assume msgsender_MSG != null;
[L9052]               Balance[this] := 0;
[L9122]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9123]   COND FALSE  !(revert)
[L9539]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9540]   COND FALSE  !(revert)
[L9543]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L8838]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8839]   COND FALSE  !(revert)
[L8842]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L8842]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8843]   COND FALSE  !(revert)
[L8846]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8815]               assume msgsender_MSG != null;
[L8816]               Balance[this] := 0;
[L8846]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8847]   COND FALSE  !(revert)
[L9543]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9544]   COND FALSE  !(revert)
[L9547]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8964]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L8964]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8965]   COND FALSE  !(revert)
[L8968]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8944]               assume msgsender_MSG != null;
[L8945]               Balance[this] := 0;
[L8946]               paused_Pausable[this] := false;
[L8968]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8969]   COND FALSE  !(revert)
[L9547]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9548]   COND FALSE  !(revert)
[L9551]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9435]               assume msgsender_MSG != null;
[L9436]               Balance[this] := 0;
[L9437]               initialized_MainToken[this] := false;
[L9439]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9755]   COND FALSE  !(!!initialized_MainToken[this])
[L9759]               initialized_MainToken[this] := true;
[L9760]   COND FALSE  !(PAUSED_Consts[this])
[L9770]               __var_57 := ConstantToRef(207782497573736545615953600095632397981971535507);
[L9771]               addresses_s1673 := ConstantToRef(207782497573736545615953600095632397981971535507);
[L9772]               __var_58 := 500000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9773]               amounts_s1673 := 500000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9774]               __var_59 := 0 % 18446744073709551616;
[L9775]               freezes_s1673 := 0 % 18446744073709551616;
[L9776]               i_s1673 := 0;
[L9777]   COND FALSE  !(i_s1673 < Length[addresses_s1673])
[L9801]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9811]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9439]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9440]   COND FALSE  !(revert)
[L9443]   COND TRUE   DType[this] == MainToken
[L9444]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7357]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12722]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7357]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   COND TRUE   DType[this] == MainToken
[L7362]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7405]               __var_11 := null;
[L7406]   COND FALSE  !(!(_newOwner_s581 != null))
[L7410]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7411]               owner_Ownable[this] := _newOwner_s581;
[L7362]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7363]   COND FALSE  !(revert)
[L9444]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9445]   COND FALSE  !(revert)
[L9551]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9552]   COND FALSE  !(revert)
[L4427]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]               assume !revert && gas >= 0;
[L14774]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14775]              assume !revert && gas >= 0;
[L14778]  CALL        call CorralChoice_MainToken(this);
[L14435]              havoc msgsender_MSG;
[L14436]              havoc msgvalue_MSG;
[L14437]              havoc choice;
[L14438]              havoc __ret_0_totalSupply;
[L14439]              havoc _owner_s729;
[L14440]              havoc balance_s729;
[L14441]              havoc _to_s1572;
[L14442]              havoc _value_s1572;
[L14443]              havoc _success_s1572;
[L14444]              havoc _owner_s395;
[L14445]              havoc _spender_s395;
[L14446]              havoc __ret_0_allowance;
[L14447]              havoc _from_s1551;
[L14448]              havoc _to_s1551;
[L14449]              havoc _value_s1551;
[L14450]              havoc _success_s1551;
[L14451]              havoc _spender_s379;
[L14452]              havoc _value_s379;
[L14453]              havoc __ret_0_approve;
[L14454]              havoc _spender_s437;
[L14455]              havoc _addedValue_s437;
[L14456]              havoc __ret_0_increaseApproval;
[L14457]              havoc _spender_s497;
[L14458]              havoc _subtractedValue_s497;
[L14459]              havoc __ret_0_decreaseApproval;
[L14460]              havoc __ret_0_owner;
[L14461]              havoc _newOwner_s558;
[L14462]              havoc __ret_0_mintingFinished;
[L14463]              havoc _to_s664;
[L14464]              havoc _amount_s664;
[L14465]              havoc __ret_0_mint;
[L14466]              havoc __ret_0_finishMinting;
[L14467]              havoc _owner_s742;
[L14468]              havoc balance_s742;
[L14469]              havoc _owner_s754;
[L14470]              havoc balance_s754;
[L14471]              havoc _addr_s792;
[L14472]              havoc count_s792;
[L14473]              havoc _addr_s849;
[L14474]              havoc _index_s849;
[L14475]              havoc _release_s849;
[L14476]              havoc _balance_s849;
[L14477]              havoc _to_s938;
[L14478]              havoc _amount_s938;
[L14479]              havoc _until_s938;
[L14480]              havoc tokens_s1107;
[L14481]              havoc _value_s1261;
[L14482]              havoc __ret_0_paused;
[L14483]              havoc _to_s1449;
[L14484]              havoc _amount_s1449;
[L14485]              havoc _until_s1449;
[L14486]              havoc __ret_0_mintAndFreeze;
[L14487]              havoc __ret_0_TOKEN_DECIMALS;
[L14488]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14489]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14490]              havoc __ret_0_TOKEN_NAME;
[L14491]              havoc __ret_0_TOKEN_SYMBOL;
[L14492]              havoc __ret_0_PAUSED;
[L14493]              havoc __ret_0_TARGET_USER;
[L14494]              havoc __ret_0_CONTINUE_MINTING;
[L14495]              havoc __ret_0_initialized;
[L14496]              havoc _name_s1511;
[L14497]              havoc _symbol_s1519;
[L14498]              havoc _decimals_s1527;
[L14499]              havoc tmpNow;
[L14500]              havoc gas;
[L14501]              assume gas > 4000000 && gas <= 8000000;
[L14502]              tmpNow := now;
[L14503]              havoc now;
[L14504]              assume now > tmpNow;
[L14505]              assume msgsender_MSG != null;
[L14506]              assume DType[msgsender_MSG] != ERC20Basic;
[L14507]              assume DType[msgsender_MSG] != SafeMath;
[L14508]              assume DType[msgsender_MSG] != BasicToken;
[L14509]              assume DType[msgsender_MSG] != ERC20;
[L14510]              assume DType[msgsender_MSG] != StandardToken;
[L14511]              assume DType[msgsender_MSG] != Ownable;
[L14512]              assume DType[msgsender_MSG] != MintableToken;
[L14513]              assume DType[msgsender_MSG] != FreezableToken;
[L14514]              assume DType[msgsender_MSG] != BurnableToken;
[L14515]              assume DType[msgsender_MSG] != Pausable;
[L14516]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14517]              assume DType[msgsender_MSG] != Consts;
[L14518]              assume DType[msgsender_MSG] != MainToken;
[L14519]              Alloc[msgsender_MSG] := true;
[L14520]  COND FALSE  !(choice == 38)
[L14526]  COND FALSE  !(choice == 37)
[L14532]  COND FALSE  !(choice == 36)
[L14539]  COND FALSE  !(choice == 35)
[L14545]  COND TRUE   choice == 34
[L14546]              gas := gas - 21000;
[L14547]  COND TRUE   gas >= 0
[L14548]              assume _value_s1551 >= 0 && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14549]              assume msgvalue_MSG == 0;
[L14550]  CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != _from_s1551 || p2 != msgsender_MSG) && _from_s1551 == _to_s1551) && _value_s1551 <= balances_BasicToken[this][_from_s1551]) && _value_s1551 <= allowed_StandardToken[this][_from_s1551][msgsender_MSG]) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_MainToken0 := true;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]                  revert := revert_hold;
[L4734]               havoc __exception;
[L4735]               revert := false;
[L4736]   COND TRUE   __exception
[L4737]               __tmp__Balance := Balance;
[L4738]               __tmp__DType := DType;
[L4739]               __tmp__Alloc := Alloc;
[L4740]               __tmp__balance_ADDR := balance_ADDR;
[L4741]               __tmp__M_Ref_int := M_Ref_int;
[L4742]               __tmp__sum_balances0 := sum_balances0;
[L4743]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4744]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4745]               __tmp__sum_allowed1 := sum_allowed1;
[L4746]               __tmp__M_int_int := M_int_int;
[L4747]               __tmp__sum_chains2 := sum_chains2;
[L4748]               __tmp__sum_freezings3 := sum_freezings3;
[L4749]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4750]               __tmp__M_int_Ref := M_int_Ref;
[L4751]               __tmp__sum := sum;
[L4752]               __tmp__Length := Length;
[L4753]               __tmp__now := now;
[L4754]               __tmp__balances_BasicToken := balances_BasicToken;
[L4755]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4756]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4757]               __tmp__owner_Ownable := owner_Ownable;
[L4758]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4759]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4760]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4761]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4762]               __tmp__paused_Pausable := paused_Pausable;
[L4763]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4764]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4765]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4766]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4767]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4768]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4769]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4770]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4771]               __tmp__initialized_MainToken := initialized_MainToken;
[L4772]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9597]   COND FALSE  !(!!__tmp__paused_Pausable[this])
[L9601]   COND TRUE   __tmp__DType[this] == MainToken
[L9602]   CALL        call __var_53 := transferFrom~address~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L7072]               __var_4 := null;
[L7073]   COND TRUE   !(_to_s351 != null)
[L7074]               revert := true;
[L9602]   RET         call __var_53 := transferFrom~address~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9603]   COND TRUE   revert
[L4772]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4773]               assume revert || gas < 0;
[L14550]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L14778]  RET         call CorralChoice_MainToken(this);

Loop:
[L14778]  CALL        call CorralChoice_MainToken(this);
[L14435]              havoc msgsender_MSG;
[L14436]              havoc msgvalue_MSG;
[L14437]              havoc choice;
[L14438]              havoc __ret_0_totalSupply;
[L14439]              havoc _owner_s729;
[L14440]              havoc balance_s729;
[L14441]              havoc _to_s1572;
[L14442]              havoc _value_s1572;
[L14443]              havoc _success_s1572;
[L14444]              havoc _owner_s395;
[L14445]              havoc _spender_s395;
[L14446]              havoc __ret_0_allowance;
[L14447]              havoc _from_s1551;
[L14448]              havoc _to_s1551;
[L14449]              havoc _value_s1551;
[L14450]              havoc _success_s1551;
[L14451]              havoc _spender_s379;
[L14452]              havoc _value_s379;
[L14453]              havoc __ret_0_approve;
[L14454]              havoc _spender_s437;
[L14455]              havoc _addedValue_s437;
[L14456]              havoc __ret_0_increaseApproval;
[L14457]              havoc _spender_s497;
[L14458]              havoc _subtractedValue_s497;
[L14459]              havoc __ret_0_decreaseApproval;
[L14460]              havoc __ret_0_owner;
[L14461]              havoc _newOwner_s558;
[L14462]              havoc __ret_0_mintingFinished;
[L14463]              havoc _to_s664;
[L14464]              havoc _amount_s664;
[L14465]              havoc __ret_0_mint;
[L14466]              havoc __ret_0_finishMinting;
[L14467]              havoc _owner_s742;
[L14468]              havoc balance_s742;
[L14469]              havoc _owner_s754;
[L14470]              havoc balance_s754;
[L14471]              havoc _addr_s792;
[L14472]              havoc count_s792;
[L14473]              havoc _addr_s849;
[L14474]              havoc _index_s849;
[L14475]              havoc _release_s849;
[L14476]              havoc _balance_s849;
[L14477]              havoc _to_s938;
[L14478]              havoc _amount_s938;
[L14479]              havoc _until_s938;
[L14480]              havoc tokens_s1107;
[L14481]              havoc _value_s1261;
[L14482]              havoc __ret_0_paused;
[L14483]              havoc _to_s1449;
[L14484]              havoc _amount_s1449;
[L14485]              havoc _until_s1449;
[L14486]              havoc __ret_0_mintAndFreeze;
[L14487]              havoc __ret_0_TOKEN_DECIMALS;
[L14488]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14489]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14490]              havoc __ret_0_TOKEN_NAME;
[L14491]              havoc __ret_0_TOKEN_SYMBOL;
[L14492]              havoc __ret_0_PAUSED;
[L14493]              havoc __ret_0_TARGET_USER;
[L14494]              havoc __ret_0_CONTINUE_MINTING;
[L14495]              havoc __ret_0_initialized;
[L14496]              havoc _name_s1511;
[L14497]              havoc _symbol_s1519;
[L14498]              havoc _decimals_s1527;
[L14499]              havoc tmpNow;
[L14500]              havoc gas;
[L14501]              assume gas > 4000000 && gas <= 8000000;
[L14502]              tmpNow := now;
[L14503]              havoc now;
[L14504]              assume now > tmpNow;
[L14505]              assume msgsender_MSG != null;
[L14506]              assume DType[msgsender_MSG] != ERC20Basic;
[L14507]              assume DType[msgsender_MSG] != SafeMath;
[L14508]              assume DType[msgsender_MSG] != BasicToken;
[L14509]              assume DType[msgsender_MSG] != ERC20;
[L14510]              assume DType[msgsender_MSG] != StandardToken;
[L14511]              assume DType[msgsender_MSG] != Ownable;
[L14512]              assume DType[msgsender_MSG] != MintableToken;
[L14513]              assume DType[msgsender_MSG] != FreezableToken;
[L14514]              assume DType[msgsender_MSG] != BurnableToken;
[L14515]              assume DType[msgsender_MSG] != Pausable;
[L14516]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14517]              assume DType[msgsender_MSG] != Consts;
[L14518]              assume DType[msgsender_MSG] != MainToken;
[L14519]              Alloc[msgsender_MSG] := true;
[L14520]  COND FALSE  !(choice == 38)
[L14526]  COND FALSE  !(choice == 37)
[L14532]  COND FALSE  !(choice == 36)
[L14539]  COND FALSE  !(choice == 35)
[L14545]  COND TRUE   choice == 34
[L14546]              gas := gas - 21000;
[L14547]  COND TRUE   gas >= 0
[L14548]              assume _value_s1551 >= 0 && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14549]              assume msgvalue_MSG == 0;
[L14550]  CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != _from_s1551 || p2 != msgsender_MSG) && _from_s1551 == _to_s1551) && _value_s1551 <= balances_BasicToken[this][_from_s1551]) && _value_s1551 <= allowed_StandardToken[this][_from_s1551][msgsender_MSG]) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_MainToken0 := true;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]                  revert := revert_hold;
[L4734]               havoc __exception;
[L4735]               revert := false;
[L4736]   COND TRUE   __exception
[L4737]               __tmp__Balance := Balance;
[L4738]               __tmp__DType := DType;
[L4739]               __tmp__Alloc := Alloc;
[L4740]               __tmp__balance_ADDR := balance_ADDR;
[L4741]               __tmp__M_Ref_int := M_Ref_int;
[L4742]               __tmp__sum_balances0 := sum_balances0;
[L4743]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4744]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4745]               __tmp__sum_allowed1 := sum_allowed1;
[L4746]               __tmp__M_int_int := M_int_int;
[L4747]               __tmp__sum_chains2 := sum_chains2;
[L4748]               __tmp__sum_freezings3 := sum_freezings3;
[L4749]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4750]               __tmp__M_int_Ref := M_int_Ref;
[L4751]               __tmp__sum := sum;
[L4752]               __tmp__Length := Length;
[L4753]               __tmp__now := now;
[L4754]               __tmp__balances_BasicToken := balances_BasicToken;
[L4755]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4756]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4757]               __tmp__owner_Ownable := owner_Ownable;
[L4758]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4759]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4760]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4761]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4762]               __tmp__paused_Pausable := paused_Pausable;
[L4763]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4764]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4765]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4766]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4767]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4768]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4769]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4770]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4771]               __tmp__initialized_MainToken := initialized_MainToken;
[L4772]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9597]   COND FALSE  !(!!__tmp__paused_Pausable[this])
[L9601]   COND TRUE   __tmp__DType[this] == MainToken
[L9602]   CALL        call __var_53 := transferFrom~address~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L7072]               __var_4 := null;
[L7073]   COND TRUE   !(_to_s351 != null)
[L7074]               revert := true;
[L9602]   RET         call __var_53 := transferFrom~address~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9603]   COND TRUE   revert
[L4772]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4773]               assume revert || gas < 0;
[L14550]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L14778]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:41:21,695 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:41:21,695 INFO  L82        PathProgramCache]: Analyzing trace with hash -627617465, now seen corresponding path program 1 times
[2020-11-24 21:41:21,696 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:41:21,735 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 21:41:21,782 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 21:41:22,116 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:41:22,116 INFO  L82        PathProgramCache]: Analyzing trace with hash -1653513932, now seen corresponding path program 1 times
[2020-11-24 21:41:22,117 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:41:22,123 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 21:41:22,129 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 21:41:22,143 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:41:22,143 INFO  L82        PathProgramCache]: Analyzing trace with hash 708699054, now seen corresponding path program 1 times
[2020-11-24 21:41:22,144 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:41:22,187 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 21:41:22,238 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #4: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 397 to 787
[2020-11-24 21:41:22,988 WARN  L188               SmtUtils]: Spent 257.00 ms on a formula simplification. DAG size of input: 208 DAG size of output: 200
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1237 to 2473
Garbage collection #1: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1759 to 3517
Garbage collection #7: 3517 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 3517 to 7027
Garbage collection #8: 7027 nodes / 0 free / 0.002s / 0.004s total
Resizing node table from 7027 to 14051
[2020-11-24 21:41:23,282 WARN  L188               SmtUtils]: Spent 260.00 ms on a formula simplification. DAG size of input: 158 DAG size of output: 152
[2020-11-24 21:41:23,515 WARN  L188               SmtUtils]: Spent 231.00 ms on a formula simplification that was a NOOP. DAG size: 382
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.003s / 0.005s total
Resizing node table from 9181 to 18353
[2020-11-24 21:41:24,511 WARN  L188               SmtUtils]: Spent 964.00 ms on a formula simplification. DAG size of input: 306 DAG size of output: 306
[2020-11-24 21:41:25,925 WARN  L188               SmtUtils]: Spent 1.41 s on a formula simplification. DAG size of input: 385 DAG size of output: 369
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 4273 to 8543
Garbage collection #7: 8543 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 8543 to 17077
Garbage collection #8: 17077 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 17077 to 34147
Garbage collection #1: 83 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2503 to 5003
Garbage collection #7: 5003 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 5003 to 9973
Garbage collection #8: 9973 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 9973 to 19937
[2020-11-24 21:41:26,300 WARN  L188               SmtUtils]: Spent 342.00 ms on a formula simplification. DAG size of input: 225 DAG size of output: 219
[2020-11-24 21:41:26,763 WARN  L188               SmtUtils]: Spent 461.00 ms on a formula simplification that was a NOOP. DAG size: 484
Garbage collection #1: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #2: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #3: 761 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 761 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 6037 to 12073
Garbage collection #7: 12073 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 12073 to 24137
[2020-11-24 21:41:27,882 WARN  L188               SmtUtils]: Spent 1.08 s on a formula simplification. DAG size of input: 391 DAG size of output: 391
[2020-11-24 21:41:28,333 WARN  L188               SmtUtils]: Spent 448.00 ms on a formula simplification that was a NOOP. DAG size: 391
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 9181 to 18353
Garbage collection #8: 18353 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 18353 to 36697
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #7: 6271 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 6271 to 12541
[2020-11-24 21:41:29,258 WARN  L188               SmtUtils]: Spent 898.00 ms on a formula simplification. DAG size of input: 297 DAG size of output: 260
[2020-11-24 21:41:29,268 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
[2020-11-24 21:41:30,700 WARN  L188               SmtUtils]: Spent 199.00 ms on a formula simplification. DAG size of input: 264 DAG size of output: 250
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
[2020-11-24 21:41:37,706 WARN  L188               SmtUtils]: Spent 6.76 s on a formula simplification. DAG size of input: 540 DAG size of output: 512
Garbage collection #1: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #2: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #3: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #4: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #5: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #6: 6661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6661 to 13313
Garbage collection #7: 13313 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 13313 to 26597
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
[2020-11-24 21:41:38,181 WARN  L188               SmtUtils]: Spent 188.00 ms on a formula simplification that was a NOOP. DAG size: 415
Garbage collection #1: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #2: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #3: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #4: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #5: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #6: 4943 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4943 to 9883
Garbage collection #7: 9883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9883 to 19763
[2020-11-24 21:41:38,328 WARN  L188               SmtUtils]: Spent 144.00 ms on a formula simplification that was a NOOP. DAG size: 365
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #4: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #1: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #7: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
Garbage collection #8: 7027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7027 to 14051
[2020-11-24 21:41:38,614 WARN  L188               SmtUtils]: Spent 131.00 ms on a formula simplification. DAG size of input: 157 DAG size of output: 151
[2020-11-24 21:41:38,834 WARN  L188               SmtUtils]: Spent 218.00 ms on a formula simplification that was a NOOP. DAG size: 381
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
[2020-11-24 21:41:39,832 WARN  L188               SmtUtils]: Spent 979.00 ms on a formula simplification. DAG size of input: 305 DAG size of output: 305
[2020-11-24 21:41:41,052 WARN  L188               SmtUtils]: Spent 1.22 s on a formula simplification. DAG size of input: 383 DAG size of output: 368
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4273 to 8543
Garbage collection #7: 8543 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 8543 to 17077
Garbage collection #8: 17077 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 17077 to 34147
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #7: 5003 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5003 to 9973
Garbage collection #8: 9973 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9973 to 19937
[2020-11-24 21:41:41,378 WARN  L188               SmtUtils]: Spent 302.00 ms on a formula simplification. DAG size of input: 225 DAG size of output: 219
[2020-11-24 21:41:41,826 WARN  L188               SmtUtils]: Spent 446.00 ms on a formula simplification that was a NOOP. DAG size: 484
Garbage collection #1: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #2: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #3: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #7: 12073 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12073 to 24137
[2020-11-24 21:41:42,754 WARN  L188               SmtUtils]: Spent 916.00 ms on a formula simplification. DAG size of input: 391 DAG size of output: 391
[2020-11-24 21:41:44,902 WARN  L188               SmtUtils]: Spent 2.15 s on a formula simplification. DAG size of input: 707 DAG size of output: 690
Garbage collection #1: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #2: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #3: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #4: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #5: 4357 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4357 to 8713
Garbage collection #6: 8713 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8713 to 17419
Garbage collection #7: 17419 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17419 to 34819
Garbage collection #8: 34819 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 34819 to 69623
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #7: 6271 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 6271 to 12541
[2020-11-24 21:41:45,443 WARN  L188               SmtUtils]: Spent 512.00 ms on a formula simplification. DAG size of input: 287 DAG size of output: 284
[2020-11-24 21:41:45,873 WARN  L188               SmtUtils]: Spent 388.00 ms on a formula simplification that was a NOOP. DAG size: 461
Garbage collection #1: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #2: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #3: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #4: 1259 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1259 to 2503
Garbage collection #5: 2503 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2503 to 5003
Garbage collection #6: 5003 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 5003 to 9973
Garbage collection #7: 9973 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 9973 to 19937
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #7: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
[2020-11-24 21:41:46,311 WARN  L188               SmtUtils]: Spent 427.00 ms on a formula simplification. DAG size of input: 284 DAG size of output: 284
[2020-11-24 21:41:47,067 WARN  L188               SmtUtils]: Spent 754.00 ms on a formula simplification. DAG size of input: 463 DAG size of output: 462
Garbage collection #1: 167 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 167 to 331
Garbage collection #2: 331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 331 to 661
Garbage collection #3: 661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 661 to 1321
Garbage collection #4: 1321 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1321 to 2633
Garbage collection #5: 2633 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2633 to 5261
Garbage collection #6: 5261 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5261 to 10513
Garbage collection #7: 10513 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 10513 to 21023
Garbage collection #1: 179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 179 to 353
Garbage collection #2: 353 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 353 to 701
Garbage collection #3: 701 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 701 to 1399
Garbage collection #4: 1399 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1399 to 2797
Garbage collection #5: 2797 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2797 to 5591
Garbage collection #6: 5591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5591 to 11177
Garbage collection #7: 11177 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11177 to 22349
Garbage collection #8: 22349 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 22349 to 44687
[2020-11-24 21:41:48,293 WARN  L188               SmtUtils]: Spent 1.21 s on a formula simplification. DAG size of input: 504 DAG size of output: 488
[2020-11-24 21:41:48,329 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 21:41:48,374 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 21:41:48,392 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 09:41:48 BasicIcfg
[2020-11-24 21:41:48,392 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-24 21:41:48,393 INFO  L168              Benchmark]: Toolchain (without parser) took 48013.52 ms. Allocated memory was 1.0 GB in the beginning and 4.7 GB in the end (delta: 3.6 GB). Free memory was 919.1 MB in the beginning and 806.6 MB in the end (delta: 112.5 MB). Peak memory consumption was 3.8 GB. Max. memory is 15.3 GB.
[2020-11-24 21:41:48,393 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 21:41:48,393 INFO  L168              Benchmark]: Boogie Preprocessor took 196.06 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 886.9 MB in the end (delta: 32.2 MB). Peak memory consumption was 32.2 MB. Max. memory is 15.3 GB.
[2020-11-24 21:41:48,394 INFO  L168              Benchmark]: UtopiaSpecLang took 107.73 ms. Allocated memory is still 1.0 GB. Free memory was 886.9 MB in the beginning and 870.8 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-24 21:41:48,394 INFO  L168              Benchmark]: Boogie Printer took 36.35 ms. Allocated memory is still 1.0 GB. Free memory was 870.8 MB in the beginning and 860.0 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-24 21:41:48,394 INFO  L168              Benchmark]: RCFGBuilder took 1698.86 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 195.0 MB). Free memory was 860.0 MB in the beginning and 1.1 GB in the end (delta: -233.6 MB). Peak memory consumption was 255.5 MB. Max. memory is 15.3 GB.
[2020-11-24 21:41:48,394 INFO  L168              Benchmark]: UtopiaLTL2Aut took 31.15 ms. Allocated memory is still 1.2 GB. Free memory was 1.1 GB in the beginning and 1.1 GB in the end (delta: 8.3 MB). Peak memory consumption was 8.3 MB. Max. memory is 15.3 GB.
[2020-11-24 21:41:48,395 INFO  L168              Benchmark]: BÃ¼chi Program Product took 4159.39 ms. Allocated memory was 1.2 GB in the beginning and 1.6 GB in the end (delta: 341.3 MB). Free memory was 1.1 GB in the beginning and 813.1 MB in the end (delta: 272.3 MB). Peak memory consumption was 806.4 MB. Max. memory is 15.3 GB.
[2020-11-24 21:41:48,395 INFO  L168              Benchmark]: BlockEncodingV2 took 312.27 ms. Allocated memory is still 1.6 GB. Free memory was 813.1 MB in the beginning and 620.4 MB in the end (delta: 192.6 MB). Peak memory consumption was 192.6 MB. Max. memory is 15.3 GB.
[2020-11-24 21:41:48,395 INFO  L168              Benchmark]: BuchiAutomizer took 41468.69 ms. Allocated memory was 1.6 GB in the beginning and 4.7 GB in the end (delta: 3.1 GB). Free memory was 620.4 MB in the beginning and 806.6 MB in the end (delta: -186.2 MB). Peak memory consumption was 3.0 GB. Max. memory is 15.3 GB.
[2020-11-24 21:41:48,398 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    13452 locations, 24723 edges
  - StatisticsResult: Encoded RCFG
    13242 locations, 24137 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 196.06 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 886.9 MB in the end (delta: 32.2 MB). Peak memory consumption was 32.2 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 107.73 ms. Allocated memory is still 1.0 GB. Free memory was 886.9 MB in the beginning and 870.8 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 36.35 ms. Allocated memory is still 1.0 GB. Free memory was 870.8 MB in the beginning and 860.0 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1698.86 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 195.0 MB). Free memory was 860.0 MB in the beginning and 1.1 GB in the end (delta: -233.6 MB). Peak memory consumption was 255.5 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 31.15 ms. Allocated memory is still 1.2 GB. Free memory was 1.1 GB in the beginning and 1.1 GB in the end (delta: 8.3 MB). Peak memory consumption was 8.3 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 4159.39 ms. Allocated memory was 1.2 GB in the beginning and 1.6 GB in the end (delta: 341.3 MB). Free memory was 1.1 GB in the beginning and 813.1 MB in the end (delta: 272.3 MB). Peak memory consumption was 806.4 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 312.27 ms. Allocated memory is still 1.6 GB. Free memory was 813.1 MB in the beginning and 620.4 MB in the end (delta: 192.6 MB). Peak memory consumption was 192.6 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 41468.69 ms. Allocated memory was 1.6 GB in the beginning and 4.7 GB in the end (delta: 3.1 GB). Free memory was 620.4 MB in the beginning and 806.6 MB in the end (delta: -186.2 MB). Peak memory consumption was 3.0 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    5386 locations, 7562 edges
  - StatisticsResult: BuchiProgram size
    13452 locations, 24723 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 6 terminating modules (6 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.6 modules have a trivial ranking function, the largest among these consists of 12 locations. The remainder module has 11627 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 41.3s and 7 iterations.  TraceHistogramMax:38. Analysis of lassos took 29.6s. Construction of modules took 7.4s. BÃ¼chi inclusion checks took 2.8s. Highest rank in rank-based complementation 0. Minimization of det autom 6. Minimization of nondet autom 0. Automata minimization 0.6s AutomataMinimizationTime, 6 MinimizatonAttempts, 4107 StatesRemovedByMinimization, 4 NontrivialMinimizations. Non-live state removal took 0.3s Buchi closure took 0.0s. Biggest automaton had 11673 states and ocurred in iteration 5.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 58915 SDtfs, 37528 SDslu, 121476 SDs, 0 SdLazy, 100128 SolverSat, 8201 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 7.4s Time	LassoAnalysisResults: nont1 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU6 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(207782497573736545615953600095632397981971535527) = (new MainToken)({from : 207782497573736545615953600095632397981971535519});
[L4386]               havoc __exception;
[L4387]               revert := false;
[L4388]   COND FALSE  !(__exception)
[L4427]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9285]               assume msgsender_MSG != null;
[L9286]               Balance[this] := 0;
[L9287]               TOKEN_DECIMALS_Consts[this] := 18;
[L9288]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9289]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9290]               TOKEN_NAME_Consts[this] := 1211920069;
[L9291]               TOKEN_SYMBOL_Consts[this] := 49428998;
[L9292]               PAUSED_Consts[this] := false;
[L9293]               __var_52 := ConstantToRef(207782497573736545615953600095632397981971535507);
[L9294]               TARGET_USER_Consts[this] := ConstantToRef(207782497573736545615953600095632397981971535507);
[L9295]               CONTINUE_MINTING_Consts[this] := true;
[L9309]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9310]   COND FALSE  !(revert)
[L9507]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9508]   COND FALSE  !(revert)
[L9511]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L9511]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9512]   COND FALSE  !(revert)
[L9515]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L9515]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9516]   COND FALSE  !(revert)
[L9519]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L9519]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9520]   COND FALSE  !(revert)
[L9523]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L9523]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9524]   COND FALSE  !(revert)
[L9527]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7655]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7656]   COND FALSE  !(revert)
[L7659]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7659]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7660]   COND FALSE  !(revert)
[L7663]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7663]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7664]   COND FALSE  !(revert)
[L7667]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7667]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7668]   COND FALSE  !(revert)
[L7671]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7618]               assume msgsender_MSG != null;
[L7619]               Balance[this] := 0;
[L7620]               chains_FreezableToken[this] := zerointintArr();
[L7621]               sum_chains2[this] := 0;
[L7622]               freezings_FreezableToken[this] := zerointintArr();
[L7623]               sum_freezings3[this] := 0;
[L7624]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7625]               sum_freezingBalance4[this] := 0;
[L7671]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7672]   COND FALSE  !(revert)
[L9527]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9528]   COND FALSE  !(revert)
[L9531]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L9531]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9532]   COND FALSE  !(revert)
[L9535]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7474]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7475]   COND FALSE  !(revert)
[L7478]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7478]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7479]   COND FALSE  !(revert)
[L7482]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7482]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7483]   COND FALSE  !(revert)
[L7486]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7486]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7487]   COND FALSE  !(revert)
[L7490]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L7490]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7491]   COND FALSE  !(revert)
[L7494]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7438]               assume msgsender_MSG != null;
[L7439]               Balance[this] := 0;
[L7440]               mintingFinished_MintableToken[this] := false;
[L7494]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7495]   COND FALSE  !(revert)
[L9535]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9536]   COND FALSE  !(revert)
[L9539]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9094]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L9094]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9095]   COND FALSE  !(revert)
[L9098]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L9098]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9099]   COND FALSE  !(revert)
[L9102]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L9102]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9103]   COND FALSE  !(revert)
[L9106]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L9106]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9107]   COND FALSE  !(revert)
[L9110]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7655]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7656]   COND FALSE  !(revert)
[L7659]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7659]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7660]   COND FALSE  !(revert)
[L7663]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7663]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7664]   COND FALSE  !(revert)
[L7667]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7667]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7668]   COND FALSE  !(revert)
[L7671]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7618]               assume msgsender_MSG != null;
[L7619]               Balance[this] := 0;
[L7620]               chains_FreezableToken[this] := zerointintArr();
[L7621]               sum_chains2[this] := 0;
[L7622]               freezings_FreezableToken[this] := zerointintArr();
[L7623]               sum_freezings3[this] := 0;
[L7624]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7625]               sum_freezingBalance4[this] := 0;
[L7671]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7672]   COND FALSE  !(revert)
[L9110]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9111]   COND FALSE  !(revert)
[L9114]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L9114]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9115]   COND FALSE  !(revert)
[L9118]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7474]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7475]   COND FALSE  !(revert)
[L7478]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7478]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7479]   COND FALSE  !(revert)
[L7482]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7482]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7483]   COND FALSE  !(revert)
[L7486]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7486]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7487]   COND FALSE  !(revert)
[L7490]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L7490]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7491]   COND FALSE  !(revert)
[L7494]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7438]               assume msgsender_MSG != null;
[L7439]               Balance[this] := 0;
[L7440]               mintingFinished_MintableToken[this] := false;
[L7494]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7495]   COND FALSE  !(revert)
[L9118]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9119]   COND FALSE  !(revert)
[L9122]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9051]               assume msgsender_MSG != null;
[L9052]               Balance[this] := 0;
[L9122]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9123]   COND FALSE  !(revert)
[L9539]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9540]   COND FALSE  !(revert)
[L9543]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L8838]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8839]   COND FALSE  !(revert)
[L8842]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L8842]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8843]   COND FALSE  !(revert)
[L8846]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8815]               assume msgsender_MSG != null;
[L8816]               Balance[this] := 0;
[L8846]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8847]   COND FALSE  !(revert)
[L9543]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9544]   COND FALSE  !(revert)
[L9547]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8964]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L8964]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8965]   COND FALSE  !(revert)
[L8968]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8944]               assume msgsender_MSG != null;
[L8945]               Balance[this] := 0;
[L8946]               paused_Pausable[this] := false;
[L8968]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8969]   COND FALSE  !(revert)
[L9547]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9548]   COND FALSE  !(revert)
[L9551]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9435]               assume msgsender_MSG != null;
[L9436]               Balance[this] := 0;
[L9437]               initialized_MainToken[this] := false;
[L9439]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9755]   COND FALSE  !(!!initialized_MainToken[this])
[L9759]               initialized_MainToken[this] := true;
[L9760]   COND FALSE  !(PAUSED_Consts[this])
[L9770]               __var_57 := ConstantToRef(207782497573736545615953600095632397981971535507);
[L9771]               addresses_s1673 := ConstantToRef(207782497573736545615953600095632397981971535507);
[L9772]               __var_58 := 500000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9773]               amounts_s1673 := 500000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9774]               __var_59 := 0 % 18446744073709551616;
[L9775]               freezes_s1673 := 0 % 18446744073709551616;
[L9776]               i_s1673 := 0;
[L9777]   COND FALSE  !(i_s1673 < Length[addresses_s1673])
[L9801]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9811]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9439]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9440]   COND FALSE  !(revert)
[L9443]   COND TRUE   DType[this] == MainToken
[L9444]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7357]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12722]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7357]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   COND TRUE   DType[this] == MainToken
[L7362]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7405]               __var_11 := null;
[L7406]   COND FALSE  !(!(_newOwner_s581 != null))
[L7410]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7411]               owner_Ownable[this] := _newOwner_s581;
[L7362]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7363]   COND FALSE  !(revert)
[L9444]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9445]   COND FALSE  !(revert)
[L9551]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9552]   COND FALSE  !(revert)
[L4427]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]               assume !revert && gas >= 0;
[L14774]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
MainToken(207782497573736545615953600095632397981971535527).transferFrom~address~address~uint256.gas(3979002)({from : 207782497573736545615953600095632397981971535529, _from : 0, _to : 0, _value : 0});
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != _from_s1551 || p2 != msgsender_MSG) && _from_s1551 == _to_s1551) && _value_s1551 <= balances_BasicToken[this][_from_s1551]) && _value_s1551 <= allowed_StandardToken[this][_from_s1551][msgsender_MSG]) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_MainToken0 := true;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]                  revert := revert_hold;
[L4734]               havoc __exception;
[L4735]               revert := false;
[L4736]   COND TRUE   __exception
[L4737]               __tmp__Balance := Balance;
[L4738]               __tmp__DType := DType;
[L4739]               __tmp__Alloc := Alloc;
[L4740]               __tmp__balance_ADDR := balance_ADDR;
[L4741]               __tmp__M_Ref_int := M_Ref_int;
[L4742]               __tmp__sum_balances0 := sum_balances0;
[L4743]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4744]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4745]               __tmp__sum_allowed1 := sum_allowed1;
[L4746]               __tmp__M_int_int := M_int_int;
[L4747]               __tmp__sum_chains2 := sum_chains2;
[L4748]               __tmp__sum_freezings3 := sum_freezings3;
[L4749]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4750]               __tmp__M_int_Ref := M_int_Ref;
[L4751]               __tmp__sum := sum;
[L4752]               __tmp__Length := Length;
[L4753]               __tmp__now := now;
[L4754]               __tmp__balances_BasicToken := balances_BasicToken;
[L4755]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4756]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4757]               __tmp__owner_Ownable := owner_Ownable;
[L4758]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4759]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4760]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4761]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4762]               __tmp__paused_Pausable := paused_Pausable;
[L4763]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4764]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4765]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4766]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4767]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4768]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4769]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4770]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4771]               __tmp__initialized_MainToken := initialized_MainToken;
[L4772]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9597]   COND FALSE  !(!!__tmp__paused_Pausable[this])
[L9601]   COND TRUE   __tmp__DType[this] == MainToken
[L9602]   CALL        call __var_53 := transferFrom~address~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L7072]               __var_4 := null;
[L7073]   COND TRUE   !(_to_s351 != null)
[L7074]               revert := true;
[L9602]   RET         call __var_53 := transferFrom~address~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9603]   COND TRUE   revert
[L4772]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4773]               assume revert || gas < 0;
[L14550]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);

Loop:
MainToken(207782497573736545615953600095632397981971535527).transferFrom~address~address~uint256.gas(3979001)({from : 207782497573736545615953600095632397981971535517, _from : 0, _to : 0, _value : 0});
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != _from_s1551 || p2 != msgsender_MSG) && _from_s1551 == _to_s1551) && _value_s1551 <= balances_BasicToken[this][_from_s1551]) && _value_s1551 <= allowed_StandardToken[this][_from_s1551][msgsender_MSG]) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_MainToken0 := true;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]                  revert := revert_hold;
[L4734]               havoc __exception;
[L4735]               revert := false;
[L4736]   COND TRUE   __exception
[L4737]               __tmp__Balance := Balance;
[L4738]               __tmp__DType := DType;
[L4739]               __tmp__Alloc := Alloc;
[L4740]               __tmp__balance_ADDR := balance_ADDR;
[L4741]               __tmp__M_Ref_int := M_Ref_int;
[L4742]               __tmp__sum_balances0 := sum_balances0;
[L4743]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4744]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4745]               __tmp__sum_allowed1 := sum_allowed1;
[L4746]               __tmp__M_int_int := M_int_int;
[L4747]               __tmp__sum_chains2 := sum_chains2;
[L4748]               __tmp__sum_freezings3 := sum_freezings3;
[L4749]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4750]               __tmp__M_int_Ref := M_int_Ref;
[L4751]               __tmp__sum := sum;
[L4752]               __tmp__Length := Length;
[L4753]               __tmp__now := now;
[L4754]               __tmp__balances_BasicToken := balances_BasicToken;
[L4755]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4756]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4757]               __tmp__owner_Ownable := owner_Ownable;
[L4758]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4759]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4760]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4761]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4762]               __tmp__paused_Pausable := paused_Pausable;
[L4763]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4764]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4765]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4766]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4767]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4768]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4769]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4770]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4771]               __tmp__initialized_MainToken := initialized_MainToken;
[L4772]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9597]   COND FALSE  !(!!__tmp__paused_Pausable[this])
[L9601]   COND TRUE   __tmp__DType[this] == MainToken
[L9602]   CALL        call __var_53 := transferFrom~address~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L7072]               __var_4 := null;
[L7073]   COND TRUE   !(_to_s351 != null)
[L7074]               revert := true;
[L9602]   RET         call __var_53 := transferFrom~address~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9603]   COND TRUE   revert
[L4772]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4773]               assume revert || gas < 0;
[L14550]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
