This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 16:08:38,910 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 16:08:38,912 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 16:08:38,923 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 16:08:38,924 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 16:08:38,924 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 16:08:38,925 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 16:08:38,927 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 16:08:38,928 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 16:08:38,929 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 16:08:38,930 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 16:08:38,930 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 16:08:38,931 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 16:08:38,932 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 16:08:38,933 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 16:08:38,933 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 16:08:38,934 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 16:08:38,935 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 16:08:38,937 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 16:08:38,938 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 16:08:38,939 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 16:08:38,939 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 16:08:38,941 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 16:08:38,941 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 16:08:38,942 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 16:08:38,942 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 16:08:38,943 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 16:08:38,943 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 16:08:38,943 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 16:08:38,944 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 16:08:38,944 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 16:08:38,945 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 16:08:38,945 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 16:08:38,946 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 16:08:38,946 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 16:08:38,947 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 16:08:38,947 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 16:08:38,947 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 16:08:38,947 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 16:08:38,948 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 16:08:38,949 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 16:08:38,949 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 16:08:38,957 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 16:08:38,957 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 16:08:38,958 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 16:08:38,958 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 16:08:38,958 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 16:08:38,959 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 16:08:38,959 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 16:08:38,959 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 16:08:38,959 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 16:08:38,959 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 16:08:38,959 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 16:08:38,959 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 16:08:38,959 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 16:08:38,959 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 16:08:38,960 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 16:08:38,960 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 16:08:38,960 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 16:08:38,960 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 16:08:38,960 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 16:08:38,960 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 16:08:38,960 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 16:08:38,960 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 16:08:38,960 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 16:08:38,960 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 16:08:38,961 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 16:08:38,961 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 16:08:38,983 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 16:08:38,995 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 16:08:38,998 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 16:08:39,000 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 16:08:39,001 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 16:08:39,002 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transfer-fail.bpl
[2020-11-25 16:08:39,002 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transfer-fail.bpl'
[2020-11-25 16:08:39,105 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 16:08:39,106 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 16:08:39,106 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 16:08:39,107 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 16:08:39,107 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 16:08:39,124 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:08:39" (1/1) ...
[2020-11-25 16:08:39,126 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:08:39" (1/1) ...
[2020-11-25 16:08:39,167 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:08:39" (1/1) ...
[2020-11-25 16:08:39,168 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:08:39" (1/1) ...
[2020-11-25 16:08:39,193 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:08:39" (1/1) ...
[2020-11-25 16:08:39,205 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:08:39" (1/1) ...
[2020-11-25 16:08:39,215 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:08:39" (1/1) ...
[2020-11-25 16:08:39,228 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 16:08:39,229 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 16:08:39,229 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 16:08:39,231 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 16:08:39,235 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:08:39" (1/1) ...
[2020-11-25 16:08:39,253 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(EXEToken.transfer(to, value), msg.sender != to && (value > _balances_ERC20[this][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(EXEToken.transfer)))
[2020-11-25 16:08:39,259 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(EXEToken.transfer(to, value), msg.sender != to && (value > _balances_ERC20[this][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(EXEToken.transfer)))
[2020-11-25 16:08:39,265 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(EXEToken.transfer(to, value), msg.sender != to && (value > _balances_ERC20[this][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(EXEToken.transfer)))
[2020-11-25 16:08:39,274 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender!=recipient_s1083 && ( amount_s1083>_balances_ERC20[this][msg.sender] || ( _balances_ERC20[this][recipient_s1083] + amount_s1083 )>=115792089237316195423570985008687907853269984665640564039457584007913129639936 ) ) && amount_s1083>=0 ) && amount_s1083<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][recipient_s1083]>=0 ) && _balances_ERC20[this][recipient_s1083]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][msg.sender]>=0 ) && _balances_ERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_EXEToken>],IdentifierExpression[recipient_s1083,<IMPLEMENTATION_INPARAM,transfer~address~uint256_EXEToken>]],BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[amount_s1083,<IMPLEMENTATION_INPARAM,transfer~address~uint256_EXEToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_EXEToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_EXEToken>]]]],BinaryExpression[COMPGEQ,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_EXEToken>]]],[IdentifierExpression[recipient_s1083,<IMPLEMENTATION_INPARAM,transfer~address~uint256_EXEToken>]]],IdentifierExpression[amount_s1083,<IMPLEMENTATION_INPARAM,transfer~address~uint256_EXEToken>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]],BinaryExpression[COMPGEQ,IdentifierExpression[amount_s1083,<IMPLEMENTATION_INPARAM,transfer~address~uint256_EXEToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[amount_s1083,<IMPLEMENTATION_INPARAM,transfer~address~uint256_EXEToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_EXEToken>]]],[IdentifierExpression[recipient_s1083,<IMPLEMENTATION_INPARAM,transfer~address~uint256_EXEToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_EXEToken>]]],[IdentifierExpression[recipient_s1083,<IMPLEMENTATION_INPARAM,transfer~address~uint256_EXEToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_EXEToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_EXEToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_EXEToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_EXEToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 16:08:39,279 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(EXEToken.transfer(to, value), msg.sender != to && (value > _balances_ERC20[this][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(EXEToken.transfer)))
[2020-11-25 16:08:39,279 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_EXEToken0) ==> ( <>AP(fail_transfer_EXEToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 16:08:39,290 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:08:39 PropertyContainer
[2020-11-25 16:08:39,291 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 16:08:39,291 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 16:08:39,291 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 16:08:39,291 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 16:08:39,292 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:08:39" (1/2) ...
[2020-11-25 16:08:39,292 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 16:08:39,292 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 16:08:39,312 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:08:39" (2/2) ...
[2020-11-25 16:08:39,312 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 16:08:39,313 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 16:08:39,313 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 16:08:39,313 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 16:08:39,314 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:08:39" (1/2) ...
[2020-11-25 16:08:39,367 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 16:08:39,367 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 16:08:39,367 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 16:08:39,367 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 16:08:39,367 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 16:08:39,368 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 16:08:39,368 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 16:08:39,368 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 16:08:39,368 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 16:08:39,368 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 16:08:39,368 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-25 16:08:39,368 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-25 16:08:39,368 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-25 16:08:39,368 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-25 16:08:39,368 INFO  L130     BoogieDeclarations]: Found specification of procedure _isOwner_Ownable__success
[2020-11-25 16:08:39,368 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-25 16:08:39,369 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-25 16:08:39,369 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__success
[2020-11-25 16:08:39,369 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 16:08:39,369 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 16:08:39,369 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 16:08:39,369 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 16:08:39,369 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 16:08:39,369 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 16:08:39,369 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 16:08:39,369 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 16:08:39,369 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 16:08:39,370 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 16:08:39,370 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 16:08:39,370 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 16:08:39,370 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 16:08:39,370 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 16:08:39,370 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 16:08:39,370 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 16:08:39,370 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 16:08:39,370 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 16:08:39,370 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 16:08:39,370 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 16:08:39,370 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 16:08:39,370 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 16:08:39,371 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 16:08:39,371 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 16:08:39,371 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 16:08:39,371 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 16:08:39,371 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 16:08:39,371 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 16:08:39,371 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 16:08:39,371 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 16:08:39,371 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 16:08:39,371 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 16:08:39,371 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 16:08:39,371 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 16:08:39,371 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 16:08:39,371 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 16:08:39,372 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 16:08:39,372 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 16:08:39,372 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 16:08:39,372 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 16:08:39,372 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-25 16:08:39,372 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable
[2020-11-25 16:08:39,372 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable
[2020-11-25 16:08:39,372 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable
[2020-11-25 16:08:39,372 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable
[2020-11-25 16:08:39,373 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-25 16:08:39,373 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-25 16:08:39,373 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20Burnable__success
[2020-11-25 16:08:39,373 INFO  L130     BoogieDeclarations]: Found specification of procedure Stoppable_Stoppable_NoBaseCtor__success
[2020-11-25 16:08:39,373 INFO  L130     BoogieDeclarations]: Found specification of procedure Stoppable_Stoppable
[2020-11-25 16:08:39,373 INFO  L138     BoogieDeclarations]: Found implementation of procedure Stoppable_Stoppable
[2020-11-25 16:08:39,373 INFO  L130     BoogieDeclarations]: Found specification of procedure stop_Stoppable
[2020-11-25 16:08:39,373 INFO  L138     BoogieDeclarations]: Found implementation of procedure stop_Stoppable
[2020-11-25 16:08:39,373 INFO  L130     BoogieDeclarations]: Found specification of procedure start_Stoppable
[2020-11-25 16:08:39,373 INFO  L138     BoogieDeclarations]: Found implementation of procedure start_Stoppable
[2020-11-25 16:08:39,374 INFO  L130     BoogieDeclarations]: Found specification of procedure stopped_Stoppable
[2020-11-25 16:08:39,374 INFO  L138     BoogieDeclarations]: Found implementation of procedure stopped_Stoppable
[2020-11-25 16:08:39,374 INFO  L130     BoogieDeclarations]: Found specification of procedure EXEToken_EXEToken_NoBaseCtor__success
[2020-11-25 16:08:39,374 INFO  L130     BoogieDeclarations]: Found specification of procedure EXEToken_EXEToken
[2020-11-25 16:08:39,374 INFO  L138     BoogieDeclarations]: Found implementation of procedure EXEToken_EXEToken
[2020-11-25 16:08:39,374 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_EXEToken__success
[2020-11-25 16:08:39,374 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_EXEToken
[2020-11-25 16:08:39,374 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_EXEToken
[2020-11-25 16:08:39,374 INFO  L130     BoogieDeclarations]: Found specification of procedure setLock~address~uint256~uint256_EXEToken
[2020-11-25 16:08:39,374 INFO  L138     BoogieDeclarations]: Found implementation of procedure setLock~address~uint256~uint256_EXEToken
[2020-11-25 16:08:39,374 INFO  L130     BoogieDeclarations]: Found specification of procedure getLock~address_EXEToken
[2020-11-25 16:08:39,375 INFO  L138     BoogieDeclarations]: Found implementation of procedure getLock~address_EXEToken
[2020-11-25 16:08:39,375 INFO  L130     BoogieDeclarations]: Found specification of procedure _isLocked~address~uint256_EXEToken__success
[2020-11-25 16:08:39,375 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_EXEToken
[2020-11-25 16:08:39,375 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_EXEToken
[2020-11-25 16:08:39,375 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_EXEToken
[2020-11-25 16:08:39,375 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_EXEToken
[2020-11-25 16:08:39,375 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 16:08:39,375 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 16:08:39,375 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 16:08:39,375 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 16:08:39,376 INFO  L130     BoogieDeclarations]: Found specification of procedure enabled_pre__success
[2020-11-25 16:08:39,376 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 16:08:39,376 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 16:08:39,376 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-25 16:08:39,376 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-25 16:08:39,376 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 16:08:39,376 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 16:08:39,376 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 16:08:39,376 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 16:08:39,376 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 16:08:39,376 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 16:08:39,377 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Burnable
[2020-11-25 16:08:39,377 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Burnable
[2020-11-25 16:08:39,377 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Stoppable
[2020-11-25 16:08:39,377 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Stoppable
[2020-11-25 16:08:39,377 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_EXEToken
[2020-11-25 16:08:39,377 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 16:08:39,377 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 16:08:39,377 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 16:08:39,377 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 16:08:39,377 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 16:08:39,378 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 16:08:39,378 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 16:08:39,378 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 16:08:39,378 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 16:08:39,378 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 16:08:39,378 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 16:08:39,378 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-25 16:08:39,378 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-25 16:08:39,378 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-25 16:08:39,378 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-25 16:08:39,379 INFO  L130     BoogieDeclarations]: Found specification of procedure _isOwner_Ownable__fail
[2020-11-25 16:08:39,379 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-25 16:08:39,379 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-25 16:08:39,379 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 16:08:39,379 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 16:08:39,379 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 16:08:39,379 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 16:08:39,379 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 16:08:39,379 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 16:08:39,380 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 16:08:39,380 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 16:08:39,380 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 16:08:39,380 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 16:08:39,380 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 16:08:39,380 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 16:08:39,380 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 16:08:39,380 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 16:08:39,380 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 16:08:39,380 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 16:08:39,381 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 16:08:39,381 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 16:08:39,381 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 16:08:39,381 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 16:08:39,381 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 16:08:39,381 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 16:08:39,381 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 16:08:39,381 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 16:08:39,381 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 16:08:39,382 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 16:08:39,382 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 16:08:39,382 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 16:08:39,382 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 16:08:39,382 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 16:08:39,382 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 16:08:39,382 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 16:08:39,382 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 16:08:39,382 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 16:08:39,382 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 16:08:39,383 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-25 16:08:39,383 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-25 16:08:39,383 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-25 16:08:39,383 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__success
[2020-11-25 16:08:39,383 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__fail
[2020-11-25 16:08:39,383 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-25 16:08:39,383 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-25 16:08:39,383 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20Burnable__fail
[2020-11-25 16:08:39,383 INFO  L130     BoogieDeclarations]: Found specification of procedure Stoppable_Stoppable_NoBaseCtor__fail
[2020-11-25 16:08:39,383 INFO  L130     BoogieDeclarations]: Found specification of procedure Stoppable_Stoppable__success
[2020-11-25 16:08:39,383 INFO  L130     BoogieDeclarations]: Found specification of procedure Stoppable_Stoppable__fail
[2020-11-25 16:08:39,384 INFO  L130     BoogieDeclarations]: Found specification of procedure stop_Stoppable__success
[2020-11-25 16:08:39,384 INFO  L130     BoogieDeclarations]: Found specification of procedure stop_Stoppable__fail
[2020-11-25 16:08:39,384 INFO  L130     BoogieDeclarations]: Found specification of procedure start_Stoppable__success
[2020-11-25 16:08:39,384 INFO  L130     BoogieDeclarations]: Found specification of procedure start_Stoppable__fail
[2020-11-25 16:08:39,384 INFO  L130     BoogieDeclarations]: Found specification of procedure stopped_Stoppable__success
[2020-11-25 16:08:39,384 INFO  L130     BoogieDeclarations]: Found specification of procedure stopped_Stoppable__fail
[2020-11-25 16:08:39,384 INFO  L130     BoogieDeclarations]: Found specification of procedure EXEToken_EXEToken_NoBaseCtor__fail
[2020-11-25 16:08:39,384 INFO  L130     BoogieDeclarations]: Found specification of procedure EXEToken_EXEToken__success
[2020-11-25 16:08:39,384 INFO  L130     BoogieDeclarations]: Found specification of procedure EXEToken_EXEToken__fail
[2020-11-25 16:08:39,384 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_EXEToken__fail
[2020-11-25 16:08:39,384 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_EXEToken__success
[2020-11-25 16:08:39,384 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_EXEToken__fail
[2020-11-25 16:08:39,385 INFO  L130     BoogieDeclarations]: Found specification of procedure setLock~address~uint256~uint256_EXEToken__success
[2020-11-25 16:08:39,385 INFO  L130     BoogieDeclarations]: Found specification of procedure setLock~address~uint256~uint256_EXEToken__fail
[2020-11-25 16:08:39,385 INFO  L130     BoogieDeclarations]: Found specification of procedure getLock~address_EXEToken__success
[2020-11-25 16:08:39,385 INFO  L130     BoogieDeclarations]: Found specification of procedure getLock~address_EXEToken__fail
[2020-11-25 16:08:39,385 INFO  L130     BoogieDeclarations]: Found specification of procedure _isLocked~address~uint256_EXEToken__fail
[2020-11-25 16:08:39,385 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_EXEToken__success
[2020-11-25 16:08:39,385 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_EXEToken__fail
[2020-11-25 16:08:39,385 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_EXEToken__success
[2020-11-25 16:08:39,385 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_EXEToken__fail
[2020-11-25 16:08:39,385 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 16:08:39,385 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 16:08:39,386 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 16:08:39,386 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 16:08:39,386 INFO  L130     BoogieDeclarations]: Found specification of procedure enabled_pre__fail
[2020-11-25 16:08:39,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 16:08:39,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 16:08:39,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 16:08:39,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 16:08:39,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 16:08:39,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 16:08:39,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 16:08:39,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 16:08:39,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 16:08:39,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 16:08:39,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 16:08:39,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 16:08:39,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 16:08:39,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 16:08:39,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 16:08:39,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 16:08:39,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 16:08:39,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 16:08:39,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-25 16:08:39,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-25 16:08:39,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-25 16:08:39,388 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-25 16:08:39,388 INFO  L138     BoogieDeclarations]: Found implementation of procedure _isOwner_Ownable__fail
[2020-11-25 16:08:39,388 INFO  L138     BoogieDeclarations]: Found implementation of procedure _isOwner_Ownable__success
[2020-11-25 16:08:39,388 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-25 16:08:39,388 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-25 16:08:39,388 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 16:08:39,388 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__success
[2020-11-25 16:08:39,388 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 16:08:39,388 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 16:08:39,388 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 16:08:39,388 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 16:08:39,388 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 16:08:39,389 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 16:08:39,389 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 16:08:39,389 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 16:08:39,389 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 16:08:39,389 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 16:08:39,389 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 16:08:39,389 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 16:08:39,389 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 16:08:39,389 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 16:08:39,389 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 16:08:39,389 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 16:08:39,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 16:08:39,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 16:08:39,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 16:08:39,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 16:08:39,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 16:08:39,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 16:08:39,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 16:08:39,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 16:08:39,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 16:08:39,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 16:08:39,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 16:08:39,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 16:08:39,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 16:08:39,391 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 16:08:39,391 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 16:08:39,391 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 16:08:39,391 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 16:08:39,391 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 16:08:39,391 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 16:08:39,391 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 16:08:39,391 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 16:08:39,391 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 16:08:39,391 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 16:08:39,391 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 16:08:39,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-25 16:08:39,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-25 16:08:39,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-25 16:08:39,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-25 16:08:39,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__fail
[2020-11-25 16:08:39,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__success
[2020-11-25 16:08:39,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-25 16:08:39,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-25 16:08:39,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20Burnable__fail
[2020-11-25 16:08:39,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20Burnable__success
[2020-11-25 16:08:39,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure Stoppable_Stoppable_NoBaseCtor__fail
[2020-11-25 16:08:39,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure Stoppable_Stoppable_NoBaseCtor__success
[2020-11-25 16:08:39,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure Stoppable_Stoppable__fail
[2020-11-25 16:08:39,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure Stoppable_Stoppable__success
[2020-11-25 16:08:39,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure stop_Stoppable__fail
[2020-11-25 16:08:39,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure stop_Stoppable__success
[2020-11-25 16:08:39,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure start_Stoppable__fail
[2020-11-25 16:08:39,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure start_Stoppable__success
[2020-11-25 16:08:39,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure stopped_Stoppable__fail
[2020-11-25 16:08:39,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure stopped_Stoppable__success
[2020-11-25 16:08:39,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure EXEToken_EXEToken_NoBaseCtor__fail
[2020-11-25 16:08:39,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure EXEToken_EXEToken_NoBaseCtor__success
[2020-11-25 16:08:39,394 INFO  L138     BoogieDeclarations]: Found implementation of procedure EXEToken_EXEToken__fail
[2020-11-25 16:08:39,394 INFO  L138     BoogieDeclarations]: Found implementation of procedure EXEToken_EXEToken__success
[2020-11-25 16:08:39,394 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_EXEToken__fail
[2020-11-25 16:08:39,394 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_EXEToken__success
[2020-11-25 16:08:39,394 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_EXEToken__fail
[2020-11-25 16:08:39,394 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_EXEToken__success
[2020-11-25 16:08:39,394 INFO  L138     BoogieDeclarations]: Found implementation of procedure setLock~address~uint256~uint256_EXEToken__fail
[2020-11-25 16:08:39,394 INFO  L138     BoogieDeclarations]: Found implementation of procedure setLock~address~uint256~uint256_EXEToken__success
[2020-11-25 16:08:39,394 INFO  L138     BoogieDeclarations]: Found implementation of procedure getLock~address_EXEToken__fail
[2020-11-25 16:08:39,394 INFO  L138     BoogieDeclarations]: Found implementation of procedure getLock~address_EXEToken__success
[2020-11-25 16:08:39,394 INFO  L138     BoogieDeclarations]: Found implementation of procedure _isLocked~address~uint256_EXEToken__fail
[2020-11-25 16:08:39,395 INFO  L138     BoogieDeclarations]: Found implementation of procedure _isLocked~address~uint256_EXEToken__success
[2020-11-25 16:08:39,395 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_EXEToken__fail
[2020-11-25 16:08:39,395 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_EXEToken__success
[2020-11-25 16:08:39,395 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_EXEToken__fail
[2020-11-25 16:08:39,395 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_EXEToken__success
[2020-11-25 16:08:39,395 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 16:08:39,395 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 16:08:39,395 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 16:08:39,395 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 16:08:39,395 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 16:08:39,395 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 16:08:39,395 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 16:08:39,396 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 16:08:39,396 INFO  L138     BoogieDeclarations]: Found implementation of procedure enabled_pre__fail
[2020-11-25 16:08:39,396 INFO  L138     BoogieDeclarations]: Found implementation of procedure enabled_pre__success
[2020-11-25 16:08:39,396 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 16:08:39,396 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 16:08:39,396 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-25 16:08:39,396 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-25 16:08:39,396 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 16:08:39,396 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 16:08:39,396 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 16:08:39,396 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 16:08:39,396 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 16:08:39,397 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 16:08:39,397 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Burnable
[2020-11-25 16:08:39,397 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Burnable
[2020-11-25 16:08:39,397 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Stoppable
[2020-11-25 16:08:39,397 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Stoppable
[2020-11-25 16:08:39,397 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_EXEToken
[2020-11-25 16:08:39,397 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 16:08:39,397 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 16:08:39,397 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 16:08:39,712 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 16:08:39,712 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 16:08:40,283 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 16:08:40,284 INFO  L286             CfgBuilder]: Removed 8 assue(true) statements.
[2020-11-25 16:08:40,286 INFO  L202        PluginConnector]: Adding new model EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:08:40 BoogieIcfgContainer
[2020-11-25 16:08:40,286 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:08:39" (2/2) ...
[2020-11-25 16:08:40,286 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 16:08:40,286 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@224fc36a and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:08:40, skipping insertion in model container
[2020-11-25 16:08:40,286 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 16:08:40,286 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 16:08:40,286 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 16:08:40,288 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 16:08:40,288 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:08:39" (1/3) ...
[2020-11-25 16:08:40,289 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@4fac3f58 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:08:40, skipping insertion in model container
[2020-11-25 16:08:40,289 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:08:39" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 16:08:40,327 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:08:40 NWAContainer
[2020-11-25 16:08:40,327 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 16:08:40,328 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 16:08:40,328 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 16:08:40,328 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 16:08:40,329 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:08:40" (3/4) ...
[2020-11-25 16:08:40,330 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@16a3c271 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:08:40, skipping insertion in model container
[2020-11-25 16:08:40,330 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:08:40" (4/4) ...
[2020-11-25 16:08:40,333 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 16:08:40,338 INFO  L110   BuchiProductObserver]: Initial RCFG 2516 locations, 3423 edges
[2020-11-25 16:08:40,338 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 16:08:40,349 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 16:08:42,339 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 16:08:42,347 INFO  L110   BuchiProductObserver]: BuchiProgram size 6238 locations, 11172 edges
[2020-11-25 16:08:42,347 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:08:42 BoogieIcfgContainer
[2020-11-25 16:08:42,347 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 16:08:42,348 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 16:08:42,348 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 16:08:42,349 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 16:08:42,349 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:08:42" (1/1) ...
[2020-11-25 16:08:42,459 INFO  L313           BlockEncoder]: Initial Icfg 6238 locations, 11172 edges
[2020-11-25 16:08:42,459 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 16:08:42,460 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 16:08:42,460 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 16:08:42,460 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 16:08:42,473 INFO  L70    emoveInfeasibleEdges]: Removed 162 edges and 20 locations because of local infeasibility
[2020-11-25 16:08:42,484 INFO  L70        RemoveSinkStates]: Removed 182 edges and 104 locations by removing sink states
[2020-11-25 16:08:42,498 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 16:08:42,502 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 16:08:42,505 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 16:08:42,506 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 16:08:42,509 INFO  L313           BlockEncoder]: Encoded RCFG 6080 locations, 10778 edges
[2020-11-25 16:08:42,509 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 04:08:42 BasicIcfg
[2020-11-25 16:08:42,509 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 16:08:42,509 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 16:08:42,509 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 16:08:42,511 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 16:08:42,511 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:08:42,511 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:08:39" (1/6) ...
[2020-11-25 16:08:42,513 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@57c4db3 and model type EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:08:42, skipping insertion in model container
[2020-11-25 16:08:42,513 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:08:42,513 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:08:39" (2/6) ...
[2020-11-25 16:08:42,513 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@57c4db3 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:08:42, skipping insertion in model container
[2020-11-25 16:08:42,513 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:08:42,513 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:08:40" (3/6) ...
[2020-11-25 16:08:42,513 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@57c4db3 and model type EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 04:08:42, skipping insertion in model container
[2020-11-25 16:08:42,513 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:08:42,513 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:08:40" (4/6) ...
[2020-11-25 16:08:42,513 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@57c4db3 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:08:42, skipping insertion in model container
[2020-11-25 16:08:42,513 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:08:42,514 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:08:42" (5/6) ...
[2020-11-25 16:08:42,514 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@57c4db3 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 04:08:42, skipping insertion in model container
[2020-11-25 16:08:42,514 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:08:42,514 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 04:08:42" (6/6) ...
[2020-11-25 16:08:42,515 INFO  L404   chiAutomizerObserver]: Analyzing ICFG EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transfer-fail.bpl_BEv2
[2020-11-25 16:08:42,548 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 16:08:42,548 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 16:08:42,548 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 16:08:42,549 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 16:08:42,549 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 16:08:42,549 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 16:08:42,549 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 16:08:42,549 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 16:08:42,549 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 16:08:42,591 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6080 states.
[2020-11-25 16:08:42,651 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:08:42,651 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:08:42,651 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:08:42,660 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:08:42,660 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:08:42,660 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 16:08:42,660 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6080 states.
[2020-11-25 16:08:42,684 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:08:42,684 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:08:42,684 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:08:42,686 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:08:42,686 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_EXEToken0 := false;
[L2]                 call_transfer_EXEToken0 := false;
[L2]     CALL        call main();
[L7037]              assume null == 0;
[L7038]  CALL        call this := FreshRefGenerator__success();
[L3028]              havoc newRef;
[L3029]              assume Alloc[newRef] == false;
[L3030]              Alloc[newRef] := true;
[L3031]              assume newRef != null;
[L7038]  RET         call this := FreshRefGenerator__success();
[L7039]              assume now >= 0;
[L7040]              assume DType[this] == EXEToken;
[L7041]              assume msgvalue_MSG == 0;
[L7042]              gas := gas - 53000;
[L7043]  CALL        call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1769]              havoc __exception;
[L1770]              revert := false;
[L1771]  COND FALSE  !(__exception)
[L1798]  CALL        call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4314]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4314]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4315]  COND TRUE   revert
[L1798]  RET         call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1799]              assume !revert && gas >= 0;
[L7043]  RET         call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L7044]              assume !revert && gas >= 0;

Loop:
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND TRUE   choice == 21
[L6890]              gas := gas - 21000;
[L6891]  COND FALSE  !(gas >= 0)
[L7047]  RET         call CorralChoice_EXEToken(this);

[2020-11-25 16:08:42,699 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:08:42,699 INFO  L82        PathProgramCache]: Analyzing trace with hash -2050250364, now seen corresponding path program 1 times
[2020-11-25 16:08:42,703 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:08:42,726 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:08:42,756 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 16:08:42,757 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:08:42,757 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 16:08:43,163 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:08:43,171 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 16:08:43,172 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 16:08:43,173 INFO  L87              Difference]: Start difference. First operand 6080 states. Second operand 4 states.
[2020-11-25 16:08:43,752 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:08:43,752 INFO  L93              Difference]: Finished difference Result 3667 states and 4215 transitions.
[2020-11-25 16:08:43,752 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 16:08:43,754 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3667 states and 4215 transitions.
[2020-11-25 16:08:43,773 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:08:43,797 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3667 states to 3667 states and 4215 transitions.
[2020-11-25 16:08:43,797 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 16:08:43,800 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 838
[2020-11-25 16:08:43,800 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3667 states and 4215 transitions.
[2020-11-25 16:08:43,808 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:08:43,808 INFO  L728         BuchiCegarLoop]: Abstraction has 3667 states and 4215 transitions.
[2020-11-25 16:08:43,822 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3667 states and 4215 transitions.
[2020-11-25 16:08:43,867 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3667 to 3667.
[2020-11-25 16:08:43,868 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3667 states.
[2020-11-25 16:08:43,873 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3667 states to 3667 states and 4215 transitions.
[2020-11-25 16:08:43,874 INFO  L751         BuchiCegarLoop]: Abstraction has 3667 states and 4215 transitions.
[2020-11-25 16:08:43,874 INFO  L631         BuchiCegarLoop]: Abstraction has 3667 states and 4215 transitions.
[2020-11-25 16:08:43,874 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 16:08:43,874 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3667 states and 4215 transitions.
[2020-11-25 16:08:43,882 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:08:43,882 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:08:43,882 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:08:43,884 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:08:43,884 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_EXEToken0 := false;
[L2]                 call_transfer_EXEToken0 := false;
[L2]     CALL        call main();
[L7037]              assume null == 0;
[L7038]  CALL        call this := FreshRefGenerator__success();
[L3028]              havoc newRef;
[L3029]              assume Alloc[newRef] == false;
[L3030]              Alloc[newRef] := true;
[L3031]              assume newRef != null;
[L7038]  RET         call this := FreshRefGenerator__success();
[L7039]              assume now >= 0;
[L7040]              assume DType[this] == EXEToken;
[L7041]              assume msgvalue_MSG == 0;
[L7042]              gas := gas - 53000;
[L7043]  CALL        call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1769]              havoc __exception;
[L1770]              revert := false;
[L1771]  COND FALSE  !(__exception)
[L1798]  CALL        call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4314]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4314]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4315]  COND TRUE   revert
[L1798]  RET         call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1799]              assume !revert && gas >= 0;
[L7043]  RET         call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L7044]              assume !revert && gas >= 0;
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND TRUE   choice == 16
[L6920]              gas := gas - 21000;
[L6921]  COND TRUE   gas >= 0
[L6922]              assume amount_s1083 >= 0 && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6923]              assume msgvalue_MSG == 0;
[L6924]  CALL        call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s1083 && (amount_s1083 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s1083] + amount_s1083 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s1083 >= 0) && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1083] >= 0) && _balances_ERC20[this][recipient_s1083] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_EXEToken0 := true;
[L2]                 call_transfer_EXEToken0 := false;
[L2]                 revert := revert_hold;
[L2033]              havoc __exception;
[L2034]              revert := false;
[L2035]  COND FALSE  !(__exception)
[L2062]  CALL        call __ret_0_ := transfer~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4537]  CALL        call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6067]  COND FALSE  !(!!stopped_Stoppable[this])
[L4537]  RET         call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4538]  COND TRUE   revert
[L2062]  RET         call __ret_0_ := transfer~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2063]              assume !revert && gas >= 0;
[L6924]  RET         call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L7047]  RET         call CorralChoice_EXEToken(this);

Loop:
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND TRUE   choice == 16
[L6920]              gas := gas - 21000;
[L6921]  COND TRUE   gas >= 0
[L6922]              assume amount_s1083 >= 0 && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6923]              assume msgvalue_MSG == 0;
[L6924]  CALL        call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s1083 && (amount_s1083 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s1083] + amount_s1083 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s1083 >= 0) && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1083] >= 0) && _balances_ERC20[this][recipient_s1083] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_EXEToken0 := true;
[L2]                 call_transfer_EXEToken0 := false;
[L2]                 revert := revert_hold;
[L2033]              havoc __exception;
[L2034]              revert := false;
[L2035]  COND FALSE  !(__exception)
[L2062]  CALL        call __ret_0_ := transfer~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4537]  CALL        call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6067]  COND FALSE  !(!!stopped_Stoppable[this])
[L4537]  RET         call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4538]  COND TRUE   revert
[L2062]  RET         call __ret_0_ := transfer~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2063]              assume !revert && gas >= 0;
[L6924]  RET         call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L7047]  RET         call CorralChoice_EXEToken(this);

[2020-11-25 16:08:43,888 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:08:43,888 INFO  L82        PathProgramCache]: Analyzing trace with hash 1870072001, now seen corresponding path program 1 times
[2020-11-25 16:08:43,889 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:08:43,903 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:08:43,923 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 16:08:43,923 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:08:43,923 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 16:08:43,925 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:08:43,925 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 16:08:43,925 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 16:08:43,925 INFO  L87              Difference]: Start difference. First operand 3667 states and 4215 transitions. cyclomatic complexity: 550 Second operand 3 states.
[2020-11-25 16:08:44,019 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:08:44,019 INFO  L93              Difference]: Finished difference Result 4793 states and 5534 transitions.
[2020-11-25 16:08:44,019 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 16:08:44,020 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4793 states and 5534 transitions.
[2020-11-25 16:08:44,036 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 16:08:44,055 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4793 states to 4793 states and 5534 transitions.
[2020-11-25 16:08:44,055 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1149
[2020-11-25 16:08:44,056 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1149
[2020-11-25 16:08:44,056 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4793 states and 5534 transitions.
[2020-11-25 16:08:44,062 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:08:44,062 INFO  L728         BuchiCegarLoop]: Abstraction has 4793 states and 5534 transitions.
[2020-11-25 16:08:44,067 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4793 states and 5534 transitions.
[2020-11-25 16:08:44,108 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4793 to 4237.
[2020-11-25 16:08:44,108 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4237 states.
[2020-11-25 16:08:44,113 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4237 states to 4237 states and 4868 transitions.
[2020-11-25 16:08:44,114 INFO  L751         BuchiCegarLoop]: Abstraction has 4237 states and 4868 transitions.
[2020-11-25 16:08:44,114 INFO  L631         BuchiCegarLoop]: Abstraction has 4237 states and 4868 transitions.
[2020-11-25 16:08:44,114 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 16:08:44,114 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4237 states and 4868 transitions.
[2020-11-25 16:08:44,120 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 16:08:44,120 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:08:44,120 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:08:44,122 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:08:44,122 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_EXEToken0 := false;
[L2]                 call_transfer_EXEToken0 := false;
[L2]     CALL        call main();
[L7037]              assume null == 0;
[L7038]  CALL        call this := FreshRefGenerator__success();
[L3028]              havoc newRef;
[L3029]              assume Alloc[newRef] == false;
[L3030]              Alloc[newRef] := true;
[L3031]              assume newRef != null;
[L7038]  RET         call this := FreshRefGenerator__success();
[L7039]              assume now >= 0;
[L7040]              assume DType[this] == EXEToken;
[L7041]              assume msgvalue_MSG == 0;
[L7042]              gas := gas - 53000;
[L7043]  CALL        call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1769]              havoc __exception;
[L1770]              revert := false;
[L1771]  COND FALSE  !(__exception)
[L1798]  CALL        call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4314]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4314]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4315]  COND FALSE  !(revert)
[L4318]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L3926]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3926]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3927]  COND FALSE  !(revert)
[L3930]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3901]              assume msgsender_MSG != null;
[L3902]              Balance[this] := 0;
[L3903]              _name_ERC20Detailed[this] := 427332508;
[L3904]              _symbol_ERC20Detailed[this] := 427332508;
[L3905]              _decimals_ERC20Detailed[this] := 0;
[L3907]              _name_ERC20Detailed[this] := name_s778;
[L3908]              _symbol_ERC20Detailed[this] := symbol_s778;
[L3909]              _decimals_ERC20Detailed[this] := decimals_s778;
[L3930]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3931]  COND FALSE  !(revert)
[L4318]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L4319]  COND FALSE  !(revert)
[L4322]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3397]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3373]              assume msgsender_MSG != null;
[L3374]              Balance[this] := 0;
[L3375]              _balances_ERC20[this] := zeroRefintArr();
[L3376]              sum__balances0[this] := 0;
[L3377]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3378]              sum__allowed1[this] := 0;
[L3379]              _totalSupply_ERC20[this] := 0;
[L3401]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L4322]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4323]  COND FALSE  !(revert)
[L4326]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4006]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3397]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3373]              assume msgsender_MSG != null;
[L3374]              Balance[this] := 0;
[L3375]              _balances_ERC20[this] := zeroRefintArr();
[L3376]              sum__balances0[this] := 0;
[L3377]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3378]              sum__allowed1[this] := 0;
[L3379]              _totalSupply_ERC20[this] := 0;
[L3401]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L4010]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4014]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3983]              assume msgsender_MSG != null;
[L3984]              Balance[this] := 0;
[L4014]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4015]  COND FALSE  !(revert)
[L4326]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4327]  COND FALSE  !(revert)
[L4330]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3220]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3203]              assume msgsender_MSG != null;
[L3204]              Balance[this] := 0;
[L3205]              _owner_Ownable[this] := null;
[L3207]              _owner_Ownable[this] := msgsender_MSG;
[L3220]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  COND FALSE  !(revert)
[L4330]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4156]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3220]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3203]              assume msgsender_MSG != null;
[L3204]              Balance[this] := 0;
[L3205]              _owner_Ownable[this] := null;
[L3207]              _owner_Ownable[this] := msgsender_MSG;
[L3220]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  COND FALSE  !(revert)
[L4156]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4157]  COND FALSE  !(revert)
[L4160]  CALL        call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4136]              assume msgsender_MSG != null;
[L4137]              Balance[this] := 0;
[L4138]              stopped_Stoppable[this] := false;
[L4160]  RET         call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4161]  COND FALSE  !(revert)
[L4334]  RET         call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4250]              assume msgsender_MSG != null;
[L4251]              Balance[this] := 0;
[L4252]              _lockTimes_EXEToken[this] := zeroRefintArr();
[L4253]              sum__lockTimes2[this] := 0;
[L4254]              _lockAmounts_EXEToken[this] := zeroRefintArr();
[L4255]              sum__lockAmounts3[this] := 0;
[L4257]  COND TRUE   DType[this] == EXEToken
[L4258]  CALL        call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3234]              __ret_0_ := _owner_Ownable[this];
[L4258]  RET         call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]  COND FALSE  !(revert)
[L4265]              __var_24 := decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4266]  COND TRUE   DType[this] == EXEToken
[L4267]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3739]              __var_15 := null;
[L3740]  COND TRUE   !(account_s654 != null)
[L3741]              revert := true;
[L4267]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4268]  COND TRUE   revert
[L4338]  RET         call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4339]  COND FALSE  !(revert)
[L1798]  RET         call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1799]              assume !revert && gas >= 0;
[L7043]  RET         call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L7044]              assume !revert && gas >= 0;
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND TRUE   choice == 16
[L6920]              gas := gas - 21000;
[L6921]  COND TRUE   gas >= 0
[L6922]              assume amount_s1083 >= 0 && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6923]              assume msgvalue_MSG == 0;
[L6924]  CALL        call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s1083 && (amount_s1083 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s1083] + amount_s1083 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s1083 >= 0) && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1083] >= 0) && _balances_ERC20[this][recipient_s1083] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_EXEToken0 := true;
[L2]                 call_transfer_EXEToken0 := false;
[L2]                 revert := revert_hold;
[L2033]              havoc __exception;
[L2034]              revert := false;
[L2035]  COND FALSE  !(__exception)
[L2062]  CALL        call __ret_0_ := transfer~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4537]  CALL        call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6067]  COND TRUE   !!stopped_Stoppable[this]
[L6068]              revert := true;
[L4537]  RET         call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4538]  COND TRUE   revert
[L2062]  RET         call __ret_0_ := transfer~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2063]              assume !revert && gas >= 0;
[L6924]  RET         call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L7047]  RET         call CorralChoice_EXEToken(this);

Loop:
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND TRUE   choice == 16
[L6920]              gas := gas - 21000;
[L6921]  COND TRUE   gas >= 0
[L6922]              assume amount_s1083 >= 0 && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6923]              assume msgvalue_MSG == 0;
[L6924]  CALL        call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s1083 && (amount_s1083 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s1083] + amount_s1083 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s1083 >= 0) && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1083] >= 0) && _balances_ERC20[this][recipient_s1083] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_EXEToken0 := true;
[L2]                 call_transfer_EXEToken0 := false;
[L2]                 revert := revert_hold;
[L2033]              havoc __exception;
[L2034]              revert := false;
[L2035]  COND FALSE  !(__exception)
[L2062]  CALL        call __ret_0_ := transfer~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4537]  CALL        call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6067]  COND TRUE   !!stopped_Stoppable[this]
[L6068]              revert := true;
[L4537]  RET         call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4538]  COND TRUE   revert
[L2062]  RET         call __ret_0_ := transfer~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2063]              assume !revert && gas >= 0;
[L6924]  RET         call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L7047]  RET         call CorralChoice_EXEToken(this);

[2020-11-25 16:08:44,127 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:08:44,128 INFO  L82        PathProgramCache]: Analyzing trace with hash -1029327359, now seen corresponding path program 1 times
[2020-11-25 16:08:44,128 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:08:44,146 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:08:44,221 INFO  L134       CoverageAnalysis]: Checked inductivity of 131 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 131 trivial. 0 not checked.
[2020-11-25 16:08:44,221 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:08:44,221 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 16:08:44,222 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:08:44,222 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 16:08:44,222 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 16:08:44,222 INFO  L87              Difference]: Start difference. First operand 4237 states and 4868 transitions. cyclomatic complexity: 633 Second operand 3 states.
[2020-11-25 16:08:44,309 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:08:44,309 INFO  L93              Difference]: Finished difference Result 4799 states and 5377 transitions.
[2020-11-25 16:08:44,309 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 16:08:44,309 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4799 states and 5377 transitions.
[2020-11-25 16:08:44,321 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 16:08:44,338 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4799 states to 4445 states and 4959 transitions.
[2020-11-25 16:08:44,338 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1022
[2020-11-25 16:08:44,339 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1039
[2020-11-25 16:08:44,339 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4445 states and 4959 transitions.
[2020-11-25 16:08:44,343 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:08:44,343 INFO  L728         BuchiCegarLoop]: Abstraction has 4445 states and 4959 transitions.
[2020-11-25 16:08:44,347 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4445 states and 4959 transitions.
[2020-11-25 16:08:44,381 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4445 to 3997.
[2020-11-25 16:08:44,382 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3997 states.
[2020-11-25 16:08:44,386 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3997 states to 3997 states and 4401 transitions.
[2020-11-25 16:08:44,386 INFO  L751         BuchiCegarLoop]: Abstraction has 3997 states and 4401 transitions.
[2020-11-25 16:08:44,386 INFO  L631         BuchiCegarLoop]: Abstraction has 3997 states and 4401 transitions.
[2020-11-25 16:08:44,386 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 16:08:44,386 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3997 states and 4401 transitions.
[2020-11-25 16:08:44,391 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 16:08:44,391 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:08:44,391 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:08:44,393 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:08:44,393 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_EXEToken0 := false;
[L2]                 call_transfer_EXEToken0 := false;
[L2]     CALL        call main();
[L7037]              assume null == 0;
[L7038]  CALL        call this := FreshRefGenerator__success();
[L3028]              havoc newRef;
[L3029]              assume Alloc[newRef] == false;
[L3030]              Alloc[newRef] := true;
[L3031]              assume newRef != null;
[L7038]  RET         call this := FreshRefGenerator__success();
[L7039]              assume now >= 0;
[L7040]              assume DType[this] == EXEToken;
[L7041]              assume msgvalue_MSG == 0;
[L7042]              gas := gas - 53000;
[L7043]  CALL        call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1769]              havoc __exception;
[L1770]              revert := false;
[L1771]  COND FALSE  !(__exception)
[L1798]  CALL        call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4314]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4314]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4315]  COND FALSE  !(revert)
[L4318]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L3926]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3926]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3927]  COND FALSE  !(revert)
[L3930]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3901]              assume msgsender_MSG != null;
[L3902]              Balance[this] := 0;
[L3903]              _name_ERC20Detailed[this] := 427332508;
[L3904]              _symbol_ERC20Detailed[this] := 427332508;
[L3905]              _decimals_ERC20Detailed[this] := 0;
[L3907]              _name_ERC20Detailed[this] := name_s778;
[L3908]              _symbol_ERC20Detailed[this] := symbol_s778;
[L3909]              _decimals_ERC20Detailed[this] := decimals_s778;
[L3930]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3931]  COND FALSE  !(revert)
[L4318]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L4319]  COND FALSE  !(revert)
[L4322]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3397]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3373]              assume msgsender_MSG != null;
[L3374]              Balance[this] := 0;
[L3375]              _balances_ERC20[this] := zeroRefintArr();
[L3376]              sum__balances0[this] := 0;
[L3377]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3378]              sum__allowed1[this] := 0;
[L3379]              _totalSupply_ERC20[this] := 0;
[L3401]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L4322]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4323]  COND FALSE  !(revert)
[L4326]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4006]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3397]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3373]              assume msgsender_MSG != null;
[L3374]              Balance[this] := 0;
[L3375]              _balances_ERC20[this] := zeroRefintArr();
[L3376]              sum__balances0[this] := 0;
[L3377]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3378]              sum__allowed1[this] := 0;
[L3379]              _totalSupply_ERC20[this] := 0;
[L3401]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L4010]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4014]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3983]              assume msgsender_MSG != null;
[L3984]              Balance[this] := 0;
[L4014]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4015]  COND FALSE  !(revert)
[L4326]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4327]  COND FALSE  !(revert)
[L4330]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3220]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3203]              assume msgsender_MSG != null;
[L3204]              Balance[this] := 0;
[L3205]              _owner_Ownable[this] := null;
[L3207]              _owner_Ownable[this] := msgsender_MSG;
[L3220]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  COND FALSE  !(revert)
[L4330]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4156]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3220]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3203]              assume msgsender_MSG != null;
[L3204]              Balance[this] := 0;
[L3205]              _owner_Ownable[this] := null;
[L3207]              _owner_Ownable[this] := msgsender_MSG;
[L3220]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  COND FALSE  !(revert)
[L4156]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4157]  COND FALSE  !(revert)
[L4160]  CALL        call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4136]              assume msgsender_MSG != null;
[L4137]              Balance[this] := 0;
[L4138]              stopped_Stoppable[this] := false;
[L4160]  RET         call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4161]  COND FALSE  !(revert)
[L4334]  RET         call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4250]              assume msgsender_MSG != null;
[L4251]              Balance[this] := 0;
[L4252]              _lockTimes_EXEToken[this] := zeroRefintArr();
[L4253]              sum__lockTimes2[this] := 0;
[L4254]              _lockAmounts_EXEToken[this] := zeroRefintArr();
[L4255]              sum__lockAmounts3[this] := 0;
[L4257]  COND TRUE   DType[this] == EXEToken
[L4258]  CALL        call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3234]              __ret_0_ := _owner_Ownable[this];
[L4258]  RET         call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]  COND FALSE  !(revert)
[L4265]              __var_24 := decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4266]  COND TRUE   DType[this] == EXEToken
[L4267]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3739]              __var_15 := null;
[L3740]  COND FALSE  !(!(account_s654 != null))
[L3744]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3744]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3745]  COND FALSE  !(revert)
[L3748]              _totalSupply_ERC20[this] := __var_16;
[L3749]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3749]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3750]  COND FALSE  !(revert)
[L3753]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s654];
[L3754]              _balances_ERC20[this][account_s654] := __var_17;
[L3755]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s654];
[L3756]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4267]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4268]  COND FALSE  !(revert)
[L4338]  RET         call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4339]  COND FALSE  !(revert)
[L1798]  RET         call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1799]              assume !revert && gas >= 0;
[L7043]  RET         call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L7044]              assume !revert && gas >= 0;
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND TRUE   choice == 16
[L6920]              gas := gas - 21000;
[L6921]  COND TRUE   gas >= 0
[L6922]              assume amount_s1083 >= 0 && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6923]              assume msgvalue_MSG == 0;
[L6924]  CALL        call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s1083 && (amount_s1083 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s1083] + amount_s1083 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s1083 >= 0) && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1083] >= 0) && _balances_ERC20[this][recipient_s1083] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_EXEToken0 := true;
[L2]                 call_transfer_EXEToken0 := false;
[L2]                 revert := revert_hold;
[L2033]              havoc __exception;
[L2034]              revert := false;
[L2035]  COND FALSE  !(__exception)
[L2062]  CALL        call __ret_0_ := transfer~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4537]  CALL        call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6067]  COND FALSE  !(!!stopped_Stoppable[this])
[L4537]  RET         call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4538]  COND FALSE  !(revert)
[L4541]  CALL        call __var_28 := _isLocked~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4479]  COND TRUE   DType[this] == EXEToken
[L4480]  CALL        call __var_25 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3427]              __ret_0_ := _balances_ERC20[this][owner_s312];
[L4480]  RET         call __var_25 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4481]  COND FALSE  !(revert)
[L4487]  COND TRUE   DType[this] == EXEToken
[L4488]  CALL        call __var_27 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3427]              __ret_0_ := _balances_ERC20[this][owner_s312];
[L4488]  RET         call __var_27 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4489]  COND FALSE  !(revert)
[L4495]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, __var_27, _lockAmounts_EXEToken[this][account_s1055]);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L4495]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, __var_27, _lockAmounts_EXEToken[this][account_s1055]);
[L4496]  COND FALSE  !(revert)
[L4499]              __ret_0_ := ((_lockTimes_EXEToken[this][account_s1055] != 0 && _lockAmounts_EXEToken[this][account_s1055] != 0) && _lockTimes_EXEToken[this][account_s1055] > now) && (__var_25 <= _lockAmounts_EXEToken[this][account_s1055] || __var_26 < amount_s1055);
[L4541]  RET         call __var_28 := _isLocked~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4542]  COND FALSE  !(revert)
[L4545]  COND FALSE  !(!!__var_28)
[L4549]  COND TRUE   DType[this] == EXEToken
[L4550]  CALL        call __var_29 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L3480]  COND FALSE  !(!(value_s389 <= _balances_ERC20[this][msgsender_MSG]))
[L3484]              __var_3 := null;
[L3485]  COND FALSE  !(!(to_s389 != null))
[L3489]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][msgsender_MSG], value_s389);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L3489]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][msgsender_MSG], value_s389);
[L3490]  COND FALSE  !(revert)
[L3493]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][msgsender_MSG];
[L3494]              _balances_ERC20[this][msgsender_MSG] := __var_4;
[L3495]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][msgsender_MSG];
[L3496]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s389], value_s389);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3496]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s389], value_s389);
[L3497]  COND FALSE  !(revert)
[L3500]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s389];
[L3501]              _balances_ERC20[this][to_s389] := __var_5;
[L3502]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s389];
[L3503]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3504]              __ret_0_ := true;
[L4550]  RET         call __var_29 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4551]  COND FALSE  !(revert)
[L4557]              __ret_0_ := __var_29;
[L2062]  RET         call __ret_0_ := transfer~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2063]              assume !revert && gas >= 0;
[L6924]  RET         call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L7047]  RET         call CorralChoice_EXEToken(this);

Loop:
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND TRUE   choice == 16
[L6920]              gas := gas - 21000;
[L6921]  COND TRUE   gas >= 0
[L6922]              assume amount_s1083 >= 0 && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6923]              assume msgvalue_MSG == 0;
[L6924]  CALL        call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s1083 && (amount_s1083 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s1083] + amount_s1083 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s1083 >= 0) && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1083] >= 0) && _balances_ERC20[this][recipient_s1083] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_EXEToken0 := true;
[L2]                 call_transfer_EXEToken0 := false;
[L2]                 revert := revert_hold;
[L2033]              havoc __exception;
[L2034]              revert := false;
[L2035]  COND FALSE  !(__exception)
[L2062]  CALL        call __ret_0_ := transfer~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4537]  CALL        call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6067]  COND FALSE  !(!!stopped_Stoppable[this])
[L4537]  RET         call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4538]  COND FALSE  !(revert)
[L4541]  CALL        call __var_28 := _isLocked~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4479]  COND TRUE   DType[this] == EXEToken
[L4480]  CALL        call __var_25 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3427]              __ret_0_ := _balances_ERC20[this][owner_s312];
[L4480]  RET         call __var_25 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4481]  COND FALSE  !(revert)
[L4487]  COND TRUE   DType[this] == EXEToken
[L4488]  CALL        call __var_27 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3427]              __ret_0_ := _balances_ERC20[this][owner_s312];
[L4488]  RET         call __var_27 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4489]  COND FALSE  !(revert)
[L4495]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, __var_27, _lockAmounts_EXEToken[this][account_s1055]);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L4495]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, __var_27, _lockAmounts_EXEToken[this][account_s1055]);
[L4496]  COND FALSE  !(revert)
[L4499]              __ret_0_ := ((_lockTimes_EXEToken[this][account_s1055] != 0 && _lockAmounts_EXEToken[this][account_s1055] != 0) && _lockTimes_EXEToken[this][account_s1055] > now) && (__var_25 <= _lockAmounts_EXEToken[this][account_s1055] || __var_26 < amount_s1055);
[L4541]  RET         call __var_28 := _isLocked~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4542]  COND FALSE  !(revert)
[L4545]  COND FALSE  !(!!__var_28)
[L4549]  COND TRUE   DType[this] == EXEToken
[L4550]  CALL        call __var_29 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L3480]  COND FALSE  !(!(value_s389 <= _balances_ERC20[this][msgsender_MSG]))
[L3484]              __var_3 := null;
[L3485]  COND FALSE  !(!(to_s389 != null))
[L3489]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][msgsender_MSG], value_s389);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L3489]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][msgsender_MSG], value_s389);
[L3490]  COND FALSE  !(revert)
[L3493]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][msgsender_MSG];
[L3494]              _balances_ERC20[this][msgsender_MSG] := __var_4;
[L3495]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][msgsender_MSG];
[L3496]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s389], value_s389);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3496]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s389], value_s389);
[L3497]  COND FALSE  !(revert)
[L3500]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s389];
[L3501]              _balances_ERC20[this][to_s389] := __var_5;
[L3502]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s389];
[L3503]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3504]              __ret_0_ := true;
[L4550]  RET         call __var_29 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4551]  COND FALSE  !(revert)
[L4557]              __ret_0_ := __var_29;
[L2062]  RET         call __ret_0_ := transfer~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2063]              assume !revert && gas >= 0;
[L6924]  RET         call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L7047]  RET         call CorralChoice_EXEToken(this);

[2020-11-25 16:08:44,398 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:08:44,398 INFO  L82        PathProgramCache]: Analyzing trace with hash 1213205971, now seen corresponding path program 1 times
[2020-11-25 16:08:44,399 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:08:44,419 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:08:44,882 INFO  L134       CoverageAnalysis]: Checked inductivity of 144 backedges. 20 proven. 0 refuted. 0 times theorem prover too weak. 124 trivial. 0 not checked.
[2020-11-25 16:08:44,882 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:08:44,882 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [25] imperfect sequences [] total 25
[2020-11-25 16:08:44,883 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:08:44,883 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2020-11-25 16:08:44,884 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=55, Invalid=595, Unknown=0, NotChecked=0, Total=650
[2020-11-25 16:08:44,884 INFO  L87              Difference]: Start difference. First operand 3997 states and 4401 transitions. cyclomatic complexity: 406 Second operand 26 states.
[2020-11-25 16:08:50,692 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:08:50,692 INFO  L93              Difference]: Finished difference Result 4122 states and 4546 transitions.
[2020-11-25 16:08:50,692 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 28 states. 
[2020-11-25 16:08:50,692 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4122 states and 4546 transitions.
[2020-11-25 16:08:50,700 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 16:08:50,711 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4122 states to 4122 states and 4546 transitions.
[2020-11-25 16:08:50,711 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1011
[2020-11-25 16:08:50,712 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1011
[2020-11-25 16:08:50,712 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4122 states and 4546 transitions.
[2020-11-25 16:08:50,715 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:08:50,715 INFO  L728         BuchiCegarLoop]: Abstraction has 4122 states and 4546 transitions.
[2020-11-25 16:08:50,719 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4122 states and 4546 transitions.
[2020-11-25 16:08:50,743 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4122 to 3861.
[2020-11-25 16:08:50,744 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3861 states.
[2020-11-25 16:08:50,747 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3861 states to 3861 states and 4226 transitions.
[2020-11-25 16:08:50,747 INFO  L751         BuchiCegarLoop]: Abstraction has 3861 states and 4226 transitions.
[2020-11-25 16:08:50,747 INFO  L631         BuchiCegarLoop]: Abstraction has 3861 states and 4226 transitions.
[2020-11-25 16:08:50,747 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 16:08:50,747 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3861 states and 4226 transitions.
[2020-11-25 16:08:50,752 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:08:50,752 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:08:50,752 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:08:50,754 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:08:50,754 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_EXEToken0 := false;
[L2]                 call_transfer_EXEToken0 := false;
[L2]     CALL        call main();
[L7037]              assume null == 0;
[L7038]  CALL        call this := FreshRefGenerator__success();
[L3028]              havoc newRef;
[L3029]              assume Alloc[newRef] == false;
[L3030]              Alloc[newRef] := true;
[L3031]              assume newRef != null;
[L7038]  RET         call this := FreshRefGenerator__success();
[L7039]              assume now >= 0;
[L7040]              assume DType[this] == EXEToken;
[L7041]              assume msgvalue_MSG == 0;
[L7042]              gas := gas - 53000;
[L7043]  CALL        call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1769]              havoc __exception;
[L1770]              revert := false;
[L1771]  COND TRUE   __exception
[L1772]              __tmp__Balance := Balance;
[L1773]              __tmp__DType := DType;
[L1774]              __tmp__Alloc := Alloc;
[L1775]              __tmp__balance_ADDR := balance_ADDR;
[L1776]              __tmp__M_Ref_int := M_Ref_int;
[L1777]              __tmp__sum__balances0 := sum__balances0;
[L1778]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1779]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1780]              __tmp__sum__allowed1 := sum__allowed1;
[L1781]              __tmp__sum__lockTimes2 := sum__lockTimes2;
[L1782]              __tmp__sum__lockAmounts3 := sum__lockAmounts3;
[L1783]              __tmp__Length := Length;
[L1784]              __tmp__now := now;
[L1785]              __tmp___owner_Ownable := _owner_Ownable;
[L1786]              __tmp___balances_ERC20 := _balances_ERC20;
[L1787]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1788]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1789]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1790]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1791]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1792]              __tmp__stopped_Stoppable := stopped_Stoppable;
[L1793]              __tmp___lockTimes_EXEToken := _lockTimes_EXEToken;
[L1794]              __tmp___lockAmounts_EXEToken := _lockAmounts_EXEToken;
[L1795]  CALL        call EXEToken_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4280]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3343]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3328]              assume msgsender_MSG != null;
[L3329]              __tmp__Balance[this] := 0;
[L3343]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L4280]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4281]  COND FALSE  !(revert)
[L4284]  CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L3914]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3343]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3328]              assume msgsender_MSG != null;
[L3329]              __tmp__Balance[this] := 0;
[L3343]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3914]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3915]  COND FALSE  !(revert)
[L3918]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3887]              assume msgsender_MSG != null;
[L3888]              __tmp__Balance[this] := 0;
[L3889]              __tmp___name_ERC20Detailed[this] := 427332508;
[L3890]              __tmp___symbol_ERC20Detailed[this] := 427332508;
[L3891]              __tmp___decimals_ERC20Detailed[this] := 0;
[L3893]              __tmp___name_ERC20Detailed[this] := name_s778;
[L3894]              __tmp___symbol_ERC20Detailed[this] := symbol_s778;
[L3895]              __tmp___decimals_ERC20Detailed[this] := decimals_s778;
[L3918]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3919]  COND FALSE  !(revert)
[L4284]  RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L4285]  COND FALSE  !(revert)
[L4288]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3385]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3343]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3328]              assume msgsender_MSG != null;
[L3329]              __tmp__Balance[this] := 0;
[L3343]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3385]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3386]  COND FALSE  !(revert)
[L3389]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3360]              assume msgsender_MSG != null;
[L3361]              __tmp__Balance[this] := 0;
[L3362]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3363]              __tmp__sum__balances0[this] := 0;
[L3364]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L3365]              __tmp__sum__allowed1[this] := 0;
[L3366]              __tmp___totalSupply_ERC20[this] := 0;
[L3389]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3390]  COND FALSE  !(revert)
[L4288]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4289]  COND FALSE  !(revert)
[L4292]  CALL        call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3990]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3343]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3328]              assume msgsender_MSG != null;
[L3329]              __tmp__Balance[this] := 0;
[L3343]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3990]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3991]  COND FALSE  !(revert)
[L3994]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3385]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3343]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3328]              assume msgsender_MSG != null;
[L3329]              __tmp__Balance[this] := 0;
[L3343]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3385]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3386]  COND FALSE  !(revert)
[L3389]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3360]              assume msgsender_MSG != null;
[L3361]              __tmp__Balance[this] := 0;
[L3362]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3363]              __tmp__sum__balances0[this] := 0;
[L3364]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L3365]              __tmp__sum__allowed1[this] := 0;
[L3366]              __tmp___totalSupply_ERC20[this] := 0;
[L3389]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3390]  COND FALSE  !(revert)
[L3994]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3995]  COND FALSE  !(revert)
[L3998]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3975]              assume msgsender_MSG != null;
[L3976]              __tmp__Balance[this] := 0;
[L3998]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3999]  COND FALSE  !(revert)
[L4292]  RET         call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4293]  COND FALSE  !(revert)
[L4296]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3212]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3193]              assume msgsender_MSG != null;
[L3194]              __tmp__Balance[this] := 0;
[L3195]              __tmp___owner_Ownable[this] := null;
[L3197]              __tmp___owner_Ownable[this] := msgsender_MSG;
[L3212]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3213]  COND FALSE  !(revert)
[L4296]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4297]  COND FALSE  !(revert)
[L4300]  CALL        call Stoppable_Stoppable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4144]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3212]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3193]              assume msgsender_MSG != null;
[L3194]              __tmp__Balance[this] := 0;
[L3195]              __tmp___owner_Ownable[this] := null;
[L3197]              __tmp___owner_Ownable[this] := msgsender_MSG;
[L3212]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3213]  COND FALSE  !(revert)
[L4144]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4145]  COND FALSE  !(revert)
[L4148]  CALL        call Stoppable_Stoppable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              __tmp__Balance[this] := 0;
[L4129]              __tmp__stopped_Stoppable[this] := false;
[L4148]  RET         call Stoppable_Stoppable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4149]  COND FALSE  !(revert)
[L4300]  RET         call Stoppable_Stoppable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4301]  COND FALSE  !(revert)
[L4304]  CALL        call EXEToken_EXEToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4219]              assume msgsender_MSG != null;
[L4220]              __tmp__Balance[this] := 0;
[L4221]              __tmp___lockTimes_EXEToken[this] := zeroRefintArr();
[L4222]              __tmp__sum__lockTimes2[this] := 0;
[L4223]              __tmp___lockAmounts_EXEToken[this] := zeroRefintArr();
[L4224]              __tmp__sum__lockAmounts3[this] := 0;
[L4226]  COND TRUE   __tmp__DType[this] == EXEToken
[L4227]  CALL        call __var_23 := owner_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3228]              __ret_0_ := __tmp___owner_Ownable[this];
[L4227]  RET         call __var_23 := owner_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4228]  COND FALSE  !(revert)
[L4234]              __var_24 := decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4235]  COND TRUE   __tmp__DType[this] == EXEToken
[L4236]  CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3715]              __var_15 := null;
[L3716]  COND FALSE  !(!(account_s654 != null))
[L3720]  CALL        call __var_16 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s654);
[L3149]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3150]  COND FALSE  !(!(c_s106 >= a_s106))
[L3154]              __ret_0_ := c_s106;
[L3720]  RET         call __var_16 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s654);
[L3721]  COND FALSE  !(revert)
[L3724]              __tmp___totalSupply_ERC20[this] := __var_16;
[L3725]  CALL        call __var_17 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s654], amount_s654);
[L3149]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3150]  COND FALSE  !(!(c_s106 >= a_s106))
[L3154]              __ret_0_ := c_s106;
[L3725]  RET         call __var_17 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s654], amount_s654);
[L3726]  COND FALSE  !(revert)
[L3729]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s654];
[L3730]              __tmp___balances_ERC20[this][account_s654] := __var_17;
[L3731]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s654];
[L4236]  RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4237]  COND FALSE  !(revert)
[L4304]  RET         call EXEToken_EXEToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4305]  COND FALSE  !(revert)
[L1795]  RET         call EXEToken_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1796]              assume revert || gas < 0;
[L7043]  RET         call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L7044]              assume !revert && gas >= 0;
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND TRUE   choice == 16
[L6920]              gas := gas - 21000;
[L6921]  COND TRUE   gas >= 0
[L6922]              assume amount_s1083 >= 0 && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6923]              assume msgvalue_MSG == 0;
[L6924]  CALL        call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s1083 && (amount_s1083 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s1083] + amount_s1083 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s1083 >= 0) && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1083] >= 0) && _balances_ERC20[this][recipient_s1083] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_EXEToken0 := true;
[L2]                 call_transfer_EXEToken0 := false;
[L2]                 revert := revert_hold;
[L2033]              havoc __exception;
[L2034]              revert := false;
[L2035]  COND FALSE  !(__exception)
[L2062]  CALL        call __ret_0_ := transfer~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4537]  CALL        call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6067]  COND FALSE  !(!!stopped_Stoppable[this])
[L4537]  RET         call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4538]  COND FALSE  !(revert)
[L4541]  CALL        call __var_28 := _isLocked~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4479]  COND TRUE   DType[this] == EXEToken
[L4480]  CALL        call __var_25 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3427]              __ret_0_ := _balances_ERC20[this][owner_s312];
[L4480]  RET         call __var_25 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4481]  COND FALSE  !(revert)
[L4487]  COND TRUE   DType[this] == EXEToken
[L4488]  CALL        call __var_27 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3427]              __ret_0_ := _balances_ERC20[this][owner_s312];
[L4488]  RET         call __var_27 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4489]  COND FALSE  !(revert)
[L4495]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, __var_27, _lockAmounts_EXEToken[this][account_s1055]);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L4495]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, __var_27, _lockAmounts_EXEToken[this][account_s1055]);
[L4496]  COND FALSE  !(revert)
[L4499]              __ret_0_ := ((_lockTimes_EXEToken[this][account_s1055] != 0 && _lockAmounts_EXEToken[this][account_s1055] != 0) && _lockTimes_EXEToken[this][account_s1055] > now) && (__var_25 <= _lockAmounts_EXEToken[this][account_s1055] || __var_26 < amount_s1055);
[L4541]  RET         call __var_28 := _isLocked~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4542]  COND FALSE  !(revert)
[L4545]  COND FALSE  !(!!__var_28)
[L4549]  COND TRUE   DType[this] == EXEToken
[L4550]  CALL        call __var_29 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L3480]  COND FALSE  !(!(value_s389 <= _balances_ERC20[this][msgsender_MSG]))
[L3484]              __var_3 := null;
[L3485]  COND FALSE  !(!(to_s389 != null))
[L3489]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][msgsender_MSG], value_s389);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L3489]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][msgsender_MSG], value_s389);
[L3490]  COND FALSE  !(revert)
[L3493]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][msgsender_MSG];
[L3494]              _balances_ERC20[this][msgsender_MSG] := __var_4;
[L3495]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][msgsender_MSG];
[L3496]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s389], value_s389);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3496]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s389], value_s389);
[L3497]  COND FALSE  !(revert)
[L3500]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s389];
[L3501]              _balances_ERC20[this][to_s389] := __var_5;
[L3502]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s389];
[L3503]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3504]              __ret_0_ := true;
[L4550]  RET         call __var_29 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4551]  COND FALSE  !(revert)
[L4557]              __ret_0_ := __var_29;
[L2062]  RET         call __ret_0_ := transfer~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2063]              assume !revert && gas >= 0;
[L6924]  RET         call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L7047]  RET         call CorralChoice_EXEToken(this);

Loop:
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND TRUE   choice == 21
[L6890]              gas := gas - 21000;
[L6891]  COND FALSE  !(gas >= 0)
[L7047]  RET         call CorralChoice_EXEToken(this);

[2020-11-25 16:08:50,758 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:08:50,758 INFO  L82        PathProgramCache]: Analyzing trace with hash -387662761, now seen corresponding path program 1 times
[2020-11-25 16:08:50,759 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:08:50,771 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:08:50,861 INFO  L134       CoverageAnalysis]: Checked inductivity of 144 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 144 trivial. 0 not checked.
[2020-11-25 16:08:50,861 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:08:50,861 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 16:08:50,861 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:08:50,861 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 16:08:50,862 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 16:08:50,862 INFO  L87              Difference]: Start difference. First operand 3861 states and 4226 transitions. cyclomatic complexity: 368 Second operand 4 states.
[2020-11-25 16:08:50,982 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:08:50,983 INFO  L93              Difference]: Finished difference Result 4849 states and 5452 transitions.
[2020-11-25 16:08:50,983 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 16:08:50,983 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4849 states and 5452 transitions.
[2020-11-25 16:08:50,993 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 16:08:51,006 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4849 states to 4675 states and 5271 transitions.
[2020-11-25 16:08:51,006 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1112
[2020-11-25 16:08:51,007 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1112
[2020-11-25 16:08:51,007 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4675 states and 5271 transitions.
[2020-11-25 16:08:51,011 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:08:51,011 INFO  L728         BuchiCegarLoop]: Abstraction has 4675 states and 5271 transitions.
[2020-11-25 16:08:51,014 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4675 states and 5271 transitions.
[2020-11-25 16:08:51,039 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4675 to 3687.
[2020-11-25 16:08:51,039 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3687 states.
[2020-11-25 16:08:51,042 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3687 states to 3687 states and 4044 transitions.
[2020-11-25 16:08:51,042 INFO  L751         BuchiCegarLoop]: Abstraction has 3687 states and 4044 transitions.
[2020-11-25 16:08:51,042 INFO  L631         BuchiCegarLoop]: Abstraction has 3687 states and 4044 transitions.
[2020-11-25 16:08:51,042 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 16:08:51,043 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3687 states and 4044 transitions.
[2020-11-25 16:08:51,046 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:08:51,046 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:08:51,046 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:08:51,049 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:08:51,049 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_EXEToken0 := false;
[L2]                 call_transfer_EXEToken0 := false;
[L2]     CALL        call main();
[L7037]              assume null == 0;
[L7038]  CALL        call this := FreshRefGenerator__success();
[L3028]              havoc newRef;
[L3029]              assume Alloc[newRef] == false;
[L3030]              Alloc[newRef] := true;
[L3031]              assume newRef != null;
[L7038]  RET         call this := FreshRefGenerator__success();
[L7039]              assume now >= 0;
[L7040]              assume DType[this] == EXEToken;
[L7041]              assume msgvalue_MSG == 0;
[L7042]              gas := gas - 53000;
[L7043]  CALL        call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1769]              havoc __exception;
[L1770]              revert := false;
[L1771]  COND FALSE  !(__exception)
[L1798]  CALL        call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4314]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4314]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4315]  COND FALSE  !(revert)
[L4318]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L3926]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3926]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3927]  COND FALSE  !(revert)
[L3930]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3901]              assume msgsender_MSG != null;
[L3902]              Balance[this] := 0;
[L3903]              _name_ERC20Detailed[this] := 427332508;
[L3904]              _symbol_ERC20Detailed[this] := 427332508;
[L3905]              _decimals_ERC20Detailed[this] := 0;
[L3907]              _name_ERC20Detailed[this] := name_s778;
[L3908]              _symbol_ERC20Detailed[this] := symbol_s778;
[L3909]              _decimals_ERC20Detailed[this] := decimals_s778;
[L3930]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3931]  COND FALSE  !(revert)
[L4318]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L4319]  COND FALSE  !(revert)
[L4322]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3397]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3373]              assume msgsender_MSG != null;
[L3374]              Balance[this] := 0;
[L3375]              _balances_ERC20[this] := zeroRefintArr();
[L3376]              sum__balances0[this] := 0;
[L3377]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3378]              sum__allowed1[this] := 0;
[L3379]              _totalSupply_ERC20[this] := 0;
[L3401]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L4322]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4323]  COND FALSE  !(revert)
[L4326]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4006]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3397]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3373]              assume msgsender_MSG != null;
[L3374]              Balance[this] := 0;
[L3375]              _balances_ERC20[this] := zeroRefintArr();
[L3376]              sum__balances0[this] := 0;
[L3377]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3378]              sum__allowed1[this] := 0;
[L3379]              _totalSupply_ERC20[this] := 0;
[L3401]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L4010]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4014]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3983]              assume msgsender_MSG != null;
[L3984]              Balance[this] := 0;
[L4014]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4015]  COND FALSE  !(revert)
[L4326]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4327]  COND FALSE  !(revert)
[L4330]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3220]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3203]              assume msgsender_MSG != null;
[L3204]              Balance[this] := 0;
[L3205]              _owner_Ownable[this] := null;
[L3207]              _owner_Ownable[this] := msgsender_MSG;
[L3220]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  COND FALSE  !(revert)
[L4330]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4156]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3220]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3203]              assume msgsender_MSG != null;
[L3204]              Balance[this] := 0;
[L3205]              _owner_Ownable[this] := null;
[L3207]              _owner_Ownable[this] := msgsender_MSG;
[L3220]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  COND FALSE  !(revert)
[L4156]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4157]  COND FALSE  !(revert)
[L4160]  CALL        call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4136]              assume msgsender_MSG != null;
[L4137]              Balance[this] := 0;
[L4138]              stopped_Stoppable[this] := false;
[L4160]  RET         call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4161]  COND FALSE  !(revert)
[L4334]  RET         call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4250]              assume msgsender_MSG != null;
[L4251]              Balance[this] := 0;
[L4252]              _lockTimes_EXEToken[this] := zeroRefintArr();
[L4253]              sum__lockTimes2[this] := 0;
[L4254]              _lockAmounts_EXEToken[this] := zeroRefintArr();
[L4255]              sum__lockAmounts3[this] := 0;
[L4257]  COND TRUE   DType[this] == EXEToken
[L4258]  CALL        call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3234]              __ret_0_ := _owner_Ownable[this];
[L4258]  RET         call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]  COND FALSE  !(revert)
[L4265]              __var_24 := decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4266]  COND TRUE   DType[this] == EXEToken
[L4267]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3739]              __var_15 := null;
[L3740]  COND FALSE  !(!(account_s654 != null))
[L3744]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3744]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3745]  COND FALSE  !(revert)
[L3748]              _totalSupply_ERC20[this] := __var_16;
[L3749]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3749]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3750]  COND FALSE  !(revert)
[L3753]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s654];
[L3754]              _balances_ERC20[this][account_s654] := __var_17;
[L3755]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s654];
[L3756]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4267]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4268]  COND FALSE  !(revert)
[L4338]  RET         call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4339]  COND FALSE  !(revert)
[L1798]  RET         call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1799]              assume !revert && gas >= 0;
[L7043]  RET         call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L7044]              assume !revert && gas >= 0;
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND FALSE  !(choice == 16)
[L6926]  COND FALSE  !(choice == 15)
[L6933]  COND FALSE  !(choice == 14)
[L6940]  COND FALSE  !(choice == 13)
[L6947]  COND FALSE  !(choice == 12)
[L6954]  COND FALSE  !(choice == 11)
[L6960]  COND FALSE  !(choice == 10)
[L6966]  COND FALSE  !(choice == 9)
[L6972]  COND FALSE  !(choice == 8)
[L6979]  COND FALSE  !(choice == 7)
[L6986]  COND FALSE  !(choice == 6)
[L6992]  COND FALSE  !(choice == 5)
[L6998]  COND FALSE  !(choice == 4)
[L7004]  COND FALSE  !(choice == 3)
[L7011]  COND TRUE   choice == 2
[L7012]              gas := gas - 21000;
[L7013]  COND TRUE   gas >= 0
[L7014]              assume releaseTime_s988 >= 0 && releaseTime_s988 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7015]              assume amount_s988 >= 0 && amount_s988 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7016]              assume msgvalue_MSG == 0;
[L7017]  CALL        call setLock~address~uint256~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, account_s988, releaseTime_s988, amount_s988);
[L1905]              havoc __exception;
[L1906]              revert := false;
[L1907]  COND FALSE  !(__exception)
[L1934]  CALL        call setLock~address~uint256~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, account_s988, releaseTime_s988, amount_s988);
[L4418]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6033]  COND TRUE   DType[this] == EXEToken
[L6034]  CALL        call __var_1 := _isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3246]              __ret_0_ := msgsender_MSG == _owner_Ownable[this];
[L6034]  RET         call __var_1 := _isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6035]  COND FALSE  !(revert)
[L6051]  COND FALSE  !(!__var_1)
[L4418]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4419]  COND FALSE  !(revert)
[L4422]              sum__lockTimes2[this] := sum__lockTimes2[this] - _lockTimes_EXEToken[this][account_s988];
[L4423]              _lockTimes_EXEToken[this][account_s988] := releaseTime_s988;
[L4424]              sum__lockTimes2[this] := sum__lockTimes2[this] + _lockTimes_EXEToken[this][account_s988];
[L4425]              sum__lockAmounts3[this] := sum__lockAmounts3[this] - _lockAmounts_EXEToken[this][account_s988];
[L4426]              _lockAmounts_EXEToken[this][account_s988] := amount_s988;
[L4427]              sum__lockAmounts3[this] := sum__lockAmounts3[this] + _lockAmounts_EXEToken[this][account_s988];
[L4428]              assert { :EventEmitted "LockChanged_EXEToken" } true;
[L1934]  RET         call setLock~address~uint256~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, account_s988, releaseTime_s988, amount_s988);
[L1935]              assume !revert && gas >= 0;
[L7017]  RET         call setLock~address~uint256~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, account_s988, releaseTime_s988, amount_s988);
[L7047]  RET         call CorralChoice_EXEToken(this);
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND TRUE   choice == 16
[L6920]              gas := gas - 21000;
[L6921]  COND TRUE   gas >= 0
[L6922]              assume amount_s1083 >= 0 && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6923]              assume msgvalue_MSG == 0;
[L6924]  CALL        call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s1083 && (amount_s1083 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s1083] + amount_s1083 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s1083 >= 0) && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1083] >= 0) && _balances_ERC20[this][recipient_s1083] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_EXEToken0 := true;
[L2]                 call_transfer_EXEToken0 := false;
[L2]                 revert := revert_hold;
[L2033]              havoc __exception;
[L2034]              revert := false;
[L2035]  COND FALSE  !(__exception)
[L2062]  CALL        call __ret_0_ := transfer~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4537]  CALL        call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6067]  COND FALSE  !(!!stopped_Stoppable[this])
[L4537]  RET         call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4538]  COND FALSE  !(revert)
[L4541]  CALL        call __var_28 := _isLocked~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4479]  COND TRUE   DType[this] == EXEToken
[L4480]  CALL        call __var_25 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3427]              __ret_0_ := _balances_ERC20[this][owner_s312];
[L4480]  RET         call __var_25 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4481]  COND FALSE  !(revert)
[L4487]  COND TRUE   DType[this] == EXEToken
[L4488]  CALL        call __var_27 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3427]              __ret_0_ := _balances_ERC20[this][owner_s312];
[L4488]  RET         call __var_27 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4489]  COND FALSE  !(revert)
[L4495]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, __var_27, _lockAmounts_EXEToken[this][account_s1055]);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L4495]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, __var_27, _lockAmounts_EXEToken[this][account_s1055]);
[L4496]  COND FALSE  !(revert)
[L4499]              __ret_0_ := ((_lockTimes_EXEToken[this][account_s1055] != 0 && _lockAmounts_EXEToken[this][account_s1055] != 0) && _lockTimes_EXEToken[this][account_s1055] > now) && (__var_25 <= _lockAmounts_EXEToken[this][account_s1055] || __var_26 < amount_s1055);
[L4541]  RET         call __var_28 := _isLocked~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4542]  COND FALSE  !(revert)
[L4545]  COND FALSE  !(!!__var_28)
[L4549]  COND TRUE   DType[this] == EXEToken
[L4550]  CALL        call __var_29 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L3480]  COND FALSE  !(!(value_s389 <= _balances_ERC20[this][msgsender_MSG]))
[L3484]              __var_3 := null;
[L3485]  COND FALSE  !(!(to_s389 != null))
[L3489]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][msgsender_MSG], value_s389);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L3489]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][msgsender_MSG], value_s389);
[L3490]  COND FALSE  !(revert)
[L3493]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][msgsender_MSG];
[L3494]              _balances_ERC20[this][msgsender_MSG] := __var_4;
[L3495]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][msgsender_MSG];
[L3496]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s389], value_s389);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3496]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s389], value_s389);
[L3497]  COND FALSE  !(revert)
[L3500]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s389];
[L3501]              _balances_ERC20[this][to_s389] := __var_5;
[L3502]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s389];
[L3503]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3504]              __ret_0_ := true;
[L4550]  RET         call __var_29 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4551]  COND FALSE  !(revert)
[L4557]              __ret_0_ := __var_29;
[L2062]  RET         call __ret_0_ := transfer~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2063]              assume !revert && gas >= 0;
[L6924]  RET         call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L7047]  RET         call CorralChoice_EXEToken(this);

Loop:
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND TRUE   choice == 16
[L6920]              gas := gas - 21000;
[L6921]  COND TRUE   gas >= 0
[L6922]              assume amount_s1083 >= 0 && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6923]              assume msgvalue_MSG == 0;
[L6924]  CALL        call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s1083 && (amount_s1083 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s1083] + amount_s1083 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s1083 >= 0) && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1083] >= 0) && _balances_ERC20[this][recipient_s1083] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_EXEToken0 := true;
[L2]                 call_transfer_EXEToken0 := false;
[L2]                 revert := revert_hold;
[L2033]              havoc __exception;
[L2034]              revert := false;
[L2035]  COND FALSE  !(__exception)
[L2062]  CALL        call __ret_0_ := transfer~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4537]  CALL        call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6067]  COND FALSE  !(!!stopped_Stoppable[this])
[L4537]  RET         call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4538]  COND FALSE  !(revert)
[L4541]  CALL        call __var_28 := _isLocked~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4479]  COND TRUE   DType[this] == EXEToken
[L4480]  CALL        call __var_25 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3427]              __ret_0_ := _balances_ERC20[this][owner_s312];
[L4480]  RET         call __var_25 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4481]  COND FALSE  !(revert)
[L4487]  COND TRUE   DType[this] == EXEToken
[L4488]  CALL        call __var_27 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3427]              __ret_0_ := _balances_ERC20[this][owner_s312];
[L4488]  RET         call __var_27 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4489]  COND FALSE  !(revert)
[L4495]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, __var_27, _lockAmounts_EXEToken[this][account_s1055]);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L4495]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, __var_27, _lockAmounts_EXEToken[this][account_s1055]);
[L4496]  COND FALSE  !(revert)
[L4499]              __ret_0_ := ((_lockTimes_EXEToken[this][account_s1055] != 0 && _lockAmounts_EXEToken[this][account_s1055] != 0) && _lockTimes_EXEToken[this][account_s1055] > now) && (__var_25 <= _lockAmounts_EXEToken[this][account_s1055] || __var_26 < amount_s1055);
[L4541]  RET         call __var_28 := _isLocked~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4542]  COND FALSE  !(revert)
[L4545]  COND FALSE  !(!!__var_28)
[L4549]  COND TRUE   DType[this] == EXEToken
[L4550]  CALL        call __var_29 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L3480]  COND FALSE  !(!(value_s389 <= _balances_ERC20[this][msgsender_MSG]))
[L3484]              __var_3 := null;
[L3485]  COND FALSE  !(!(to_s389 != null))
[L3489]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][msgsender_MSG], value_s389);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L3489]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][msgsender_MSG], value_s389);
[L3490]  COND FALSE  !(revert)
[L3493]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][msgsender_MSG];
[L3494]              _balances_ERC20[this][msgsender_MSG] := __var_4;
[L3495]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][msgsender_MSG];
[L3496]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s389], value_s389);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3496]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s389], value_s389);
[L3497]  COND FALSE  !(revert)
[L3500]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s389];
[L3501]              _balances_ERC20[this][to_s389] := __var_5;
[L3502]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s389];
[L3503]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3504]              __ret_0_ := true;
[L4550]  RET         call __var_29 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4551]  COND FALSE  !(revert)
[L4557]              __ret_0_ := __var_29;
[L2062]  RET         call __ret_0_ := transfer~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2063]              assume !revert && gas >= 0;
[L6924]  RET         call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L7047]  RET         call CorralChoice_EXEToken(this);

[2020-11-25 16:08:51,054 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:08:51,054 INFO  L82        PathProgramCache]: Analyzing trace with hash 1903306855, now seen corresponding path program 1 times
[2020-11-25 16:08:51,055 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:08:51,073 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:08:51,454 INFO  L134       CoverageAnalysis]: Checked inductivity of 218 backedges. 16 proven. 0 refuted. 0 times theorem prover too weak. 202 trivial. 0 not checked.
[2020-11-25 16:08:51,454 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:08:51,454 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [22] imperfect sequences [] total 22
[2020-11-25 16:08:51,455 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:08:51,455 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 23 interpolants.
[2020-11-25 16:08:51,456 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=56, Invalid=450, Unknown=0, NotChecked=0, Total=506
[2020-11-25 16:08:51,456 INFO  L87              Difference]: Start difference. First operand 3687 states and 4044 transitions. cyclomatic complexity: 360 Second operand 23 states.
[2020-11-25 16:08:54,527 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:08:54,527 INFO  L93              Difference]: Finished difference Result 3737 states and 4099 transitions.
[2020-11-25 16:08:54,527 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 24 states. 
[2020-11-25 16:08:54,527 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3737 states and 4099 transitions.
[2020-11-25 16:08:54,534 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:08:54,541 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3737 states to 3737 states and 4099 transitions.
[2020-11-25 16:08:54,541 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 911
[2020-11-25 16:08:54,541 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 911
[2020-11-25 16:08:54,541 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3737 states and 4099 transitions.
[2020-11-25 16:08:54,544 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:08:54,544 INFO  L728         BuchiCegarLoop]: Abstraction has 3737 states and 4099 transitions.
[2020-11-25 16:08:54,547 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3737 states and 4099 transitions.
[2020-11-25 16:08:54,589 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3737 to 3684.
[2020-11-25 16:08:54,589 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3684 states.
[2020-11-25 16:08:54,593 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3684 states to 3684 states and 4041 transitions.
[2020-11-25 16:08:54,593 INFO  L751         BuchiCegarLoop]: Abstraction has 3684 states and 4041 transitions.
[2020-11-25 16:08:54,593 INFO  L631         BuchiCegarLoop]: Abstraction has 3684 states and 4041 transitions.
[2020-11-25 16:08:54,593 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 16:08:54,593 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3684 states and 4041 transitions.
[2020-11-25 16:08:54,596 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:08:54,597 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:08:54,597 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:08:54,598 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:08:54,598 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_EXEToken0 := false;
[L2]                 call_transfer_EXEToken0 := false;
[L2]     CALL        call main();
[L7037]              assume null == 0;
[L7038]  CALL        call this := FreshRefGenerator__success();
[L3028]              havoc newRef;
[L3029]              assume Alloc[newRef] == false;
[L3030]              Alloc[newRef] := true;
[L3031]              assume newRef != null;
[L7038]  RET         call this := FreshRefGenerator__success();
[L7039]              assume now >= 0;
[L7040]              assume DType[this] == EXEToken;
[L7041]              assume msgvalue_MSG == 0;
[L7042]              gas := gas - 53000;
[L7043]  CALL        call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1769]              havoc __exception;
[L1770]              revert := false;
[L1771]  COND FALSE  !(__exception)
[L1798]  CALL        call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4314]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4314]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4315]  COND FALSE  !(revert)
[L4318]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L3926]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3926]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3927]  COND FALSE  !(revert)
[L3930]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3901]              assume msgsender_MSG != null;
[L3902]              Balance[this] := 0;
[L3903]              _name_ERC20Detailed[this] := 427332508;
[L3904]              _symbol_ERC20Detailed[this] := 427332508;
[L3905]              _decimals_ERC20Detailed[this] := 0;
[L3907]              _name_ERC20Detailed[this] := name_s778;
[L3908]              _symbol_ERC20Detailed[this] := symbol_s778;
[L3909]              _decimals_ERC20Detailed[this] := decimals_s778;
[L3930]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3931]  COND FALSE  !(revert)
[L4318]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L4319]  COND FALSE  !(revert)
[L4322]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3397]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3373]              assume msgsender_MSG != null;
[L3374]              Balance[this] := 0;
[L3375]              _balances_ERC20[this] := zeroRefintArr();
[L3376]              sum__balances0[this] := 0;
[L3377]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3378]              sum__allowed1[this] := 0;
[L3379]              _totalSupply_ERC20[this] := 0;
[L3401]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L4322]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4323]  COND FALSE  !(revert)
[L4326]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4006]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3397]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3373]              assume msgsender_MSG != null;
[L3374]              Balance[this] := 0;
[L3375]              _balances_ERC20[this] := zeroRefintArr();
[L3376]              sum__balances0[this] := 0;
[L3377]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3378]              sum__allowed1[this] := 0;
[L3379]              _totalSupply_ERC20[this] := 0;
[L3401]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L4010]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4014]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3983]              assume msgsender_MSG != null;
[L3984]              Balance[this] := 0;
[L4014]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4015]  COND FALSE  !(revert)
[L4326]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4327]  COND FALSE  !(revert)
[L4330]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3220]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3203]              assume msgsender_MSG != null;
[L3204]              Balance[this] := 0;
[L3205]              _owner_Ownable[this] := null;
[L3207]              _owner_Ownable[this] := msgsender_MSG;
[L3220]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  COND FALSE  !(revert)
[L4330]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4156]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3220]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3203]              assume msgsender_MSG != null;
[L3204]              Balance[this] := 0;
[L3205]              _owner_Ownable[this] := null;
[L3207]              _owner_Ownable[this] := msgsender_MSG;
[L3220]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  COND FALSE  !(revert)
[L4156]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4157]  COND FALSE  !(revert)
[L4160]  CALL        call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4136]              assume msgsender_MSG != null;
[L4137]              Balance[this] := 0;
[L4138]              stopped_Stoppable[this] := false;
[L4160]  RET         call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4161]  COND FALSE  !(revert)
[L4334]  RET         call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4250]              assume msgsender_MSG != null;
[L4251]              Balance[this] := 0;
[L4252]              _lockTimes_EXEToken[this] := zeroRefintArr();
[L4253]              sum__lockTimes2[this] := 0;
[L4254]              _lockAmounts_EXEToken[this] := zeroRefintArr();
[L4255]              sum__lockAmounts3[this] := 0;
[L4257]  COND TRUE   DType[this] == EXEToken
[L4258]  CALL        call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3234]              __ret_0_ := _owner_Ownable[this];
[L4258]  RET         call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]  COND FALSE  !(revert)
[L4265]              __var_24 := decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4266]  COND TRUE   DType[this] == EXEToken
[L4267]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3739]              __var_15 := null;
[L3740]  COND FALSE  !(!(account_s654 != null))
[L3744]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3744]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3745]  COND FALSE  !(revert)
[L3748]              _totalSupply_ERC20[this] := __var_16;
[L3749]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3749]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3750]  COND FALSE  !(revert)
[L3753]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s654];
[L3754]              _balances_ERC20[this][account_s654] := __var_17;
[L3755]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s654];
[L3756]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4267]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4268]  COND FALSE  !(revert)
[L4338]  RET         call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4339]  COND FALSE  !(revert)
[L1798]  RET         call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1799]              assume !revert && gas >= 0;
[L7043]  RET         call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L7044]              assume !revert && gas >= 0;
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND FALSE  !(choice == 16)
[L6926]  COND FALSE  !(choice == 15)
[L6933]  COND FALSE  !(choice == 14)
[L6940]  COND FALSE  !(choice == 13)
[L6947]  COND FALSE  !(choice == 12)
[L6954]  COND FALSE  !(choice == 11)
[L6960]  COND FALSE  !(choice == 10)
[L6966]  COND FALSE  !(choice == 9)
[L6972]  COND TRUE   choice == 8
[L6973]              gas := gas - 21000;
[L6974]  COND TRUE   gas >= 0
[L6975]              assume value_s817 >= 0 && value_s817 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6976]              assume msgvalue_MSG == 0;
[L6977]  CALL        call burn~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, value_s817);
[L1353]              havoc __exception;
[L1354]              revert := false;
[L1355]  COND FALSE  !(__exception)
[L1382]  CALL        call burn~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, value_s817);
[L4039]  COND FALSE  !(DType[this] == EXEToken)
[L4044]  COND TRUE   DType[this] == ERC20Burnable
[L4045]  CALL        call _burn~address~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, value_s817);
[L4109]  COND TRUE   DType[this] == EXEToken
[L4110]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, who_s845, value_s845);
[L3792]              __var_18 := null;
[L3793]  COND FALSE  !(!(account_s705 != null))
[L3797]  COND FALSE  !(!(amount_s705 <= _balances_ERC20[this][account_s705]))
[L3801]  CALL        call __var_19 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s705);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L3801]  RET         call __var_19 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s705);
[L3802]  COND FALSE  !(revert)
[L3805]              _totalSupply_ERC20[this] := __var_19;
[L3806]  CALL        call __var_20 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s705], amount_s705);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L3806]  RET         call __var_20 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s705], amount_s705);
[L3807]  COND FALSE  !(revert)
[L3810]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s705];
[L3811]              _balances_ERC20[this][account_s705] := __var_20;
[L3812]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s705];
[L3813]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4110]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, who_s845, value_s845);
[L4111]  COND FALSE  !(revert)
[L4045]  RET         call _burn~address~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, value_s817);
[L4046]  COND FALSE  !(revert)
[L1382]  RET         call burn~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, value_s817);
[L1383]              assume !revert && gas >= 0;
[L6977]  RET         call burn~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, value_s817);
[L7047]  RET         call CorralChoice_EXEToken(this);
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND TRUE   choice == 16
[L6920]              gas := gas - 21000;
[L6921]  COND TRUE   gas >= 0
[L6922]              assume amount_s1083 >= 0 && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6923]              assume msgvalue_MSG == 0;
[L6924]  CALL        call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s1083 && (amount_s1083 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s1083] + amount_s1083 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s1083 >= 0) && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1083] >= 0) && _balances_ERC20[this][recipient_s1083] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_EXEToken0 := true;
[L2]                 call_transfer_EXEToken0 := false;
[L2]                 revert := revert_hold;
[L2033]              havoc __exception;
[L2034]              revert := false;
[L2035]  COND FALSE  !(__exception)
[L2062]  CALL        call __ret_0_ := transfer~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4537]  CALL        call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6067]  COND FALSE  !(!!stopped_Stoppable[this])
[L4537]  RET         call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4538]  COND FALSE  !(revert)
[L4541]  CALL        call __var_28 := _isLocked~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4479]  COND TRUE   DType[this] == EXEToken
[L4480]  CALL        call __var_25 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3427]              __ret_0_ := _balances_ERC20[this][owner_s312];
[L4480]  RET         call __var_25 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4481]  COND FALSE  !(revert)
[L4487]  COND TRUE   DType[this] == EXEToken
[L4488]  CALL        call __var_27 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3427]              __ret_0_ := _balances_ERC20[this][owner_s312];
[L4488]  RET         call __var_27 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4489]  COND FALSE  !(revert)
[L4495]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, __var_27, _lockAmounts_EXEToken[this][account_s1055]);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L4495]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, __var_27, _lockAmounts_EXEToken[this][account_s1055]);
[L4496]  COND FALSE  !(revert)
[L4499]              __ret_0_ := ((_lockTimes_EXEToken[this][account_s1055] != 0 && _lockAmounts_EXEToken[this][account_s1055] != 0) && _lockTimes_EXEToken[this][account_s1055] > now) && (__var_25 <= _lockAmounts_EXEToken[this][account_s1055] || __var_26 < amount_s1055);
[L4541]  RET         call __var_28 := _isLocked~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4542]  COND FALSE  !(revert)
[L4545]  COND FALSE  !(!!__var_28)
[L4549]  COND TRUE   DType[this] == EXEToken
[L4550]  CALL        call __var_29 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L3480]  COND FALSE  !(!(value_s389 <= _balances_ERC20[this][msgsender_MSG]))
[L3484]              __var_3 := null;
[L3485]  COND FALSE  !(!(to_s389 != null))
[L3489]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][msgsender_MSG], value_s389);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L3489]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][msgsender_MSG], value_s389);
[L3490]  COND FALSE  !(revert)
[L3493]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][msgsender_MSG];
[L3494]              _balances_ERC20[this][msgsender_MSG] := __var_4;
[L3495]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][msgsender_MSG];
[L3496]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s389], value_s389);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3496]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s389], value_s389);
[L3497]  COND FALSE  !(revert)
[L3500]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s389];
[L3501]              _balances_ERC20[this][to_s389] := __var_5;
[L3502]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s389];
[L3503]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3504]              __ret_0_ := true;
[L4550]  RET         call __var_29 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4551]  COND FALSE  !(revert)
[L4557]              __ret_0_ := __var_29;
[L2062]  RET         call __ret_0_ := transfer~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2063]              assume !revert && gas >= 0;
[L6924]  RET         call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L7047]  RET         call CorralChoice_EXEToken(this);

Loop:
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND TRUE   choice == 21
[L6890]              gas := gas - 21000;
[L6891]  COND FALSE  !(gas >= 0)
[L7047]  RET         call CorralChoice_EXEToken(this);

[2020-11-25 16:08:54,605 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:08:54,605 INFO  L82        PathProgramCache]: Analyzing trace with hash -1463907561, now seen corresponding path program 1 times
[2020-11-25 16:08:54,606 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:08:54,619 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:08:54,709 INFO  L134       CoverageAnalysis]: Checked inductivity of 223 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 222 trivial. 0 not checked.
[2020-11-25 16:08:54,709 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:08:54,710 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 16:08:54,710 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:08:54,710 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 16:08:54,710 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 16:08:54,710 INFO  L87              Difference]: Start difference. First operand 3684 states and 4041 transitions. cyclomatic complexity: 360 Second operand 6 states.
[2020-11-25 16:08:54,752 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:08:54,752 INFO  L93              Difference]: Finished difference Result 3702 states and 4057 transitions.
[2020-11-25 16:08:54,752 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 16:08:54,752 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3702 states and 4057 transitions.
[2020-11-25 16:08:54,757 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:08:54,764 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3702 states to 3674 states and 4027 transitions.
[2020-11-25 16:08:54,764 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 898
[2020-11-25 16:08:54,764 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 898
[2020-11-25 16:08:54,764 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3674 states and 4027 transitions.
[2020-11-25 16:08:54,766 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:08:54,766 INFO  L728         BuchiCegarLoop]: Abstraction has 3674 states and 4027 transitions.
[2020-11-25 16:08:54,769 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3674 states and 4027 transitions.
[2020-11-25 16:08:54,784 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3674 to 3674.
[2020-11-25 16:08:54,784 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3674 states.
[2020-11-25 16:08:54,787 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3674 states to 3674 states and 4027 transitions.
[2020-11-25 16:08:54,787 INFO  L751         BuchiCegarLoop]: Abstraction has 3674 states and 4027 transitions.
[2020-11-25 16:08:54,788 INFO  L631         BuchiCegarLoop]: Abstraction has 3674 states and 4027 transitions.
[2020-11-25 16:08:54,788 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 16:08:54,788 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3674 states and 4027 transitions.
[2020-11-25 16:08:54,791 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:08:54,791 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:08:54,791 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:08:54,793 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:08:54,793 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_EXEToken0 := false;
[L2]                 call_transfer_EXEToken0 := false;
[L2]     CALL        call main();
[L7037]              assume null == 0;
[L7038]  CALL        call this := FreshRefGenerator__success();
[L3028]              havoc newRef;
[L3029]              assume Alloc[newRef] == false;
[L3030]              Alloc[newRef] := true;
[L3031]              assume newRef != null;
[L7038]  RET         call this := FreshRefGenerator__success();
[L7039]              assume now >= 0;
[L7040]              assume DType[this] == EXEToken;
[L7041]              assume msgvalue_MSG == 0;
[L7042]              gas := gas - 53000;
[L7043]  CALL        call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1769]              havoc __exception;
[L1770]              revert := false;
[L1771]  COND FALSE  !(__exception)
[L1798]  CALL        call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4314]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4314]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4315]  COND FALSE  !(revert)
[L4318]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L3926]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3926]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3927]  COND FALSE  !(revert)
[L3930]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3901]              assume msgsender_MSG != null;
[L3902]              Balance[this] := 0;
[L3903]              _name_ERC20Detailed[this] := 427332508;
[L3904]              _symbol_ERC20Detailed[this] := 427332508;
[L3905]              _decimals_ERC20Detailed[this] := 0;
[L3907]              _name_ERC20Detailed[this] := name_s778;
[L3908]              _symbol_ERC20Detailed[this] := symbol_s778;
[L3909]              _decimals_ERC20Detailed[this] := decimals_s778;
[L3930]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3931]  COND FALSE  !(revert)
[L4318]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L4319]  COND FALSE  !(revert)
[L4322]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3397]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3373]              assume msgsender_MSG != null;
[L3374]              Balance[this] := 0;
[L3375]              _balances_ERC20[this] := zeroRefintArr();
[L3376]              sum__balances0[this] := 0;
[L3377]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3378]              sum__allowed1[this] := 0;
[L3379]              _totalSupply_ERC20[this] := 0;
[L3401]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L4322]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4323]  COND FALSE  !(revert)
[L4326]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4006]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3397]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3373]              assume msgsender_MSG != null;
[L3374]              Balance[this] := 0;
[L3375]              _balances_ERC20[this] := zeroRefintArr();
[L3376]              sum__balances0[this] := 0;
[L3377]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3378]              sum__allowed1[this] := 0;
[L3379]              _totalSupply_ERC20[this] := 0;
[L3401]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L4010]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4014]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3983]              assume msgsender_MSG != null;
[L3984]              Balance[this] := 0;
[L4014]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4015]  COND FALSE  !(revert)
[L4326]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4327]  COND FALSE  !(revert)
[L4330]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3220]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3203]              assume msgsender_MSG != null;
[L3204]              Balance[this] := 0;
[L3205]              _owner_Ownable[this] := null;
[L3207]              _owner_Ownable[this] := msgsender_MSG;
[L3220]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  COND FALSE  !(revert)
[L4330]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4156]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3220]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3203]              assume msgsender_MSG != null;
[L3204]              Balance[this] := 0;
[L3205]              _owner_Ownable[this] := null;
[L3207]              _owner_Ownable[this] := msgsender_MSG;
[L3220]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  COND FALSE  !(revert)
[L4156]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4157]  COND FALSE  !(revert)
[L4160]  CALL        call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4136]              assume msgsender_MSG != null;
[L4137]              Balance[this] := 0;
[L4138]              stopped_Stoppable[this] := false;
[L4160]  RET         call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4161]  COND FALSE  !(revert)
[L4334]  RET         call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4250]              assume msgsender_MSG != null;
[L4251]              Balance[this] := 0;
[L4252]              _lockTimes_EXEToken[this] := zeroRefintArr();
[L4253]              sum__lockTimes2[this] := 0;
[L4254]              _lockAmounts_EXEToken[this] := zeroRefintArr();
[L4255]              sum__lockAmounts3[this] := 0;
[L4257]  COND TRUE   DType[this] == EXEToken
[L4258]  CALL        call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3234]              __ret_0_ := _owner_Ownable[this];
[L4258]  RET         call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]  COND FALSE  !(revert)
[L4265]              __var_24 := decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4266]  COND TRUE   DType[this] == EXEToken
[L4267]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3739]              __var_15 := null;
[L3740]  COND FALSE  !(!(account_s654 != null))
[L3744]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3744]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3745]  COND FALSE  !(revert)
[L3748]              _totalSupply_ERC20[this] := __var_16;
[L3749]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3749]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3750]  COND FALSE  !(revert)
[L3753]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s654];
[L3754]              _balances_ERC20[this][account_s654] := __var_17;
[L3755]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s654];
[L3756]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4267]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4268]  COND FALSE  !(revert)
[L4338]  RET         call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4339]  COND FALSE  !(revert)
[L1798]  RET         call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1799]              assume !revert && gas >= 0;
[L7043]  RET         call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L7044]              assume !revert && gas >= 0;
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND FALSE  !(choice == 16)
[L6926]  COND FALSE  !(choice == 15)
[L6933]  COND FALSE  !(choice == 14)
[L6940]  COND FALSE  !(choice == 13)
[L6947]  COND FALSE  !(choice == 12)
[L6954]  COND FALSE  !(choice == 11)
[L6960]  COND FALSE  !(choice == 10)
[L6966]  COND FALSE  !(choice == 9)
[L6972]  COND TRUE   choice == 8
[L6973]              gas := gas - 21000;
[L6974]  COND TRUE   gas >= 0
[L6975]              assume value_s817 >= 0 && value_s817 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6976]              assume msgvalue_MSG == 0;
[L6977]  CALL        call burn~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, value_s817);
[L1353]              havoc __exception;
[L1354]              revert := false;
[L1355]  COND FALSE  !(__exception)
[L1382]  CALL        call burn~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, value_s817);
[L4039]  COND TRUE   DType[this] == EXEToken
[L4040]  CALL        call _burn~address~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, value_s817);
[L4109]  COND FALSE  !(DType[this] == EXEToken)
[L4114]  COND TRUE   DType[this] == ERC20Burnable
[L4115]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, who_s845, value_s845);
[L3792]              __var_18 := null;
[L3793]  COND FALSE  !(!(account_s705 != null))
[L3797]  COND FALSE  !(!(amount_s705 <= _balances_ERC20[this][account_s705]))
[L3801]  CALL        call __var_19 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s705);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L3801]  RET         call __var_19 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s705);
[L3802]  COND FALSE  !(revert)
[L3805]              _totalSupply_ERC20[this] := __var_19;
[L3806]  CALL        call __var_20 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s705], amount_s705);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L3806]  RET         call __var_20 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s705], amount_s705);
[L3807]  COND FALSE  !(revert)
[L3810]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s705];
[L3811]              _balances_ERC20[this][account_s705] := __var_20;
[L3812]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s705];
[L3813]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4115]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, who_s845, value_s845);
[L4116]  COND FALSE  !(revert)
[L4040]  RET         call _burn~address~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, value_s817);
[L4041]  COND FALSE  !(revert)
[L1382]  RET         call burn~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, value_s817);
[L1383]              assume !revert && gas >= 0;
[L6977]  RET         call burn~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, value_s817);
[L7047]  RET         call CorralChoice_EXEToken(this);
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND TRUE   choice == 16
[L6920]              gas := gas - 21000;
[L6921]  COND TRUE   gas >= 0
[L6922]              assume amount_s1083 >= 0 && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6923]              assume msgvalue_MSG == 0;
[L6924]  CALL        call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s1083 && (amount_s1083 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s1083] + amount_s1083 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s1083 >= 0) && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1083] >= 0) && _balances_ERC20[this][recipient_s1083] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_EXEToken0 := true;
[L2]                 call_transfer_EXEToken0 := false;
[L2]                 revert := revert_hold;
[L2033]              havoc __exception;
[L2034]              revert := false;
[L2035]  COND FALSE  !(__exception)
[L2062]  CALL        call __ret_0_ := transfer~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4537]  CALL        call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6067]  COND FALSE  !(!!stopped_Stoppable[this])
[L4537]  RET         call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4538]  COND FALSE  !(revert)
[L4541]  CALL        call __var_28 := _isLocked~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4479]  COND TRUE   DType[this] == EXEToken
[L4480]  CALL        call __var_25 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3427]              __ret_0_ := _balances_ERC20[this][owner_s312];
[L4480]  RET         call __var_25 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4481]  COND FALSE  !(revert)
[L4487]  COND TRUE   DType[this] == EXEToken
[L4488]  CALL        call __var_27 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3427]              __ret_0_ := _balances_ERC20[this][owner_s312];
[L4488]  RET         call __var_27 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4489]  COND FALSE  !(revert)
[L4495]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, __var_27, _lockAmounts_EXEToken[this][account_s1055]);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L4495]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, __var_27, _lockAmounts_EXEToken[this][account_s1055]);
[L4496]  COND FALSE  !(revert)
[L4499]              __ret_0_ := ((_lockTimes_EXEToken[this][account_s1055] != 0 && _lockAmounts_EXEToken[this][account_s1055] != 0) && _lockTimes_EXEToken[this][account_s1055] > now) && (__var_25 <= _lockAmounts_EXEToken[this][account_s1055] || __var_26 < amount_s1055);
[L4541]  RET         call __var_28 := _isLocked~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4542]  COND FALSE  !(revert)
[L4545]  COND FALSE  !(!!__var_28)
[L4549]  COND TRUE   DType[this] == EXEToken
[L4550]  CALL        call __var_29 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L3480]  COND FALSE  !(!(value_s389 <= _balances_ERC20[this][msgsender_MSG]))
[L3484]              __var_3 := null;
[L3485]  COND FALSE  !(!(to_s389 != null))
[L3489]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][msgsender_MSG], value_s389);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L3489]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][msgsender_MSG], value_s389);
[L3490]  COND FALSE  !(revert)
[L3493]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][msgsender_MSG];
[L3494]              _balances_ERC20[this][msgsender_MSG] := __var_4;
[L3495]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][msgsender_MSG];
[L3496]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s389], value_s389);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3496]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s389], value_s389);
[L3497]  COND FALSE  !(revert)
[L3500]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s389];
[L3501]              _balances_ERC20[this][to_s389] := __var_5;
[L3502]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s389];
[L3503]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3504]              __ret_0_ := true;
[L4550]  RET         call __var_29 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4551]  COND FALSE  !(revert)
[L4557]              __ret_0_ := __var_29;
[L2062]  RET         call __ret_0_ := transfer~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2063]              assume !revert && gas >= 0;
[L6924]  RET         call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L7047]  RET         call CorralChoice_EXEToken(this);

Loop:
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND TRUE   choice == 16
[L6920]              gas := gas - 21000;
[L6921]  COND TRUE   gas >= 0
[L6922]              assume amount_s1083 >= 0 && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6923]              assume msgvalue_MSG == 0;
[L6924]  CALL        call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s1083 && (amount_s1083 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s1083] + amount_s1083 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s1083 >= 0) && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1083] >= 0) && _balances_ERC20[this][recipient_s1083] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_EXEToken0 := true;
[L2]                 call_transfer_EXEToken0 := false;
[L2]                 revert := revert_hold;
[L2033]              havoc __exception;
[L2034]              revert := false;
[L2035]  COND FALSE  !(__exception)
[L2062]  CALL        call __ret_0_ := transfer~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4537]  CALL        call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6067]  COND FALSE  !(!!stopped_Stoppable[this])
[L4537]  RET         call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4538]  COND FALSE  !(revert)
[L4541]  CALL        call __var_28 := _isLocked~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4479]  COND TRUE   DType[this] == EXEToken
[L4480]  CALL        call __var_25 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3427]              __ret_0_ := _balances_ERC20[this][owner_s312];
[L4480]  RET         call __var_25 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4481]  COND FALSE  !(revert)
[L4487]  COND TRUE   DType[this] == EXEToken
[L4488]  CALL        call __var_27 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3427]              __ret_0_ := _balances_ERC20[this][owner_s312];
[L4488]  RET         call __var_27 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4489]  COND FALSE  !(revert)
[L4495]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, __var_27, _lockAmounts_EXEToken[this][account_s1055]);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L4495]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, __var_27, _lockAmounts_EXEToken[this][account_s1055]);
[L4496]  COND FALSE  !(revert)
[L4499]              __ret_0_ := ((_lockTimes_EXEToken[this][account_s1055] != 0 && _lockAmounts_EXEToken[this][account_s1055] != 0) && _lockTimes_EXEToken[this][account_s1055] > now) && (__var_25 <= _lockAmounts_EXEToken[this][account_s1055] || __var_26 < amount_s1055);
[L4541]  RET         call __var_28 := _isLocked~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4542]  COND FALSE  !(revert)
[L4545]  COND FALSE  !(!!__var_28)
[L4549]  COND TRUE   DType[this] == EXEToken
[L4550]  CALL        call __var_29 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L3480]  COND FALSE  !(!(value_s389 <= _balances_ERC20[this][msgsender_MSG]))
[L3484]              __var_3 := null;
[L3485]  COND FALSE  !(!(to_s389 != null))
[L3489]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][msgsender_MSG], value_s389);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L3489]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][msgsender_MSG], value_s389);
[L3490]  COND FALSE  !(revert)
[L3493]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][msgsender_MSG];
[L3494]              _balances_ERC20[this][msgsender_MSG] := __var_4;
[L3495]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][msgsender_MSG];
[L3496]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s389], value_s389);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3496]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s389], value_s389);
[L3497]  COND FALSE  !(revert)
[L3500]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s389];
[L3501]              _balances_ERC20[this][to_s389] := __var_5;
[L3502]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s389];
[L3503]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3504]              __ret_0_ := true;
[L4550]  RET         call __var_29 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4551]  COND FALSE  !(revert)
[L4557]              __ret_0_ := __var_29;
[L2062]  RET         call __ret_0_ := transfer~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2063]              assume !revert && gas >= 0;
[L6924]  RET         call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L7047]  RET         call CorralChoice_EXEToken(this);

[2020-11-25 16:08:54,797 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:08:54,797 INFO  L82        PathProgramCache]: Analyzing trace with hash -571144490, now seen corresponding path program 1 times
[2020-11-25 16:08:54,798 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:08:54,811 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:08:54,898 INFO  L134       CoverageAnalysis]: Checked inductivity of 223 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 222 trivial. 0 not checked.
[2020-11-25 16:08:54,898 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:08:54,898 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 16:08:54,899 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:08:54,899 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 16:08:54,899 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 16:08:54,899 INFO  L87              Difference]: Start difference. First operand 3674 states and 4027 transitions. cyclomatic complexity: 356 Second operand 7 states.
[2020-11-25 16:08:54,949 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:08:54,949 INFO  L93              Difference]: Finished difference Result 3700 states and 4055 transitions.
[2020-11-25 16:08:54,949 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 16:08:54,950 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3700 states and 4055 transitions.
[2020-11-25 16:08:54,955 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:08:54,961 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3700 states to 3678 states and 4033 transitions.
[2020-11-25 16:08:54,961 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 900
[2020-11-25 16:08:54,961 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 900
[2020-11-25 16:08:54,961 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3678 states and 4033 transitions.
[2020-11-25 16:08:54,963 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:08:54,963 INFO  L728         BuchiCegarLoop]: Abstraction has 3678 states and 4033 transitions.
[2020-11-25 16:08:54,966 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3678 states and 4033 transitions.
[2020-11-25 16:08:54,981 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3678 to 3678.
[2020-11-25 16:08:54,981 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3678 states.
[2020-11-25 16:08:54,984 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3678 states to 3678 states and 4033 transitions.
[2020-11-25 16:08:54,984 INFO  L751         BuchiCegarLoop]: Abstraction has 3678 states and 4033 transitions.
[2020-11-25 16:08:54,984 INFO  L631         BuchiCegarLoop]: Abstraction has 3678 states and 4033 transitions.
[2020-11-25 16:08:54,984 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 16:08:54,985 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3678 states and 4033 transitions.
[2020-11-25 16:08:54,996 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:08:54,996 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:08:54,996 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:08:54,999 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:08:54,999 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_EXEToken0 := false;
[L2]                 call_transfer_EXEToken0 := false;
[L2]     CALL        call main();
[L7037]              assume null == 0;
[L7038]  CALL        call this := FreshRefGenerator__success();
[L3028]              havoc newRef;
[L3029]              assume Alloc[newRef] == false;
[L3030]              Alloc[newRef] := true;
[L3031]              assume newRef != null;
[L7038]  RET         call this := FreshRefGenerator__success();
[L7039]              assume now >= 0;
[L7040]              assume DType[this] == EXEToken;
[L7041]              assume msgvalue_MSG == 0;
[L7042]              gas := gas - 53000;
[L7043]  CALL        call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1769]              havoc __exception;
[L1770]              revert := false;
[L1771]  COND FALSE  !(__exception)
[L1798]  CALL        call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4314]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4314]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4315]  COND FALSE  !(revert)
[L4318]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L3926]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3926]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3927]  COND FALSE  !(revert)
[L3930]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3901]              assume msgsender_MSG != null;
[L3902]              Balance[this] := 0;
[L3903]              _name_ERC20Detailed[this] := 427332508;
[L3904]              _symbol_ERC20Detailed[this] := 427332508;
[L3905]              _decimals_ERC20Detailed[this] := 0;
[L3907]              _name_ERC20Detailed[this] := name_s778;
[L3908]              _symbol_ERC20Detailed[this] := symbol_s778;
[L3909]              _decimals_ERC20Detailed[this] := decimals_s778;
[L3930]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3931]  COND FALSE  !(revert)
[L4318]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L4319]  COND FALSE  !(revert)
[L4322]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3397]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3373]              assume msgsender_MSG != null;
[L3374]              Balance[this] := 0;
[L3375]              _balances_ERC20[this] := zeroRefintArr();
[L3376]              sum__balances0[this] := 0;
[L3377]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3378]              sum__allowed1[this] := 0;
[L3379]              _totalSupply_ERC20[this] := 0;
[L3401]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L4322]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4323]  COND FALSE  !(revert)
[L4326]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4006]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3397]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3373]              assume msgsender_MSG != null;
[L3374]              Balance[this] := 0;
[L3375]              _balances_ERC20[this] := zeroRefintArr();
[L3376]              sum__balances0[this] := 0;
[L3377]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3378]              sum__allowed1[this] := 0;
[L3379]              _totalSupply_ERC20[this] := 0;
[L3401]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L4010]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4014]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3983]              assume msgsender_MSG != null;
[L3984]              Balance[this] := 0;
[L4014]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4015]  COND FALSE  !(revert)
[L4326]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4327]  COND FALSE  !(revert)
[L4330]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3220]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3203]              assume msgsender_MSG != null;
[L3204]              Balance[this] := 0;
[L3205]              _owner_Ownable[this] := null;
[L3207]              _owner_Ownable[this] := msgsender_MSG;
[L3220]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  COND FALSE  !(revert)
[L4330]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4156]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3220]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3203]              assume msgsender_MSG != null;
[L3204]              Balance[this] := 0;
[L3205]              _owner_Ownable[this] := null;
[L3207]              _owner_Ownable[this] := msgsender_MSG;
[L3220]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  COND FALSE  !(revert)
[L4156]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4157]  COND FALSE  !(revert)
[L4160]  CALL        call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4136]              assume msgsender_MSG != null;
[L4137]              Balance[this] := 0;
[L4138]              stopped_Stoppable[this] := false;
[L4160]  RET         call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4161]  COND FALSE  !(revert)
[L4334]  RET         call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4250]              assume msgsender_MSG != null;
[L4251]              Balance[this] := 0;
[L4252]              _lockTimes_EXEToken[this] := zeroRefintArr();
[L4253]              sum__lockTimes2[this] := 0;
[L4254]              _lockAmounts_EXEToken[this] := zeroRefintArr();
[L4255]              sum__lockAmounts3[this] := 0;
[L4257]  COND TRUE   DType[this] == EXEToken
[L4258]  CALL        call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3234]              __ret_0_ := _owner_Ownable[this];
[L4258]  RET         call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]  COND FALSE  !(revert)
[L4265]              __var_24 := decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4266]  COND TRUE   DType[this] == EXEToken
[L4267]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3739]              __var_15 := null;
[L3740]  COND FALSE  !(!(account_s654 != null))
[L3744]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3744]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3745]  COND FALSE  !(revert)
[L3748]              _totalSupply_ERC20[this] := __var_16;
[L3749]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3749]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3750]  COND FALSE  !(revert)
[L3753]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s654];
[L3754]              _balances_ERC20[this][account_s654] := __var_17;
[L3755]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s654];
[L3756]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4267]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4268]  COND FALSE  !(revert)
[L4338]  RET         call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4339]  COND FALSE  !(revert)
[L1798]  RET         call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1799]              assume !revert && gas >= 0;
[L7043]  RET         call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L7044]              assume !revert && gas >= 0;
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND FALSE  !(choice == 16)
[L6926]  COND FALSE  !(choice == 15)
[L6933]  COND FALSE  !(choice == 14)
[L6940]  COND FALSE  !(choice == 13)
[L6947]  COND FALSE  !(choice == 12)
[L6954]  COND FALSE  !(choice == 11)
[L6960]  COND FALSE  !(choice == 10)
[L6966]  COND FALSE  !(choice == 9)
[L6972]  COND TRUE   choice == 8
[L6973]              gas := gas - 21000;
[L6974]  COND TRUE   gas >= 0
[L6975]              assume value_s817 >= 0 && value_s817 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6976]              assume msgvalue_MSG == 0;
[L6977]  CALL        call burn~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, value_s817);
[L1353]              havoc __exception;
[L1354]              revert := false;
[L1355]  COND FALSE  !(__exception)
[L1382]  CALL        call burn~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, value_s817);
[L4039]  COND TRUE   DType[this] == EXEToken
[L4040]  CALL        call _burn~address~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, value_s817);
[L4109]  COND TRUE   DType[this] == EXEToken
[L4110]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, who_s845, value_s845);
[L3792]              __var_18 := null;
[L3793]  COND FALSE  !(!(account_s705 != null))
[L3797]  COND FALSE  !(!(amount_s705 <= _balances_ERC20[this][account_s705]))
[L3801]  CALL        call __var_19 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s705);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L3801]  RET         call __var_19 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s705);
[L3802]  COND FALSE  !(revert)
[L3805]              _totalSupply_ERC20[this] := __var_19;
[L3806]  CALL        call __var_20 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s705], amount_s705);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L3806]  RET         call __var_20 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s705], amount_s705);
[L3807]  COND FALSE  !(revert)
[L3810]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s705];
[L3811]              _balances_ERC20[this][account_s705] := __var_20;
[L3812]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s705];
[L3813]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4110]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, who_s845, value_s845);
[L4111]  COND FALSE  !(revert)
[L4040]  RET         call _burn~address~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, value_s817);
[L4041]  COND FALSE  !(revert)
[L1382]  RET         call burn~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, value_s817);
[L1383]              assume !revert && gas >= 0;
[L6977]  RET         call burn~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, value_s817);
[L7047]  RET         call CorralChoice_EXEToken(this);
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND TRUE   choice == 16
[L6920]              gas := gas - 21000;
[L6921]  COND TRUE   gas >= 0
[L6922]              assume amount_s1083 >= 0 && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6923]              assume msgvalue_MSG == 0;
[L6924]  CALL        call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s1083 && (amount_s1083 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s1083] + amount_s1083 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s1083 >= 0) && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1083] >= 0) && _balances_ERC20[this][recipient_s1083] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_EXEToken0 := true;
[L2]                 call_transfer_EXEToken0 := false;
[L2]                 revert := revert_hold;
[L2033]              havoc __exception;
[L2034]              revert := false;
[L2035]  COND FALSE  !(__exception)
[L2062]  CALL        call __ret_0_ := transfer~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4537]  CALL        call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6067]  COND FALSE  !(!!stopped_Stoppable[this])
[L4537]  RET         call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4538]  COND FALSE  !(revert)
[L4541]  CALL        call __var_28 := _isLocked~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4479]  COND TRUE   DType[this] == EXEToken
[L4480]  CALL        call __var_25 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3427]              __ret_0_ := _balances_ERC20[this][owner_s312];
[L4480]  RET         call __var_25 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4481]  COND FALSE  !(revert)
[L4487]  COND TRUE   DType[this] == EXEToken
[L4488]  CALL        call __var_27 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3427]              __ret_0_ := _balances_ERC20[this][owner_s312];
[L4488]  RET         call __var_27 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4489]  COND FALSE  !(revert)
[L4495]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, __var_27, _lockAmounts_EXEToken[this][account_s1055]);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L4495]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, __var_27, _lockAmounts_EXEToken[this][account_s1055]);
[L4496]  COND FALSE  !(revert)
[L4499]              __ret_0_ := ((_lockTimes_EXEToken[this][account_s1055] != 0 && _lockAmounts_EXEToken[this][account_s1055] != 0) && _lockTimes_EXEToken[this][account_s1055] > now) && (__var_25 <= _lockAmounts_EXEToken[this][account_s1055] || __var_26 < amount_s1055);
[L4541]  RET         call __var_28 := _isLocked~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4542]  COND FALSE  !(revert)
[L4545]  COND FALSE  !(!!__var_28)
[L4549]  COND TRUE   DType[this] == EXEToken
[L4550]  CALL        call __var_29 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L3480]  COND FALSE  !(!(value_s389 <= _balances_ERC20[this][msgsender_MSG]))
[L3484]              __var_3 := null;
[L3485]  COND FALSE  !(!(to_s389 != null))
[L3489]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][msgsender_MSG], value_s389);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L3489]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][msgsender_MSG], value_s389);
[L3490]  COND FALSE  !(revert)
[L3493]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][msgsender_MSG];
[L3494]              _balances_ERC20[this][msgsender_MSG] := __var_4;
[L3495]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][msgsender_MSG];
[L3496]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s389], value_s389);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3496]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s389], value_s389);
[L3497]  COND FALSE  !(revert)
[L3500]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s389];
[L3501]              _balances_ERC20[this][to_s389] := __var_5;
[L3502]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s389];
[L3503]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3504]              __ret_0_ := true;
[L4550]  RET         call __var_29 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4551]  COND FALSE  !(revert)
[L4557]              __ret_0_ := __var_29;
[L2062]  RET         call __ret_0_ := transfer~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2063]              assume !revert && gas >= 0;
[L6924]  RET         call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L7047]  RET         call CorralChoice_EXEToken(this);

Loop:
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND TRUE   choice == 16
[L6920]              gas := gas - 21000;
[L6921]  COND TRUE   gas >= 0
[L6922]              assume amount_s1083 >= 0 && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6923]              assume msgvalue_MSG == 0;
[L6924]  CALL        call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s1083 && (amount_s1083 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s1083] + amount_s1083 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s1083 >= 0) && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1083] >= 0) && _balances_ERC20[this][recipient_s1083] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_EXEToken0 := true;
[L2]                 call_transfer_EXEToken0 := false;
[L2]                 revert := revert_hold;
[L2033]              havoc __exception;
[L2034]              revert := false;
[L2035]  COND FALSE  !(__exception)
[L2062]  CALL        call __ret_0_ := transfer~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4537]  CALL        call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6067]  COND FALSE  !(!!stopped_Stoppable[this])
[L4537]  RET         call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4538]  COND FALSE  !(revert)
[L4541]  CALL        call __var_28 := _isLocked~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4479]  COND TRUE   DType[this] == EXEToken
[L4480]  CALL        call __var_25 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3427]              __ret_0_ := _balances_ERC20[this][owner_s312];
[L4480]  RET         call __var_25 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4481]  COND FALSE  !(revert)
[L4487]  COND TRUE   DType[this] == EXEToken
[L4488]  CALL        call __var_27 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3427]              __ret_0_ := _balances_ERC20[this][owner_s312];
[L4488]  RET         call __var_27 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4489]  COND FALSE  !(revert)
[L4495]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, __var_27, _lockAmounts_EXEToken[this][account_s1055]);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L4495]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, __var_27, _lockAmounts_EXEToken[this][account_s1055]);
[L4496]  COND FALSE  !(revert)
[L4499]              __ret_0_ := ((_lockTimes_EXEToken[this][account_s1055] != 0 && _lockAmounts_EXEToken[this][account_s1055] != 0) && _lockTimes_EXEToken[this][account_s1055] > now) && (__var_25 <= _lockAmounts_EXEToken[this][account_s1055] || __var_26 < amount_s1055);
[L4541]  RET         call __var_28 := _isLocked~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4542]  COND FALSE  !(revert)
[L4545]  COND FALSE  !(!!__var_28)
[L4549]  COND TRUE   DType[this] == EXEToken
[L4550]  CALL        call __var_29 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L3480]  COND FALSE  !(!(value_s389 <= _balances_ERC20[this][msgsender_MSG]))
[L3484]              __var_3 := null;
[L3485]  COND FALSE  !(!(to_s389 != null))
[L3489]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][msgsender_MSG], value_s389);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L3489]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][msgsender_MSG], value_s389);
[L3490]  COND FALSE  !(revert)
[L3493]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][msgsender_MSG];
[L3494]              _balances_ERC20[this][msgsender_MSG] := __var_4;
[L3495]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][msgsender_MSG];
[L3496]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s389], value_s389);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3496]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s389], value_s389);
[L3497]  COND FALSE  !(revert)
[L3500]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s389];
[L3501]              _balances_ERC20[this][to_s389] := __var_5;
[L3502]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s389];
[L3503]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3504]              __ret_0_ := true;
[L4550]  RET         call __var_29 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4551]  COND FALSE  !(revert)
[L4557]              __ret_0_ := __var_29;
[L2062]  RET         call __ret_0_ := transfer~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2063]              assume !revert && gas >= 0;
[L6924]  RET         call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L7047]  RET         call CorralChoice_EXEToken(this);

[2020-11-25 16:08:55,006 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:08:55,006 INFO  L82        PathProgramCache]: Analyzing trace with hash -1268337019, now seen corresponding path program 1 times
[2020-11-25 16:08:55,007 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:08:55,044 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:08:56,777 INFO  L134       CoverageAnalysis]: Checked inductivity of 223 backedges. 21 proven. 4 refuted. 0 times theorem prover too weak. 198 trivial. 0 not checked.
[2020-11-25 16:08:56,777 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 16:08:56,777 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [40] total 40
[2020-11-25 16:08:56,778 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:08:56,778 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 41 interpolants.
[2020-11-25 16:08:56,778 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=113, Invalid=1527, Unknown=0, NotChecked=0, Total=1640
[2020-11-25 16:08:56,778 INFO  L87              Difference]: Start difference. First operand 3678 states and 4033 transitions. cyclomatic complexity: 358 Second operand 41 states.
[2020-11-25 16:09:13,582 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:09:13,582 INFO  L93              Difference]: Finished difference Result 3748 states and 4117 transitions.
[2020-11-25 16:09:13,583 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 42 states. 
[2020-11-25 16:09:13,583 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3748 states and 4117 transitions.
[2020-11-25 16:09:13,588 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:09:13,595 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3748 states to 3748 states and 4117 transitions.
[2020-11-25 16:09:13,595 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 920
[2020-11-25 16:09:13,595 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 920
[2020-11-25 16:09:13,595 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3748 states and 4117 transitions.
[2020-11-25 16:09:13,597 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:09:13,597 INFO  L728         BuchiCegarLoop]: Abstraction has 3748 states and 4117 transitions.
[2020-11-25 16:09:13,600 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3748 states and 4117 transitions.
[2020-11-25 16:09:13,615 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3748 to 3689.
[2020-11-25 16:09:13,615 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3689 states.
[2020-11-25 16:09:13,618 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3689 states to 3689 states and 4054 transitions.
[2020-11-25 16:09:13,618 INFO  L751         BuchiCegarLoop]: Abstraction has 3689 states and 4054 transitions.
[2020-11-25 16:09:13,618 INFO  L631         BuchiCegarLoop]: Abstraction has 3689 states and 4054 transitions.
[2020-11-25 16:09:13,618 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 16:09:13,618 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3689 states and 4054 transitions.
[2020-11-25 16:09:13,621 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:09:13,621 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:09:13,621 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:09:13,622 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:09:13,623 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_EXEToken0 := false;
[L2]                 call_transfer_EXEToken0 := false;
[L2]     CALL        call main();
[L7037]              assume null == 0;
[L7038]  CALL        call this := FreshRefGenerator__success();
[L3028]              havoc newRef;
[L3029]              assume Alloc[newRef] == false;
[L3030]              Alloc[newRef] := true;
[L3031]              assume newRef != null;
[L7038]  RET         call this := FreshRefGenerator__success();
[L7039]              assume now >= 0;
[L7040]              assume DType[this] == EXEToken;
[L7041]              assume msgvalue_MSG == 0;
[L7042]              gas := gas - 53000;
[L7043]  CALL        call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1769]              havoc __exception;
[L1770]              revert := false;
[L1771]  COND FALSE  !(__exception)
[L1798]  CALL        call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4314]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4314]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4315]  COND FALSE  !(revert)
[L4318]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L3926]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3926]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3927]  COND FALSE  !(revert)
[L3930]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3901]              assume msgsender_MSG != null;
[L3902]              Balance[this] := 0;
[L3903]              _name_ERC20Detailed[this] := 427332508;
[L3904]              _symbol_ERC20Detailed[this] := 427332508;
[L3905]              _decimals_ERC20Detailed[this] := 0;
[L3907]              _name_ERC20Detailed[this] := name_s778;
[L3908]              _symbol_ERC20Detailed[this] := symbol_s778;
[L3909]              _decimals_ERC20Detailed[this] := decimals_s778;
[L3930]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3931]  COND FALSE  !(revert)
[L4318]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L4319]  COND FALSE  !(revert)
[L4322]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3397]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3373]              assume msgsender_MSG != null;
[L3374]              Balance[this] := 0;
[L3375]              _balances_ERC20[this] := zeroRefintArr();
[L3376]              sum__balances0[this] := 0;
[L3377]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3378]              sum__allowed1[this] := 0;
[L3379]              _totalSupply_ERC20[this] := 0;
[L3401]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L4322]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4323]  COND FALSE  !(revert)
[L4326]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4006]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3397]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3373]              assume msgsender_MSG != null;
[L3374]              Balance[this] := 0;
[L3375]              _balances_ERC20[this] := zeroRefintArr();
[L3376]              sum__balances0[this] := 0;
[L3377]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3378]              sum__allowed1[this] := 0;
[L3379]              _totalSupply_ERC20[this] := 0;
[L3401]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L4010]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4014]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3983]              assume msgsender_MSG != null;
[L3984]              Balance[this] := 0;
[L4014]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4015]  COND FALSE  !(revert)
[L4326]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4327]  COND FALSE  !(revert)
[L4330]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3220]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3203]              assume msgsender_MSG != null;
[L3204]              Balance[this] := 0;
[L3205]              _owner_Ownable[this] := null;
[L3207]              _owner_Ownable[this] := msgsender_MSG;
[L3220]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  COND FALSE  !(revert)
[L4330]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4156]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3220]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3203]              assume msgsender_MSG != null;
[L3204]              Balance[this] := 0;
[L3205]              _owner_Ownable[this] := null;
[L3207]              _owner_Ownable[this] := msgsender_MSG;
[L3220]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  COND FALSE  !(revert)
[L4156]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4157]  COND FALSE  !(revert)
[L4160]  CALL        call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4136]              assume msgsender_MSG != null;
[L4137]              Balance[this] := 0;
[L4138]              stopped_Stoppable[this] := false;
[L4160]  RET         call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4161]  COND FALSE  !(revert)
[L4334]  RET         call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4250]              assume msgsender_MSG != null;
[L4251]              Balance[this] := 0;
[L4252]              _lockTimes_EXEToken[this] := zeroRefintArr();
[L4253]              sum__lockTimes2[this] := 0;
[L4254]              _lockAmounts_EXEToken[this] := zeroRefintArr();
[L4255]              sum__lockAmounts3[this] := 0;
[L4257]  COND TRUE   DType[this] == EXEToken
[L4258]  CALL        call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3234]              __ret_0_ := _owner_Ownable[this];
[L4258]  RET         call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]  COND FALSE  !(revert)
[L4265]              __var_24 := decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4266]  COND TRUE   DType[this] == EXEToken
[L4267]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3739]              __var_15 := null;
[L3740]  COND FALSE  !(!(account_s654 != null))
[L3744]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3744]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3745]  COND FALSE  !(revert)
[L3748]              _totalSupply_ERC20[this] := __var_16;
[L3749]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3749]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3750]  COND FALSE  !(revert)
[L3753]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s654];
[L3754]              _balances_ERC20[this][account_s654] := __var_17;
[L3755]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s654];
[L3756]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4267]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4268]  COND FALSE  !(revert)
[L4338]  RET         call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4339]  COND FALSE  !(revert)
[L1798]  RET         call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1799]              assume !revert && gas >= 0;
[L7043]  RET         call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L7044]              assume !revert && gas >= 0;
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND FALSE  !(choice == 16)
[L6926]  COND FALSE  !(choice == 15)
[L6933]  COND FALSE  !(choice == 14)
[L6940]  COND FALSE  !(choice == 13)
[L6947]  COND FALSE  !(choice == 12)
[L6954]  COND FALSE  !(choice == 11)
[L6960]  COND FALSE  !(choice == 10)
[L6966]  COND FALSE  !(choice == 9)
[L6972]  COND FALSE  !(choice == 8)
[L6979]  COND TRUE   choice == 7
[L6980]              gas := gas - 21000;
[L6981]  COND TRUE   gas >= 0
[L6982]              assume value_s830 >= 0 && value_s830 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6983]              assume msgvalue_MSG == 0;
[L6984]  CALL        call burnFrom~address~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, from_s830, value_s830);
[L1420]              havoc __exception;
[L1421]              revert := false;
[L1422]  COND FALSE  !(__exception)
[L1449]  CALL        call burnFrom~address~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, from_s830, value_s830);
[L4073]  COND TRUE   DType[this] == EXEToken
[L4074]  CALL        call _burnFrom~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s830, value_s830);
[L3853]  COND FALSE  !(!(amount_s747 <= _allowed_ERC20[this][account_s747][msgsender_MSG]))
[L3857]  CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][account_s747][msgsender_MSG], amount_s747);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L3857]  RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][account_s747][msgsender_MSG], amount_s747);
[L3858]  COND FALSE  !(revert)
[L3861]              sum__allowed1[account_s747] := sum__allowed1[account_s747] - _allowed_ERC20[this][account_s747][msgsender_MSG];
[L3862]              _allowed_ERC20[this][account_s747][msgsender_MSG] := __var_21;
[L3863]              sum__allowed1[account_s747] := sum__allowed1[account_s747] + _allowed_ERC20[this][account_s747][msgsender_MSG];
[L3864]  COND TRUE   DType[this] == EXEToken
[L3865]  CALL        call _burn~address~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, account_s747, amount_s747);
[L4109]  COND TRUE   DType[this] == EXEToken
[L4110]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, who_s845, value_s845);
[L3792]              __var_18 := null;
[L3793]  COND FALSE  !(!(account_s705 != null))
[L3797]  COND FALSE  !(!(amount_s705 <= _balances_ERC20[this][account_s705]))
[L3801]  CALL        call __var_19 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s705);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L3801]  RET         call __var_19 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s705);
[L3802]  COND FALSE  !(revert)
[L3805]              _totalSupply_ERC20[this] := __var_19;
[L3806]  CALL        call __var_20 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s705], amount_s705);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L3806]  RET         call __var_20 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s705], amount_s705);
[L3807]  COND FALSE  !(revert)
[L3810]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s705];
[L3811]              _balances_ERC20[this][account_s705] := __var_20;
[L3812]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s705];
[L3813]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4110]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, who_s845, value_s845);
[L4111]  COND FALSE  !(revert)
[L3865]  RET         call _burn~address~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, account_s747, amount_s747);
[L3866]  COND FALSE  !(revert)
[L4074]  RET         call _burnFrom~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s830, value_s830);
[L4075]  COND FALSE  !(revert)
[L1449]  RET         call burnFrom~address~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, from_s830, value_s830);
[L1450]              assume !revert && gas >= 0;
[L6984]  RET         call burnFrom~address~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, from_s830, value_s830);
[L7047]  RET         call CorralChoice_EXEToken(this);
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND TRUE   choice == 16
[L6920]              gas := gas - 21000;
[L6921]  COND TRUE   gas >= 0
[L6922]              assume amount_s1083 >= 0 && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6923]              assume msgvalue_MSG == 0;
[L6924]  CALL        call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s1083 && (amount_s1083 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s1083] + amount_s1083 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s1083 >= 0) && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1083] >= 0) && _balances_ERC20[this][recipient_s1083] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_EXEToken0 := true;
[L2]                 call_transfer_EXEToken0 := false;
[L2]                 revert := revert_hold;
[L2033]              havoc __exception;
[L2034]              revert := false;
[L2035]  COND FALSE  !(__exception)
[L2062]  CALL        call __ret_0_ := transfer~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4537]  CALL        call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6067]  COND FALSE  !(!!stopped_Stoppable[this])
[L4537]  RET         call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4538]  COND FALSE  !(revert)
[L4541]  CALL        call __var_28 := _isLocked~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4479]  COND TRUE   DType[this] == EXEToken
[L4480]  CALL        call __var_25 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3427]              __ret_0_ := _balances_ERC20[this][owner_s312];
[L4480]  RET         call __var_25 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4481]  COND FALSE  !(revert)
[L4487]  COND TRUE   DType[this] == EXEToken
[L4488]  CALL        call __var_27 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3427]              __ret_0_ := _balances_ERC20[this][owner_s312];
[L4488]  RET         call __var_27 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4489]  COND FALSE  !(revert)
[L4495]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, __var_27, _lockAmounts_EXEToken[this][account_s1055]);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L4495]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, __var_27, _lockAmounts_EXEToken[this][account_s1055]);
[L4496]  COND FALSE  !(revert)
[L4499]              __ret_0_ := ((_lockTimes_EXEToken[this][account_s1055] != 0 && _lockAmounts_EXEToken[this][account_s1055] != 0) && _lockTimes_EXEToken[this][account_s1055] > now) && (__var_25 <= _lockAmounts_EXEToken[this][account_s1055] || __var_26 < amount_s1055);
[L4541]  RET         call __var_28 := _isLocked~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4542]  COND FALSE  !(revert)
[L4545]  COND FALSE  !(!!__var_28)
[L4549]  COND TRUE   DType[this] == EXEToken
[L4550]  CALL        call __var_29 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L3480]  COND FALSE  !(!(value_s389 <= _balances_ERC20[this][msgsender_MSG]))
[L3484]              __var_3 := null;
[L3485]  COND FALSE  !(!(to_s389 != null))
[L3489]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][msgsender_MSG], value_s389);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L3489]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][msgsender_MSG], value_s389);
[L3490]  COND FALSE  !(revert)
[L3493]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][msgsender_MSG];
[L3494]              _balances_ERC20[this][msgsender_MSG] := __var_4;
[L3495]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][msgsender_MSG];
[L3496]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s389], value_s389);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3496]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s389], value_s389);
[L3497]  COND FALSE  !(revert)
[L3500]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s389];
[L3501]              _balances_ERC20[this][to_s389] := __var_5;
[L3502]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s389];
[L3503]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3504]              __ret_0_ := true;
[L4550]  RET         call __var_29 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4551]  COND FALSE  !(revert)
[L4557]              __ret_0_ := __var_29;
[L2062]  RET         call __ret_0_ := transfer~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2063]              assume !revert && gas >= 0;
[L6924]  RET         call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L7047]  RET         call CorralChoice_EXEToken(this);

Loop:
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND TRUE   choice == 16
[L6920]              gas := gas - 21000;
[L6921]  COND TRUE   gas >= 0
[L6922]              assume amount_s1083 >= 0 && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6923]              assume msgvalue_MSG == 0;
[L6924]  CALL        call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s1083 && (amount_s1083 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s1083] + amount_s1083 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s1083 >= 0) && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1083] >= 0) && _balances_ERC20[this][recipient_s1083] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_EXEToken0 := true;
[L2]                 call_transfer_EXEToken0 := false;
[L2]                 revert := revert_hold;
[L2033]              havoc __exception;
[L2034]              revert := false;
[L2035]  COND FALSE  !(__exception)
[L2062]  CALL        call __ret_0_ := transfer~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4537]  CALL        call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6067]  COND FALSE  !(!!stopped_Stoppable[this])
[L4537]  RET         call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4538]  COND FALSE  !(revert)
[L4541]  CALL        call __var_28 := _isLocked~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4479]  COND TRUE   DType[this] == EXEToken
[L4480]  CALL        call __var_25 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3427]              __ret_0_ := _balances_ERC20[this][owner_s312];
[L4480]  RET         call __var_25 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4481]  COND FALSE  !(revert)
[L4487]  COND TRUE   DType[this] == EXEToken
[L4488]  CALL        call __var_27 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3427]              __ret_0_ := _balances_ERC20[this][owner_s312];
[L4488]  RET         call __var_27 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4489]  COND FALSE  !(revert)
[L4495]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, __var_27, _lockAmounts_EXEToken[this][account_s1055]);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L4495]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, __var_27, _lockAmounts_EXEToken[this][account_s1055]);
[L4496]  COND FALSE  !(revert)
[L4499]              __ret_0_ := ((_lockTimes_EXEToken[this][account_s1055] != 0 && _lockAmounts_EXEToken[this][account_s1055] != 0) && _lockTimes_EXEToken[this][account_s1055] > now) && (__var_25 <= _lockAmounts_EXEToken[this][account_s1055] || __var_26 < amount_s1055);
[L4541]  RET         call __var_28 := _isLocked~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4542]  COND FALSE  !(revert)
[L4545]  COND FALSE  !(!!__var_28)
[L4549]  COND TRUE   DType[this] == EXEToken
[L4550]  CALL        call __var_29 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L3480]  COND FALSE  !(!(value_s389 <= _balances_ERC20[this][msgsender_MSG]))
[L3484]              __var_3 := null;
[L3485]  COND FALSE  !(!(to_s389 != null))
[L3489]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][msgsender_MSG], value_s389);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L3489]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][msgsender_MSG], value_s389);
[L3490]  COND FALSE  !(revert)
[L3493]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][msgsender_MSG];
[L3494]              _balances_ERC20[this][msgsender_MSG] := __var_4;
[L3495]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][msgsender_MSG];
[L3496]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s389], value_s389);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3496]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s389], value_s389);
[L3497]  COND FALSE  !(revert)
[L3500]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s389];
[L3501]              _balances_ERC20[this][to_s389] := __var_5;
[L3502]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s389];
[L3503]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3504]              __ret_0_ := true;
[L4550]  RET         call __var_29 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4551]  COND FALSE  !(revert)
[L4557]              __ret_0_ := __var_29;
[L2062]  RET         call __ret_0_ := transfer~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2063]              assume !revert && gas >= 0;
[L6924]  RET         call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L7047]  RET         call CorralChoice_EXEToken(this);

[2020-11-25 16:09:13,627 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:09:13,627 INFO  L82        PathProgramCache]: Analyzing trace with hash 153173036, now seen corresponding path program 1 times
[2020-11-25 16:09:13,628 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:09:13,646 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:09:13,852 INFO  L134       CoverageAnalysis]: Checked inductivity of 233 backedges. 6 proven. 0 refuted. 0 times theorem prover too weak. 227 trivial. 0 not checked.
[2020-11-25 16:09:13,852 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:09:13,852 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [16] imperfect sequences [] total 16
[2020-11-25 16:09:13,853 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:09:13,853 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-25 16:09:13,853 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=33, Invalid=207, Unknown=0, NotChecked=0, Total=240
[2020-11-25 16:09:13,853 INFO  L87              Difference]: Start difference. First operand 3689 states and 4054 transitions. cyclomatic complexity: 370 Second operand 16 states.
[2020-11-25 16:09:15,227 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:09:15,227 INFO  L93              Difference]: Finished difference Result 2176 states and 2390 transitions.
[2020-11-25 16:09:15,227 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 16:09:15,227 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2176 states and 2390 transitions.
[2020-11-25 16:09:15,231 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 16:09:15,231 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2176 states to 0 states and 0 transitions.
[2020-11-25 16:09:15,231 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 16:09:15,231 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 16:09:15,231 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 16:09:15,231 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:09:15,231 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 16:09:15,231 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 16:09:15,231 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 16:09:15,231 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 16:09:15,231 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 16:09:15,231 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 16:09:15,231 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 16:09:15,234 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 04:09:15 BasicIcfg
[2020-11-25 16:09:15,234 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 16:09:15,234 INFO  L168              Benchmark]: Toolchain (without parser) took 36129.19 ms. Allocated memory was 1.0 GB in the beginning and 2.6 GB in the end (delta: 1.6 GB). Free memory was 935.2 MB in the beginning and 1.3 GB in the end (delta: -357.5 MB). Peak memory consumption was 1.2 GB. Max. memory is 15.3 GB.
[2020-11-25 16:09:15,236 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.23 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 16:09:15,236 INFO  L168              Benchmark]: Boogie Preprocessor took 122.16 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 913.7 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
[2020-11-25 16:09:15,237 INFO  L168              Benchmark]: UtopiaSpecLang took 61.90 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 908.3 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 16:09:15,237 INFO  L168              Benchmark]: Boogie Printer took 21.47 ms. Allocated memory is still 1.0 GB. Free memory was 908.3 MB in the beginning and 902.9 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 16:09:15,237 INFO  L168              Benchmark]: RCFGBuilder took 973.52 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 71.8 MB). Free memory was 902.9 MB in the beginning and 998.1 MB in the end (delta: -95.2 MB). Peak memory consumption was 190.7 MB. Max. memory is 15.3 GB.
[2020-11-25 16:09:15,237 INFO  L168              Benchmark]: UtopiaLTL2Aut took 41.01 ms. Allocated memory is still 1.1 GB. Free memory was 998.1 MB in the beginning and 991.0 MB in the end (delta: 7.1 MB). Peak memory consumption was 7.1 MB. Max. memory is 15.3 GB.
[2020-11-25 16:09:15,238 INFO  L168              Benchmark]: BÃ¼chi Program Product took 2019.85 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 152.6 MB). Free memory was 991.0 MB in the beginning and 942.4 MB in the end (delta: 48.6 MB). Peak memory consumption was 511.4 MB. Max. memory is 15.3 GB.
[2020-11-25 16:09:15,238 INFO  L168              Benchmark]: BlockEncodingV2 took 161.57 ms. Allocated memory is still 1.3 GB. Free memory was 942.4 MB in the beginning and 842.6 MB in the end (delta: 99.8 MB). Peak memory consumption was 99.8 MB. Max. memory is 15.3 GB.
[2020-11-25 16:09:15,238 INFO  L168              Benchmark]: BuchiAutomizer took 32724.71 ms. Allocated memory was 1.3 GB in the beginning and 2.6 GB in the end (delta: 1.4 GB). Free memory was 842.6 MB in the beginning and 1.3 GB in the end (delta: -450.1 MB). Peak memory consumption was 910.4 MB. Max. memory is 15.3 GB.
[2020-11-25 16:09:15,241 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    6238 locations, 11172 edges
  - StatisticsResult: Encoded RCFG
    6080 locations, 10778 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.23 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 122.16 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 913.7 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 61.90 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 908.3 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 21.47 ms. Allocated memory is still 1.0 GB. Free memory was 908.3 MB in the beginning and 902.9 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 973.52 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 71.8 MB). Free memory was 902.9 MB in the beginning and 998.1 MB in the end (delta: -95.2 MB). Peak memory consumption was 190.7 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 41.01 ms. Allocated memory is still 1.1 GB. Free memory was 998.1 MB in the beginning and 991.0 MB in the end (delta: 7.1 MB). Peak memory consumption was 7.1 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 2019.85 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 152.6 MB). Free memory was 991.0 MB in the beginning and 942.4 MB in the end (delta: 48.6 MB). Peak memory consumption was 511.4 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 161.57 ms. Allocated memory is still 1.3 GB. Free memory was 942.4 MB in the beginning and 842.6 MB in the end (delta: 99.8 MB). Peak memory consumption was 99.8 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 32724.71 ms. Allocated memory was 1.3 GB in the beginning and 2.6 GB in the end (delta: 1.4 GB). Free memory was 842.6 MB in the beginning and 1.3 GB in the end (delta: -450.1 MB). Peak memory consumption was 910.4 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2516 locations, 3423 edges
  - StatisticsResult: BuchiProgram size
    6238 locations, 11172 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 10 terminating modules (10 trivial, 0 deterministic, 0 nondeterministic). 10 modules have a trivial ranking function, the largest among these consists of 41 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 32.6s and 11 iterations.  TraceHistogramMax:5. Analysis of lassos took 3.8s. Construction of modules took 22.4s. BÃ¼chi inclusion checks took 5.6s. Highest rank in rank-based complementation 0. Minimization of det autom 10. Minimization of nondet autom 0. Automata minimization 0.3s AutomataMinimizationTime, 9 MinimizatonAttempts, 2365 StatesRemovedByMinimization, 6 NontrivialMinimizations. Non-live state removal took 0.2s Buchi closure took 0.0s. Biggest automaton had 4237 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 37874 SDtfs, 25478 SDslu, 113113 SDs, 0 SdLazy, 244077 SolverSat, 4190 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 22.4s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU10 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transfer_EXEToken0) ==> ( <>(fail_transfer_EXEToken0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
