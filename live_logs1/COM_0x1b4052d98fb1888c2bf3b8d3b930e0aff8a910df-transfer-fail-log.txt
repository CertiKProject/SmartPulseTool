This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 12:19:31,084 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 12:19:31,085 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 12:19:31,093 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 12:19:31,093 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 12:19:31,093 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 12:19:31,094 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 12:19:31,095 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 12:19:31,097 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 12:19:31,098 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 12:19:31,098 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 12:19:31,098 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 12:19:31,099 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 12:19:31,100 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 12:19:31,101 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 12:19:31,101 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 12:19:31,102 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 12:19:31,103 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 12:19:31,105 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 12:19:31,106 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 12:19:31,107 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 12:19:31,108 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 12:19:31,109 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 12:19:31,109 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 12:19:31,109 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 12:19:31,110 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 12:19:31,110 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 12:19:31,110 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 12:19:31,110 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 12:19:31,111 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 12:19:31,111 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 12:19:31,111 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 12:19:31,112 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 12:19:31,112 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 12:19:31,113 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 12:19:31,113 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 12:19:31,113 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 12:19:31,113 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 12:19:31,113 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 12:19:31,114 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 12:19:31,114 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 12:19:31,114 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 12:19:31,120 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 12:19:31,120 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 12:19:31,121 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 12:19:31,121 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 12:19:31,121 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 12:19:31,121 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 12:19:31,121 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 12:19:31,121 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 12:19:31,121 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 12:19:31,121 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 12:19:31,121 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 12:19:31,121 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 12:19:31,122 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 12:19:31,122 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 12:19:31,122 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 12:19:31,122 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 12:19:31,122 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 12:19:31,122 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 12:19:31,122 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 12:19:31,122 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 12:19:31,122 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 12:19:31,122 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 12:19:31,122 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 12:19:31,122 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 12:19:31,122 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 12:19:31,122 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 12:19:31,143 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 12:19:31,157 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 12:19:31,163 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 12:19:31,164 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 12:19:31,165 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 12:19:31,165 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transfer-fail.bpl
[2020-11-25 12:19:31,166 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transfer-fail.bpl'
[2020-11-25 12:19:31,253 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 12:19:31,254 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 12:19:31,255 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 12:19:31,255 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 12:19:31,255 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 12:19:31,271 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:19:31" (1/1) ...
[2020-11-25 12:19:31,273 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:19:31" (1/1) ...
[2020-11-25 12:19:31,310 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:19:31" (1/1) ...
[2020-11-25 12:19:31,311 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:19:31" (1/1) ...
[2020-11-25 12:19:31,331 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:19:31" (1/1) ...
[2020-11-25 12:19:31,340 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:19:31" (1/1) ...
[2020-11-25 12:19:31,348 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:19:31" (1/1) ...
[2020-11-25 12:19:31,357 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 12:19:31,357 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 12:19:31,357 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 12:19:31,359 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 12:19:31,363 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:19:31" (1/1) ...
[2020-11-25 12:19:31,382 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(COM.transfer(to, value), msg.sender != to && (value > _balances_COM[this][msg.sender] || _balances_COM[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_COM[this][to] >= 0 && _balances_COM[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_COM[this][msg.sender] >= 0 &&  _balances_COM[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(COM.transfer)))
[2020-11-25 12:19:31,387 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(COM.transfer(to, value), msg.sender != to && (value > _balances_COM[this][msg.sender] || _balances_COM[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_COM[this][to] >= 0 && _balances_COM[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_COM[this][msg.sender] >= 0 &&  _balances_COM[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(COM.transfer)))
[2020-11-25 12:19:31,394 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(COM.transfer(to, value), msg.sender != to && (value > _balances_COM[this][msg.sender] || _balances_COM[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_COM[this][to] >= 0 && _balances_COM[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_COM[this][msg.sender] >= 0 &&  _balances_COM[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(COM.transfer)))
[2020-11-25 12:19:31,401 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender!=to_s454 && ( value_s454>_balances_COM[this][msg.sender] || ( _balances_COM[this][to_s454] + value_s454 )>=115792089237316195423570985008687907853269984665640564039457584007913129639936 ) ) && value_s454>=0 ) && value_s454<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_COM[this][to_s454]>=0 ) && _balances_COM[this][to_s454]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_COM[this][msg.sender]>=0 ) && _balances_COM[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COM>],IdentifierExpression[to_s454,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COM>]],BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[value_s454,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COM>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_COM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COM>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COM>]]]],BinaryExpression[COMPGEQ,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_COM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COM>]]],[IdentifierExpression[to_s454,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COM>]]],IdentifierExpression[value_s454,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COM>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]],BinaryExpression[COMPGEQ,IdentifierExpression[value_s454,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COM>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[value_s454,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COM>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_COM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COM>]]],[IdentifierExpression[to_s454,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COM>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_COM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COM>]]],[IdentifierExpression[to_s454,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COM>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_COM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COM>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COM>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_COM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COM>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COM>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 12:19:31,406 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(COM.transfer(to, value), msg.sender != to && (value > _balances_COM[this][msg.sender] || _balances_COM[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_COM[this][to] >= 0 && _balances_COM[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_COM[this][msg.sender] >= 0 &&  _balances_COM[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(COM.transfer)))
[2020-11-25 12:19:31,406 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_COM0) ==> ( <>AP(fail_transfer_COM0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 12:19:31,415 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:19:31 PropertyContainer
[2020-11-25 12:19:31,415 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 12:19:31,415 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 12:19:31,415 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 12:19:31,415 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 12:19:31,416 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:19:31" (1/2) ...
[2020-11-25 12:19:31,417 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 12:19:31,417 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 12:19:31,430 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:19:31" (2/2) ...
[2020-11-25 12:19:31,430 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 12:19:31,430 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 12:19:31,430 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 12:19:31,430 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 12:19:31,431 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:19:31" (1/2) ...
[2020-11-25 12:19:31,469 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 12:19:31,470 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 12:19:31,470 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 12:19:31,470 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 12:19:31,470 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 12:19:31,470 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 12:19:31,470 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 12:19:31,470 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 12:19:31,470 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 12:19:31,470 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 12:19:31,470 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 12:19:31,470 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 12:19:31,470 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 12:19:31,470 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 12:19:31,470 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 12:19:31,471 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 12:19:31,471 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 12:19:31,471 INFO  L130     BoogieDeclarations]: Found specification of procedure ceil~uint256~uint256_SafeMath__success
[2020-11-25 12:19:31,471 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 12:19:31,471 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 12:19:31,471 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 12:19:31,471 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 12:19:31,471 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 12:19:31,471 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 12:19:31,471 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 12:19:31,471 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 12:19:31,471 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 12:19:31,471 INFO  L130     BoogieDeclarations]: Found specification of procedure COM_COM_NoBaseCtor__success
[2020-11-25 12:19:31,471 INFO  L130     BoogieDeclarations]: Found specification of procedure COM_COM
[2020-11-25 12:19:31,472 INFO  L138     BoogieDeclarations]: Found implementation of procedure COM_COM
[2020-11-25 12:19:31,472 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_COM
[2020-11-25 12:19:31,472 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_COM
[2020-11-25 12:19:31,472 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_COM
[2020-11-25 12:19:31,472 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_COM
[2020-11-25 12:19:31,472 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_COM
[2020-11-25 12:19:31,472 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_COM
[2020-11-25 12:19:31,472 INFO  L130     BoogieDeclarations]: Found specification of procedure findPercent~uint256_COM
[2020-11-25 12:19:31,472 INFO  L138     BoogieDeclarations]: Found implementation of procedure findPercent~uint256_COM
[2020-11-25 12:19:31,472 INFO  L130     BoogieDeclarations]: Found specification of procedure returnRate_COM
[2020-11-25 12:19:31,472 INFO  L138     BoogieDeclarations]: Found implementation of procedure returnRate_COM
[2020-11-25 12:19:31,472 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_COM
[2020-11-25 12:19:31,472 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_COM
[2020-11-25 12:19:31,472 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferBurnYes~address~uint256_COM__success
[2020-11-25 12:19:31,472 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferBurnNo~address~uint256_COM__success
[2020-11-25 12:19:31,472 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_COM
[2020-11-25 12:19:31,473 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_COM
[2020-11-25 12:19:31,473 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_COM
[2020-11-25 12:19:31,473 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_COM
[2020-11-25 12:19:31,473 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferFromBurnYes~address~address~uint256_COM__success
[2020-11-25 12:19:31,473 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferFromBurnNo~address~address~uint256_COM__success
[2020-11-25 12:19:31,473 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_COM
[2020-11-25 12:19:31,473 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_COM
[2020-11-25 12:19:31,473 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_COM
[2020-11-25 12:19:31,473 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_COM
[2020-11-25 12:19:31,473 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_COM__success
[2020-11-25 12:19:31,473 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_COM
[2020-11-25 12:19:31,473 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_COM
[2020-11-25 12:19:31,473 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_COM__success
[2020-11-25 12:19:31,473 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_COM
[2020-11-25 12:19:31,473 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_COM
[2020-11-25 12:19:31,473 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 12:19:31,473 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 12:19:31,473 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 12:19:31,473 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 12:19:31,474 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 12:19:31,474 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 12:19:31,474 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 12:19:31,474 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 12:19:31,474 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 12:19:31,474 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_COM
[2020-11-25 12:19:31,474 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 12:19:31,474 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 12:19:31,474 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 12:19:31,474 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 12:19:31,474 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 12:19:31,474 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 12:19:31,474 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 12:19:31,474 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 12:19:31,475 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 12:19:31,475 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 12:19:31,475 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 12:19:31,475 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 12:19:31,475 INFO  L130     BoogieDeclarations]: Found specification of procedure ceil~uint256~uint256_SafeMath__fail
[2020-11-25 12:19:31,475 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 12:19:31,475 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 12:19:31,475 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 12:19:31,475 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 12:19:31,475 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 12:19:31,475 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 12:19:31,475 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 12:19:31,475 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 12:19:31,476 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 12:19:31,476 INFO  L130     BoogieDeclarations]: Found specification of procedure COM_COM_NoBaseCtor__fail
[2020-11-25 12:19:31,476 INFO  L130     BoogieDeclarations]: Found specification of procedure COM_COM__success
[2020-11-25 12:19:31,476 INFO  L130     BoogieDeclarations]: Found specification of procedure COM_COM__fail
[2020-11-25 12:19:31,476 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_COM__success
[2020-11-25 12:19:31,476 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_COM__fail
[2020-11-25 12:19:31,476 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_COM__success
[2020-11-25 12:19:31,476 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_COM__fail
[2020-11-25 12:19:31,476 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_COM__success
[2020-11-25 12:19:31,476 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_COM__fail
[2020-11-25 12:19:31,476 INFO  L130     BoogieDeclarations]: Found specification of procedure findPercent~uint256_COM__success
[2020-11-25 12:19:31,476 INFO  L130     BoogieDeclarations]: Found specification of procedure findPercent~uint256_COM__fail
[2020-11-25 12:19:31,476 INFO  L130     BoogieDeclarations]: Found specification of procedure returnRate_COM__success
[2020-11-25 12:19:31,476 INFO  L130     BoogieDeclarations]: Found specification of procedure returnRate_COM__fail
[2020-11-25 12:19:31,476 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_COM__success
[2020-11-25 12:19:31,477 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_COM__fail
[2020-11-25 12:19:31,477 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferBurnYes~address~uint256_COM__fail
[2020-11-25 12:19:31,477 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferBurnNo~address~uint256_COM__fail
[2020-11-25 12:19:31,477 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_COM__success
[2020-11-25 12:19:31,477 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_COM__fail
[2020-11-25 12:19:31,477 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_COM__success
[2020-11-25 12:19:31,477 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_COM__fail
[2020-11-25 12:19:31,477 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferFromBurnYes~address~address~uint256_COM__fail
[2020-11-25 12:19:31,477 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferFromBurnNo~address~address~uint256_COM__fail
[2020-11-25 12:19:31,477 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_COM__success
[2020-11-25 12:19:31,477 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_COM__fail
[2020-11-25 12:19:31,477 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_COM__success
[2020-11-25 12:19:31,477 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_COM__fail
[2020-11-25 12:19:31,478 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_COM__fail
[2020-11-25 12:19:31,478 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_COM__success
[2020-11-25 12:19:31,478 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_COM__fail
[2020-11-25 12:19:31,478 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_COM__fail
[2020-11-25 12:19:31,478 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_COM__success
[2020-11-25 12:19:31,478 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_COM__fail
[2020-11-25 12:19:31,478 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 12:19:31,478 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 12:19:31,478 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 12:19:31,478 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 12:19:31,478 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 12:19:31,478 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 12:19:31,478 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 12:19:31,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 12:19:31,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 12:19:31,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 12:19:31,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 12:19:31,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 12:19:31,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 12:19:31,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 12:19:31,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 12:19:31,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 12:19:31,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 12:19:31,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 12:19:31,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 12:19:31,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 12:19:31,480 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 12:19:31,480 INFO  L138     BoogieDeclarations]: Found implementation of procedure ceil~uint256~uint256_SafeMath__fail
[2020-11-25 12:19:31,480 INFO  L138     BoogieDeclarations]: Found implementation of procedure ceil~uint256~uint256_SafeMath__success
[2020-11-25 12:19:31,480 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 12:19:31,480 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 12:19:31,480 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 12:19:31,480 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 12:19:31,480 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 12:19:31,480 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 12:19:31,480 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 12:19:31,480 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 12:19:31,480 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 12:19:31,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 12:19:31,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure COM_COM_NoBaseCtor__fail
[2020-11-25 12:19:31,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure COM_COM_NoBaseCtor__success
[2020-11-25 12:19:31,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure COM_COM__fail
[2020-11-25 12:19:31,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure COM_COM__success
[2020-11-25 12:19:31,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_COM__fail
[2020-11-25 12:19:31,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_COM__success
[2020-11-25 12:19:31,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_COM__fail
[2020-11-25 12:19:31,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_COM__success
[2020-11-25 12:19:31,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_COM__fail
[2020-11-25 12:19:31,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_COM__success
[2020-11-25 12:19:31,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure findPercent~uint256_COM__fail
[2020-11-25 12:19:31,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure findPercent~uint256_COM__success
[2020-11-25 12:19:31,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure returnRate_COM__fail
[2020-11-25 12:19:31,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure returnRate_COM__success
[2020-11-25 12:19:31,482 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_COM__fail
[2020-11-25 12:19:31,482 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_COM__success
[2020-11-25 12:19:31,482 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferBurnYes~address~uint256_COM__fail
[2020-11-25 12:19:31,482 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferBurnYes~address~uint256_COM__success
[2020-11-25 12:19:31,482 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferBurnNo~address~uint256_COM__fail
[2020-11-25 12:19:31,482 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferBurnNo~address~uint256_COM__success
[2020-11-25 12:19:31,482 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_COM__fail
[2020-11-25 12:19:31,482 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_COM__success
[2020-11-25 12:19:31,482 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_COM__fail
[2020-11-25 12:19:31,482 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_COM__success
[2020-11-25 12:19:31,482 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferFromBurnYes~address~address~uint256_COM__fail
[2020-11-25 12:19:31,483 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferFromBurnYes~address~address~uint256_COM__success
[2020-11-25 12:19:31,483 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferFromBurnNo~address~address~uint256_COM__fail
[2020-11-25 12:19:31,483 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferFromBurnNo~address~address~uint256_COM__success
[2020-11-25 12:19:31,483 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_COM__fail
[2020-11-25 12:19:31,483 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_COM__success
[2020-11-25 12:19:31,483 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_COM__fail
[2020-11-25 12:19:31,483 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_COM__success
[2020-11-25 12:19:31,483 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_COM__fail
[2020-11-25 12:19:31,483 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_COM__success
[2020-11-25 12:19:31,483 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_COM__fail
[2020-11-25 12:19:31,484 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_COM__success
[2020-11-25 12:19:31,484 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_COM__fail
[2020-11-25 12:19:31,484 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_COM__success
[2020-11-25 12:19:31,484 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_COM__fail
[2020-11-25 12:19:31,484 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_COM__success
[2020-11-25 12:19:31,484 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 12:19:31,484 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 12:19:31,484 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 12:19:31,484 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 12:19:31,484 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 12:19:31,484 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 12:19:31,484 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 12:19:31,485 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 12:19:31,485 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 12:19:31,485 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 12:19:31,485 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 12:19:31,485 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 12:19:31,485 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_COM
[2020-11-25 12:19:31,485 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 12:19:31,485 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 12:19:31,485 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 12:19:31,830 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 12:19:31,831 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 12:19:32,114 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 12:19:32,114 INFO  L286             CfgBuilder]: Removed 4 assue(true) statements.
[2020-11-25 12:19:32,116 INFO  L202        PluginConnector]: Adding new model COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:19:32 BoogieIcfgContainer
[2020-11-25 12:19:32,116 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:19:31" (2/2) ...
[2020-11-25 12:19:32,116 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 12:19:32,116 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@17188124 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:19:32, skipping insertion in model container
[2020-11-25 12:19:32,116 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 12:19:32,117 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 12:19:32,117 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 12:19:32,118 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 12:19:32,118 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:19:31" (1/3) ...
[2020-11-25 12:19:32,119 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@5dd4d033 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:19:32, skipping insertion in model container
[2020-11-25 12:19:32,119 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:19:31" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 12:19:32,156 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:19:32 NWAContainer
[2020-11-25 12:19:32,156 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 12:19:32,156 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 12:19:32,156 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 12:19:32,157 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 12:19:32,158 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:19:32" (3/4) ...
[2020-11-25 12:19:32,158 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@17ae2237 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:19:32, skipping insertion in model container
[2020-11-25 12:19:32,158 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:19:32" (4/4) ...
[2020-11-25 12:19:32,161 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 12:19:32,165 INFO  L110   BuchiProductObserver]: Initial RCFG 1658 locations, 2150 edges
[2020-11-25 12:19:32,165 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 12:19:32,176 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 12:19:33,401 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 12:19:33,406 INFO  L110   BuchiProductObserver]: BuchiProgram size 3978 locations, 6941 edges
[2020-11-25 12:19:33,406 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:19:33 BoogieIcfgContainer
[2020-11-25 12:19:33,406 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 12:19:33,406 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 12:19:33,406 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 12:19:33,408 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 12:19:33,408 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:19:33" (1/1) ...
[2020-11-25 12:19:33,478 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call c_s197 := add~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s197, m_s197);
[2020-11-25 12:19:33,479 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call c_s197 := add~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s197, m_s197);
[2020-11-25 12:19:33,488 INFO  L313           BlockEncoder]: Initial Icfg 3978 locations, 6941 edges
[2020-11-25 12:19:33,488 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 12:19:33,489 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 12:19:33,489 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 12:19:33,489 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 12:19:33,500 INFO  L70    emoveInfeasibleEdges]: Removed 66 edges and 12 locations because of local infeasibility
[2020-11-25 12:19:33,509 INFO  L70        RemoveSinkStates]: Removed 108 edges and 54 locations by removing sink states
[2020-11-25 12:19:33,521 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 12:19:33,524 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 12:19:33,527 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 12:19:33,528 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 12:19:33,532 INFO  L313           BlockEncoder]: Encoded RCFG 3882 locations, 6723 edges
[2020-11-25 12:19:33,532 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 12:19:33 BasicIcfg
[2020-11-25 12:19:33,532 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 12:19:33,532 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 12:19:33,532 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 12:19:33,534 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 12:19:33,534 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:19:33,534 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:19:31" (1/6) ...
[2020-11-25 12:19:33,537 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3e768b34 and model type COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 12:19:33, skipping insertion in model container
[2020-11-25 12:19:33,537 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:19:33,537 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:19:31" (2/6) ...
[2020-11-25 12:19:33,537 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3e768b34 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 12:19:33, skipping insertion in model container
[2020-11-25 12:19:33,537 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:19:33,537 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:19:32" (3/6) ...
[2020-11-25 12:19:33,537 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3e768b34 and model type COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 12:19:33, skipping insertion in model container
[2020-11-25 12:19:33,537 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:19:33,537 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:19:32" (4/6) ...
[2020-11-25 12:19:33,538 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3e768b34 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 12:19:33, skipping insertion in model container
[2020-11-25 12:19:33,538 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:19:33,538 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:19:33" (5/6) ...
[2020-11-25 12:19:33,538 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3e768b34 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 12:19:33, skipping insertion in model container
[2020-11-25 12:19:33,538 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:19:33,538 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 12:19:33" (6/6) ...
[2020-11-25 12:19:33,539 INFO  L404   chiAutomizerObserver]: Analyzing ICFG COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transfer-fail.bpl_BEv2
[2020-11-25 12:19:33,573 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 12:19:33,573 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 12:19:33,574 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 12:19:33,574 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 12:19:33,574 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 12:19:33,574 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 12:19:33,574 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 12:19:33,574 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 12:19:33,574 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 12:19:33,611 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3882 states.
[2020-11-25 12:19:33,664 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:19:33,664 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:19:33,664 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:19:33,671 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:19:33,671 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:19:33,671 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 12:19:33,671 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3882 states.
[2020-11-25 12:19:33,691 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:19:33,691 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:19:33,691 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:19:33,693 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:19:33,693 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_COM0 := false;
[L2]                 call_transfer_COM0 := false;
[L2]     CALL        call main();
[L4286]              assume null == 0;
[L4287]  CALL        call this := FreshRefGenerator__success();
[L1872]              havoc newRef;
[L1873]              assume Alloc[newRef] == false;
[L1874]              Alloc[newRef] := true;
[L1875]              assume newRef != null;
[L4287]  RET         call this := FreshRefGenerator__success();
[L4288]              assume now >= 0;
[L4289]              assume DType[this] == COM;
[L4290]              assume msgvalue_MSG >= 0;
[L4291]              gas := gas - 53000;
[L4292]  CALL        call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND FALSE  !(__exception)
[L553]   CALL        call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2237]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]  COND TRUE   revert
[L553]   RET         call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L554]               assume !revert && gas >= 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L4293]              assume !revert && gas >= 0;

Loop:
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND TRUE   choice == 15
[L4181]              gas := gas - 21000;
[L4182]  COND FALSE  !(gas >= 0)
[L4296]  RET         call CorralChoice_COM(this);

[2020-11-25 12:19:33,706 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:19:33,707 INFO  L82        PathProgramCache]: Analyzing trace with hash 1894897556, now seen corresponding path program 1 times
[2020-11-25 12:19:33,711 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:19:33,744 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:19:33,787 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 12:19:33,792 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:19:33,792 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 12:19:33,798 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:19:33,998 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 12:19:33,998 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 12:19:34,000 INFO  L87              Difference]: Start difference. First operand 3882 states. Second operand 3 states.
[2020-11-25 12:19:34,223 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:19:34,224 INFO  L93              Difference]: Finished difference Result 2685 states and 3072 transitions.
[2020-11-25 12:19:34,224 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 12:19:34,226 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2685 states and 3072 transitions.
[2020-11-25 12:19:34,242 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:19:34,268 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2685 states to 2681 states and 3064 transitions.
[2020-11-25 12:19:34,269 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 12:19:34,271 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 678
[2020-11-25 12:19:34,272 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2681 states and 3064 transitions.
[2020-11-25 12:19:34,280 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:19:34,280 INFO  L728         BuchiCegarLoop]: Abstraction has 2681 states and 3064 transitions.
[2020-11-25 12:19:34,298 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2681 states and 3064 transitions.
[2020-11-25 12:19:34,350 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2681 to 2681.
[2020-11-25 12:19:34,350 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2681 states.
[2020-11-25 12:19:34,359 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2681 states to 2681 states and 3064 transitions.
[2020-11-25 12:19:34,361 INFO  L751         BuchiCegarLoop]: Abstraction has 2681 states and 3064 transitions.
[2020-11-25 12:19:34,361 INFO  L631         BuchiCegarLoop]: Abstraction has 2681 states and 3064 transitions.
[2020-11-25 12:19:34,361 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 12:19:34,361 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2681 states and 3064 transitions.
[2020-11-25 12:19:34,370 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:19:34,371 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:19:34,371 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:19:34,373 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:19:34,373 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_COM0 := false;
[L2]                 call_transfer_COM0 := false;
[L2]     CALL        call main();
[L4286]              assume null == 0;
[L4287]  CALL        call this := FreshRefGenerator__success();
[L1872]              havoc newRef;
[L1873]              assume Alloc[newRef] == false;
[L1874]              Alloc[newRef] := true;
[L1875]              assume newRef != null;
[L4287]  RET         call this := FreshRefGenerator__success();
[L4288]              assume now >= 0;
[L4289]              assume DType[this] == COM;
[L4290]              assume msgvalue_MSG >= 0;
[L4291]              gas := gas - 53000;
[L4292]  CALL        call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND FALSE  !(__exception)
[L553]   CALL        call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND TRUE   revert
[L2237]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]  COND TRUE   revert
[L553]   RET         call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L554]               assume !revert && gas >= 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L4293]              assume !revert && gas >= 0;
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s454 && (value_s454 > _balances_COM[this][msgsender_MSG] || _balances_COM[this][to_s454] + value_s454 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COM0 := true;
[L2]                 call_transfer_COM0 := false;
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND FALSE  !(__exception)
[L940]   CALL        call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2393]  COND TRUE   !(value_s454 <= _balances_COM[this][msgsender_MSG])
[L2394]              revert := true;
[L940]   RET         call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L941]               assume !revert && gas >= 0;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);

Loop:
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s454 && (value_s454 > _balances_COM[this][msgsender_MSG] || _balances_COM[this][to_s454] + value_s454 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COM0 := true;
[L2]                 call_transfer_COM0 := false;
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND FALSE  !(__exception)
[L940]   CALL        call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2393]  COND TRUE   !(value_s454 <= _balances_COM[this][msgsender_MSG])
[L2394]              revert := true;
[L940]   RET         call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L941]               assume !revert && gas >= 0;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);

[2020-11-25 12:19:34,377 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:19:34,377 INFO  L82        PathProgramCache]: Analyzing trace with hash 1310701342, now seen corresponding path program 1 times
[2020-11-25 12:19:34,378 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:19:34,391 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:19:34,414 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 12:19:34,415 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:19:34,415 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 12:19:34,416 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:19:34,416 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 12:19:34,417 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 12:19:34,417 INFO  L87              Difference]: Start difference. First operand 2681 states and 3064 transitions. cyclomatic complexity: 385 Second operand 3 states.
[2020-11-25 12:19:34,502 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:19:34,502 INFO  L93              Difference]: Finished difference Result 3339 states and 3826 transitions.
[2020-11-25 12:19:34,502 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 12:19:34,502 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3339 states and 3826 transitions.
[2020-11-25 12:19:34,521 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 12:19:34,540 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3339 states to 3123 states and 3494 transitions.
[2020-11-25 12:19:34,541 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 763
[2020-11-25 12:19:34,542 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 763
[2020-11-25 12:19:34,542 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3123 states and 3494 transitions.
[2020-11-25 12:19:34,548 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:19:34,548 INFO  L728         BuchiCegarLoop]: Abstraction has 3123 states and 3494 transitions.
[2020-11-25 12:19:34,552 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3123 states and 3494 transitions.
[2020-11-25 12:19:34,582 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3123 to 2804.
[2020-11-25 12:19:34,582 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2804 states.
[2020-11-25 12:19:34,586 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2804 states to 2804 states and 3097 transitions.
[2020-11-25 12:19:34,586 INFO  L751         BuchiCegarLoop]: Abstraction has 2804 states and 3097 transitions.
[2020-11-25 12:19:34,586 INFO  L631         BuchiCegarLoop]: Abstraction has 2804 states and 3097 transitions.
[2020-11-25 12:19:34,586 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 12:19:34,586 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2804 states and 3097 transitions.
[2020-11-25 12:19:34,593 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 12:19:34,593 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:19:34,593 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:19:34,595 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:19:34,595 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_COM0 := false;
[L2]                 call_transfer_COM0 := false;
[L2]     CALL        call main();
[L4286]              assume null == 0;
[L4287]  CALL        call this := FreshRefGenerator__success();
[L1872]              havoc newRef;
[L1873]              assume Alloc[newRef] == false;
[L1874]              Alloc[newRef] := true;
[L1875]              assume newRef != null;
[L4287]  RET         call this := FreshRefGenerator__success();
[L4288]              assume now >= 0;
[L4289]              assume DType[this] == COM;
[L4290]              assume msgvalue_MSG >= 0;
[L4291]              gas := gas - 53000;
[L4292]  CALL        call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND FALSE  !(__exception)
[L553]   CALL        call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2237]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]  COND FALSE  !(revert)
[L2241]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2115]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2115]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2119]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2090]              assume msgsender_MSG != null;
[L2091]              Balance[this] := 0;
[L2092]              _name_ERC20Detailed[this] := -1465673266;
[L2093]              _symbol_ERC20Detailed[this] := -1465673266;
[L2094]              _decimals_ERC20Detailed[this] := 0;
[L2096]              _name_ERC20Detailed[this] := name_s228;
[L2097]              _symbol_ERC20Detailed[this] := symbol_s228;
[L2098]              _decimals_ERC20Detailed[this] := decimals_s228;
[L2119]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2120]  COND FALSE  !(revert)
[L2241]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2242]  COND FALSE  !(revert)
[L2245]  CALL        call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]              assume msgsender_MSG != null;
[L2194]              Balance[this] := 0;
[L2195]              _balances_COM[this] := zeroRefintArr();
[L2196]              sum__balances0[this] := 0;
[L2197]              _allowed_COM[this] := zeroRefRefintArr();
[L2198]              sum__allowed1[this] := 0;
[L2199]              tokenName_COM[this] := -963585000;
[L2200]              tokenSymbol_COM[this] := -1124477489;
[L2201]              tokenDecimals_COM[this] := 18;
[L2202]              _totalSupply_COM[this] := 1000000000000000000000000;
[L2203]              noFee_COM[this] := 10000000000000000001;
[L2204]              heightEnd20Percent_COM[this] := 10328752;
[L2205]              heightEnd10Percent_COM[this] := 12582818;
[L2206]              heightEnd05Percent_COM[this] := 14836884;
[L2209]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2210]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2211]              Balance[this] := Balance[this] + msgvalue_MSG;
[L2213]  CALL        call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L3009]  COND FALSE  !(!(amount_s1039 != 0))
[L3013]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L3013]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L3014]  COND FALSE  !(revert)
[L3017]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1039];
[L3018]              _balances_COM[this][account_s1039] := __var_27;
[L3019]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1039];
[L3020]              assert { :EventEmitted "Transfer_COM" } true;
[L2213]  RET         call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L2214]  COND FALSE  !(revert)
[L2245]  RET         call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2246]  COND FALSE  !(revert)
[L553]   RET         call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L554]               assume !revert && gas >= 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L4293]              assume !revert && gas >= 0;
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s454 && (value_s454 > _balances_COM[this][msgsender_MSG] || _balances_COM[this][to_s454] + value_s454 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COM0 := true;
[L2]                 call_transfer_COM0 := false;
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND FALSE  !(__exception)
[L940]   CALL        call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2393]  COND FALSE  !(!(value_s454 <= _balances_COM[this][msgsender_MSG]))
[L2397]              __var_4 := null;
[L2398]  COND FALSE  !(!(to_s454 != null))
[L2402]  COND TRUE   value_s454 < noFee_COM[this]
[L2403]  CALL        call _transferBurnNo~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2562]  COND FALSE  !(!(value_s607 <= _balances_COM[this][msgsender_MSG]))
[L2566]              __var_9 := null;
[L2567]  COND FALSE  !(!(to_s607 != null))
[L2571]  COND FALSE  !(!(value_s607 < noFee_COM[this]))
[L2575]  CALL        call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s607);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2575]  RET         call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s607);
[L2576]  COND FALSE  !(revert)
[L2579]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][msgsender_MSG];
[L2580]              _balances_COM[this][msgsender_MSG] := __var_10;
[L2581]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][msgsender_MSG];
[L2582]  CALL        call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s607], value_s607);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2582]  RET         call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s607], value_s607);
[L2583]  COND FALSE  !(revert)
[L2586]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s607];
[L2587]              _balances_COM[this][to_s607] := __var_11;
[L2588]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s607];
[L2589]              assert { :EventEmitted "Transfer_COM" } true;
[L2403]  RET         call _transferBurnNo~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2404]  COND FALSE  !(revert)
[L2413]              __ret_0_ := true;
[L940]   RET         call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L941]               assume !revert && gas >= 0;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);

Loop:
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s454 && (value_s454 > _balances_COM[this][msgsender_MSG] || _balances_COM[this][to_s454] + value_s454 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COM0 := true;
[L2]                 call_transfer_COM0 := false;
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND FALSE  !(__exception)
[L940]   CALL        call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2393]  COND FALSE  !(!(value_s454 <= _balances_COM[this][msgsender_MSG]))
[L2397]              __var_4 := null;
[L2398]  COND FALSE  !(!(to_s454 != null))
[L2402]  COND TRUE   value_s454 < noFee_COM[this]
[L2403]  CALL        call _transferBurnNo~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2562]  COND FALSE  !(!(value_s607 <= _balances_COM[this][msgsender_MSG]))
[L2566]              __var_9 := null;
[L2567]  COND FALSE  !(!(to_s607 != null))
[L2571]  COND FALSE  !(!(value_s607 < noFee_COM[this]))
[L2575]  CALL        call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s607);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2575]  RET         call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s607);
[L2576]  COND FALSE  !(revert)
[L2579]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][msgsender_MSG];
[L2580]              _balances_COM[this][msgsender_MSG] := __var_10;
[L2581]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][msgsender_MSG];
[L2582]  CALL        call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s607], value_s607);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2582]  RET         call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s607], value_s607);
[L2583]  COND FALSE  !(revert)
[L2586]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s607];
[L2587]              _balances_COM[this][to_s607] := __var_11;
[L2588]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s607];
[L2589]              assert { :EventEmitted "Transfer_COM" } true;
[L2403]  RET         call _transferBurnNo~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2404]  COND FALSE  !(revert)
[L2413]              __ret_0_ := true;
[L940]   RET         call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L941]               assume !revert && gas >= 0;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);

[2020-11-25 12:19:34,599 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:19:34,599 INFO  L82        PathProgramCache]: Analyzing trace with hash 1923069959, now seen corresponding path program 1 times
[2020-11-25 12:19:34,600 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:19:34,622 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:19:34,856 INFO  L134       CoverageAnalysis]: Checked inductivity of 10 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 10 trivial. 0 not checked.
[2020-11-25 12:19:34,856 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:19:34,856 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [17] imperfect sequences [] total 17
[2020-11-25 12:19:34,857 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:19:34,857 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 18 interpolants.
[2020-11-25 12:19:34,857 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=46, Invalid=260, Unknown=0, NotChecked=0, Total=306
[2020-11-25 12:19:34,857 INFO  L87              Difference]: Start difference. First operand 2804 states and 3097 transitions. cyclomatic complexity: 295 Second operand 18 states.
[2020-11-25 12:19:37,618 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:19:37,618 INFO  L93              Difference]: Finished difference Result 2892 states and 3197 transitions.
[2020-11-25 12:19:37,618 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 12:19:37,619 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2892 states and 3197 transitions.
[2020-11-25 12:19:37,626 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 12:19:37,634 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2892 states to 2892 states and 3197 transitions.
[2020-11-25 12:19:37,635 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 737
[2020-11-25 12:19:37,635 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 737
[2020-11-25 12:19:37,635 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2892 states and 3197 transitions.
[2020-11-25 12:19:37,639 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:19:37,639 INFO  L728         BuchiCegarLoop]: Abstraction has 2892 states and 3197 transitions.
[2020-11-25 12:19:37,642 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2892 states and 3197 transitions.
[2020-11-25 12:19:37,663 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2892 to 2707.
[2020-11-25 12:19:37,663 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2707 states.
[2020-11-25 12:19:37,665 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2707 states to 2707 states and 2973 transitions.
[2020-11-25 12:19:37,666 INFO  L751         BuchiCegarLoop]: Abstraction has 2707 states and 2973 transitions.
[2020-11-25 12:19:37,666 INFO  L631         BuchiCegarLoop]: Abstraction has 2707 states and 2973 transitions.
[2020-11-25 12:19:37,666 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 12:19:37,666 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2707 states and 2973 transitions.
[2020-11-25 12:19:37,669 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:19:37,669 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:19:37,669 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:19:37,671 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:19:37,671 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_COM0 := false;
[L2]                 call_transfer_COM0 := false;
[L2]     CALL        call main();
[L4286]              assume null == 0;
[L4287]  CALL        call this := FreshRefGenerator__success();
[L1872]              havoc newRef;
[L1873]              assume Alloc[newRef] == false;
[L1874]              Alloc[newRef] := true;
[L1875]              assume newRef != null;
[L4287]  RET         call this := FreshRefGenerator__success();
[L4288]              assume now >= 0;
[L4289]              assume DType[this] == COM;
[L4290]              assume msgvalue_MSG >= 0;
[L4291]              gas := gas - 53000;
[L4292]  CALL        call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND TRUE   __exception
[L526]               __tmp__Balance := Balance;
[L527]               __tmp__DType := DType;
[L528]               __tmp__Alloc := Alloc;
[L529]               __tmp__balance_ADDR := balance_ADDR;
[L530]               __tmp__M_Ref_int := M_Ref_int;
[L531]               __tmp__sum__balances0 := sum__balances0;
[L532]               __tmp__alloc__allowed_COM_lvl0 := alloc__allowed_COM_lvl0;
[L533]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L534]               __tmp__sum__allowed1 := sum__allowed1;
[L535]               __tmp__Length := Length;
[L536]               __tmp__now := now;
[L537]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L538]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L539]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L540]               __tmp___balances_COM := _balances_COM;
[L541]               __tmp___allowed_COM := _allowed_COM;
[L542]               __tmp__tokenName_COM := tokenName_COM;
[L543]               __tmp__tokenSymbol_COM := tokenSymbol_COM;
[L544]               __tmp__tokenDecimals_COM := tokenDecimals_COM;
[L545]               __tmp___totalSupply_COM := _totalSupply_COM;
[L546]               __tmp__noFee_COM := noFee_COM;
[L547]               __tmp__heightEnd20Percent_COM := heightEnd20Percent_COM;
[L548]               __tmp__heightEnd10Percent_COM := heightEnd10Percent_COM;
[L549]               __tmp__heightEnd05Percent_COM := heightEnd05Percent_COM;
[L550]   CALL        call COM_COM__fail(this, msgsender_MSG, msgvalue_MSG);
[L2221]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L1896]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1881]              assume msgsender_MSG != null;
[L1882]              __tmp__Balance[this] := 0;
[L1896]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1897]  COND FALSE  !(revert)
[L2221]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2222]  COND FALSE  !(revert)
[L2225]  CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__tokenName_COM[this], __tmp__tokenSymbol_COM[this], __tmp__tokenDecimals_COM[this]);
[L2103]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L1896]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1881]              assume msgsender_MSG != null;
[L1882]              __tmp__Balance[this] := 0;
[L1896]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1897]  COND FALSE  !(revert)
[L2103]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2104]  COND FALSE  !(revert)
[L2107]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2076]              assume msgsender_MSG != null;
[L2077]              __tmp__Balance[this] := 0;
[L2078]              __tmp___name_ERC20Detailed[this] := -1465673266;
[L2079]              __tmp___symbol_ERC20Detailed[this] := -1465673266;
[L2080]              __tmp___decimals_ERC20Detailed[this] := 0;
[L2082]              __tmp___name_ERC20Detailed[this] := name_s228;
[L2083]              __tmp___symbol_ERC20Detailed[this] := symbol_s228;
[L2084]              __tmp___decimals_ERC20Detailed[this] := decimals_s228;
[L2107]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2108]  COND FALSE  !(revert)
[L2225]  RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__tokenName_COM[this], __tmp__tokenSymbol_COM[this], __tmp__tokenDecimals_COM[this]);
[L2226]  COND FALSE  !(revert)
[L2229]  CALL        call COM_COM_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2164]              assume msgsender_MSG != null;
[L2165]              __tmp__Balance[this] := 0;
[L2166]              __tmp___balances_COM[this] := zeroRefintArr();
[L2167]              __tmp__sum__balances0[this] := 0;
[L2168]              __tmp___allowed_COM[this] := zeroRefRefintArr();
[L2169]              __tmp__sum__allowed1[this] := 0;
[L2170]              __tmp__tokenName_COM[this] := -963585000;
[L2171]              __tmp__tokenSymbol_COM[this] := -1124477489;
[L2172]              __tmp__tokenDecimals_COM[this] := 18;
[L2173]              __tmp___totalSupply_COM[this] := 1000000000000000000000000;
[L2174]              __tmp__noFee_COM[this] := 10000000000000000001;
[L2175]              __tmp__heightEnd20Percent_COM[this] := 10328752;
[L2176]              __tmp__heightEnd10Percent_COM[this] := 12582818;
[L2177]              __tmp__heightEnd05Percent_COM[this] := 14836884;
[L2180]              assume __tmp__Balance[msgsender_MSG] >= msgvalue_MSG;
[L2181]              __tmp__Balance[msgsender_MSG] := __tmp__Balance[msgsender_MSG] - msgvalue_MSG;
[L2182]              __tmp__Balance[this] := __tmp__Balance[this] + msgvalue_MSG;
[L2184]  CALL        call _mint~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, __tmp___totalSupply_COM[this]);
[L2993]  COND FALSE  !(!(amount_s1039 != 0))
[L2997]  CALL        call __var_27 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_COM[this][account_s1039], amount_s1039);
[L1999]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2000]              __ret_0_ := c_s163;
[L2997]  RET         call __var_27 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_COM[this][account_s1039], amount_s1039);
[L2998]  COND FALSE  !(revert)
[L3001]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_COM[this][account_s1039];
[L3002]              __tmp___balances_COM[this][account_s1039] := __var_27;
[L3003]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_COM[this][account_s1039];
[L2184]  RET         call _mint~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, __tmp___totalSupply_COM[this]);
[L2185]  COND FALSE  !(revert)
[L2229]  RET         call COM_COM_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2230]  COND FALSE  !(revert)
[L550]   RET         call COM_COM__fail(this, msgsender_MSG, msgvalue_MSG);
[L551]               assume revert || gas < 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L4293]              assume !revert && gas >= 0;
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s454 && (value_s454 > _balances_COM[this][msgsender_MSG] || _balances_COM[this][to_s454] + value_s454 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COM0 := true;
[L2]                 call_transfer_COM0 := false;
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND FALSE  !(__exception)
[L940]   CALL        call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2393]  COND FALSE  !(!(value_s454 <= _balances_COM[this][msgsender_MSG]))
[L2397]              __var_4 := null;
[L2398]  COND FALSE  !(!(to_s454 != null))
[L2402]  COND TRUE   value_s454 < noFee_COM[this]
[L2403]  CALL        call _transferBurnNo~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2562]  COND FALSE  !(!(value_s607 <= _balances_COM[this][msgsender_MSG]))
[L2566]              __var_9 := null;
[L2567]  COND FALSE  !(!(to_s607 != null))
[L2571]  COND FALSE  !(!(value_s607 < noFee_COM[this]))
[L2575]  CALL        call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s607);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2575]  RET         call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s607);
[L2576]  COND FALSE  !(revert)
[L2579]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][msgsender_MSG];
[L2580]              _balances_COM[this][msgsender_MSG] := __var_10;
[L2581]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][msgsender_MSG];
[L2582]  CALL        call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s607], value_s607);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2582]  RET         call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s607], value_s607);
[L2583]  COND FALSE  !(revert)
[L2586]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s607];
[L2587]              _balances_COM[this][to_s607] := __var_11;
[L2588]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s607];
[L2589]              assert { :EventEmitted "Transfer_COM" } true;
[L2403]  RET         call _transferBurnNo~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2404]  COND FALSE  !(revert)
[L2413]              __ret_0_ := true;
[L940]   RET         call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L941]               assume !revert && gas >= 0;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);

Loop:
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND TRUE   choice == 15
[L4181]              gas := gas - 21000;
[L4182]  COND FALSE  !(gas >= 0)
[L4296]  RET         call CorralChoice_COM(this);

[2020-11-25 12:19:37,674 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:19:37,675 INFO  L82        PathProgramCache]: Analyzing trace with hash 1501312767, now seen corresponding path program 1 times
[2020-11-25 12:19:37,675 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:19:37,684 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:19:37,715 INFO  L134       CoverageAnalysis]: Checked inductivity of 10 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 10 trivial. 0 not checked.
[2020-11-25 12:19:37,715 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:19:37,715 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 12:19:37,715 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:19:37,716 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 12:19:37,716 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 12:19:37,716 INFO  L87              Difference]: Start difference. First operand 2707 states and 2973 transitions. cyclomatic complexity: 269 Second operand 4 states.
[2020-11-25 12:19:37,806 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:19:37,806 INFO  L93              Difference]: Finished difference Result 3424 states and 3837 transitions.
[2020-11-25 12:19:37,806 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 12:19:37,806 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3424 states and 3837 transitions.
[2020-11-25 12:19:37,816 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 12:19:37,825 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3424 states to 3315 states and 3726 transitions.
[2020-11-25 12:19:37,825 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 811
[2020-11-25 12:19:37,826 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 811
[2020-11-25 12:19:37,826 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3315 states and 3726 transitions.
[2020-11-25 12:19:37,828 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:19:37,828 INFO  L728         BuchiCegarLoop]: Abstraction has 3315 states and 3726 transitions.
[2020-11-25 12:19:37,831 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3315 states and 3726 transitions.
[2020-11-25 12:19:37,853 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3315 to 2613.
[2020-11-25 12:19:37,854 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2613 states.
[2020-11-25 12:19:37,856 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2613 states to 2613 states and 2843 transitions.
[2020-11-25 12:19:37,856 INFO  L751         BuchiCegarLoop]: Abstraction has 2613 states and 2843 transitions.
[2020-11-25 12:19:37,856 INFO  L631         BuchiCegarLoop]: Abstraction has 2613 states and 2843 transitions.
[2020-11-25 12:19:37,856 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 12:19:37,856 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2613 states and 2843 transitions.
[2020-11-25 12:19:37,860 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:19:37,860 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:19:37,860 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:19:37,861 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:19:37,861 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_COM0 := false;
[L2]                 call_transfer_COM0 := false;
[L2]     CALL        call main();
[L4286]              assume null == 0;
[L4287]  CALL        call this := FreshRefGenerator__success();
[L1872]              havoc newRef;
[L1873]              assume Alloc[newRef] == false;
[L1874]              Alloc[newRef] := true;
[L1875]              assume newRef != null;
[L4287]  RET         call this := FreshRefGenerator__success();
[L4288]              assume now >= 0;
[L4289]              assume DType[this] == COM;
[L4290]              assume msgvalue_MSG >= 0;
[L4291]              gas := gas - 53000;
[L4292]  CALL        call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND FALSE  !(__exception)
[L553]   CALL        call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2237]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]  COND FALSE  !(revert)
[L2241]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2115]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2115]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2119]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2090]              assume msgsender_MSG != null;
[L2091]              Balance[this] := 0;
[L2092]              _name_ERC20Detailed[this] := -1465673266;
[L2093]              _symbol_ERC20Detailed[this] := -1465673266;
[L2094]              _decimals_ERC20Detailed[this] := 0;
[L2096]              _name_ERC20Detailed[this] := name_s228;
[L2097]              _symbol_ERC20Detailed[this] := symbol_s228;
[L2098]              _decimals_ERC20Detailed[this] := decimals_s228;
[L2119]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2120]  COND FALSE  !(revert)
[L2241]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2242]  COND FALSE  !(revert)
[L2245]  CALL        call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]              assume msgsender_MSG != null;
[L2194]              Balance[this] := 0;
[L2195]              _balances_COM[this] := zeroRefintArr();
[L2196]              sum__balances0[this] := 0;
[L2197]              _allowed_COM[this] := zeroRefRefintArr();
[L2198]              sum__allowed1[this] := 0;
[L2199]              tokenName_COM[this] := -963585000;
[L2200]              tokenSymbol_COM[this] := -1124477489;
[L2201]              tokenDecimals_COM[this] := 18;
[L2202]              _totalSupply_COM[this] := 1000000000000000000000000;
[L2203]              noFee_COM[this] := 10000000000000000001;
[L2204]              heightEnd20Percent_COM[this] := 10328752;
[L2205]              heightEnd10Percent_COM[this] := 12582818;
[L2206]              heightEnd05Percent_COM[this] := 14836884;
[L2209]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2210]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2211]              Balance[this] := Balance[this] + msgvalue_MSG;
[L2213]  CALL        call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L3009]  COND FALSE  !(!(amount_s1039 != 0))
[L3013]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L3013]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L3014]  COND FALSE  !(revert)
[L3017]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1039];
[L3018]              _balances_COM[this][account_s1039] := __var_27;
[L3019]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1039];
[L3020]              assert { :EventEmitted "Transfer_COM" } true;
[L2213]  RET         call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L2214]  COND FALSE  !(revert)
[L2245]  RET         call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2246]  COND FALSE  !(revert)
[L553]   RET         call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L554]               assume !revert && gas >= 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L4293]              assume !revert && gas >= 0;
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND FALSE  !(choice == 10)
[L4219]  COND FALSE  !(choice == 9)
[L4225]  COND FALSE  !(choice == 8)
[L4231]  COND FALSE  !(choice == 7)
[L4237]  COND FALSE  !(choice == 6)
[L4244]  COND FALSE  !(choice == 5)
[L4250]  COND FALSE  !(choice == 4)
[L4257]  COND FALSE  !(choice == 3)
[L4264]  COND TRUE   choice == 2
[L4265]              gas := gas - 21000;
[L4266]  COND TRUE   gas >= 0
[L4267]              assume amount_s1051 >= 0 && amount_s1051 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4268]              assume msgvalue_MSG == 0;
[L4269]  CALL        call burn~uint256_COM(this, msgsender_MSG, msgvalue_MSG, amount_s1051);
[L1270]              havoc __exception;
[L1271]              revert := false;
[L1272]  COND FALSE  !(__exception)
[L1300]  CALL        call burn~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, amount_s1051);
[L3033]  CALL        call _burn~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1051);
[L3069]  COND FALSE  !(!(amount_s1099 != 0))
[L3073]  COND FALSE  !(!(amount_s1099 <= _balances_COM[this][account_s1099]))
[L3077]  CALL        call __var_28 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], amount_s1099);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3077]  RET         call __var_28 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], amount_s1099);
[L3078]  COND FALSE  !(revert)
[L3081]              _totalSupply_COM[this] := __var_28;
[L3082]  CALL        call __var_29 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1099], amount_s1099);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3082]  RET         call __var_29 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1099], amount_s1099);
[L3083]  COND FALSE  !(revert)
[L3086]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1099];
[L3087]              _balances_COM[this][account_s1099] := __var_29;
[L3088]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1099];
[L3089]              assert { :EventEmitted "Transfer_COM" } true;
[L3033]  RET         call _burn~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1051);
[L3034]  COND FALSE  !(revert)
[L1300]  RET         call burn~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, amount_s1051);
[L1301]              assume !revert && gas >= 0;
[L4269]  RET         call burn~uint256_COM(this, msgsender_MSG, msgvalue_MSG, amount_s1051);
[L4296]  RET         call CorralChoice_COM(this);
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s454 && (value_s454 > _balances_COM[this][msgsender_MSG] || _balances_COM[this][to_s454] + value_s454 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COM0 := true;
[L2]                 call_transfer_COM0 := false;
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND FALSE  !(__exception)
[L940]   CALL        call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2393]  COND FALSE  !(!(value_s454 <= _balances_COM[this][msgsender_MSG]))
[L2397]              __var_4 := null;
[L2398]  COND FALSE  !(!(to_s454 != null))
[L2402]  COND TRUE   value_s454 < noFee_COM[this]
[L2403]  CALL        call _transferBurnNo~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2562]  COND FALSE  !(!(value_s607 <= _balances_COM[this][msgsender_MSG]))
[L2566]              __var_9 := null;
[L2567]  COND FALSE  !(!(to_s607 != null))
[L2571]  COND FALSE  !(!(value_s607 < noFee_COM[this]))
[L2575]  CALL        call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s607);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2575]  RET         call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s607);
[L2576]  COND FALSE  !(revert)
[L2579]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][msgsender_MSG];
[L2580]              _balances_COM[this][msgsender_MSG] := __var_10;
[L2581]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][msgsender_MSG];
[L2582]  CALL        call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s607], value_s607);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2582]  RET         call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s607], value_s607);
[L2583]  COND FALSE  !(revert)
[L2586]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s607];
[L2587]              _balances_COM[this][to_s607] := __var_11;
[L2588]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s607];
[L2589]              assert { :EventEmitted "Transfer_COM" } true;
[L2403]  RET         call _transferBurnNo~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2404]  COND FALSE  !(revert)
[L2413]              __ret_0_ := true;
[L940]   RET         call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L941]               assume !revert && gas >= 0;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);

Loop:
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s454 && (value_s454 > _balances_COM[this][msgsender_MSG] || _balances_COM[this][to_s454] + value_s454 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COM0 := true;
[L2]                 call_transfer_COM0 := false;
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND FALSE  !(__exception)
[L940]   CALL        call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2393]  COND FALSE  !(!(value_s454 <= _balances_COM[this][msgsender_MSG]))
[L2397]              __var_4 := null;
[L2398]  COND FALSE  !(!(to_s454 != null))
[L2402]  COND TRUE   value_s454 < noFee_COM[this]
[L2403]  CALL        call _transferBurnNo~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2562]  COND FALSE  !(!(value_s607 <= _balances_COM[this][msgsender_MSG]))
[L2566]              __var_9 := null;
[L2567]  COND FALSE  !(!(to_s607 != null))
[L2571]  COND FALSE  !(!(value_s607 < noFee_COM[this]))
[L2575]  CALL        call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s607);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2575]  RET         call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s607);
[L2576]  COND FALSE  !(revert)
[L2579]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][msgsender_MSG];
[L2580]              _balances_COM[this][msgsender_MSG] := __var_10;
[L2581]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][msgsender_MSG];
[L2582]  CALL        call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s607], value_s607);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2582]  RET         call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s607], value_s607);
[L2583]  COND FALSE  !(revert)
[L2586]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s607];
[L2587]              _balances_COM[this][to_s607] := __var_11;
[L2588]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s607];
[L2589]              assert { :EventEmitted "Transfer_COM" } true;
[L2403]  RET         call _transferBurnNo~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2404]  COND FALSE  !(revert)
[L2413]              __ret_0_ := true;
[L940]   RET         call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L941]               assume !revert && gas >= 0;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);

[2020-11-25 12:19:37,865 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:19:37,865 INFO  L82        PathProgramCache]: Analyzing trace with hash -1114030140, now seen corresponding path program 1 times
[2020-11-25 12:19:37,866 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:19:37,888 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:19:38,074 INFO  L134       CoverageAnalysis]: Checked inductivity of 69 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 69 trivial. 0 not checked.
[2020-11-25 12:19:38,075 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:19:38,075 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [17] imperfect sequences [] total 17
[2020-11-25 12:19:38,075 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:19:38,075 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 18 interpolants.
[2020-11-25 12:19:38,075 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=39, Invalid=267, Unknown=0, NotChecked=0, Total=306
[2020-11-25 12:19:38,076 INFO  L87              Difference]: Start difference. First operand 2613 states and 2843 transitions. cyclomatic complexity: 233 Second operand 18 states.
[2020-11-25 12:19:40,125 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:19:40,125 INFO  L93              Difference]: Finished difference Result 2675 states and 2907 transitions.
[2020-11-25 12:19:40,125 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-11-25 12:19:40,126 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2675 states and 2907 transitions.
[2020-11-25 12:19:40,130 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:19:40,135 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2675 states to 2661 states and 2892 transitions.
[2020-11-25 12:19:40,135 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 678
[2020-11-25 12:19:40,136 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 678
[2020-11-25 12:19:40,136 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2661 states and 2892 transitions.
[2020-11-25 12:19:40,138 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:19:40,138 INFO  L728         BuchiCegarLoop]: Abstraction has 2661 states and 2892 transitions.
[2020-11-25 12:19:40,140 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2661 states and 2892 transitions.
[2020-11-25 12:19:40,155 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2661 to 2619.
[2020-11-25 12:19:40,155 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2619 states.
[2020-11-25 12:19:40,157 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2619 states to 2619 states and 2849 transitions.
[2020-11-25 12:19:40,157 INFO  L751         BuchiCegarLoop]: Abstraction has 2619 states and 2849 transitions.
[2020-11-25 12:19:40,157 INFO  L631         BuchiCegarLoop]: Abstraction has 2619 states and 2849 transitions.
[2020-11-25 12:19:40,157 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 12:19:40,157 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2619 states and 2849 transitions.
[2020-11-25 12:19:40,160 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:19:40,160 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:19:40,160 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:19:40,162 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:19:40,162 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_COM0 := false;
[L2]                 call_transfer_COM0 := false;
[L2]     CALL        call main();
[L4286]              assume null == 0;
[L4287]  CALL        call this := FreshRefGenerator__success();
[L1872]              havoc newRef;
[L1873]              assume Alloc[newRef] == false;
[L1874]              Alloc[newRef] := true;
[L1875]              assume newRef != null;
[L4287]  RET         call this := FreshRefGenerator__success();
[L4288]              assume now >= 0;
[L4289]              assume DType[this] == COM;
[L4290]              assume msgvalue_MSG >= 0;
[L4291]              gas := gas - 53000;
[L4292]  CALL        call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND FALSE  !(__exception)
[L553]   CALL        call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2237]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]  COND FALSE  !(revert)
[L2241]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2115]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2115]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2119]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2090]              assume msgsender_MSG != null;
[L2091]              Balance[this] := 0;
[L2092]              _name_ERC20Detailed[this] := -1465673266;
[L2093]              _symbol_ERC20Detailed[this] := -1465673266;
[L2094]              _decimals_ERC20Detailed[this] := 0;
[L2096]              _name_ERC20Detailed[this] := name_s228;
[L2097]              _symbol_ERC20Detailed[this] := symbol_s228;
[L2098]              _decimals_ERC20Detailed[this] := decimals_s228;
[L2119]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2120]  COND FALSE  !(revert)
[L2241]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2242]  COND FALSE  !(revert)
[L2245]  CALL        call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]              assume msgsender_MSG != null;
[L2194]              Balance[this] := 0;
[L2195]              _balances_COM[this] := zeroRefintArr();
[L2196]              sum__balances0[this] := 0;
[L2197]              _allowed_COM[this] := zeroRefRefintArr();
[L2198]              sum__allowed1[this] := 0;
[L2199]              tokenName_COM[this] := -963585000;
[L2200]              tokenSymbol_COM[this] := -1124477489;
[L2201]              tokenDecimals_COM[this] := 18;
[L2202]              _totalSupply_COM[this] := 1000000000000000000000000;
[L2203]              noFee_COM[this] := 10000000000000000001;
[L2204]              heightEnd20Percent_COM[this] := 10328752;
[L2205]              heightEnd10Percent_COM[this] := 12582818;
[L2206]              heightEnd05Percent_COM[this] := 14836884;
[L2209]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2210]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2211]              Balance[this] := Balance[this] + msgvalue_MSG;
[L2213]  CALL        call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L3009]  COND FALSE  !(!(amount_s1039 != 0))
[L3013]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L3013]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L3014]  COND FALSE  !(revert)
[L3017]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1039];
[L3018]              _balances_COM[this][account_s1039] := __var_27;
[L3019]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1039];
[L3020]              assert { :EventEmitted "Transfer_COM" } true;
[L2213]  RET         call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L2214]  COND FALSE  !(revert)
[L2245]  RET         call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2246]  COND FALSE  !(revert)
[L553]   RET         call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L554]               assume !revert && gas >= 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L4293]              assume !revert && gas >= 0;
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND FALSE  !(choice == 10)
[L4219]  COND FALSE  !(choice == 9)
[L4225]  COND FALSE  !(choice == 8)
[L4231]  COND FALSE  !(choice == 7)
[L4237]  COND FALSE  !(choice == 6)
[L4244]  COND FALSE  !(choice == 5)
[L4250]  COND FALSE  !(choice == 4)
[L4257]  COND FALSE  !(choice == 3)
[L4264]  COND TRUE   choice == 2
[L4265]              gas := gas - 21000;
[L4266]  COND TRUE   gas >= 0
[L4267]              assume amount_s1051 >= 0 && amount_s1051 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4268]              assume msgvalue_MSG == 0;
[L4269]  CALL        call burn~uint256_COM(this, msgsender_MSG, msgvalue_MSG, amount_s1051);
[L1270]              havoc __exception;
[L1271]              revert := false;
[L1272]  COND FALSE  !(__exception)
[L1300]  CALL        call burn~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, amount_s1051);
[L3033]  CALL        call _burn~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1051);
[L3069]  COND FALSE  !(!(amount_s1099 != 0))
[L3073]  COND FALSE  !(!(amount_s1099 <= _balances_COM[this][account_s1099]))
[L3077]  CALL        call __var_28 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], amount_s1099);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3077]  RET         call __var_28 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], amount_s1099);
[L3078]  COND FALSE  !(revert)
[L3081]              _totalSupply_COM[this] := __var_28;
[L3082]  CALL        call __var_29 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1099], amount_s1099);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3082]  RET         call __var_29 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1099], amount_s1099);
[L3083]  COND FALSE  !(revert)
[L3086]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1099];
[L3087]              _balances_COM[this][account_s1099] := __var_29;
[L3088]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1099];
[L3089]              assert { :EventEmitted "Transfer_COM" } true;
[L3033]  RET         call _burn~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1051);
[L3034]  COND FALSE  !(revert)
[L1300]  RET         call burn~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, amount_s1051);
[L1301]              assume !revert && gas >= 0;
[L4269]  RET         call burn~uint256_COM(this, msgsender_MSG, msgvalue_MSG, amount_s1051);
[L4296]  RET         call CorralChoice_COM(this);
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s454 && (value_s454 > _balances_COM[this][msgsender_MSG] || _balances_COM[this][to_s454] + value_s454 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COM0 := true;
[L2]                 call_transfer_COM0 := false;
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND FALSE  !(__exception)
[L940]   CALL        call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2393]  COND FALSE  !(!(value_s454 <= _balances_COM[this][msgsender_MSG]))
[L2397]              __var_4 := null;
[L2398]  COND FALSE  !(!(to_s454 != null))
[L2402]  COND FALSE  !(value_s454 < noFee_COM[this])
[L2408]  CALL        call _transferBurnYes~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2477]  COND FALSE  !(!(value_s545 <= _balances_COM[this][msgsender_MSG]))
[L2481]              __var_5 := null;
[L2482]  COND FALSE  !(!(to_s545 != null))
[L2486]  COND FALSE  !(!(value_s545 >= noFee_COM[this]))
[L2490]  CALL        call tokensToBurn_s545 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s545);
[L2309]  CALL        call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND TRUE   now < heightEnd20Percent_COM[this]
[L2346]              __ret_0_ := 50;
[L2309]  RET         call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]  COND FALSE  !(revert)
[L2313]              currentRate_s365 := currentRate_s365;
[L2314]  CALL        call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L1978]              c_s119 := nonlinearDiv(a_s119, b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1979]              __ret_0_ := c_s119;
[L2314]  RET         call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L2315]  COND FALSE  !(revert)
[L2318]              onePercent_s365 := onePercent_s365;
[L2319]              __ret_0_ := onePercent_s365;
[L2490]  RET         call tokensToBurn_s545 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s545);
[L2491]  COND FALSE  !(revert)
[L2494]              tokensToBurn_s545 := tokensToBurn_s545;
[L2495]  CALL        call tokensToTransfer_s545 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s545, tokensToBurn_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2495]  RET         call tokensToTransfer_s545 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s545, tokensToBurn_s545);
[L2496]  COND FALSE  !(revert)
[L2499]              tokensToTransfer_s545 := tokensToTransfer_s545;
[L2500]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2500]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s545);
[L2501]  COND FALSE  !(revert)
[L2504]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][msgsender_MSG];
[L2505]              _balances_COM[this][msgsender_MSG] := __var_6;
[L2506]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][msgsender_MSG];
[L2507]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s545], tokensToTransfer_s545);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2507]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s545], tokensToTransfer_s545);
[L2508]  COND FALSE  !(revert)
[L2511]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s545];
[L2512]              _balances_COM[this][to_s545] := __var_7;
[L2513]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s545];
[L2514]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s545);
[L2515]  COND FALSE  !(revert)
[L2518]              _totalSupply_COM[this] := __var_8;
[L2519]              assert { :EventEmitted "Transfer_COM" } true;
[L2520]              assert { :EventEmitted "Transfer_COM" } true;
[L2408]  RET         call _transferBurnYes~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2409]  COND FALSE  !(revert)
[L2413]              __ret_0_ := true;
[L940]   RET         call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L941]               assume !revert && gas >= 0;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);

Loop:
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s454 && (value_s454 > _balances_COM[this][msgsender_MSG] || _balances_COM[this][to_s454] + value_s454 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COM0 := true;
[L2]                 call_transfer_COM0 := false;
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND FALSE  !(__exception)
[L940]   CALL        call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2393]  COND FALSE  !(!(value_s454 <= _balances_COM[this][msgsender_MSG]))
[L2397]              __var_4 := null;
[L2398]  COND FALSE  !(!(to_s454 != null))
[L2402]  COND FALSE  !(value_s454 < noFee_COM[this])
[L2408]  CALL        call _transferBurnYes~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2477]  COND FALSE  !(!(value_s545 <= _balances_COM[this][msgsender_MSG]))
[L2481]              __var_5 := null;
[L2482]  COND FALSE  !(!(to_s545 != null))
[L2486]  COND FALSE  !(!(value_s545 >= noFee_COM[this]))
[L2490]  CALL        call tokensToBurn_s545 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s545);
[L2309]  CALL        call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND TRUE   now < heightEnd20Percent_COM[this]
[L2346]              __ret_0_ := 50;
[L2309]  RET         call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]  COND FALSE  !(revert)
[L2313]              currentRate_s365 := currentRate_s365;
[L2314]  CALL        call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L1978]              c_s119 := nonlinearDiv(a_s119, b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1979]              __ret_0_ := c_s119;
[L2314]  RET         call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L2315]  COND FALSE  !(revert)
[L2318]              onePercent_s365 := onePercent_s365;
[L2319]              __ret_0_ := onePercent_s365;
[L2490]  RET         call tokensToBurn_s545 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s545);
[L2491]  COND FALSE  !(revert)
[L2494]              tokensToBurn_s545 := tokensToBurn_s545;
[L2495]  CALL        call tokensToTransfer_s545 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s545, tokensToBurn_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2495]  RET         call tokensToTransfer_s545 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s545, tokensToBurn_s545);
[L2496]  COND FALSE  !(revert)
[L2499]              tokensToTransfer_s545 := tokensToTransfer_s545;
[L2500]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2500]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s545);
[L2501]  COND FALSE  !(revert)
[L2504]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][msgsender_MSG];
[L2505]              _balances_COM[this][msgsender_MSG] := __var_6;
[L2506]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][msgsender_MSG];
[L2507]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s545], tokensToTransfer_s545);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2507]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s545], tokensToTransfer_s545);
[L2508]  COND FALSE  !(revert)
[L2511]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s545];
[L2512]              _balances_COM[this][to_s545] := __var_7;
[L2513]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s545];
[L2514]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s545);
[L2515]  COND FALSE  !(revert)
[L2518]              _totalSupply_COM[this] := __var_8;
[L2519]              assert { :EventEmitted "Transfer_COM" } true;
[L2520]              assert { :EventEmitted "Transfer_COM" } true;
[L2408]  RET         call _transferBurnYes~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2409]  COND FALSE  !(revert)
[L2413]              __ret_0_ := true;
[L940]   RET         call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L941]               assume !revert && gas >= 0;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);

[2020-11-25 12:19:40,168 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:19:40,168 INFO  L82        PathProgramCache]: Analyzing trace with hash -1991531419, now seen corresponding path program 1 times
[2020-11-25 12:19:40,168 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:19:40,191 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:19:40,520 INFO  L134       CoverageAnalysis]: Checked inductivity of 81 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 80 trivial. 0 not checked.
[2020-11-25 12:19:40,520 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:19:40,520 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [27] imperfect sequences [] total 27
[2020-11-25 12:19:40,521 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:19:40,521 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 28 interpolants.
[2020-11-25 12:19:40,521 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=75, Invalid=681, Unknown=0, NotChecked=0, Total=756
[2020-11-25 12:19:40,521 INFO  L87              Difference]: Start difference. First operand 2619 states and 2849 transitions. cyclomatic complexity: 233 Second operand 28 states.
[2020-11-25 12:19:44,359 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:19:44,359 INFO  L93              Difference]: Finished difference Result 2671 states and 2908 transitions.
[2020-11-25 12:19:44,359 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 28 states. 
[2020-11-25 12:19:44,359 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2671 states and 2908 transitions.
[2020-11-25 12:19:44,364 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:19:44,369 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2671 states to 2671 states and 2908 transitions.
[2020-11-25 12:19:44,369 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 682
[2020-11-25 12:19:44,370 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 682
[2020-11-25 12:19:44,370 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2671 states and 2908 transitions.
[2020-11-25 12:19:44,372 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:19:44,372 INFO  L728         BuchiCegarLoop]: Abstraction has 2671 states and 2908 transitions.
[2020-11-25 12:19:44,374 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2671 states and 2908 transitions.
[2020-11-25 12:19:44,387 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2671 to 2616.
[2020-11-25 12:19:44,387 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2616 states.
[2020-11-25 12:19:44,390 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2616 states to 2616 states and 2846 transitions.
[2020-11-25 12:19:44,390 INFO  L751         BuchiCegarLoop]: Abstraction has 2616 states and 2846 transitions.
[2020-11-25 12:19:44,390 INFO  L631         BuchiCegarLoop]: Abstraction has 2616 states and 2846 transitions.
[2020-11-25 12:19:44,390 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 12:19:44,390 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2616 states and 2846 transitions.
[2020-11-25 12:19:44,392 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:19:44,392 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:19:44,392 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:19:44,394 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:19:44,394 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_COM0 := false;
[L2]                 call_transfer_COM0 := false;
[L2]     CALL        call main();
[L4286]              assume null == 0;
[L4287]  CALL        call this := FreshRefGenerator__success();
[L1872]              havoc newRef;
[L1873]              assume Alloc[newRef] == false;
[L1874]              Alloc[newRef] := true;
[L1875]              assume newRef != null;
[L4287]  RET         call this := FreshRefGenerator__success();
[L4288]              assume now >= 0;
[L4289]              assume DType[this] == COM;
[L4290]              assume msgvalue_MSG >= 0;
[L4291]              gas := gas - 53000;
[L4292]  CALL        call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND FALSE  !(__exception)
[L553]   CALL        call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2237]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]  COND FALSE  !(revert)
[L2241]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2115]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2115]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2119]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2090]              assume msgsender_MSG != null;
[L2091]              Balance[this] := 0;
[L2092]              _name_ERC20Detailed[this] := -1465673266;
[L2093]              _symbol_ERC20Detailed[this] := -1465673266;
[L2094]              _decimals_ERC20Detailed[this] := 0;
[L2096]              _name_ERC20Detailed[this] := name_s228;
[L2097]              _symbol_ERC20Detailed[this] := symbol_s228;
[L2098]              _decimals_ERC20Detailed[this] := decimals_s228;
[L2119]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2120]  COND FALSE  !(revert)
[L2241]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2242]  COND FALSE  !(revert)
[L2245]  CALL        call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]              assume msgsender_MSG != null;
[L2194]              Balance[this] := 0;
[L2195]              _balances_COM[this] := zeroRefintArr();
[L2196]              sum__balances0[this] := 0;
[L2197]              _allowed_COM[this] := zeroRefRefintArr();
[L2198]              sum__allowed1[this] := 0;
[L2199]              tokenName_COM[this] := -963585000;
[L2200]              tokenSymbol_COM[this] := -1124477489;
[L2201]              tokenDecimals_COM[this] := 18;
[L2202]              _totalSupply_COM[this] := 1000000000000000000000000;
[L2203]              noFee_COM[this] := 10000000000000000001;
[L2204]              heightEnd20Percent_COM[this] := 10328752;
[L2205]              heightEnd10Percent_COM[this] := 12582818;
[L2206]              heightEnd05Percent_COM[this] := 14836884;
[L2209]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2210]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2211]              Balance[this] := Balance[this] + msgvalue_MSG;
[L2213]  CALL        call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L3009]  COND FALSE  !(!(amount_s1039 != 0))
[L3013]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L3013]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L3014]  COND FALSE  !(revert)
[L3017]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1039];
[L3018]              _balances_COM[this][account_s1039] := __var_27;
[L3019]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1039];
[L3020]              assert { :EventEmitted "Transfer_COM" } true;
[L2213]  RET         call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L2214]  COND FALSE  !(revert)
[L2245]  RET         call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2246]  COND FALSE  !(revert)
[L553]   RET         call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L554]               assume !revert && gas >= 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L4293]              assume !revert && gas >= 0;
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != to_s454 && (value_s454 > _balances_COM[this][msgsender_MSG] || _balances_COM[this][to_s454] + value_s454 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND FALSE  !(__exception)
[L940]   CALL        call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2393]  COND FALSE  !(!(value_s454 <= _balances_COM[this][msgsender_MSG]))
[L2397]              __var_4 := null;
[L2398]  COND FALSE  !(!(to_s454 != null))
[L2402]  COND TRUE   value_s454 < noFee_COM[this]
[L2403]  CALL        call _transferBurnNo~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2562]  COND FALSE  !(!(value_s607 <= _balances_COM[this][msgsender_MSG]))
[L2566]              __var_9 := null;
[L2567]  COND FALSE  !(!(to_s607 != null))
[L2571]  COND FALSE  !(!(value_s607 < noFee_COM[this]))
[L2575]  CALL        call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s607);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2575]  RET         call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s607);
[L2576]  COND FALSE  !(revert)
[L2579]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][msgsender_MSG];
[L2580]              _balances_COM[this][msgsender_MSG] := __var_10;
[L2581]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][msgsender_MSG];
[L2582]  CALL        call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s607], value_s607);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2582]  RET         call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s607], value_s607);
[L2583]  COND FALSE  !(revert)
[L2586]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s607];
[L2587]              _balances_COM[this][to_s607] := __var_11;
[L2588]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s607];
[L2589]              assert { :EventEmitted "Transfer_COM" } true;
[L2403]  RET         call _transferBurnNo~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2404]  COND FALSE  !(revert)
[L2413]              __ret_0_ := true;
[L940]   RET         call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L941]               assume !revert && gas >= 0;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s454 && (value_s454 > _balances_COM[this][msgsender_MSG] || _balances_COM[this][to_s454] + value_s454 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COM0 := true;
[L2]                 call_transfer_COM0 := false;
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND FALSE  !(__exception)
[L940]   CALL        call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2393]  COND FALSE  !(!(value_s454 <= _balances_COM[this][msgsender_MSG]))
[L2397]              __var_4 := null;
[L2398]  COND FALSE  !(!(to_s454 != null))
[L2402]  COND FALSE  !(value_s454 < noFee_COM[this])
[L2408]  CALL        call _transferBurnYes~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2477]  COND FALSE  !(!(value_s545 <= _balances_COM[this][msgsender_MSG]))
[L2481]              __var_5 := null;
[L2482]  COND FALSE  !(!(to_s545 != null))
[L2486]  COND FALSE  !(!(value_s545 >= noFee_COM[this]))
[L2490]  CALL        call tokensToBurn_s545 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s545);
[L2309]  CALL        call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND TRUE   now < heightEnd20Percent_COM[this]
[L2346]              __ret_0_ := 50;
[L2309]  RET         call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]  COND FALSE  !(revert)
[L2313]              currentRate_s365 := currentRate_s365;
[L2314]  CALL        call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L1978]              c_s119 := nonlinearDiv(a_s119, b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1979]              __ret_0_ := c_s119;
[L2314]  RET         call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L2315]  COND FALSE  !(revert)
[L2318]              onePercent_s365 := onePercent_s365;
[L2319]              __ret_0_ := onePercent_s365;
[L2490]  RET         call tokensToBurn_s545 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s545);
[L2491]  COND FALSE  !(revert)
[L2494]              tokensToBurn_s545 := tokensToBurn_s545;
[L2495]  CALL        call tokensToTransfer_s545 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s545, tokensToBurn_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2495]  RET         call tokensToTransfer_s545 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s545, tokensToBurn_s545);
[L2496]  COND FALSE  !(revert)
[L2499]              tokensToTransfer_s545 := tokensToTransfer_s545;
[L2500]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2500]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s545);
[L2501]  COND FALSE  !(revert)
[L2504]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][msgsender_MSG];
[L2505]              _balances_COM[this][msgsender_MSG] := __var_6;
[L2506]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][msgsender_MSG];
[L2507]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s545], tokensToTransfer_s545);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2507]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s545], tokensToTransfer_s545);
[L2508]  COND FALSE  !(revert)
[L2511]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s545];
[L2512]              _balances_COM[this][to_s545] := __var_7;
[L2513]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s545];
[L2514]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s545);
[L2515]  COND FALSE  !(revert)
[L2518]              _totalSupply_COM[this] := __var_8;
[L2519]              assert { :EventEmitted "Transfer_COM" } true;
[L2520]              assert { :EventEmitted "Transfer_COM" } true;
[L2408]  RET         call _transferBurnYes~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2409]  COND FALSE  !(revert)
[L2413]              __ret_0_ := true;
[L940]   RET         call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L941]               assume !revert && gas >= 0;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);

Loop:
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s454 && (value_s454 > _balances_COM[this][msgsender_MSG] || _balances_COM[this][to_s454] + value_s454 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COM0 := true;
[L2]                 call_transfer_COM0 := false;
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND FALSE  !(__exception)
[L940]   CALL        call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2393]  COND FALSE  !(!(value_s454 <= _balances_COM[this][msgsender_MSG]))
[L2397]              __var_4 := null;
[L2398]  COND FALSE  !(!(to_s454 != null))
[L2402]  COND FALSE  !(value_s454 < noFee_COM[this])
[L2408]  CALL        call _transferBurnYes~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2477]  COND FALSE  !(!(value_s545 <= _balances_COM[this][msgsender_MSG]))
[L2481]              __var_5 := null;
[L2482]  COND FALSE  !(!(to_s545 != null))
[L2486]  COND FALSE  !(!(value_s545 >= noFee_COM[this]))
[L2490]  CALL        call tokensToBurn_s545 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s545);
[L2309]  CALL        call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND TRUE   now < heightEnd20Percent_COM[this]
[L2346]              __ret_0_ := 50;
[L2309]  RET         call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]  COND FALSE  !(revert)
[L2313]              currentRate_s365 := currentRate_s365;
[L2314]  CALL        call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L1978]              c_s119 := nonlinearDiv(a_s119, b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1979]              __ret_0_ := c_s119;
[L2314]  RET         call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L2315]  COND FALSE  !(revert)
[L2318]              onePercent_s365 := onePercent_s365;
[L2319]              __ret_0_ := onePercent_s365;
[L2490]  RET         call tokensToBurn_s545 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s545);
[L2491]  COND FALSE  !(revert)
[L2494]              tokensToBurn_s545 := tokensToBurn_s545;
[L2495]  CALL        call tokensToTransfer_s545 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s545, tokensToBurn_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2495]  RET         call tokensToTransfer_s545 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s545, tokensToBurn_s545);
[L2496]  COND FALSE  !(revert)
[L2499]              tokensToTransfer_s545 := tokensToTransfer_s545;
[L2500]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2500]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s545);
[L2501]  COND FALSE  !(revert)
[L2504]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][msgsender_MSG];
[L2505]              _balances_COM[this][msgsender_MSG] := __var_6;
[L2506]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][msgsender_MSG];
[L2507]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s545], tokensToTransfer_s545);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2507]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s545], tokensToTransfer_s545);
[L2508]  COND FALSE  !(revert)
[L2511]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s545];
[L2512]              _balances_COM[this][to_s545] := __var_7;
[L2513]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s545];
[L2514]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s545);
[L2515]  COND FALSE  !(revert)
[L2518]              _totalSupply_COM[this] := __var_8;
[L2519]              assert { :EventEmitted "Transfer_COM" } true;
[L2520]              assert { :EventEmitted "Transfer_COM" } true;
[L2408]  RET         call _transferBurnYes~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2409]  COND FALSE  !(revert)
[L2413]              __ret_0_ := true;
[L940]   RET         call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L941]               assume !revert && gas >= 0;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);

[2020-11-25 12:19:44,398 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:19:44,398 INFO  L82        PathProgramCache]: Analyzing trace with hash 34497112, now seen corresponding path program 1 times
[2020-11-25 12:19:44,398 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:19:44,437 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:19:46,138 WARN  L188               SmtUtils]: Spent 122.00 ms on a formula simplification. DAG size of input: 132 DAG size of output: 81
[2020-11-25 12:19:49,206 WARN  L188               SmtUtils]: Spent 2.72 s on a formula simplification. DAG size of input: 336 DAG size of output: 184
[2020-11-25 12:19:52,175 WARN  L188               SmtUtils]: Spent 2.12 s on a formula simplification. DAG size of input: 311 DAG size of output: 130
[2020-11-25 12:19:54,190 WARN  L188               SmtUtils]: Spent 1.34 s on a formula simplification. DAG size of input: 271 DAG size of output: 120
[2020-11-25 12:19:54,796 WARN  L188               SmtUtils]: Spent 234.00 ms on a formula simplification. DAG size of input: 115 DAG size of output: 70
[2020-11-25 12:19:55,386 WARN  L188               SmtUtils]: Spent 126.00 ms on a formula simplification. DAG size of input: 175 DAG size of output: 50
[2020-11-25 12:19:55,995 WARN  L188               SmtUtils]: Spent 151.00 ms on a formula simplification. DAG size of input: 128 DAG size of output: 65
[2020-11-25 12:19:57,138 INFO  L134       CoverageAnalysis]: Checked inductivity of 91 backedges. 0 proven. 72 refuted. 0 times theorem prover too weak. 19 trivial. 0 not checked.
[2020-11-25 12:19:57,138 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 12:19:57,138 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [51] total 51
[2020-11-25 12:19:57,139 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:19:57,139 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 52 interpolants.
[2020-11-25 12:19:57,139 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=181, Invalid=2471, Unknown=0, NotChecked=0, Total=2652
[2020-11-25 12:19:57,140 INFO  L87              Difference]: Start difference. First operand 2616 states and 2846 transitions. cyclomatic complexity: 233 Second operand 52 states.
[2020-11-25 12:20:18,169 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:20:18,170 INFO  L93              Difference]: Finished difference Result 2683 states and 2927 transitions.
[2020-11-25 12:20:18,170 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 45 states. 
[2020-11-25 12:20:18,170 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2683 states and 2927 transitions.
[2020-11-25 12:20:18,174 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:20:18,179 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2683 states to 2683 states and 2927 transitions.
[2020-11-25 12:20:18,179 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 685
[2020-11-25 12:20:18,180 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 685
[2020-11-25 12:20:18,180 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2683 states and 2927 transitions.
[2020-11-25 12:20:18,182 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:20:18,182 INFO  L728         BuchiCegarLoop]: Abstraction has 2683 states and 2927 transitions.
[2020-11-25 12:20:18,184 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2683 states and 2927 transitions.
[2020-11-25 12:20:18,196 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2683 to 2632.
[2020-11-25 12:20:18,196 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2632 states.
[2020-11-25 12:20:18,198 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2632 states to 2632 states and 2872 transitions.
[2020-11-25 12:20:18,198 INFO  L751         BuchiCegarLoop]: Abstraction has 2632 states and 2872 transitions.
[2020-11-25 12:20:18,198 INFO  L631         BuchiCegarLoop]: Abstraction has 2632 states and 2872 transitions.
[2020-11-25 12:20:18,198 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 12:20:18,198 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2632 states and 2872 transitions.
[2020-11-25 12:20:18,201 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:20:18,201 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:20:18,201 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:20:18,202 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:20:18,202 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_COM0 := false;
[L2]                 call_transfer_COM0 := false;
[L2]     CALL        call main();
[L4286]              assume null == 0;
[L4287]  CALL        call this := FreshRefGenerator__success();
[L1872]              havoc newRef;
[L1873]              assume Alloc[newRef] == false;
[L1874]              Alloc[newRef] := true;
[L1875]              assume newRef != null;
[L4287]  RET         call this := FreshRefGenerator__success();
[L4288]              assume now >= 0;
[L4289]              assume DType[this] == COM;
[L4290]              assume msgvalue_MSG >= 0;
[L4291]              gas := gas - 53000;
[L4292]  CALL        call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND FALSE  !(__exception)
[L553]   CALL        call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2237]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]  COND FALSE  !(revert)
[L2241]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2115]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2115]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2119]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2090]              assume msgsender_MSG != null;
[L2091]              Balance[this] := 0;
[L2092]              _name_ERC20Detailed[this] := -1465673266;
[L2093]              _symbol_ERC20Detailed[this] := -1465673266;
[L2094]              _decimals_ERC20Detailed[this] := 0;
[L2096]              _name_ERC20Detailed[this] := name_s228;
[L2097]              _symbol_ERC20Detailed[this] := symbol_s228;
[L2098]              _decimals_ERC20Detailed[this] := decimals_s228;
[L2119]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2120]  COND FALSE  !(revert)
[L2241]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2242]  COND FALSE  !(revert)
[L2245]  CALL        call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]              assume msgsender_MSG != null;
[L2194]              Balance[this] := 0;
[L2195]              _balances_COM[this] := zeroRefintArr();
[L2196]              sum__balances0[this] := 0;
[L2197]              _allowed_COM[this] := zeroRefRefintArr();
[L2198]              sum__allowed1[this] := 0;
[L2199]              tokenName_COM[this] := -963585000;
[L2200]              tokenSymbol_COM[this] := -1124477489;
[L2201]              tokenDecimals_COM[this] := 18;
[L2202]              _totalSupply_COM[this] := 1000000000000000000000000;
[L2203]              noFee_COM[this] := 10000000000000000001;
[L2204]              heightEnd20Percent_COM[this] := 10328752;
[L2205]              heightEnd10Percent_COM[this] := 12582818;
[L2206]              heightEnd05Percent_COM[this] := 14836884;
[L2209]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2210]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2211]              Balance[this] := Balance[this] + msgvalue_MSG;
[L2213]  CALL        call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L3009]  COND FALSE  !(!(amount_s1039 != 0))
[L3013]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L3013]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L3014]  COND FALSE  !(revert)
[L3017]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1039];
[L3018]              _balances_COM[this][account_s1039] := __var_27;
[L3019]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1039];
[L3020]              assert { :EventEmitted "Transfer_COM" } true;
[L2213]  RET         call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L2214]  COND FALSE  !(revert)
[L2245]  RET         call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2246]  COND FALSE  !(revert)
[L553]   RET         call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L554]               assume !revert && gas >= 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L4293]              assume !revert && gas >= 0;
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND TRUE   choice == 10
[L4213]              gas := gas - 21000;
[L4214]  COND TRUE   gas >= 0
[L4215]              assume value_s702 >= 0 && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4216]              assume msgvalue_MSG == 0;
[L4217]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L1054]              havoc __exception;
[L1055]              revert := false;
[L1056]  COND FALSE  !(__exception)
[L1084]  CALL        call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2657]  COND FALSE  !(!(value_s702 <= _balances_COM[this][from_s702]))
[L2661]  COND FALSE  !(!(value_s702 <= _allowed_COM[this][from_s702][msgsender_MSG]))
[L2665]              __var_13 := null;
[L2666]  COND FALSE  !(!(to_s702 != null))
[L2670]  COND TRUE   value_s702 < noFee_COM[this]
[L2671]  CALL        call _transferFromBurnNo~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2867]  COND FALSE  !(!(value_s906 <= _balances_COM[this][from_s906]))
[L2871]  COND FALSE  !(!(value_s906 <= _allowed_COM[this][from_s906][msgsender_MSG]))
[L2875]              __var_19 := null;
[L2876]  COND FALSE  !(!(to_s906 != null))
[L2880]  COND FALSE  !(!(value_s906 < noFee_COM[this]))
[L2884]  CALL        call __var_20 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s906], value_s906);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2884]  RET         call __var_20 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s906], value_s906);
[L2885]  COND FALSE  !(revert)
[L2888]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][from_s906];
[L2889]              _balances_COM[this][from_s906] := __var_20;
[L2890]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][from_s906];
[L2891]  CALL        call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s906], value_s906);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2891]  RET         call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s906], value_s906);
[L2892]  COND FALSE  !(revert)
[L2895]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s906];
[L2896]              _balances_COM[this][to_s906] := __var_21;
[L2897]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s906];
[L2898]  CALL        call __var_22 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s906][msgsender_MSG], value_s906);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2898]  RET         call __var_22 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s906][msgsender_MSG], value_s906);
[L2899]  COND FALSE  !(revert)
[L2902]              sum__allowed1[from_s906] := sum__allowed1[from_s906] - _allowed_COM[this][from_s906][msgsender_MSG];
[L2903]              _allowed_COM[this][from_s906][msgsender_MSG] := __var_22;
[L2904]              sum__allowed1[from_s906] := sum__allowed1[from_s906] + _allowed_COM[this][from_s906][msgsender_MSG];
[L2905]              assert { :EventEmitted "Transfer_COM" } true;
[L2671]  RET         call _transferFromBurnNo~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2672]  COND FALSE  !(revert)
[L2681]              __ret_0_ := true;
[L1084]  RET         call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L1085]              assume !revert && gas >= 0;
[L4217]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L4296]  RET         call CorralChoice_COM(this);
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s454 && (value_s454 > _balances_COM[this][msgsender_MSG] || _balances_COM[this][to_s454] + value_s454 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COM0 := true;
[L2]                 call_transfer_COM0 := false;
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND FALSE  !(__exception)
[L940]   CALL        call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2393]  COND FALSE  !(!(value_s454 <= _balances_COM[this][msgsender_MSG]))
[L2397]              __var_4 := null;
[L2398]  COND FALSE  !(!(to_s454 != null))
[L2402]  COND FALSE  !(value_s454 < noFee_COM[this])
[L2408]  CALL        call _transferBurnYes~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2477]  COND FALSE  !(!(value_s545 <= _balances_COM[this][msgsender_MSG]))
[L2481]              __var_5 := null;
[L2482]  COND FALSE  !(!(to_s545 != null))
[L2486]  COND FALSE  !(!(value_s545 >= noFee_COM[this]))
[L2490]  CALL        call tokensToBurn_s545 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s545);
[L2309]  CALL        call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND TRUE   now < heightEnd20Percent_COM[this]
[L2346]              __ret_0_ := 50;
[L2309]  RET         call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]  COND FALSE  !(revert)
[L2313]              currentRate_s365 := currentRate_s365;
[L2314]  CALL        call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L1978]              c_s119 := nonlinearDiv(a_s119, b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1979]              __ret_0_ := c_s119;
[L2314]  RET         call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L2315]  COND FALSE  !(revert)
[L2318]              onePercent_s365 := onePercent_s365;
[L2319]              __ret_0_ := onePercent_s365;
[L2490]  RET         call tokensToBurn_s545 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s545);
[L2491]  COND FALSE  !(revert)
[L2494]              tokensToBurn_s545 := tokensToBurn_s545;
[L2495]  CALL        call tokensToTransfer_s545 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s545, tokensToBurn_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2495]  RET         call tokensToTransfer_s545 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s545, tokensToBurn_s545);
[L2496]  COND FALSE  !(revert)
[L2499]              tokensToTransfer_s545 := tokensToTransfer_s545;
[L2500]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2500]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s545);
[L2501]  COND FALSE  !(revert)
[L2504]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][msgsender_MSG];
[L2505]              _balances_COM[this][msgsender_MSG] := __var_6;
[L2506]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][msgsender_MSG];
[L2507]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s545], tokensToTransfer_s545);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2507]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s545], tokensToTransfer_s545);
[L2508]  COND FALSE  !(revert)
[L2511]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s545];
[L2512]              _balances_COM[this][to_s545] := __var_7;
[L2513]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s545];
[L2514]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s545);
[L2515]  COND FALSE  !(revert)
[L2518]              _totalSupply_COM[this] := __var_8;
[L2519]              assert { :EventEmitted "Transfer_COM" } true;
[L2520]              assert { :EventEmitted "Transfer_COM" } true;
[L2408]  RET         call _transferBurnYes~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2409]  COND FALSE  !(revert)
[L2413]              __ret_0_ := true;
[L940]   RET         call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L941]               assume !revert && gas >= 0;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);

Loop:
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s454 && (value_s454 > _balances_COM[this][msgsender_MSG] || _balances_COM[this][to_s454] + value_s454 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COM0 := true;
[L2]                 call_transfer_COM0 := false;
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND FALSE  !(__exception)
[L940]   CALL        call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2393]  COND FALSE  !(!(value_s454 <= _balances_COM[this][msgsender_MSG]))
[L2397]              __var_4 := null;
[L2398]  COND FALSE  !(!(to_s454 != null))
[L2402]  COND FALSE  !(value_s454 < noFee_COM[this])
[L2408]  CALL        call _transferBurnYes~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2477]  COND FALSE  !(!(value_s545 <= _balances_COM[this][msgsender_MSG]))
[L2481]              __var_5 := null;
[L2482]  COND FALSE  !(!(to_s545 != null))
[L2486]  COND FALSE  !(!(value_s545 >= noFee_COM[this]))
[L2490]  CALL        call tokensToBurn_s545 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s545);
[L2309]  CALL        call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND TRUE   now < heightEnd20Percent_COM[this]
[L2346]              __ret_0_ := 50;
[L2309]  RET         call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]  COND FALSE  !(revert)
[L2313]              currentRate_s365 := currentRate_s365;
[L2314]  CALL        call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L1978]              c_s119 := nonlinearDiv(a_s119, b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1979]              __ret_0_ := c_s119;
[L2314]  RET         call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L2315]  COND FALSE  !(revert)
[L2318]              onePercent_s365 := onePercent_s365;
[L2319]              __ret_0_ := onePercent_s365;
[L2490]  RET         call tokensToBurn_s545 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s545);
[L2491]  COND FALSE  !(revert)
[L2494]              tokensToBurn_s545 := tokensToBurn_s545;
[L2495]  CALL        call tokensToTransfer_s545 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s545, tokensToBurn_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2495]  RET         call tokensToTransfer_s545 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s545, tokensToBurn_s545);
[L2496]  COND FALSE  !(revert)
[L2499]              tokensToTransfer_s545 := tokensToTransfer_s545;
[L2500]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2500]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s545);
[L2501]  COND FALSE  !(revert)
[L2504]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][msgsender_MSG];
[L2505]              _balances_COM[this][msgsender_MSG] := __var_6;
[L2506]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][msgsender_MSG];
[L2507]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s545], tokensToTransfer_s545);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2507]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s545], tokensToTransfer_s545);
[L2508]  COND FALSE  !(revert)
[L2511]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s545];
[L2512]              _balances_COM[this][to_s545] := __var_7;
[L2513]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s545];
[L2514]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s545);
[L2515]  COND FALSE  !(revert)
[L2518]              _totalSupply_COM[this] := __var_8;
[L2519]              assert { :EventEmitted "Transfer_COM" } true;
[L2520]              assert { :EventEmitted "Transfer_COM" } true;
[L2408]  RET         call _transferBurnYes~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2409]  COND FALSE  !(revert)
[L2413]              __ret_0_ := true;
[L940]   RET         call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L941]               assume !revert && gas >= 0;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);

[2020-11-25 12:20:18,207 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:20:18,207 INFO  L82        PathProgramCache]: Analyzing trace with hash 1034603541, now seen corresponding path program 1 times
[2020-11-25 12:20:18,207 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:20:18,230 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:20:18,740 WARN  L188               SmtUtils]: Spent 102.00 ms on a formula simplification. DAG size of input: 153 DAG size of output: 61
[2020-11-25 12:20:19,979 WARN  L188               SmtUtils]: Spent 121.00 ms on a formula simplification. DAG size of input: 156 DAG size of output: 52
[2020-11-25 12:20:20,266 WARN  L188               SmtUtils]: Spent 116.00 ms on a formula simplification. DAG size of input: 150 DAG size of output: 53
[2020-11-25 12:20:20,626 INFO  L134       CoverageAnalysis]: Checked inductivity of 86 backedges. 4 proven. 57 refuted. 0 times theorem prover too weak. 25 trivial. 0 not checked.
[2020-11-25 12:20:20,626 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 12:20:20,626 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [37] total 37
[2020-11-25 12:20:20,627 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:20:20,627 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 38 interpolants.
[2020-11-25 12:20:20,627 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=135, Invalid=1271, Unknown=0, NotChecked=0, Total=1406
[2020-11-25 12:20:20,627 INFO  L87              Difference]: Start difference. First operand 2632 states and 2872 transitions. cyclomatic complexity: 245 Second operand 38 states.
[2020-11-25 12:20:31,143 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:20:31,144 INFO  L93              Difference]: Finished difference Result 2722 states and 2986 transitions.
[2020-11-25 12:20:31,144 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 35 states. 
[2020-11-25 12:20:31,144 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2722 states and 2986 transitions.
[2020-11-25 12:20:31,148 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:20:31,154 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2722 states to 2722 states and 2986 transitions.
[2020-11-25 12:20:31,154 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 699
[2020-11-25 12:20:31,154 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 699
[2020-11-25 12:20:31,154 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2722 states and 2986 transitions.
[2020-11-25 12:20:31,156 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:20:31,156 INFO  L728         BuchiCegarLoop]: Abstraction has 2722 states and 2986 transitions.
[2020-11-25 12:20:31,158 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2722 states and 2986 transitions.
[2020-11-25 12:20:31,169 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2722 to 2655.
[2020-11-25 12:20:31,169 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2655 states.
[2020-11-25 12:20:31,171 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2655 states to 2655 states and 2907 transitions.
[2020-11-25 12:20:31,171 INFO  L751         BuchiCegarLoop]: Abstraction has 2655 states and 2907 transitions.
[2020-11-25 12:20:31,171 INFO  L631         BuchiCegarLoop]: Abstraction has 2655 states and 2907 transitions.
[2020-11-25 12:20:31,172 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 12:20:31,172 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2655 states and 2907 transitions.
[2020-11-25 12:20:31,174 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:20:31,174 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:20:31,174 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:20:31,175 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:20:31,175 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_COM0 := false;
[L2]                 call_transfer_COM0 := false;
[L2]     CALL        call main();
[L4286]              assume null == 0;
[L4287]  CALL        call this := FreshRefGenerator__success();
[L1872]              havoc newRef;
[L1873]              assume Alloc[newRef] == false;
[L1874]              Alloc[newRef] := true;
[L1875]              assume newRef != null;
[L4287]  RET         call this := FreshRefGenerator__success();
[L4288]              assume now >= 0;
[L4289]              assume DType[this] == COM;
[L4290]              assume msgvalue_MSG >= 0;
[L4291]              gas := gas - 53000;
[L4292]  CALL        call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND FALSE  !(__exception)
[L553]   CALL        call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2237]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]  COND FALSE  !(revert)
[L2241]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2115]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2115]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2119]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2090]              assume msgsender_MSG != null;
[L2091]              Balance[this] := 0;
[L2092]              _name_ERC20Detailed[this] := -1465673266;
[L2093]              _symbol_ERC20Detailed[this] := -1465673266;
[L2094]              _decimals_ERC20Detailed[this] := 0;
[L2096]              _name_ERC20Detailed[this] := name_s228;
[L2097]              _symbol_ERC20Detailed[this] := symbol_s228;
[L2098]              _decimals_ERC20Detailed[this] := decimals_s228;
[L2119]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2120]  COND FALSE  !(revert)
[L2241]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2242]  COND FALSE  !(revert)
[L2245]  CALL        call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]              assume msgsender_MSG != null;
[L2194]              Balance[this] := 0;
[L2195]              _balances_COM[this] := zeroRefintArr();
[L2196]              sum__balances0[this] := 0;
[L2197]              _allowed_COM[this] := zeroRefRefintArr();
[L2198]              sum__allowed1[this] := 0;
[L2199]              tokenName_COM[this] := -963585000;
[L2200]              tokenSymbol_COM[this] := -1124477489;
[L2201]              tokenDecimals_COM[this] := 18;
[L2202]              _totalSupply_COM[this] := 1000000000000000000000000;
[L2203]              noFee_COM[this] := 10000000000000000001;
[L2204]              heightEnd20Percent_COM[this] := 10328752;
[L2205]              heightEnd10Percent_COM[this] := 12582818;
[L2206]              heightEnd05Percent_COM[this] := 14836884;
[L2209]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2210]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2211]              Balance[this] := Balance[this] + msgvalue_MSG;
[L2213]  CALL        call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L3009]  COND FALSE  !(!(amount_s1039 != 0))
[L3013]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L3013]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L3014]  COND FALSE  !(revert)
[L3017]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1039];
[L3018]              _balances_COM[this][account_s1039] := __var_27;
[L3019]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1039];
[L3020]              assert { :EventEmitted "Transfer_COM" } true;
[L2213]  RET         call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L2214]  COND FALSE  !(revert)
[L2245]  RET         call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2246]  COND FALSE  !(revert)
[L553]   RET         call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L554]               assume !revert && gas >= 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L4293]              assume !revert && gas >= 0;
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND FALSE  !(choice == 10)
[L4219]  COND FALSE  !(choice == 9)
[L4225]  COND FALSE  !(choice == 8)
[L4231]  COND FALSE  !(choice == 7)
[L4237]  COND FALSE  !(choice == 6)
[L4244]  COND FALSE  !(choice == 5)
[L4250]  COND FALSE  !(choice == 4)
[L4257]  COND FALSE  !(choice == 3)
[L4264]  COND FALSE  !(choice == 2)
[L4271]  COND TRUE   choice == 1
[L4272]              gas := gas - 21000;
[L4273]  COND TRUE   gas >= 0
[L4274]              assume amount_s1140 >= 0 && amount_s1140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4275]              assume msgvalue_MSG == 0;
[L4276]  CALL        call burnFrom~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, account_s1140, amount_s1140);
[L1344]              havoc __exception;
[L1345]              revert := false;
[L1346]  COND FALSE  !(__exception)
[L1374]  CALL        call burnFrom~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, account_s1140, amount_s1140);
[L3115]  COND FALSE  !(!(amount_s1140 <= _allowed_COM[this][account_s1140][msgsender_MSG]))
[L3119]  CALL        call __var_30 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][account_s1140][msgsender_MSG], amount_s1140);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3119]  RET         call __var_30 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][account_s1140][msgsender_MSG], amount_s1140);
[L3120]  COND FALSE  !(revert)
[L3123]              sum__allowed1[account_s1140] := sum__allowed1[account_s1140] - _allowed_COM[this][account_s1140][msgsender_MSG];
[L3124]              _allowed_COM[this][account_s1140][msgsender_MSG] := __var_30;
[L3125]              sum__allowed1[account_s1140] := sum__allowed1[account_s1140] + _allowed_COM[this][account_s1140][msgsender_MSG];
[L3126]  CALL        call _burn~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, account_s1140, amount_s1140);
[L3069]  COND FALSE  !(!(amount_s1099 != 0))
[L3073]  COND FALSE  !(!(amount_s1099 <= _balances_COM[this][account_s1099]))
[L3077]  CALL        call __var_28 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], amount_s1099);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3077]  RET         call __var_28 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], amount_s1099);
[L3078]  COND FALSE  !(revert)
[L3081]              _totalSupply_COM[this] := __var_28;
[L3082]  CALL        call __var_29 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1099], amount_s1099);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3082]  RET         call __var_29 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1099], amount_s1099);
[L3083]  COND FALSE  !(revert)
[L3086]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1099];
[L3087]              _balances_COM[this][account_s1099] := __var_29;
[L3088]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1099];
[L3089]              assert { :EventEmitted "Transfer_COM" } true;
[L3126]  RET         call _burn~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, account_s1140, amount_s1140);
[L3127]  COND FALSE  !(revert)
[L1374]  RET         call burnFrom~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, account_s1140, amount_s1140);
[L1375]              assume !revert && gas >= 0;
[L4276]  RET         call burnFrom~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, account_s1140, amount_s1140);
[L4296]  RET         call CorralChoice_COM(this);
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s454 && (value_s454 > _balances_COM[this][msgsender_MSG] || _balances_COM[this][to_s454] + value_s454 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COM0 := true;
[L2]                 call_transfer_COM0 := false;
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND FALSE  !(__exception)
[L940]   CALL        call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2393]  COND FALSE  !(!(value_s454 <= _balances_COM[this][msgsender_MSG]))
[L2397]              __var_4 := null;
[L2398]  COND FALSE  !(!(to_s454 != null))
[L2402]  COND FALSE  !(value_s454 < noFee_COM[this])
[L2408]  CALL        call _transferBurnYes~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2477]  COND FALSE  !(!(value_s545 <= _balances_COM[this][msgsender_MSG]))
[L2481]              __var_5 := null;
[L2482]  COND FALSE  !(!(to_s545 != null))
[L2486]  COND FALSE  !(!(value_s545 >= noFee_COM[this]))
[L2490]  CALL        call tokensToBurn_s545 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s545);
[L2309]  CALL        call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND TRUE   now < heightEnd20Percent_COM[this]
[L2346]              __ret_0_ := 50;
[L2309]  RET         call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]  COND FALSE  !(revert)
[L2313]              currentRate_s365 := currentRate_s365;
[L2314]  CALL        call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L1978]              c_s119 := nonlinearDiv(a_s119, b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1979]              __ret_0_ := c_s119;
[L2314]  RET         call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L2315]  COND FALSE  !(revert)
[L2318]              onePercent_s365 := onePercent_s365;
[L2319]              __ret_0_ := onePercent_s365;
[L2490]  RET         call tokensToBurn_s545 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s545);
[L2491]  COND FALSE  !(revert)
[L2494]              tokensToBurn_s545 := tokensToBurn_s545;
[L2495]  CALL        call tokensToTransfer_s545 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s545, tokensToBurn_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2495]  RET         call tokensToTransfer_s545 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s545, tokensToBurn_s545);
[L2496]  COND FALSE  !(revert)
[L2499]              tokensToTransfer_s545 := tokensToTransfer_s545;
[L2500]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2500]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s545);
[L2501]  COND FALSE  !(revert)
[L2504]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][msgsender_MSG];
[L2505]              _balances_COM[this][msgsender_MSG] := __var_6;
[L2506]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][msgsender_MSG];
[L2507]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s545], tokensToTransfer_s545);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2507]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s545], tokensToTransfer_s545);
[L2508]  COND FALSE  !(revert)
[L2511]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s545];
[L2512]              _balances_COM[this][to_s545] := __var_7;
[L2513]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s545];
[L2514]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s545);
[L2515]  COND FALSE  !(revert)
[L2518]              _totalSupply_COM[this] := __var_8;
[L2519]              assert { :EventEmitted "Transfer_COM" } true;
[L2520]              assert { :EventEmitted "Transfer_COM" } true;
[L2408]  RET         call _transferBurnYes~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2409]  COND FALSE  !(revert)
[L2413]              __ret_0_ := true;
[L940]   RET         call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L941]               assume !revert && gas >= 0;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);

Loop:
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s454 && (value_s454 > _balances_COM[this][msgsender_MSG] || _balances_COM[this][to_s454] + value_s454 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COM0 := true;
[L2]                 call_transfer_COM0 := false;
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND FALSE  !(__exception)
[L940]   CALL        call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2393]  COND FALSE  !(!(value_s454 <= _balances_COM[this][msgsender_MSG]))
[L2397]              __var_4 := null;
[L2398]  COND FALSE  !(!(to_s454 != null))
[L2402]  COND FALSE  !(value_s454 < noFee_COM[this])
[L2408]  CALL        call _transferBurnYes~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2477]  COND FALSE  !(!(value_s545 <= _balances_COM[this][msgsender_MSG]))
[L2481]              __var_5 := null;
[L2482]  COND FALSE  !(!(to_s545 != null))
[L2486]  COND FALSE  !(!(value_s545 >= noFee_COM[this]))
[L2490]  CALL        call tokensToBurn_s545 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s545);
[L2309]  CALL        call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND TRUE   now < heightEnd20Percent_COM[this]
[L2346]              __ret_0_ := 50;
[L2309]  RET         call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]  COND FALSE  !(revert)
[L2313]              currentRate_s365 := currentRate_s365;
[L2314]  CALL        call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L1978]              c_s119 := nonlinearDiv(a_s119, b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1979]              __ret_0_ := c_s119;
[L2314]  RET         call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L2315]  COND FALSE  !(revert)
[L2318]              onePercent_s365 := onePercent_s365;
[L2319]              __ret_0_ := onePercent_s365;
[L2490]  RET         call tokensToBurn_s545 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s545);
[L2491]  COND FALSE  !(revert)
[L2494]              tokensToBurn_s545 := tokensToBurn_s545;
[L2495]  CALL        call tokensToTransfer_s545 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s545, tokensToBurn_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2495]  RET         call tokensToTransfer_s545 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s545, tokensToBurn_s545);
[L2496]  COND FALSE  !(revert)
[L2499]              tokensToTransfer_s545 := tokensToTransfer_s545;
[L2500]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2500]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s545);
[L2501]  COND FALSE  !(revert)
[L2504]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][msgsender_MSG];
[L2505]              _balances_COM[this][msgsender_MSG] := __var_6;
[L2506]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][msgsender_MSG];
[L2507]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s545], tokensToTransfer_s545);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2507]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s545], tokensToTransfer_s545);
[L2508]  COND FALSE  !(revert)
[L2511]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s545];
[L2512]              _balances_COM[this][to_s545] := __var_7;
[L2513]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s545];
[L2514]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s545);
[L2515]  COND FALSE  !(revert)
[L2518]              _totalSupply_COM[this] := __var_8;
[L2519]              assert { :EventEmitted "Transfer_COM" } true;
[L2520]              assert { :EventEmitted "Transfer_COM" } true;
[L2408]  RET         call _transferBurnYes~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2409]  COND FALSE  !(revert)
[L2413]              __ret_0_ := true;
[L940]   RET         call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L941]               assume !revert && gas >= 0;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);

[2020-11-25 12:20:31,179 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:20:31,179 INFO  L82        PathProgramCache]: Analyzing trace with hash 1057545220, now seen corresponding path program 1 times
[2020-11-25 12:20:31,180 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:20:31,195 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:20:31,315 INFO  L134       CoverageAnalysis]: Checked inductivity of 89 backedges. 1 proven. 54 refuted. 0 times theorem prover too weak. 34 trivial. 0 not checked.
[2020-11-25 12:20:31,316 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 12:20:31,316 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [14] total 14
[2020-11-25 12:20:31,316 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:20:31,316 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 12:20:31,316 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=28, Invalid=154, Unknown=0, NotChecked=0, Total=182
[2020-11-25 12:20:31,316 INFO  L87              Difference]: Start difference. First operand 2655 states and 2907 transitions. cyclomatic complexity: 258 Second operand 14 states.
[2020-11-25 12:20:32,244 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:20:32,244 INFO  L93              Difference]: Finished difference Result 2687 states and 2980 transitions.
[2020-11-25 12:20:32,244 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-25 12:20:32,244 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2687 states and 2980 transitions.
[2020-11-25 12:20:32,249 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 12:20:32,255 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2687 states to 2687 states and 2980 transitions.
[2020-11-25 12:20:32,255 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 690
[2020-11-25 12:20:32,256 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 690
[2020-11-25 12:20:32,256 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2687 states and 2980 transitions.
[2020-11-25 12:20:32,258 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:20:32,258 INFO  L728         BuchiCegarLoop]: Abstraction has 2687 states and 2980 transitions.
[2020-11-25 12:20:32,260 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2687 states and 2980 transitions.
[2020-11-25 12:20:32,274 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2687 to 2683.
[2020-11-25 12:20:32,274 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2683 states.
[2020-11-25 12:20:32,277 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2683 states to 2683 states and 2968 transitions.
[2020-11-25 12:20:32,277 INFO  L751         BuchiCegarLoop]: Abstraction has 2683 states and 2968 transitions.
[2020-11-25 12:20:32,277 INFO  L631         BuchiCegarLoop]: Abstraction has 2683 states and 2968 transitions.
[2020-11-25 12:20:32,277 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 12:20:32,277 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2683 states and 2968 transitions.
[2020-11-25 12:20:32,280 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 12:20:32,280 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:20:32,280 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:20:32,281 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:20:32,281 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_COM0 := false;
[L2]                 call_transfer_COM0 := false;
[L2]     CALL        call main();
[L4286]              assume null == 0;
[L4287]  CALL        call this := FreshRefGenerator__success();
[L1872]              havoc newRef;
[L1873]              assume Alloc[newRef] == false;
[L1874]              Alloc[newRef] := true;
[L1875]              assume newRef != null;
[L4287]  RET         call this := FreshRefGenerator__success();
[L4288]              assume now >= 0;
[L4289]              assume DType[this] == COM;
[L4290]              assume msgvalue_MSG >= 0;
[L4291]              gas := gas - 53000;
[L4292]  CALL        call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND FALSE  !(__exception)
[L553]   CALL        call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2237]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]  COND FALSE  !(revert)
[L2241]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2115]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2115]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2119]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2090]              assume msgsender_MSG != null;
[L2091]              Balance[this] := 0;
[L2092]              _name_ERC20Detailed[this] := -1465673266;
[L2093]              _symbol_ERC20Detailed[this] := -1465673266;
[L2094]              _decimals_ERC20Detailed[this] := 0;
[L2096]              _name_ERC20Detailed[this] := name_s228;
[L2097]              _symbol_ERC20Detailed[this] := symbol_s228;
[L2098]              _decimals_ERC20Detailed[this] := decimals_s228;
[L2119]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2120]  COND FALSE  !(revert)
[L2241]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2242]  COND FALSE  !(revert)
[L2245]  CALL        call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]              assume msgsender_MSG != null;
[L2194]              Balance[this] := 0;
[L2195]              _balances_COM[this] := zeroRefintArr();
[L2196]              sum__balances0[this] := 0;
[L2197]              _allowed_COM[this] := zeroRefRefintArr();
[L2198]              sum__allowed1[this] := 0;
[L2199]              tokenName_COM[this] := -963585000;
[L2200]              tokenSymbol_COM[this] := -1124477489;
[L2201]              tokenDecimals_COM[this] := 18;
[L2202]              _totalSupply_COM[this] := 1000000000000000000000000;
[L2203]              noFee_COM[this] := 10000000000000000001;
[L2204]              heightEnd20Percent_COM[this] := 10328752;
[L2205]              heightEnd10Percent_COM[this] := 12582818;
[L2206]              heightEnd05Percent_COM[this] := 14836884;
[L2209]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2210]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2211]              Balance[this] := Balance[this] + msgvalue_MSG;
[L2213]  CALL        call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L3009]  COND FALSE  !(!(amount_s1039 != 0))
[L3013]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L3013]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L3014]  COND FALSE  !(revert)
[L3017]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1039];
[L3018]              _balances_COM[this][account_s1039] := __var_27;
[L3019]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1039];
[L3020]              assert { :EventEmitted "Transfer_COM" } true;
[L2213]  RET         call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L2214]  COND FALSE  !(revert)
[L2245]  RET         call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2246]  COND FALSE  !(revert)
[L553]   RET         call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L554]               assume !revert && gas >= 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L4293]              assume !revert && gas >= 0;
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != to_s454 && (value_s454 > _balances_COM[this][msgsender_MSG] || _balances_COM[this][to_s454] + value_s454 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND FALSE  !(__exception)
[L940]   CALL        call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2393]  COND FALSE  !(!(value_s454 <= _balances_COM[this][msgsender_MSG]))
[L2397]              __var_4 := null;
[L2398]  COND FALSE  !(!(to_s454 != null))
[L2402]  COND FALSE  !(value_s454 < noFee_COM[this])
[L2408]  CALL        call _transferBurnYes~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2477]  COND FALSE  !(!(value_s545 <= _balances_COM[this][msgsender_MSG]))
[L2481]              __var_5 := null;
[L2482]  COND FALSE  !(!(to_s545 != null))
[L2486]  COND FALSE  !(!(value_s545 >= noFee_COM[this]))
[L2490]  CALL        call tokensToBurn_s545 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s545);
[L2309]  CALL        call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND TRUE   now < heightEnd20Percent_COM[this]
[L2346]              __ret_0_ := 50;
[L2309]  RET         call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]  COND FALSE  !(revert)
[L2313]              currentRate_s365 := currentRate_s365;
[L2314]  CALL        call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L1978]              c_s119 := nonlinearDiv(a_s119, b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1979]              __ret_0_ := c_s119;
[L2314]  RET         call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L2315]  COND FALSE  !(revert)
[L2318]              onePercent_s365 := onePercent_s365;
[L2319]              __ret_0_ := onePercent_s365;
[L2490]  RET         call tokensToBurn_s545 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s545);
[L2491]  COND FALSE  !(revert)
[L2494]              tokensToBurn_s545 := tokensToBurn_s545;
[L2495]  CALL        call tokensToTransfer_s545 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s545, tokensToBurn_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2495]  RET         call tokensToTransfer_s545 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s545, tokensToBurn_s545);
[L2496]  COND FALSE  !(revert)
[L2499]              tokensToTransfer_s545 := tokensToTransfer_s545;
[L2500]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2500]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s545);
[L2501]  COND FALSE  !(revert)
[L2504]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][msgsender_MSG];
[L2505]              _balances_COM[this][msgsender_MSG] := __var_6;
[L2506]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][msgsender_MSG];
[L2507]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s545], tokensToTransfer_s545);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2507]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s545], tokensToTransfer_s545);
[L2508]  COND FALSE  !(revert)
[L2511]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s545];
[L2512]              _balances_COM[this][to_s545] := __var_7;
[L2513]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s545];
[L2514]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s545);
[L2515]  COND FALSE  !(revert)
[L2518]              _totalSupply_COM[this] := __var_8;
[L2519]              assert { :EventEmitted "Transfer_COM" } true;
[L2520]              assert { :EventEmitted "Transfer_COM" } true;
[L2408]  RET         call _transferBurnYes~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2409]  COND FALSE  !(revert)
[L2413]              __ret_0_ := true;
[L940]   RET         call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L941]               assume !revert && gas >= 0;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s454 && (value_s454 > _balances_COM[this][msgsender_MSG] || _balances_COM[this][to_s454] + value_s454 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COM0 := true;
[L2]                 call_transfer_COM0 := false;
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND FALSE  !(__exception)
[L940]   CALL        call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2393]  COND FALSE  !(!(value_s454 <= _balances_COM[this][msgsender_MSG]))
[L2397]              __var_4 := null;
[L2398]  COND FALSE  !(!(to_s454 != null))
[L2402]  COND FALSE  !(value_s454 < noFee_COM[this])
[L2408]  CALL        call _transferBurnYes~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2477]  COND FALSE  !(!(value_s545 <= _balances_COM[this][msgsender_MSG]))
[L2481]              __var_5 := null;
[L2482]  COND FALSE  !(!(to_s545 != null))
[L2486]  COND FALSE  !(!(value_s545 >= noFee_COM[this]))
[L2490]  CALL        call tokensToBurn_s545 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s545);
[L2309]  CALL        call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND TRUE   now < heightEnd20Percent_COM[this]
[L2346]              __ret_0_ := 50;
[L2309]  RET         call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]  COND FALSE  !(revert)
[L2313]              currentRate_s365 := currentRate_s365;
[L2314]  CALL        call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L1978]              c_s119 := nonlinearDiv(a_s119, b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1979]              __ret_0_ := c_s119;
[L2314]  RET         call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L2315]  COND FALSE  !(revert)
[L2318]              onePercent_s365 := onePercent_s365;
[L2319]              __ret_0_ := onePercent_s365;
[L2490]  RET         call tokensToBurn_s545 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s545);
[L2491]  COND FALSE  !(revert)
[L2494]              tokensToBurn_s545 := tokensToBurn_s545;
[L2495]  CALL        call tokensToTransfer_s545 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s545, tokensToBurn_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2495]  RET         call tokensToTransfer_s545 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s545, tokensToBurn_s545);
[L2496]  COND FALSE  !(revert)
[L2499]              tokensToTransfer_s545 := tokensToTransfer_s545;
[L2500]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2500]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s545);
[L2501]  COND FALSE  !(revert)
[L2504]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][msgsender_MSG];
[L2505]              _balances_COM[this][msgsender_MSG] := __var_6;
[L2506]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][msgsender_MSG];
[L2507]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s545], tokensToTransfer_s545);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2507]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s545], tokensToTransfer_s545);
[L2508]  COND FALSE  !(revert)
[L2511]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s545];
[L2512]              _balances_COM[this][to_s545] := __var_7;
[L2513]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s545];
[L2514]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s545);
[L2515]  COND FALSE  !(revert)
[L2518]              _totalSupply_COM[this] := __var_8;
[L2519]              assert { :EventEmitted "Transfer_COM" } true;
[L2520]              assert { :EventEmitted "Transfer_COM" } true;
[L2408]  RET         call _transferBurnYes~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2409]  COND FALSE  !(revert)
[L2413]              __ret_0_ := true;
[L940]   RET         call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L941]               assume !revert && gas >= 0;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);

Loop:
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND TRUE   choice == 15
[L4181]              gas := gas - 21000;
[L4182]  COND FALSE  !(gas >= 0)
[L4296]  RET         call CorralChoice_COM(this);

[2020-11-25 12:20:32,285 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:20:32,285 INFO  L82        PathProgramCache]: Analyzing trace with hash -1454208641, now seen corresponding path program 1 times
[2020-11-25 12:20:32,285 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:20:32,311 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:20:33,553 INFO  L134       CoverageAnalysis]: Checked inductivity of 103 backedges. 7 proven. 12 refuted. 0 times theorem prover too weak. 84 trivial. 0 not checked.
[2020-11-25 12:20:33,553 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 12:20:33,554 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [46] total 46
[2020-11-25 12:20:33,554 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:20:33,554 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 47 interpolants.
[2020-11-25 12:20:33,555 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=139, Invalid=2023, Unknown=0, NotChecked=0, Total=2162
[2020-11-25 12:20:33,555 INFO  L87              Difference]: Start difference. First operand 2683 states and 2968 transitions. cyclomatic complexity: 295 Second operand 47 states.
[2020-11-25 12:20:39,512 WARN  L188               SmtUtils]: Spent 133.00 ms on a formula simplification. DAG size of input: 88 DAG size of output: 87
[2020-11-25 12:20:43,668 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:20:43,668 INFO  L93              Difference]: Finished difference Result 2735 states and 3039 transitions.
[2020-11-25 12:20:43,668 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 36 states. 
[2020-11-25 12:20:43,668 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2735 states and 3039 transitions.
[2020-11-25 12:20:43,673 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 12:20:43,678 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2735 states to 2735 states and 3039 transitions.
[2020-11-25 12:20:43,678 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 702
[2020-11-25 12:20:43,679 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 702
[2020-11-25 12:20:43,679 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2735 states and 3039 transitions.
[2020-11-25 12:20:43,680 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:20:43,680 INFO  L728         BuchiCegarLoop]: Abstraction has 2735 states and 3039 transitions.
[2020-11-25 12:20:43,682 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2735 states and 3039 transitions.
[2020-11-25 12:20:43,696 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2735 to 2676.
[2020-11-25 12:20:43,696 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2676 states.
[2020-11-25 12:20:43,699 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2676 states to 2676 states and 2954 transitions.
[2020-11-25 12:20:43,699 INFO  L751         BuchiCegarLoop]: Abstraction has 2676 states and 2954 transitions.
[2020-11-25 12:20:43,699 INFO  L631         BuchiCegarLoop]: Abstraction has 2676 states and 2954 transitions.
[2020-11-25 12:20:43,699 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 12:20:43,699 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2676 states and 2954 transitions.
[2020-11-25 12:20:43,701 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 12:20:43,701 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:20:43,701 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:20:43,703 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:20:43,703 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_COM0 := false;
[L2]                 call_transfer_COM0 := false;
[L2]     CALL        call main();
[L4286]              assume null == 0;
[L4287]  CALL        call this := FreshRefGenerator__success();
[L1872]              havoc newRef;
[L1873]              assume Alloc[newRef] == false;
[L1874]              Alloc[newRef] := true;
[L1875]              assume newRef != null;
[L4287]  RET         call this := FreshRefGenerator__success();
[L4288]              assume now >= 0;
[L4289]              assume DType[this] == COM;
[L4290]              assume msgvalue_MSG >= 0;
[L4291]              gas := gas - 53000;
[L4292]  CALL        call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND FALSE  !(__exception)
[L553]   CALL        call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2237]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]  COND FALSE  !(revert)
[L2241]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2115]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2115]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2119]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2090]              assume msgsender_MSG != null;
[L2091]              Balance[this] := 0;
[L2092]              _name_ERC20Detailed[this] := -1465673266;
[L2093]              _symbol_ERC20Detailed[this] := -1465673266;
[L2094]              _decimals_ERC20Detailed[this] := 0;
[L2096]              _name_ERC20Detailed[this] := name_s228;
[L2097]              _symbol_ERC20Detailed[this] := symbol_s228;
[L2098]              _decimals_ERC20Detailed[this] := decimals_s228;
[L2119]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2120]  COND FALSE  !(revert)
[L2241]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2242]  COND FALSE  !(revert)
[L2245]  CALL        call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]              assume msgsender_MSG != null;
[L2194]              Balance[this] := 0;
[L2195]              _balances_COM[this] := zeroRefintArr();
[L2196]              sum__balances0[this] := 0;
[L2197]              _allowed_COM[this] := zeroRefRefintArr();
[L2198]              sum__allowed1[this] := 0;
[L2199]              tokenName_COM[this] := -963585000;
[L2200]              tokenSymbol_COM[this] := -1124477489;
[L2201]              tokenDecimals_COM[this] := 18;
[L2202]              _totalSupply_COM[this] := 1000000000000000000000000;
[L2203]              noFee_COM[this] := 10000000000000000001;
[L2204]              heightEnd20Percent_COM[this] := 10328752;
[L2205]              heightEnd10Percent_COM[this] := 12582818;
[L2206]              heightEnd05Percent_COM[this] := 14836884;
[L2209]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2210]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2211]              Balance[this] := Balance[this] + msgvalue_MSG;
[L2213]  CALL        call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L3009]  COND FALSE  !(!(amount_s1039 != 0))
[L3013]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L3013]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L3014]  COND FALSE  !(revert)
[L3017]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1039];
[L3018]              _balances_COM[this][account_s1039] := __var_27;
[L3019]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1039];
[L3020]              assert { :EventEmitted "Transfer_COM" } true;
[L2213]  RET         call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L2214]  COND FALSE  !(revert)
[L2245]  RET         call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2246]  COND FALSE  !(revert)
[L553]   RET         call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L554]               assume !revert && gas >= 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L4293]              assume !revert && gas >= 0;
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND TRUE   choice == 10
[L4213]              gas := gas - 21000;
[L4214]  COND TRUE   gas >= 0
[L4215]              assume value_s702 >= 0 && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4216]              assume msgvalue_MSG == 0;
[L4217]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L1054]              havoc __exception;
[L1055]              revert := false;
[L1056]  COND FALSE  !(__exception)
[L1084]  CALL        call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2657]  COND FALSE  !(!(value_s702 <= _balances_COM[this][from_s702]))
[L2661]  COND FALSE  !(!(value_s702 <= _allowed_COM[this][from_s702][msgsender_MSG]))
[L2665]              __var_13 := null;
[L2666]  COND FALSE  !(!(to_s702 != null))
[L2670]  COND FALSE  !(value_s702 < noFee_COM[this])
[L2676]  CALL        call _transferFromBurnYes~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2758]  COND FALSE  !(!(value_s818 <= _balances_COM[this][from_s818]))
[L2762]  COND FALSE  !(!(value_s818 <= _allowed_COM[this][from_s818][msgsender_MSG]))
[L2766]              __var_14 := null;
[L2767]  COND FALSE  !(!(to_s818 != null))
[L2771]  COND FALSE  !(!(value_s818 >= noFee_COM[this]))
[L2775]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s818], value_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2775]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s818], value_s818);
[L2776]  COND FALSE  !(revert)
[L2779]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][from_s818];
[L2780]              _balances_COM[this][from_s818] := __var_15;
[L2781]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][from_s818];
[L2782]  CALL        call tokensToBurn_s818 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s818);
[L2309]  CALL        call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND TRUE   now < heightEnd20Percent_COM[this]
[L2346]              __ret_0_ := 50;
[L2309]  RET         call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]  COND FALSE  !(revert)
[L2313]              currentRate_s365 := currentRate_s365;
[L2314]  CALL        call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L1978]              c_s119 := nonlinearDiv(a_s119, b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1979]              __ret_0_ := c_s119;
[L2314]  RET         call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L2315]  COND FALSE  !(revert)
[L2318]              onePercent_s365 := onePercent_s365;
[L2319]              __ret_0_ := onePercent_s365;
[L2782]  RET         call tokensToBurn_s818 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s818);
[L2783]  COND FALSE  !(revert)
[L2786]              tokensToBurn_s818 := tokensToBurn_s818;
[L2787]  CALL        call tokensToTransfer_s818 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s818, tokensToBurn_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]  RET         call tokensToTransfer_s818 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s818, tokensToBurn_s818);
[L2788]  COND FALSE  !(revert)
[L2791]              tokensToTransfer_s818 := tokensToTransfer_s818;
[L2792]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s818], tokensToTransfer_s818);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2792]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s818], tokensToTransfer_s818);
[L2793]  COND FALSE  !(revert)
[L2796]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s818];
[L2797]              _balances_COM[this][to_s818] := __var_16;
[L2798]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s818];
[L2799]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2799]  RET         call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s818);
[L2800]  COND FALSE  !(revert)
[L2803]              _totalSupply_COM[this] := __var_17;
[L2804]  CALL        call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s818][msgsender_MSG], value_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2804]  RET         call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s818][msgsender_MSG], value_s818);
[L2805]  COND FALSE  !(revert)
[L2808]              sum__allowed1[from_s818] := sum__allowed1[from_s818] - _allowed_COM[this][from_s818][msgsender_MSG];
[L2809]              _allowed_COM[this][from_s818][msgsender_MSG] := __var_18;
[L2810]              sum__allowed1[from_s818] := sum__allowed1[from_s818] + _allowed_COM[this][from_s818][msgsender_MSG];
[L2811]              assert { :EventEmitted "Transfer_COM" } true;
[L2812]              assert { :EventEmitted "Transfer_COM" } true;
[L2676]  RET         call _transferFromBurnYes~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2677]  COND FALSE  !(revert)
[L2681]              __ret_0_ := true;
[L1084]  RET         call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L1085]              assume !revert && gas >= 0;
[L4217]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L4296]  RET         call CorralChoice_COM(this);
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s454 && (value_s454 > _balances_COM[this][msgsender_MSG] || _balances_COM[this][to_s454] + value_s454 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COM0 := true;
[L2]                 call_transfer_COM0 := false;
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND FALSE  !(__exception)
[L940]   CALL        call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2393]  COND FALSE  !(!(value_s454 <= _balances_COM[this][msgsender_MSG]))
[L2397]              __var_4 := null;
[L2398]  COND FALSE  !(!(to_s454 != null))
[L2402]  COND FALSE  !(value_s454 < noFee_COM[this])
[L2408]  CALL        call _transferBurnYes~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2477]  COND FALSE  !(!(value_s545 <= _balances_COM[this][msgsender_MSG]))
[L2481]              __var_5 := null;
[L2482]  COND FALSE  !(!(to_s545 != null))
[L2486]  COND FALSE  !(!(value_s545 >= noFee_COM[this]))
[L2490]  CALL        call tokensToBurn_s545 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s545);
[L2309]  CALL        call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND TRUE   now < heightEnd20Percent_COM[this]
[L2346]              __ret_0_ := 50;
[L2309]  RET         call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]  COND FALSE  !(revert)
[L2313]              currentRate_s365 := currentRate_s365;
[L2314]  CALL        call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L1978]              c_s119 := nonlinearDiv(a_s119, b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1979]              __ret_0_ := c_s119;
[L2314]  RET         call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L2315]  COND FALSE  !(revert)
[L2318]              onePercent_s365 := onePercent_s365;
[L2319]              __ret_0_ := onePercent_s365;
[L2490]  RET         call tokensToBurn_s545 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s545);
[L2491]  COND FALSE  !(revert)
[L2494]              tokensToBurn_s545 := tokensToBurn_s545;
[L2495]  CALL        call tokensToTransfer_s545 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s545, tokensToBurn_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2495]  RET         call tokensToTransfer_s545 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s545, tokensToBurn_s545);
[L2496]  COND FALSE  !(revert)
[L2499]              tokensToTransfer_s545 := tokensToTransfer_s545;
[L2500]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2500]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s545);
[L2501]  COND FALSE  !(revert)
[L2504]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][msgsender_MSG];
[L2505]              _balances_COM[this][msgsender_MSG] := __var_6;
[L2506]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][msgsender_MSG];
[L2507]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s545], tokensToTransfer_s545);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2507]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s545], tokensToTransfer_s545);
[L2508]  COND FALSE  !(revert)
[L2511]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s545];
[L2512]              _balances_COM[this][to_s545] := __var_7;
[L2513]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s545];
[L2514]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s545);
[L2515]  COND FALSE  !(revert)
[L2518]              _totalSupply_COM[this] := __var_8;
[L2519]              assert { :EventEmitted "Transfer_COM" } true;
[L2520]              assert { :EventEmitted "Transfer_COM" } true;
[L2408]  RET         call _transferBurnYes~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2409]  COND FALSE  !(revert)
[L2413]              __ret_0_ := true;
[L940]   RET         call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L941]               assume !revert && gas >= 0;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);

Loop:
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND TRUE   choice == 11
[L4206]              gas := gas - 21000;
[L4207]  COND TRUE   gas >= 0
[L4208]              assume value_s643 >= 0 && value_s643 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4209]              assume msgvalue_MSG == 0;
[L4210]  CALL        call __ret_0_approve := approve~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, spender_s643, value_s643);
[L985]               havoc __exception;
[L986]               revert := false;
[L987]   COND FALSE  !(__exception)
[L1015]  CALL        call __ret_0_ := approve~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, spender_s643, value_s643);
[L2610]              __var_12 := null;
[L2611]  COND FALSE  !(!(spender_s643 != null))
[L2615]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_COM[this][msgsender_MSG][spender_s643];
[L2616]              _allowed_COM[this][msgsender_MSG][spender_s643] := value_s643;
[L2617]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_COM[this][msgsender_MSG][spender_s643];
[L2618]              assert { :EventEmitted "Approval_COM" } true;
[L2619]              __ret_0_ := true;
[L1015]  RET         call __ret_0_ := approve~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, spender_s643, value_s643);
[L1016]              assume !revert && gas >= 0;
[L4210]  RET         call __ret_0_approve := approve~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, spender_s643, value_s643);
[L4296]  RET         call CorralChoice_COM(this);

[2020-11-25 12:20:43,706 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:20:43,706 INFO  L82        PathProgramCache]: Analyzing trace with hash 708707093, now seen corresponding path program 1 times
[2020-11-25 12:20:43,707 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:20:43,720 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:20:43,820 INFO  L134       CoverageAnalysis]: Checked inductivity of 106 backedges. 1 proven. 54 refuted. 0 times theorem prover too weak. 51 trivial. 0 not checked.
[2020-11-25 12:20:43,820 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 12:20:43,820 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [14] total 14
[2020-11-25 12:20:43,821 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:20:43,821 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 12:20:43,821 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=28, Invalid=154, Unknown=0, NotChecked=0, Total=182
[2020-11-25 12:20:43,821 INFO  L87              Difference]: Start difference. First operand 2676 states and 2954 transitions. cyclomatic complexity: 288 Second operand 14 states.
[2020-11-25 12:20:44,989 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:20:44,989 INFO  L93              Difference]: Finished difference Result 2686 states and 2960 transitions.
[2020-11-25 12:20:44,990 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-11-25 12:20:44,990 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2686 states and 2960 transitions.
[2020-11-25 12:20:44,995 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 12:20:45,003 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2686 states to 2686 states and 2960 transitions.
[2020-11-25 12:20:45,003 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 698
[2020-11-25 12:20:45,003 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 698
[2020-11-25 12:20:45,003 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2686 states and 2960 transitions.
[2020-11-25 12:20:45,005 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:20:45,005 INFO  L728         BuchiCegarLoop]: Abstraction has 2686 states and 2960 transitions.
[2020-11-25 12:20:45,007 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2686 states and 2960 transitions.
[2020-11-25 12:20:45,022 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2686 to 2682.
[2020-11-25 12:20:45,022 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2682 states.
[2020-11-25 12:20:45,024 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2682 states to 2682 states and 2953 transitions.
[2020-11-25 12:20:45,025 INFO  L751         BuchiCegarLoop]: Abstraction has 2682 states and 2953 transitions.
[2020-11-25 12:20:45,025 INFO  L631         BuchiCegarLoop]: Abstraction has 2682 states and 2953 transitions.
[2020-11-25 12:20:45,025 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 12:20:45,025 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2682 states and 2953 transitions.
[2020-11-25 12:20:45,027 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 12:20:45,027 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:20:45,027 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:20:45,028 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:20:45,029 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_COM0 := false;
[L2]                 call_transfer_COM0 := false;
[L2]     CALL        call main();
[L4286]              assume null == 0;
[L4287]  CALL        call this := FreshRefGenerator__success();
[L1872]              havoc newRef;
[L1873]              assume Alloc[newRef] == false;
[L1874]              Alloc[newRef] := true;
[L1875]              assume newRef != null;
[L4287]  RET         call this := FreshRefGenerator__success();
[L4288]              assume now >= 0;
[L4289]              assume DType[this] == COM;
[L4290]              assume msgvalue_MSG >= 0;
[L4291]              gas := gas - 53000;
[L4292]  CALL        call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND FALSE  !(__exception)
[L553]   CALL        call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2237]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]  COND FALSE  !(revert)
[L2241]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2115]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2115]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2119]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2090]              assume msgsender_MSG != null;
[L2091]              Balance[this] := 0;
[L2092]              _name_ERC20Detailed[this] := -1465673266;
[L2093]              _symbol_ERC20Detailed[this] := -1465673266;
[L2094]              _decimals_ERC20Detailed[this] := 0;
[L2096]              _name_ERC20Detailed[this] := name_s228;
[L2097]              _symbol_ERC20Detailed[this] := symbol_s228;
[L2098]              _decimals_ERC20Detailed[this] := decimals_s228;
[L2119]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2120]  COND FALSE  !(revert)
[L2241]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2242]  COND FALSE  !(revert)
[L2245]  CALL        call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]              assume msgsender_MSG != null;
[L2194]              Balance[this] := 0;
[L2195]              _balances_COM[this] := zeroRefintArr();
[L2196]              sum__balances0[this] := 0;
[L2197]              _allowed_COM[this] := zeroRefRefintArr();
[L2198]              sum__allowed1[this] := 0;
[L2199]              tokenName_COM[this] := -963585000;
[L2200]              tokenSymbol_COM[this] := -1124477489;
[L2201]              tokenDecimals_COM[this] := 18;
[L2202]              _totalSupply_COM[this] := 1000000000000000000000000;
[L2203]              noFee_COM[this] := 10000000000000000001;
[L2204]              heightEnd20Percent_COM[this] := 10328752;
[L2205]              heightEnd10Percent_COM[this] := 12582818;
[L2206]              heightEnd05Percent_COM[this] := 14836884;
[L2209]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2210]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2211]              Balance[this] := Balance[this] + msgvalue_MSG;
[L2213]  CALL        call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L3009]  COND FALSE  !(!(amount_s1039 != 0))
[L3013]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L3013]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L3014]  COND FALSE  !(revert)
[L3017]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1039];
[L3018]              _balances_COM[this][account_s1039] := __var_27;
[L3019]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1039];
[L3020]              assert { :EventEmitted "Transfer_COM" } true;
[L2213]  RET         call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L2214]  COND FALSE  !(revert)
[L2245]  RET         call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2246]  COND FALSE  !(revert)
[L553]   RET         call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L554]               assume !revert && gas >= 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L4293]              assume !revert && gas >= 0;
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND TRUE   choice == 11
[L4206]              gas := gas - 21000;
[L4207]  COND TRUE   gas >= 0
[L4208]              assume value_s643 >= 0 && value_s643 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4209]              assume msgvalue_MSG == 0;
[L4210]  CALL        call __ret_0_approve := approve~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, spender_s643, value_s643);
[L985]               havoc __exception;
[L986]               revert := false;
[L987]   COND FALSE  !(__exception)
[L1015]  CALL        call __ret_0_ := approve~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, spender_s643, value_s643);
[L2610]              __var_12 := null;
[L2611]  COND FALSE  !(!(spender_s643 != null))
[L2615]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_COM[this][msgsender_MSG][spender_s643];
[L2616]              _allowed_COM[this][msgsender_MSG][spender_s643] := value_s643;
[L2617]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_COM[this][msgsender_MSG][spender_s643];
[L2618]              assert { :EventEmitted "Approval_COM" } true;
[L2619]              __ret_0_ := true;
[L1015]  RET         call __ret_0_ := approve~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, spender_s643, value_s643);
[L1016]              assume !revert && gas >= 0;
[L4210]  RET         call __ret_0_approve := approve~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, spender_s643, value_s643);
[L4296]  RET         call CorralChoice_COM(this);
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND TRUE   choice == 10
[L4213]              gas := gas - 21000;
[L4214]  COND TRUE   gas >= 0
[L4215]              assume value_s702 >= 0 && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4216]              assume msgvalue_MSG == 0;
[L4217]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L1054]              havoc __exception;
[L1055]              revert := false;
[L1056]  COND FALSE  !(__exception)
[L1084]  CALL        call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2657]  COND FALSE  !(!(value_s702 <= _balances_COM[this][from_s702]))
[L2661]  COND FALSE  !(!(value_s702 <= _allowed_COM[this][from_s702][msgsender_MSG]))
[L2665]              __var_13 := null;
[L2666]  COND FALSE  !(!(to_s702 != null))
[L2670]  COND TRUE   value_s702 < noFee_COM[this]
[L2671]  CALL        call _transferFromBurnNo~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2867]  COND FALSE  !(!(value_s906 <= _balances_COM[this][from_s906]))
[L2871]  COND FALSE  !(!(value_s906 <= _allowed_COM[this][from_s906][msgsender_MSG]))
[L2875]              __var_19 := null;
[L2876]  COND FALSE  !(!(to_s906 != null))
[L2880]  COND FALSE  !(!(value_s906 < noFee_COM[this]))
[L2884]  CALL        call __var_20 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s906], value_s906);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2884]  RET         call __var_20 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s906], value_s906);
[L2885]  COND FALSE  !(revert)
[L2888]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][from_s906];
[L2889]              _balances_COM[this][from_s906] := __var_20;
[L2890]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][from_s906];
[L2891]  CALL        call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s906], value_s906);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2891]  RET         call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s906], value_s906);
[L2892]  COND FALSE  !(revert)
[L2895]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s906];
[L2896]              _balances_COM[this][to_s906] := __var_21;
[L2897]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s906];
[L2898]  CALL        call __var_22 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s906][msgsender_MSG], value_s906);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2898]  RET         call __var_22 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s906][msgsender_MSG], value_s906);
[L2899]  COND FALSE  !(revert)
[L2902]              sum__allowed1[from_s906] := sum__allowed1[from_s906] - _allowed_COM[this][from_s906][msgsender_MSG];
[L2903]              _allowed_COM[this][from_s906][msgsender_MSG] := __var_22;
[L2904]              sum__allowed1[from_s906] := sum__allowed1[from_s906] + _allowed_COM[this][from_s906][msgsender_MSG];
[L2905]              assert { :EventEmitted "Transfer_COM" } true;
[L2671]  RET         call _transferFromBurnNo~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2672]  COND FALSE  !(revert)
[L2681]              __ret_0_ := true;
[L1084]  RET         call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L1085]              assume !revert && gas >= 0;
[L4217]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L4296]  RET         call CorralChoice_COM(this);
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s454 && (value_s454 > _balances_COM[this][msgsender_MSG] || _balances_COM[this][to_s454] + value_s454 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COM0 := true;
[L2]                 call_transfer_COM0 := false;
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND FALSE  !(__exception)
[L940]   CALL        call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2393]  COND FALSE  !(!(value_s454 <= _balances_COM[this][msgsender_MSG]))
[L2397]              __var_4 := null;
[L2398]  COND FALSE  !(!(to_s454 != null))
[L2402]  COND FALSE  !(value_s454 < noFee_COM[this])
[L2408]  CALL        call _transferBurnYes~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2477]  COND FALSE  !(!(value_s545 <= _balances_COM[this][msgsender_MSG]))
[L2481]              __var_5 := null;
[L2482]  COND FALSE  !(!(to_s545 != null))
[L2486]  COND FALSE  !(!(value_s545 >= noFee_COM[this]))
[L2490]  CALL        call tokensToBurn_s545 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s545);
[L2309]  CALL        call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND TRUE   now < heightEnd20Percent_COM[this]
[L2346]              __ret_0_ := 50;
[L2309]  RET         call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]  COND FALSE  !(revert)
[L2313]              currentRate_s365 := currentRate_s365;
[L2314]  CALL        call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L1978]              c_s119 := nonlinearDiv(a_s119, b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1979]              __ret_0_ := c_s119;
[L2314]  RET         call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L2315]  COND FALSE  !(revert)
[L2318]              onePercent_s365 := onePercent_s365;
[L2319]              __ret_0_ := onePercent_s365;
[L2490]  RET         call tokensToBurn_s545 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s545);
[L2491]  COND FALSE  !(revert)
[L2494]              tokensToBurn_s545 := tokensToBurn_s545;
[L2495]  CALL        call tokensToTransfer_s545 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s545, tokensToBurn_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2495]  RET         call tokensToTransfer_s545 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s545, tokensToBurn_s545);
[L2496]  COND FALSE  !(revert)
[L2499]              tokensToTransfer_s545 := tokensToTransfer_s545;
[L2500]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2500]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s545);
[L2501]  COND FALSE  !(revert)
[L2504]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][msgsender_MSG];
[L2505]              _balances_COM[this][msgsender_MSG] := __var_6;
[L2506]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][msgsender_MSG];
[L2507]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s545], tokensToTransfer_s545);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2507]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s545], tokensToTransfer_s545);
[L2508]  COND FALSE  !(revert)
[L2511]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s545];
[L2512]              _balances_COM[this][to_s545] := __var_7;
[L2513]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s545];
[L2514]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s545);
[L2515]  COND FALSE  !(revert)
[L2518]              _totalSupply_COM[this] := __var_8;
[L2519]              assert { :EventEmitted "Transfer_COM" } true;
[L2520]              assert { :EventEmitted "Transfer_COM" } true;
[L2408]  RET         call _transferBurnYes~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2409]  COND FALSE  !(revert)
[L2413]              __ret_0_ := true;
[L940]   RET         call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L941]               assume !revert && gas >= 0;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);

Loop:
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND FALSE  !(choice == 10)
[L4219]  COND FALSE  !(choice == 9)
[L4225]  COND FALSE  !(choice == 8)
[L4231]  COND FALSE  !(choice == 7)
[L4237]  COND FALSE  !(choice == 6)
[L4244]  COND FALSE  !(choice == 5)
[L4250]  COND FALSE  !(choice == 4)
[L4257]  COND FALSE  !(choice == 3)
[L4264]  COND FALSE  !(choice == 2)
[L4271]  COND TRUE   choice == 1
[L4272]              gas := gas - 21000;
[L4273]  COND TRUE   gas >= 0
[L4274]              assume amount_s1140 >= 0 && amount_s1140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4275]              assume msgvalue_MSG == 0;
[L4276]  CALL        call burnFrom~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, account_s1140, amount_s1140);
[L1344]              havoc __exception;
[L1345]              revert := false;
[L1346]  COND FALSE  !(__exception)
[L1374]  CALL        call burnFrom~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, account_s1140, amount_s1140);
[L3115]  COND FALSE  !(!(amount_s1140 <= _allowed_COM[this][account_s1140][msgsender_MSG]))
[L3119]  CALL        call __var_30 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][account_s1140][msgsender_MSG], amount_s1140);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3119]  RET         call __var_30 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][account_s1140][msgsender_MSG], amount_s1140);
[L3120]  COND FALSE  !(revert)
[L3123]              sum__allowed1[account_s1140] := sum__allowed1[account_s1140] - _allowed_COM[this][account_s1140][msgsender_MSG];
[L3124]              _allowed_COM[this][account_s1140][msgsender_MSG] := __var_30;
[L3125]              sum__allowed1[account_s1140] := sum__allowed1[account_s1140] + _allowed_COM[this][account_s1140][msgsender_MSG];
[L3126]  CALL        call _burn~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, account_s1140, amount_s1140);
[L3069]  COND FALSE  !(!(amount_s1099 != 0))
[L3073]  COND FALSE  !(!(amount_s1099 <= _balances_COM[this][account_s1099]))
[L3077]  CALL        call __var_28 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], amount_s1099);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3077]  RET         call __var_28 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], amount_s1099);
[L3078]  COND FALSE  !(revert)
[L3081]              _totalSupply_COM[this] := __var_28;
[L3082]  CALL        call __var_29 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1099], amount_s1099);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3082]  RET         call __var_29 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1099], amount_s1099);
[L3083]  COND FALSE  !(revert)
[L3086]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1099];
[L3087]              _balances_COM[this][account_s1099] := __var_29;
[L3088]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1099];
[L3089]              assert { :EventEmitted "Transfer_COM" } true;
[L3126]  RET         call _burn~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, account_s1140, amount_s1140);
[L3127]  COND FALSE  !(revert)
[L1374]  RET         call burnFrom~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, account_s1140, amount_s1140);
[L1375]              assume !revert && gas >= 0;
[L4276]  RET         call burnFrom~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, account_s1140, amount_s1140);
[L4296]  RET         call CorralChoice_COM(this);

[2020-11-25 12:20:45,032 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:20:45,033 INFO  L82        PathProgramCache]: Analyzing trace with hash -24391280, now seen corresponding path program 1 times
[2020-11-25 12:20:45,033 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:20:45,067 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:20:46,064 WARN  L188               SmtUtils]: Spent 314.00 ms on a formula simplification. DAG size of input: 148 DAG size of output: 98
[2020-11-25 12:20:46,401 WARN  L188               SmtUtils]: Spent 185.00 ms on a formula simplification. DAG size of input: 125 DAG size of output: 82
[2020-11-25 12:20:46,750 WARN  L188               SmtUtils]: Spent 260.00 ms on a formula simplification. DAG size of input: 114 DAG size of output: 72
[2020-11-25 12:20:46,979 WARN  L188               SmtUtils]: Spent 106.00 ms on a formula simplification. DAG size of input: 120 DAG size of output: 62
[2020-11-25 12:20:48,078 INFO  L134       CoverageAnalysis]: Checked inductivity of 200 backedges. 0 proven. 12 refuted. 0 times theorem prover too weak. 188 trivial. 0 not checked.
[2020-11-25 12:20:48,078 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 12:20:48,078 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [40] total 40
[2020-11-25 12:20:48,079 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:20:48,079 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 41 interpolants.
[2020-11-25 12:20:48,079 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=141, Invalid=1499, Unknown=0, NotChecked=0, Total=1640
[2020-11-25 12:20:48,079 INFO  L87              Difference]: Start difference. First operand 2682 states and 2953 transitions. cyclomatic complexity: 281 Second operand 41 states.
[2020-11-25 12:20:49,480 WARN  L188               SmtUtils]: Spent 1.12 s on a formula simplification. DAG size of input: 230 DAG size of output: 230
[2020-11-25 12:20:51,068 WARN  L188               SmtUtils]: Spent 1.22 s on a formula simplification. DAG size of input: 234 DAG size of output: 234
[2020-11-25 12:20:52,490 WARN  L188               SmtUtils]: Spent 1.31 s on a formula simplification. DAG size of input: 236 DAG size of output: 236
[2020-11-25 12:21:00,115 WARN  L188               SmtUtils]: Spent 1.61 s on a formula simplification. DAG size of input: 244 DAG size of output: 244
[2020-11-25 12:21:05,994 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:21:05,994 INFO  L93              Difference]: Finished difference Result 2731 states and 3026 transitions.
[2020-11-25 12:21:05,995 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 37 states. 
[2020-11-25 12:21:05,995 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2731 states and 3026 transitions.
[2020-11-25 12:21:06,001 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 12:21:06,043 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2731 states to 2731 states and 3026 transitions.
[2020-11-25 12:21:06,043 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 703
[2020-11-25 12:21:06,043 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 703
[2020-11-25 12:21:06,044 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2731 states and 3026 transitions.
[2020-11-25 12:21:06,046 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:21:06,046 INFO  L728         BuchiCegarLoop]: Abstraction has 2731 states and 3026 transitions.
[2020-11-25 12:21:06,049 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2731 states and 3026 transitions.
[2020-11-25 12:21:06,062 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2731 to 2682.
[2020-11-25 12:21:06,062 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2682 states.
[2020-11-25 12:21:06,064 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2682 states to 2682 states and 2953 transitions.
[2020-11-25 12:21:06,064 INFO  L751         BuchiCegarLoop]: Abstraction has 2682 states and 2953 transitions.
[2020-11-25 12:21:06,065 INFO  L631         BuchiCegarLoop]: Abstraction has 2682 states and 2953 transitions.
[2020-11-25 12:21:06,065 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 12:21:06,065 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2682 states and 2953 transitions.
[2020-11-25 12:21:06,067 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 12:21:06,067 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:21:06,067 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:21:06,068 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:21:06,068 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_COM0 := false;
[L2]                 call_transfer_COM0 := false;
[L2]     CALL        call main();
[L4286]              assume null == 0;
[L4287]  CALL        call this := FreshRefGenerator__success();
[L1872]              havoc newRef;
[L1873]              assume Alloc[newRef] == false;
[L1874]              Alloc[newRef] := true;
[L1875]              assume newRef != null;
[L4287]  RET         call this := FreshRefGenerator__success();
[L4288]              assume now >= 0;
[L4289]              assume DType[this] == COM;
[L4290]              assume msgvalue_MSG >= 0;
[L4291]              gas := gas - 53000;
[L4292]  CALL        call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND FALSE  !(__exception)
[L553]   CALL        call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2237]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]  COND FALSE  !(revert)
[L2241]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2115]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2115]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2119]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2090]              assume msgsender_MSG != null;
[L2091]              Balance[this] := 0;
[L2092]              _name_ERC20Detailed[this] := -1465673266;
[L2093]              _symbol_ERC20Detailed[this] := -1465673266;
[L2094]              _decimals_ERC20Detailed[this] := 0;
[L2096]              _name_ERC20Detailed[this] := name_s228;
[L2097]              _symbol_ERC20Detailed[this] := symbol_s228;
[L2098]              _decimals_ERC20Detailed[this] := decimals_s228;
[L2119]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2120]  COND FALSE  !(revert)
[L2241]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2242]  COND FALSE  !(revert)
[L2245]  CALL        call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]              assume msgsender_MSG != null;
[L2194]              Balance[this] := 0;
[L2195]              _balances_COM[this] := zeroRefintArr();
[L2196]              sum__balances0[this] := 0;
[L2197]              _allowed_COM[this] := zeroRefRefintArr();
[L2198]              sum__allowed1[this] := 0;
[L2199]              tokenName_COM[this] := -963585000;
[L2200]              tokenSymbol_COM[this] := -1124477489;
[L2201]              tokenDecimals_COM[this] := 18;
[L2202]              _totalSupply_COM[this] := 1000000000000000000000000;
[L2203]              noFee_COM[this] := 10000000000000000001;
[L2204]              heightEnd20Percent_COM[this] := 10328752;
[L2205]              heightEnd10Percent_COM[this] := 12582818;
[L2206]              heightEnd05Percent_COM[this] := 14836884;
[L2209]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2210]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2211]              Balance[this] := Balance[this] + msgvalue_MSG;
[L2213]  CALL        call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L3009]  COND FALSE  !(!(amount_s1039 != 0))
[L3013]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L3013]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L3014]  COND FALSE  !(revert)
[L3017]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1039];
[L3018]              _balances_COM[this][account_s1039] := __var_27;
[L3019]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1039];
[L3020]              assert { :EventEmitted "Transfer_COM" } true;
[L2213]  RET         call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L2214]  COND FALSE  !(revert)
[L2245]  RET         call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2246]  COND FALSE  !(revert)
[L553]   RET         call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L554]               assume !revert && gas >= 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L4293]              assume !revert && gas >= 0;
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND TRUE   choice == 11
[L4206]              gas := gas - 21000;
[L4207]  COND TRUE   gas >= 0
[L4208]              assume value_s643 >= 0 && value_s643 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4209]              assume msgvalue_MSG == 0;
[L4210]  CALL        call __ret_0_approve := approve~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, spender_s643, value_s643);
[L985]               havoc __exception;
[L986]               revert := false;
[L987]   COND FALSE  !(__exception)
[L1015]  CALL        call __ret_0_ := approve~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, spender_s643, value_s643);
[L2610]              __var_12 := null;
[L2611]  COND FALSE  !(!(spender_s643 != null))
[L2615]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_COM[this][msgsender_MSG][spender_s643];
[L2616]              _allowed_COM[this][msgsender_MSG][spender_s643] := value_s643;
[L2617]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_COM[this][msgsender_MSG][spender_s643];
[L2618]              assert { :EventEmitted "Approval_COM" } true;
[L2619]              __ret_0_ := true;
[L1015]  RET         call __ret_0_ := approve~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, spender_s643, value_s643);
[L1016]              assume !revert && gas >= 0;
[L4210]  RET         call __ret_0_approve := approve~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, spender_s643, value_s643);
[L4296]  RET         call CorralChoice_COM(this);
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND FALSE  !(choice == 10)
[L4219]  COND FALSE  !(choice == 9)
[L4225]  COND FALSE  !(choice == 8)
[L4231]  COND FALSE  !(choice == 7)
[L4237]  COND FALSE  !(choice == 6)
[L4244]  COND FALSE  !(choice == 5)
[L4250]  COND FALSE  !(choice == 4)
[L4257]  COND FALSE  !(choice == 3)
[L4264]  COND FALSE  !(choice == 2)
[L4271]  COND TRUE   choice == 1
[L4272]              gas := gas - 21000;
[L4273]  COND TRUE   gas >= 0
[L4274]              assume amount_s1140 >= 0 && amount_s1140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4275]              assume msgvalue_MSG == 0;
[L4276]  CALL        call burnFrom~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, account_s1140, amount_s1140);
[L1344]              havoc __exception;
[L1345]              revert := false;
[L1346]  COND FALSE  !(__exception)
[L1374]  CALL        call burnFrom~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, account_s1140, amount_s1140);
[L3115]  COND FALSE  !(!(amount_s1140 <= _allowed_COM[this][account_s1140][msgsender_MSG]))
[L3119]  CALL        call __var_30 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][account_s1140][msgsender_MSG], amount_s1140);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3119]  RET         call __var_30 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][account_s1140][msgsender_MSG], amount_s1140);
[L3120]  COND FALSE  !(revert)
[L3123]              sum__allowed1[account_s1140] := sum__allowed1[account_s1140] - _allowed_COM[this][account_s1140][msgsender_MSG];
[L3124]              _allowed_COM[this][account_s1140][msgsender_MSG] := __var_30;
[L3125]              sum__allowed1[account_s1140] := sum__allowed1[account_s1140] + _allowed_COM[this][account_s1140][msgsender_MSG];
[L3126]  CALL        call _burn~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, account_s1140, amount_s1140);
[L3069]  COND FALSE  !(!(amount_s1099 != 0))
[L3073]  COND FALSE  !(!(amount_s1099 <= _balances_COM[this][account_s1099]))
[L3077]  CALL        call __var_28 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], amount_s1099);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3077]  RET         call __var_28 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], amount_s1099);
[L3078]  COND FALSE  !(revert)
[L3081]              _totalSupply_COM[this] := __var_28;
[L3082]  CALL        call __var_29 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1099], amount_s1099);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3082]  RET         call __var_29 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1099], amount_s1099);
[L3083]  COND FALSE  !(revert)
[L3086]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1099];
[L3087]              _balances_COM[this][account_s1099] := __var_29;
[L3088]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1099];
[L3089]              assert { :EventEmitted "Transfer_COM" } true;
[L3126]  RET         call _burn~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, account_s1140, amount_s1140);
[L3127]  COND FALSE  !(revert)
[L1374]  RET         call burnFrom~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, account_s1140, amount_s1140);
[L1375]              assume !revert && gas >= 0;
[L4276]  RET         call burnFrom~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, account_s1140, amount_s1140);
[L4296]  RET         call CorralChoice_COM(this);
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s454 && (value_s454 > _balances_COM[this][msgsender_MSG] || _balances_COM[this][to_s454] + value_s454 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COM0 := true;
[L2]                 call_transfer_COM0 := false;
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND FALSE  !(__exception)
[L940]   CALL        call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2393]  COND FALSE  !(!(value_s454 <= _balances_COM[this][msgsender_MSG]))
[L2397]              __var_4 := null;
[L2398]  COND FALSE  !(!(to_s454 != null))
[L2402]  COND FALSE  !(value_s454 < noFee_COM[this])
[L2408]  CALL        call _transferBurnYes~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2477]  COND FALSE  !(!(value_s545 <= _balances_COM[this][msgsender_MSG]))
[L2481]              __var_5 := null;
[L2482]  COND FALSE  !(!(to_s545 != null))
[L2486]  COND FALSE  !(!(value_s545 >= noFee_COM[this]))
[L2490]  CALL        call tokensToBurn_s545 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s545);
[L2309]  CALL        call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND TRUE   now < heightEnd20Percent_COM[this]
[L2346]              __ret_0_ := 50;
[L2309]  RET         call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]  COND FALSE  !(revert)
[L2313]              currentRate_s365 := currentRate_s365;
[L2314]  CALL        call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L1978]              c_s119 := nonlinearDiv(a_s119, b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1979]              __ret_0_ := c_s119;
[L2314]  RET         call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L2315]  COND FALSE  !(revert)
[L2318]              onePercent_s365 := onePercent_s365;
[L2319]              __ret_0_ := onePercent_s365;
[L2490]  RET         call tokensToBurn_s545 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s545);
[L2491]  COND FALSE  !(revert)
[L2494]              tokensToBurn_s545 := tokensToBurn_s545;
[L2495]  CALL        call tokensToTransfer_s545 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s545, tokensToBurn_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2495]  RET         call tokensToTransfer_s545 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s545, tokensToBurn_s545);
[L2496]  COND FALSE  !(revert)
[L2499]              tokensToTransfer_s545 := tokensToTransfer_s545;
[L2500]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2500]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s545);
[L2501]  COND FALSE  !(revert)
[L2504]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][msgsender_MSG];
[L2505]              _balances_COM[this][msgsender_MSG] := __var_6;
[L2506]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][msgsender_MSG];
[L2507]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s545], tokensToTransfer_s545);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2507]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s545], tokensToTransfer_s545);
[L2508]  COND FALSE  !(revert)
[L2511]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s545];
[L2512]              _balances_COM[this][to_s545] := __var_7;
[L2513]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s545];
[L2514]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s545);
[L2515]  COND FALSE  !(revert)
[L2518]              _totalSupply_COM[this] := __var_8;
[L2519]              assert { :EventEmitted "Transfer_COM" } true;
[L2520]              assert { :EventEmitted "Transfer_COM" } true;
[L2408]  RET         call _transferBurnYes~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2409]  COND FALSE  !(revert)
[L2413]              __ret_0_ := true;
[L940]   RET         call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L941]               assume !revert && gas >= 0;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);

Loop:
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND TRUE   choice == 15
[L4181]              gas := gas - 21000;
[L4182]  COND FALSE  !(gas >= 0)
[L4296]  RET         call CorralChoice_COM(this);

[2020-11-25 12:21:06,081 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:21:06,081 INFO  L82        PathProgramCache]: Analyzing trace with hash -1982659521, now seen corresponding path program 1 times
[2020-11-25 12:21:06,081 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:21:06,098 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:21:06,427 INFO  L134       CoverageAnalysis]: Checked inductivity of 203 backedges. 3 proven. 2 refuted. 0 times theorem prover too weak. 198 trivial. 0 not checked.
[2020-11-25 12:21:06,427 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 12:21:06,427 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [27] total 27
[2020-11-25 12:21:06,427 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:21:06,427 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 28 interpolants.
[2020-11-25 12:21:06,428 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=77, Invalid=679, Unknown=0, NotChecked=0, Total=756
[2020-11-25 12:21:06,428 INFO  L87              Difference]: Start difference. First operand 2682 states and 2953 transitions. cyclomatic complexity: 281 Second operand 28 states.
[2020-11-25 12:21:10,119 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:21:10,120 INFO  L93              Difference]: Finished difference Result 2733 states and 3026 transitions.
[2020-11-25 12:21:10,120 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 28 states. 
[2020-11-25 12:21:10,120 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2733 states and 3026 transitions.
[2020-11-25 12:21:10,124 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 12:21:10,129 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2733 states to 2733 states and 3026 transitions.
[2020-11-25 12:21:10,130 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 707
[2020-11-25 12:21:10,130 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 707
[2020-11-25 12:21:10,130 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2733 states and 3026 transitions.
[2020-11-25 12:21:10,131 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:21:10,132 INFO  L728         BuchiCegarLoop]: Abstraction has 2733 states and 3026 transitions.
[2020-11-25 12:21:10,133 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2733 states and 3026 transitions.
[2020-11-25 12:21:10,145 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2733 to 2686.
[2020-11-25 12:21:10,146 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2686 states.
[2020-11-25 12:21:10,148 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2686 states to 2686 states and 2967 transitions.
[2020-11-25 12:21:10,148 INFO  L751         BuchiCegarLoop]: Abstraction has 2686 states and 2967 transitions.
[2020-11-25 12:21:10,148 INFO  L631         BuchiCegarLoop]: Abstraction has 2686 states and 2967 transitions.
[2020-11-25 12:21:10,148 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 12:21:10,148 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2686 states and 2967 transitions.
[2020-11-25 12:21:10,151 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 12:21:10,151 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:21:10,151 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:21:10,152 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:21:10,152 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_COM0 := false;
[L2]                 call_transfer_COM0 := false;
[L2]     CALL        call main();
[L4286]              assume null == 0;
[L4287]  CALL        call this := FreshRefGenerator__success();
[L1872]              havoc newRef;
[L1873]              assume Alloc[newRef] == false;
[L1874]              Alloc[newRef] := true;
[L1875]              assume newRef != null;
[L4287]  RET         call this := FreshRefGenerator__success();
[L4288]              assume now >= 0;
[L4289]              assume DType[this] == COM;
[L4290]              assume msgvalue_MSG >= 0;
[L4291]              gas := gas - 53000;
[L4292]  CALL        call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND FALSE  !(__exception)
[L553]   CALL        call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2237]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]  COND FALSE  !(revert)
[L2241]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2115]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2115]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2119]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2090]              assume msgsender_MSG != null;
[L2091]              Balance[this] := 0;
[L2092]              _name_ERC20Detailed[this] := -1465673266;
[L2093]              _symbol_ERC20Detailed[this] := -1465673266;
[L2094]              _decimals_ERC20Detailed[this] := 0;
[L2096]              _name_ERC20Detailed[this] := name_s228;
[L2097]              _symbol_ERC20Detailed[this] := symbol_s228;
[L2098]              _decimals_ERC20Detailed[this] := decimals_s228;
[L2119]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2120]  COND FALSE  !(revert)
[L2241]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2242]  COND FALSE  !(revert)
[L2245]  CALL        call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]              assume msgsender_MSG != null;
[L2194]              Balance[this] := 0;
[L2195]              _balances_COM[this] := zeroRefintArr();
[L2196]              sum__balances0[this] := 0;
[L2197]              _allowed_COM[this] := zeroRefRefintArr();
[L2198]              sum__allowed1[this] := 0;
[L2199]              tokenName_COM[this] := -963585000;
[L2200]              tokenSymbol_COM[this] := -1124477489;
[L2201]              tokenDecimals_COM[this] := 18;
[L2202]              _totalSupply_COM[this] := 1000000000000000000000000;
[L2203]              noFee_COM[this] := 10000000000000000001;
[L2204]              heightEnd20Percent_COM[this] := 10328752;
[L2205]              heightEnd10Percent_COM[this] := 12582818;
[L2206]              heightEnd05Percent_COM[this] := 14836884;
[L2209]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2210]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2211]              Balance[this] := Balance[this] + msgvalue_MSG;
[L2213]  CALL        call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L3009]  COND FALSE  !(!(amount_s1039 != 0))
[L3013]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L3013]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L3014]  COND FALSE  !(revert)
[L3017]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1039];
[L3018]              _balances_COM[this][account_s1039] := __var_27;
[L3019]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1039];
[L3020]              assert { :EventEmitted "Transfer_COM" } true;
[L2213]  RET         call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L2214]  COND FALSE  !(revert)
[L2245]  RET         call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2246]  COND FALSE  !(revert)
[L553]   RET         call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L554]               assume !revert && gas >= 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L4293]              assume !revert && gas >= 0;
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND TRUE   choice == 11
[L4206]              gas := gas - 21000;
[L4207]  COND TRUE   gas >= 0
[L4208]              assume value_s643 >= 0 && value_s643 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4209]              assume msgvalue_MSG == 0;
[L4210]  CALL        call __ret_0_approve := approve~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, spender_s643, value_s643);
[L985]               havoc __exception;
[L986]               revert := false;
[L987]   COND FALSE  !(__exception)
[L1015]  CALL        call __ret_0_ := approve~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, spender_s643, value_s643);
[L2610]              __var_12 := null;
[L2611]  COND FALSE  !(!(spender_s643 != null))
[L2615]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_COM[this][msgsender_MSG][spender_s643];
[L2616]              _allowed_COM[this][msgsender_MSG][spender_s643] := value_s643;
[L2617]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_COM[this][msgsender_MSG][spender_s643];
[L2618]              assert { :EventEmitted "Approval_COM" } true;
[L2619]              __ret_0_ := true;
[L1015]  RET         call __ret_0_ := approve~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, spender_s643, value_s643);
[L1016]              assume !revert && gas >= 0;
[L4210]  RET         call __ret_0_approve := approve~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, spender_s643, value_s643);
[L4296]  RET         call CorralChoice_COM(this);
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND TRUE   choice == 10
[L4213]              gas := gas - 21000;
[L4214]  COND TRUE   gas >= 0
[L4215]              assume value_s702 >= 0 && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4216]              assume msgvalue_MSG == 0;
[L4217]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L1054]              havoc __exception;
[L1055]              revert := false;
[L1056]  COND FALSE  !(__exception)
[L1084]  CALL        call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2657]  COND FALSE  !(!(value_s702 <= _balances_COM[this][from_s702]))
[L2661]  COND FALSE  !(!(value_s702 <= _allowed_COM[this][from_s702][msgsender_MSG]))
[L2665]              __var_13 := null;
[L2666]  COND FALSE  !(!(to_s702 != null))
[L2670]  COND FALSE  !(value_s702 < noFee_COM[this])
[L2676]  CALL        call _transferFromBurnYes~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2758]  COND FALSE  !(!(value_s818 <= _balances_COM[this][from_s818]))
[L2762]  COND FALSE  !(!(value_s818 <= _allowed_COM[this][from_s818][msgsender_MSG]))
[L2766]              __var_14 := null;
[L2767]  COND FALSE  !(!(to_s818 != null))
[L2771]  COND FALSE  !(!(value_s818 >= noFee_COM[this]))
[L2775]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s818], value_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2775]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s818], value_s818);
[L2776]  COND FALSE  !(revert)
[L2779]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][from_s818];
[L2780]              _balances_COM[this][from_s818] := __var_15;
[L2781]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][from_s818];
[L2782]  CALL        call tokensToBurn_s818 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s818);
[L2309]  CALL        call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND TRUE   now < heightEnd20Percent_COM[this]
[L2346]              __ret_0_ := 50;
[L2309]  RET         call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]  COND FALSE  !(revert)
[L2313]              currentRate_s365 := currentRate_s365;
[L2314]  CALL        call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L1978]              c_s119 := nonlinearDiv(a_s119, b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1979]              __ret_0_ := c_s119;
[L2314]  RET         call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L2315]  COND FALSE  !(revert)
[L2318]              onePercent_s365 := onePercent_s365;
[L2319]              __ret_0_ := onePercent_s365;
[L2782]  RET         call tokensToBurn_s818 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s818);
[L2783]  COND FALSE  !(revert)
[L2786]              tokensToBurn_s818 := tokensToBurn_s818;
[L2787]  CALL        call tokensToTransfer_s818 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s818, tokensToBurn_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]  RET         call tokensToTransfer_s818 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s818, tokensToBurn_s818);
[L2788]  COND FALSE  !(revert)
[L2791]              tokensToTransfer_s818 := tokensToTransfer_s818;
[L2792]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s818], tokensToTransfer_s818);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2792]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s818], tokensToTransfer_s818);
[L2793]  COND FALSE  !(revert)
[L2796]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s818];
[L2797]              _balances_COM[this][to_s818] := __var_16;
[L2798]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s818];
[L2799]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2799]  RET         call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s818);
[L2800]  COND FALSE  !(revert)
[L2803]              _totalSupply_COM[this] := __var_17;
[L2804]  CALL        call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s818][msgsender_MSG], value_s818);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2804]  RET         call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s818][msgsender_MSG], value_s818);
[L2805]  COND FALSE  !(revert)
[L2808]              sum__allowed1[from_s818] := sum__allowed1[from_s818] - _allowed_COM[this][from_s818][msgsender_MSG];
[L2809]              _allowed_COM[this][from_s818][msgsender_MSG] := __var_18;
[L2810]              sum__allowed1[from_s818] := sum__allowed1[from_s818] + _allowed_COM[this][from_s818][msgsender_MSG];
[L2811]              assert { :EventEmitted "Transfer_COM" } true;
[L2812]              assert { :EventEmitted "Transfer_COM" } true;
[L2676]  RET         call _transferFromBurnYes~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2677]  COND FALSE  !(revert)
[L2681]              __ret_0_ := true;
[L1084]  RET         call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L1085]              assume !revert && gas >= 0;
[L4217]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L4296]  RET         call CorralChoice_COM(this);
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s454 && (value_s454 > _balances_COM[this][msgsender_MSG] || _balances_COM[this][to_s454] + value_s454 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COM0 := true;
[L2]                 call_transfer_COM0 := false;
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND FALSE  !(__exception)
[L940]   CALL        call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2393]  COND FALSE  !(!(value_s454 <= _balances_COM[this][msgsender_MSG]))
[L2397]              __var_4 := null;
[L2398]  COND FALSE  !(!(to_s454 != null))
[L2402]  COND FALSE  !(value_s454 < noFee_COM[this])
[L2408]  CALL        call _transferBurnYes~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2477]  COND FALSE  !(!(value_s545 <= _balances_COM[this][msgsender_MSG]))
[L2481]              __var_5 := null;
[L2482]  COND FALSE  !(!(to_s545 != null))
[L2486]  COND FALSE  !(!(value_s545 >= noFee_COM[this]))
[L2490]  CALL        call tokensToBurn_s545 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s545);
[L2309]  CALL        call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND TRUE   now < heightEnd20Percent_COM[this]
[L2346]              __ret_0_ := 50;
[L2309]  RET         call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]  COND FALSE  !(revert)
[L2313]              currentRate_s365 := currentRate_s365;
[L2314]  CALL        call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L1978]              c_s119 := nonlinearDiv(a_s119, b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1979]              __ret_0_ := c_s119;
[L2314]  RET         call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L2315]  COND FALSE  !(revert)
[L2318]              onePercent_s365 := onePercent_s365;
[L2319]              __ret_0_ := onePercent_s365;
[L2490]  RET         call tokensToBurn_s545 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s545);
[L2491]  COND FALSE  !(revert)
[L2494]              tokensToBurn_s545 := tokensToBurn_s545;
[L2495]  CALL        call tokensToTransfer_s545 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s545, tokensToBurn_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2495]  RET         call tokensToTransfer_s545 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s545, tokensToBurn_s545);
[L2496]  COND FALSE  !(revert)
[L2499]              tokensToTransfer_s545 := tokensToTransfer_s545;
[L2500]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2500]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s545);
[L2501]  COND FALSE  !(revert)
[L2504]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][msgsender_MSG];
[L2505]              _balances_COM[this][msgsender_MSG] := __var_6;
[L2506]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][msgsender_MSG];
[L2507]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s545], tokensToTransfer_s545);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2507]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s545], tokensToTransfer_s545);
[L2508]  COND FALSE  !(revert)
[L2511]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s545];
[L2512]              _balances_COM[this][to_s545] := __var_7;
[L2513]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s545];
[L2514]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s545);
[L2515]  COND FALSE  !(revert)
[L2518]              _totalSupply_COM[this] := __var_8;
[L2519]              assert { :EventEmitted "Transfer_COM" } true;
[L2520]              assert { :EventEmitted "Transfer_COM" } true;
[L2408]  RET         call _transferBurnYes~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2409]  COND FALSE  !(revert)
[L2413]              __ret_0_ := true;
[L940]   RET         call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L941]               assume !revert && gas >= 0;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);

Loop:
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND TRUE   choice == 15
[L4181]              gas := gas - 21000;
[L4182]  COND FALSE  !(gas >= 0)
[L4296]  RET         call CorralChoice_COM(this);

[2020-11-25 12:21:10,156 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:21:10,156 INFO  L82        PathProgramCache]: Analyzing trace with hash 1429350778, now seen corresponding path program 1 times
[2020-11-25 12:21:10,157 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:21:10,195 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:21:11,226 WARN  L188               SmtUtils]: Spent 102.00 ms on a formula simplification. DAG size of input: 74 DAG size of output: 65
[2020-11-25 12:21:12,303 INFO  L134       CoverageAnalysis]: Checked inductivity of 220 backedges. 7 proven. 23 refuted. 0 times theorem prover too weak. 190 trivial. 0 not checked.
[2020-11-25 12:21:12,303 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 12:21:12,303 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [47] total 47
[2020-11-25 12:21:12,303 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:21:12,303 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 48 interpolants.
[2020-11-25 12:21:12,304 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=134, Invalid=2122, Unknown=0, NotChecked=0, Total=2256
[2020-11-25 12:21:12,304 INFO  L87              Difference]: Start difference. First operand 2686 states and 2967 transitions. cyclomatic complexity: 292 Second operand 48 states.
[2020-11-25 12:21:20,541 WARN  L188               SmtUtils]: Spent 210.00 ms on a formula simplification. DAG size of input: 81 DAG size of output: 81
[2020-11-25 12:21:27,005 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:21:27,005 INFO  L93              Difference]: Finished difference Result 2733 states and 3024 transitions.
[2020-11-25 12:21:27,005 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 42 states. 
[2020-11-25 12:21:27,005 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2733 states and 3024 transitions.
[2020-11-25 12:21:27,010 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 12:21:27,015 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2733 states to 2733 states and 3024 transitions.
[2020-11-25 12:21:27,015 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 705
[2020-11-25 12:21:27,015 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 705
[2020-11-25 12:21:27,015 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2733 states and 3024 transitions.
[2020-11-25 12:21:27,017 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:21:27,017 INFO  L728         BuchiCegarLoop]: Abstraction has 2733 states and 3024 transitions.
[2020-11-25 12:21:27,019 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2733 states and 3024 transitions.
[2020-11-25 12:21:27,031 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2733 to 2686.
[2020-11-25 12:21:27,031 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2686 states.
[2020-11-25 12:21:27,033 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2686 states to 2686 states and 2967 transitions.
[2020-11-25 12:21:27,033 INFO  L751         BuchiCegarLoop]: Abstraction has 2686 states and 2967 transitions.
[2020-11-25 12:21:27,034 INFO  L631         BuchiCegarLoop]: Abstraction has 2686 states and 2967 transitions.
[2020-11-25 12:21:27,034 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-25 12:21:27,034 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2686 states and 2967 transitions.
[2020-11-25 12:21:27,036 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 12:21:27,036 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:21:27,036 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:21:27,037 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:21:27,037 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_COM0 := false;
[L2]                 call_transfer_COM0 := false;
[L2]     CALL        call main();
[L4286]              assume null == 0;
[L4287]  CALL        call this := FreshRefGenerator__success();
[L1872]              havoc newRef;
[L1873]              assume Alloc[newRef] == false;
[L1874]              Alloc[newRef] := true;
[L1875]              assume newRef != null;
[L4287]  RET         call this := FreshRefGenerator__success();
[L4288]              assume now >= 0;
[L4289]              assume DType[this] == COM;
[L4290]              assume msgvalue_MSG >= 0;
[L4291]              gas := gas - 53000;
[L4292]  CALL        call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND FALSE  !(__exception)
[L553]   CALL        call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2237]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]  COND FALSE  !(revert)
[L2241]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2115]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2115]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2119]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2090]              assume msgsender_MSG != null;
[L2091]              Balance[this] := 0;
[L2092]              _name_ERC20Detailed[this] := -1465673266;
[L2093]              _symbol_ERC20Detailed[this] := -1465673266;
[L2094]              _decimals_ERC20Detailed[this] := 0;
[L2096]              _name_ERC20Detailed[this] := name_s228;
[L2097]              _symbol_ERC20Detailed[this] := symbol_s228;
[L2098]              _decimals_ERC20Detailed[this] := decimals_s228;
[L2119]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2120]  COND FALSE  !(revert)
[L2241]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2242]  COND FALSE  !(revert)
[L2245]  CALL        call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]              assume msgsender_MSG != null;
[L2194]              Balance[this] := 0;
[L2195]              _balances_COM[this] := zeroRefintArr();
[L2196]              sum__balances0[this] := 0;
[L2197]              _allowed_COM[this] := zeroRefRefintArr();
[L2198]              sum__allowed1[this] := 0;
[L2199]              tokenName_COM[this] := -963585000;
[L2200]              tokenSymbol_COM[this] := -1124477489;
[L2201]              tokenDecimals_COM[this] := 18;
[L2202]              _totalSupply_COM[this] := 1000000000000000000000000;
[L2203]              noFee_COM[this] := 10000000000000000001;
[L2204]              heightEnd20Percent_COM[this] := 10328752;
[L2205]              heightEnd10Percent_COM[this] := 12582818;
[L2206]              heightEnd05Percent_COM[this] := 14836884;
[L2209]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2210]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2211]              Balance[this] := Balance[this] + msgvalue_MSG;
[L2213]  CALL        call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L3009]  COND FALSE  !(!(amount_s1039 != 0))
[L3013]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L3013]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L3014]  COND FALSE  !(revert)
[L3017]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1039];
[L3018]              _balances_COM[this][account_s1039] := __var_27;
[L3019]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1039];
[L3020]              assert { :EventEmitted "Transfer_COM" } true;
[L2213]  RET         call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L2214]  COND FALSE  !(revert)
[L2245]  RET         call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2246]  COND FALSE  !(revert)
[L553]   RET         call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L554]               assume !revert && gas >= 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L4293]              assume !revert && gas >= 0;
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND FALSE  !(choice == 10)
[L4219]  COND FALSE  !(choice == 9)
[L4225]  COND FALSE  !(choice == 8)
[L4231]  COND FALSE  !(choice == 7)
[L4237]  COND FALSE  !(choice == 6)
[L4244]  COND FALSE  !(choice == 5)
[L4250]  COND FALSE  !(choice == 4)
[L4257]  COND FALSE  !(choice == 3)
[L4264]  COND TRUE   choice == 2
[L4265]              gas := gas - 21000;
[L4266]  COND TRUE   gas >= 0
[L4267]              assume amount_s1051 >= 0 && amount_s1051 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4268]              assume msgvalue_MSG == 0;
[L4269]  CALL        call burn~uint256_COM(this, msgsender_MSG, msgvalue_MSG, amount_s1051);
[L1270]              havoc __exception;
[L1271]              revert := false;
[L1272]  COND FALSE  !(__exception)
[L1300]  CALL        call burn~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, amount_s1051);
[L3033]  CALL        call _burn~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1051);
[L3069]  COND FALSE  !(!(amount_s1099 != 0))
[L3073]  COND FALSE  !(!(amount_s1099 <= _balances_COM[this][account_s1099]))
[L3077]  CALL        call __var_28 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], amount_s1099);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3077]  RET         call __var_28 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], amount_s1099);
[L3078]  COND FALSE  !(revert)
[L3081]              _totalSupply_COM[this] := __var_28;
[L3082]  CALL        call __var_29 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1099], amount_s1099);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3082]  RET         call __var_29 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1099], amount_s1099);
[L3083]  COND FALSE  !(revert)
[L3086]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1099];
[L3087]              _balances_COM[this][account_s1099] := __var_29;
[L3088]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1099];
[L3089]              assert { :EventEmitted "Transfer_COM" } true;
[L3033]  RET         call _burn~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1051);
[L3034]  COND FALSE  !(revert)
[L1300]  RET         call burn~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, amount_s1051);
[L1301]              assume !revert && gas >= 0;
[L4269]  RET         call burn~uint256_COM(this, msgsender_MSG, msgvalue_MSG, amount_s1051);
[L4296]  RET         call CorralChoice_COM(this);
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != to_s454 && (value_s454 > _balances_COM[this][msgsender_MSG] || _balances_COM[this][to_s454] + value_s454 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND FALSE  !(__exception)
[L940]   CALL        call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2393]  COND FALSE  !(!(value_s454 <= _balances_COM[this][msgsender_MSG]))
[L2397]              __var_4 := null;
[L2398]  COND FALSE  !(!(to_s454 != null))
[L2402]  COND TRUE   value_s454 < noFee_COM[this]
[L2403]  CALL        call _transferBurnNo~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2562]  COND FALSE  !(!(value_s607 <= _balances_COM[this][msgsender_MSG]))
[L2566]              __var_9 := null;
[L2567]  COND FALSE  !(!(to_s607 != null))
[L2571]  COND FALSE  !(!(value_s607 < noFee_COM[this]))
[L2575]  CALL        call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s607);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2575]  RET         call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s607);
[L2576]  COND FALSE  !(revert)
[L2579]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][msgsender_MSG];
[L2580]              _balances_COM[this][msgsender_MSG] := __var_10;
[L2581]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][msgsender_MSG];
[L2582]  CALL        call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s607], value_s607);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2582]  RET         call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s607], value_s607);
[L2583]  COND FALSE  !(revert)
[L2586]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s607];
[L2587]              _balances_COM[this][to_s607] := __var_11;
[L2588]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s607];
[L2589]              assert { :EventEmitted "Transfer_COM" } true;
[L2403]  RET         call _transferBurnNo~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2404]  COND FALSE  !(revert)
[L2413]              __ret_0_ := true;
[L940]   RET         call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L941]               assume !revert && gas >= 0;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s454 && (value_s454 > _balances_COM[this][msgsender_MSG] || _balances_COM[this][to_s454] + value_s454 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COM0 := true;
[L2]                 call_transfer_COM0 := false;
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND FALSE  !(__exception)
[L940]   CALL        call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2393]  COND FALSE  !(!(value_s454 <= _balances_COM[this][msgsender_MSG]))
[L2397]              __var_4 := null;
[L2398]  COND FALSE  !(!(to_s454 != null))
[L2402]  COND FALSE  !(value_s454 < noFee_COM[this])
[L2408]  CALL        call _transferBurnYes~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2477]  COND FALSE  !(!(value_s545 <= _balances_COM[this][msgsender_MSG]))
[L2481]              __var_5 := null;
[L2482]  COND FALSE  !(!(to_s545 != null))
[L2486]  COND FALSE  !(!(value_s545 >= noFee_COM[this]))
[L2490]  CALL        call tokensToBurn_s545 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s545);
[L2309]  CALL        call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND TRUE   now < heightEnd20Percent_COM[this]
[L2346]              __ret_0_ := 50;
[L2309]  RET         call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]  COND FALSE  !(revert)
[L2313]              currentRate_s365 := currentRate_s365;
[L2314]  CALL        call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L1978]              c_s119 := nonlinearDiv(a_s119, b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1979]              __ret_0_ := c_s119;
[L2314]  RET         call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L2315]  COND FALSE  !(revert)
[L2318]              onePercent_s365 := onePercent_s365;
[L2319]              __ret_0_ := onePercent_s365;
[L2490]  RET         call tokensToBurn_s545 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s545);
[L2491]  COND FALSE  !(revert)
[L2494]              tokensToBurn_s545 := tokensToBurn_s545;
[L2495]  CALL        call tokensToTransfer_s545 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s545, tokensToBurn_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2495]  RET         call tokensToTransfer_s545 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s545, tokensToBurn_s545);
[L2496]  COND FALSE  !(revert)
[L2499]              tokensToTransfer_s545 := tokensToTransfer_s545;
[L2500]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2500]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s545);
[L2501]  COND FALSE  !(revert)
[L2504]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][msgsender_MSG];
[L2505]              _balances_COM[this][msgsender_MSG] := __var_6;
[L2506]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][msgsender_MSG];
[L2507]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s545], tokensToTransfer_s545);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2507]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s545], tokensToTransfer_s545);
[L2508]  COND FALSE  !(revert)
[L2511]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s545];
[L2512]              _balances_COM[this][to_s545] := __var_7;
[L2513]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s545];
[L2514]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s545);
[L2515]  COND FALSE  !(revert)
[L2518]              _totalSupply_COM[this] := __var_8;
[L2519]              assert { :EventEmitted "Transfer_COM" } true;
[L2520]              assert { :EventEmitted "Transfer_COM" } true;
[L2408]  RET         call _transferBurnYes~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2409]  COND FALSE  !(revert)
[L2413]              __ret_0_ := true;
[L940]   RET         call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L941]               assume !revert && gas >= 0;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);

Loop:
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s454 && (value_s454 > _balances_COM[this][msgsender_MSG] || _balances_COM[this][to_s454] + value_s454 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COM0 := true;
[L2]                 call_transfer_COM0 := false;
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND FALSE  !(__exception)
[L940]   CALL        call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2393]  COND FALSE  !(!(value_s454 <= _balances_COM[this][msgsender_MSG]))
[L2397]              __var_4 := null;
[L2398]  COND FALSE  !(!(to_s454 != null))
[L2402]  COND FALSE  !(value_s454 < noFee_COM[this])
[L2408]  CALL        call _transferBurnYes~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2477]  COND FALSE  !(!(value_s545 <= _balances_COM[this][msgsender_MSG]))
[L2481]              __var_5 := null;
[L2482]  COND FALSE  !(!(to_s545 != null))
[L2486]  COND FALSE  !(!(value_s545 >= noFee_COM[this]))
[L2490]  CALL        call tokensToBurn_s545 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s545);
[L2309]  CALL        call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND TRUE   now < heightEnd20Percent_COM[this]
[L2346]              __ret_0_ := 50;
[L2309]  RET         call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]  COND FALSE  !(revert)
[L2313]              currentRate_s365 := currentRate_s365;
[L2314]  CALL        call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L1978]              c_s119 := nonlinearDiv(a_s119, b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1979]              __ret_0_ := c_s119;
[L2314]  RET         call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L2315]  COND FALSE  !(revert)
[L2318]              onePercent_s365 := onePercent_s365;
[L2319]              __ret_0_ := onePercent_s365;
[L2490]  RET         call tokensToBurn_s545 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s545);
[L2491]  COND FALSE  !(revert)
[L2494]              tokensToBurn_s545 := tokensToBurn_s545;
[L2495]  CALL        call tokensToTransfer_s545 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s545, tokensToBurn_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2495]  RET         call tokensToTransfer_s545 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s545, tokensToBurn_s545);
[L2496]  COND FALSE  !(revert)
[L2499]              tokensToTransfer_s545 := tokensToTransfer_s545;
[L2500]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2500]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s545);
[L2501]  COND FALSE  !(revert)
[L2504]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][msgsender_MSG];
[L2505]              _balances_COM[this][msgsender_MSG] := __var_6;
[L2506]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][msgsender_MSG];
[L2507]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s545], tokensToTransfer_s545);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2507]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s545], tokensToTransfer_s545);
[L2508]  COND FALSE  !(revert)
[L2511]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s545];
[L2512]              _balances_COM[this][to_s545] := __var_7;
[L2513]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s545];
[L2514]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s545);
[L2515]  COND FALSE  !(revert)
[L2518]              _totalSupply_COM[this] := __var_8;
[L2519]              assert { :EventEmitted "Transfer_COM" } true;
[L2520]              assert { :EventEmitted "Transfer_COM" } true;
[L2408]  RET         call _transferBurnYes~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2409]  COND FALSE  !(revert)
[L2413]              __ret_0_ := true;
[L940]   RET         call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L941]               assume !revert && gas >= 0;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);

[2020-11-25 12:21:27,041 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:21:27,041 INFO  L82        PathProgramCache]: Analyzing trace with hash 1285996437, now seen corresponding path program 1 times
[2020-11-25 12:21:27,042 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:21:27,089 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:21:28,104 WARN  L188               SmtUtils]: Spent 298.00 ms on a formula simplification. DAG size of input: 117 DAG size of output: 92
[2020-11-25 12:21:28,808 WARN  L188               SmtUtils]: Spent 401.00 ms on a formula simplification. DAG size of input: 117 DAG size of output: 91
[2020-11-25 12:21:29,217 WARN  L188               SmtUtils]: Spent 238.00 ms on a formula simplification. DAG size of input: 111 DAG size of output: 86
[2020-11-25 12:21:29,842 WARN  L188               SmtUtils]: Spent 504.00 ms on a formula simplification. DAG size of input: 136 DAG size of output: 97
[2020-11-25 12:21:30,427 WARN  L188               SmtUtils]: Spent 290.00 ms on a formula simplification. DAG size of input: 151 DAG size of output: 50
[2020-11-25 12:21:31,357 WARN  L188               SmtUtils]: Spent 468.00 ms on a formula simplification. DAG size of input: 143 DAG size of output: 101
[2020-11-25 12:21:31,820 WARN  L188               SmtUtils]: Spent 371.00 ms on a formula simplification. DAG size of input: 153 DAG size of output: 95
[2020-11-25 12:21:32,373 INFO  L134       CoverageAnalysis]: Checked inductivity of 216 backedges. 11 proven. 9 refuted. 0 times theorem prover too weak. 196 trivial. 0 not checked.
[2020-11-25 12:21:32,373 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 12:21:32,373 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [46] total 46
[2020-11-25 12:21:32,373 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:21:32,374 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 47 interpolants.
[2020-11-25 12:21:32,374 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=169, Invalid=1993, Unknown=0, NotChecked=0, Total=2162
[2020-11-25 12:21:32,374 INFO  L87              Difference]: Start difference. First operand 2686 states and 2967 transitions. cyclomatic complexity: 292 Second operand 47 states.
[2020-11-25 12:21:41,436 WARN  L188               SmtUtils]: Spent 909.00 ms on a formula simplification that was a NOOP. DAG size: 263
[2020-11-25 12:21:50,249 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:21:50,249 INFO  L93              Difference]: Finished difference Result 2755 states and 3084 transitions.
[2020-11-25 12:21:50,250 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 45 states. 
[2020-11-25 12:21:50,250 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2755 states and 3084 transitions.
[2020-11-25 12:21:50,254 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 12:21:50,259 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2755 states to 2755 states and 3084 transitions.
[2020-11-25 12:21:50,259 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 714
[2020-11-25 12:21:50,260 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 714
[2020-11-25 12:21:50,260 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2755 states and 3084 transitions.
[2020-11-25 12:21:50,262 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:21:50,262 INFO  L728         BuchiCegarLoop]: Abstraction has 2755 states and 3084 transitions.
[2020-11-25 12:21:50,264 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2755 states and 3084 transitions.
[2020-11-25 12:21:50,275 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2755 to 2693.
[2020-11-25 12:21:50,275 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2693 states.
[2020-11-25 12:21:50,278 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2693 states to 2693 states and 2982 transitions.
[2020-11-25 12:21:50,278 INFO  L751         BuchiCegarLoop]: Abstraction has 2693 states and 2982 transitions.
[2020-11-25 12:21:50,278 INFO  L631         BuchiCegarLoop]: Abstraction has 2693 states and 2982 transitions.
[2020-11-25 12:21:50,278 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-25 12:21:50,278 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2693 states and 2982 transitions.
[2020-11-25 12:21:50,280 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 12:21:50,281 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:21:50,281 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:21:50,282 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:21:50,282 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_COM0 := false;
[L2]                 call_transfer_COM0 := false;
[L2]     CALL        call main();
[L4286]              assume null == 0;
[L4287]  CALL        call this := FreshRefGenerator__success();
[L1872]              havoc newRef;
[L1873]              assume Alloc[newRef] == false;
[L1874]              Alloc[newRef] := true;
[L1875]              assume newRef != null;
[L4287]  RET         call this := FreshRefGenerator__success();
[L4288]              assume now >= 0;
[L4289]              assume DType[this] == COM;
[L4290]              assume msgvalue_MSG >= 0;
[L4291]              gas := gas - 53000;
[L4292]  CALL        call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND FALSE  !(__exception)
[L553]   CALL        call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2237]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]  COND FALSE  !(revert)
[L2241]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2115]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2115]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2119]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2090]              assume msgsender_MSG != null;
[L2091]              Balance[this] := 0;
[L2092]              _name_ERC20Detailed[this] := -1465673266;
[L2093]              _symbol_ERC20Detailed[this] := -1465673266;
[L2094]              _decimals_ERC20Detailed[this] := 0;
[L2096]              _name_ERC20Detailed[this] := name_s228;
[L2097]              _symbol_ERC20Detailed[this] := symbol_s228;
[L2098]              _decimals_ERC20Detailed[this] := decimals_s228;
[L2119]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2120]  COND FALSE  !(revert)
[L2241]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2242]  COND FALSE  !(revert)
[L2245]  CALL        call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]              assume msgsender_MSG != null;
[L2194]              Balance[this] := 0;
[L2195]              _balances_COM[this] := zeroRefintArr();
[L2196]              sum__balances0[this] := 0;
[L2197]              _allowed_COM[this] := zeroRefRefintArr();
[L2198]              sum__allowed1[this] := 0;
[L2199]              tokenName_COM[this] := -963585000;
[L2200]              tokenSymbol_COM[this] := -1124477489;
[L2201]              tokenDecimals_COM[this] := 18;
[L2202]              _totalSupply_COM[this] := 1000000000000000000000000;
[L2203]              noFee_COM[this] := 10000000000000000001;
[L2204]              heightEnd20Percent_COM[this] := 10328752;
[L2205]              heightEnd10Percent_COM[this] := 12582818;
[L2206]              heightEnd05Percent_COM[this] := 14836884;
[L2209]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2210]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2211]              Balance[this] := Balance[this] + msgvalue_MSG;
[L2213]  CALL        call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L3009]  COND FALSE  !(!(amount_s1039 != 0))
[L3013]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L3013]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L3014]  COND FALSE  !(revert)
[L3017]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1039];
[L3018]              _balances_COM[this][account_s1039] := __var_27;
[L3019]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1039];
[L3020]              assert { :EventEmitted "Transfer_COM" } true;
[L2213]  RET         call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L2214]  COND FALSE  !(revert)
[L2245]  RET         call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2246]  COND FALSE  !(revert)
[L553]   RET         call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L554]               assume !revert && gas >= 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L4293]              assume !revert && gas >= 0;
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND FALSE  !(choice == 10)
[L4219]  COND FALSE  !(choice == 9)
[L4225]  COND FALSE  !(choice == 8)
[L4231]  COND FALSE  !(choice == 7)
[L4237]  COND FALSE  !(choice == 6)
[L4244]  COND FALSE  !(choice == 5)
[L4250]  COND FALSE  !(choice == 4)
[L4257]  COND FALSE  !(choice == 3)
[L4264]  COND TRUE   choice == 2
[L4265]              gas := gas - 21000;
[L4266]  COND TRUE   gas >= 0
[L4267]              assume amount_s1051 >= 0 && amount_s1051 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4268]              assume msgvalue_MSG == 0;
[L4269]  CALL        call burn~uint256_COM(this, msgsender_MSG, msgvalue_MSG, amount_s1051);
[L1270]              havoc __exception;
[L1271]              revert := false;
[L1272]  COND FALSE  !(__exception)
[L1300]  CALL        call burn~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, amount_s1051);
[L3033]  CALL        call _burn~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1051);
[L3069]  COND FALSE  !(!(amount_s1099 != 0))
[L3073]  COND FALSE  !(!(amount_s1099 <= _balances_COM[this][account_s1099]))
[L3077]  CALL        call __var_28 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], amount_s1099);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3077]  RET         call __var_28 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], amount_s1099);
[L3078]  COND FALSE  !(revert)
[L3081]              _totalSupply_COM[this] := __var_28;
[L3082]  CALL        call __var_29 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1099], amount_s1099);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3082]  RET         call __var_29 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1099], amount_s1099);
[L3083]  COND FALSE  !(revert)
[L3086]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1099];
[L3087]              _balances_COM[this][account_s1099] := __var_29;
[L3088]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1099];
[L3089]              assert { :EventEmitted "Transfer_COM" } true;
[L3033]  RET         call _burn~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1051);
[L3034]  COND FALSE  !(revert)
[L1300]  RET         call burn~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, amount_s1051);
[L1301]              assume !revert && gas >= 0;
[L4269]  RET         call burn~uint256_COM(this, msgsender_MSG, msgvalue_MSG, amount_s1051);
[L4296]  RET         call CorralChoice_COM(this);
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != to_s454 && (value_s454 > _balances_COM[this][msgsender_MSG] || _balances_COM[this][to_s454] + value_s454 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND FALSE  !(__exception)
[L940]   CALL        call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2393]  COND FALSE  !(!(value_s454 <= _balances_COM[this][msgsender_MSG]))
[L2397]              __var_4 := null;
[L2398]  COND FALSE  !(!(to_s454 != null))
[L2402]  COND FALSE  !(value_s454 < noFee_COM[this])
[L2408]  CALL        call _transferBurnYes~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2477]  COND FALSE  !(!(value_s545 <= _balances_COM[this][msgsender_MSG]))
[L2481]              __var_5 := null;
[L2482]  COND FALSE  !(!(to_s545 != null))
[L2486]  COND FALSE  !(!(value_s545 >= noFee_COM[this]))
[L2490]  CALL        call tokensToBurn_s545 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s545);
[L2309]  CALL        call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND TRUE   now < heightEnd20Percent_COM[this]
[L2346]              __ret_0_ := 50;
[L2309]  RET         call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]  COND FALSE  !(revert)
[L2313]              currentRate_s365 := currentRate_s365;
[L2314]  CALL        call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L1978]              c_s119 := nonlinearDiv(a_s119, b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1979]              __ret_0_ := c_s119;
[L2314]  RET         call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L2315]  COND FALSE  !(revert)
[L2318]              onePercent_s365 := onePercent_s365;
[L2319]              __ret_0_ := onePercent_s365;
[L2490]  RET         call tokensToBurn_s545 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s545);
[L2491]  COND FALSE  !(revert)
[L2494]              tokensToBurn_s545 := tokensToBurn_s545;
[L2495]  CALL        call tokensToTransfer_s545 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s545, tokensToBurn_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2495]  RET         call tokensToTransfer_s545 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s545, tokensToBurn_s545);
[L2496]  COND FALSE  !(revert)
[L2499]              tokensToTransfer_s545 := tokensToTransfer_s545;
[L2500]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2500]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s545);
[L2501]  COND FALSE  !(revert)
[L2504]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][msgsender_MSG];
[L2505]              _balances_COM[this][msgsender_MSG] := __var_6;
[L2506]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][msgsender_MSG];
[L2507]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s545], tokensToTransfer_s545);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2507]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s545], tokensToTransfer_s545);
[L2508]  COND FALSE  !(revert)
[L2511]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s545];
[L2512]              _balances_COM[this][to_s545] := __var_7;
[L2513]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s545];
[L2514]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s545);
[L2515]  COND FALSE  !(revert)
[L2518]              _totalSupply_COM[this] := __var_8;
[L2519]              assert { :EventEmitted "Transfer_COM" } true;
[L2520]              assert { :EventEmitted "Transfer_COM" } true;
[L2408]  RET         call _transferBurnYes~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2409]  COND FALSE  !(revert)
[L2413]              __ret_0_ := true;
[L940]   RET         call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L941]               assume !revert && gas >= 0;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s454 && (value_s454 > _balances_COM[this][msgsender_MSG] || _balances_COM[this][to_s454] + value_s454 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COM0 := true;
[L2]                 call_transfer_COM0 := false;
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND FALSE  !(__exception)
[L940]   CALL        call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2393]  COND FALSE  !(!(value_s454 <= _balances_COM[this][msgsender_MSG]))
[L2397]              __var_4 := null;
[L2398]  COND FALSE  !(!(to_s454 != null))
[L2402]  COND FALSE  !(value_s454 < noFee_COM[this])
[L2408]  CALL        call _transferBurnYes~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2477]  COND FALSE  !(!(value_s545 <= _balances_COM[this][msgsender_MSG]))
[L2481]              __var_5 := null;
[L2482]  COND FALSE  !(!(to_s545 != null))
[L2486]  COND FALSE  !(!(value_s545 >= noFee_COM[this]))
[L2490]  CALL        call tokensToBurn_s545 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s545);
[L2309]  CALL        call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND TRUE   now < heightEnd20Percent_COM[this]
[L2346]              __ret_0_ := 50;
[L2309]  RET         call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]  COND FALSE  !(revert)
[L2313]              currentRate_s365 := currentRate_s365;
[L2314]  CALL        call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L1978]              c_s119 := nonlinearDiv(a_s119, b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1979]              __ret_0_ := c_s119;
[L2314]  RET         call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L2315]  COND FALSE  !(revert)
[L2318]              onePercent_s365 := onePercent_s365;
[L2319]              __ret_0_ := onePercent_s365;
[L2490]  RET         call tokensToBurn_s545 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s545);
[L2491]  COND FALSE  !(revert)
[L2494]              tokensToBurn_s545 := tokensToBurn_s545;
[L2495]  CALL        call tokensToTransfer_s545 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s545, tokensToBurn_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2495]  RET         call tokensToTransfer_s545 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s545, tokensToBurn_s545);
[L2496]  COND FALSE  !(revert)
[L2499]              tokensToTransfer_s545 := tokensToTransfer_s545;
[L2500]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2500]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s545);
[L2501]  COND FALSE  !(revert)
[L2504]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][msgsender_MSG];
[L2505]              _balances_COM[this][msgsender_MSG] := __var_6;
[L2506]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][msgsender_MSG];
[L2507]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s545], tokensToTransfer_s545);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2507]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s545], tokensToTransfer_s545);
[L2508]  COND FALSE  !(revert)
[L2511]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s545];
[L2512]              _balances_COM[this][to_s545] := __var_7;
[L2513]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s545];
[L2514]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s545);
[L2515]  COND FALSE  !(revert)
[L2518]              _totalSupply_COM[this] := __var_8;
[L2519]              assert { :EventEmitted "Transfer_COM" } true;
[L2520]              assert { :EventEmitted "Transfer_COM" } true;
[L2408]  RET         call _transferBurnYes~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2409]  COND FALSE  !(revert)
[L2413]              __ret_0_ := true;
[L940]   RET         call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L941]               assume !revert && gas >= 0;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);

Loop:
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND TRUE   choice == 15
[L4181]              gas := gas - 21000;
[L4182]  COND FALSE  !(gas >= 0)
[L4296]  RET         call CorralChoice_COM(this);

[2020-11-25 12:21:50,285 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:21:50,285 INFO  L82        PathProgramCache]: Analyzing trace with hash 1437207394, now seen corresponding path program 1 times
[2020-11-25 12:21:50,286 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:21:50,337 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:21:51,476 WARN  L188               SmtUtils]: Spent 150.00 ms on a formula simplification. DAG size of input: 128 DAG size of output: 86
[2020-11-25 12:21:53,143 WARN  L188               SmtUtils]: Spent 1.01 s on a formula simplification. DAG size of input: 176 DAG size of output: 96
[2020-11-25 12:21:53,913 WARN  L188               SmtUtils]: Spent 124.00 ms on a formula simplification. DAG size of input: 157 DAG size of output: 47
[2020-11-25 12:21:54,270 WARN  L188               SmtUtils]: Spent 154.00 ms on a formula simplification. DAG size of input: 185 DAG size of output: 49
[2020-11-25 12:21:54,937 WARN  L188               SmtUtils]: Spent 182.00 ms on a formula simplification. DAG size of input: 176 DAG size of output: 67
[2020-11-25 12:21:55,385 WARN  L188               SmtUtils]: Spent 145.00 ms on a formula simplification. DAG size of input: 162 DAG size of output: 52
[2020-11-25 12:21:55,974 INFO  L134       CoverageAnalysis]: Checked inductivity of 244 backedges. 16 proven. 18 refuted. 0 times theorem prover too weak. 210 trivial. 0 not checked.
[2020-11-25 12:21:55,975 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 12:21:55,975 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [51] total 51
[2020-11-25 12:21:55,975 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:21:55,975 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 52 interpolants.
[2020-11-25 12:21:55,976 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=156, Invalid=2496, Unknown=0, NotChecked=0, Total=2652
[2020-11-25 12:21:55,976 INFO  L87              Difference]: Start difference. First operand 2693 states and 2982 transitions. cyclomatic complexity: 300 Second operand 52 states.
[2020-11-25 12:22:06,838 WARN  L188               SmtUtils]: Spent 105.00 ms on a formula simplification. DAG size of input: 98 DAG size of output: 92
[2020-11-25 12:22:07,366 WARN  L188               SmtUtils]: Spent 422.00 ms on a formula simplification. DAG size of input: 131 DAG size of output: 129
[2020-11-25 12:22:08,658 WARN  L188               SmtUtils]: Spent 1.08 s on a formula simplification. DAG size of input: 126 DAG size of output: 120
[2020-11-25 12:22:16,672 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:22:16,673 INFO  L93              Difference]: Finished difference Result 2753 states and 3082 transitions.
[2020-11-25 12:22:16,673 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 47 states. 
[2020-11-25 12:22:16,673 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2753 states and 3082 transitions.
[2020-11-25 12:22:16,678 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 12:22:16,683 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2753 states to 2753 states and 3082 transitions.
[2020-11-25 12:22:16,683 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 714
[2020-11-25 12:22:16,684 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 714
[2020-11-25 12:22:16,684 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2753 states and 3082 transitions.
[2020-11-25 12:22:16,685 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:22:16,685 INFO  L728         BuchiCegarLoop]: Abstraction has 2753 states and 3082 transitions.
[2020-11-25 12:22:16,687 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2753 states and 3082 transitions.
[2020-11-25 12:22:16,699 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2753 to 2686.
[2020-11-25 12:22:16,699 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2686 states.
[2020-11-25 12:22:16,701 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2686 states to 2686 states and 2967 transitions.
[2020-11-25 12:22:16,701 INFO  L751         BuchiCegarLoop]: Abstraction has 2686 states and 2967 transitions.
[2020-11-25 12:22:16,701 INFO  L631         BuchiCegarLoop]: Abstraction has 2686 states and 2967 transitions.
[2020-11-25 12:22:16,701 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-11-25 12:22:16,701 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2686 states and 2967 transitions.
[2020-11-25 12:22:16,704 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 12:22:16,704 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:22:16,704 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:22:16,705 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:22:16,705 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_COM0 := false;
[L2]                 call_transfer_COM0 := false;
[L2]     CALL        call main();
[L4286]              assume null == 0;
[L4287]  CALL        call this := FreshRefGenerator__success();
[L1872]              havoc newRef;
[L1873]              assume Alloc[newRef] == false;
[L1874]              Alloc[newRef] := true;
[L1875]              assume newRef != null;
[L4287]  RET         call this := FreshRefGenerator__success();
[L4288]              assume now >= 0;
[L4289]              assume DType[this] == COM;
[L4290]              assume msgvalue_MSG >= 0;
[L4291]              gas := gas - 53000;
[L4292]  CALL        call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND FALSE  !(__exception)
[L553]   CALL        call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2237]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]  COND FALSE  !(revert)
[L2241]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2115]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2115]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2119]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2090]              assume msgsender_MSG != null;
[L2091]              Balance[this] := 0;
[L2092]              _name_ERC20Detailed[this] := -1465673266;
[L2093]              _symbol_ERC20Detailed[this] := -1465673266;
[L2094]              _decimals_ERC20Detailed[this] := 0;
[L2096]              _name_ERC20Detailed[this] := name_s228;
[L2097]              _symbol_ERC20Detailed[this] := symbol_s228;
[L2098]              _decimals_ERC20Detailed[this] := decimals_s228;
[L2119]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2120]  COND FALSE  !(revert)
[L2241]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2242]  COND FALSE  !(revert)
[L2245]  CALL        call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]              assume msgsender_MSG != null;
[L2194]              Balance[this] := 0;
[L2195]              _balances_COM[this] := zeroRefintArr();
[L2196]              sum__balances0[this] := 0;
[L2197]              _allowed_COM[this] := zeroRefRefintArr();
[L2198]              sum__allowed1[this] := 0;
[L2199]              tokenName_COM[this] := -963585000;
[L2200]              tokenSymbol_COM[this] := -1124477489;
[L2201]              tokenDecimals_COM[this] := 18;
[L2202]              _totalSupply_COM[this] := 1000000000000000000000000;
[L2203]              noFee_COM[this] := 10000000000000000001;
[L2204]              heightEnd20Percent_COM[this] := 10328752;
[L2205]              heightEnd10Percent_COM[this] := 12582818;
[L2206]              heightEnd05Percent_COM[this] := 14836884;
[L2209]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2210]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2211]              Balance[this] := Balance[this] + msgvalue_MSG;
[L2213]  CALL        call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L3009]  COND FALSE  !(!(amount_s1039 != 0))
[L3013]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L3013]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L3014]  COND FALSE  !(revert)
[L3017]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1039];
[L3018]              _balances_COM[this][account_s1039] := __var_27;
[L3019]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1039];
[L3020]              assert { :EventEmitted "Transfer_COM" } true;
[L2213]  RET         call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L2214]  COND FALSE  !(revert)
[L2245]  RET         call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2246]  COND FALSE  !(revert)
[L553]   RET         call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L554]               assume !revert && gas >= 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L4293]              assume !revert && gas >= 0;
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND FALSE  !(choice == 10)
[L4219]  COND FALSE  !(choice == 9)
[L4225]  COND FALSE  !(choice == 8)
[L4231]  COND FALSE  !(choice == 7)
[L4237]  COND FALSE  !(choice == 6)
[L4244]  COND FALSE  !(choice == 5)
[L4250]  COND FALSE  !(choice == 4)
[L4257]  COND FALSE  !(choice == 3)
[L4264]  COND TRUE   choice == 2
[L4265]              gas := gas - 21000;
[L4266]  COND TRUE   gas >= 0
[L4267]              assume amount_s1051 >= 0 && amount_s1051 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4268]              assume msgvalue_MSG == 0;
[L4269]  CALL        call burn~uint256_COM(this, msgsender_MSG, msgvalue_MSG, amount_s1051);
[L1270]              havoc __exception;
[L1271]              revert := false;
[L1272]  COND FALSE  !(__exception)
[L1300]  CALL        call burn~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, amount_s1051);
[L3033]  CALL        call _burn~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1051);
[L3069]  COND FALSE  !(!(amount_s1099 != 0))
[L3073]  COND FALSE  !(!(amount_s1099 <= _balances_COM[this][account_s1099]))
[L3077]  CALL        call __var_28 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], amount_s1099);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3077]  RET         call __var_28 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], amount_s1099);
[L3078]  COND FALSE  !(revert)
[L3081]              _totalSupply_COM[this] := __var_28;
[L3082]  CALL        call __var_29 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1099], amount_s1099);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3082]  RET         call __var_29 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1099], amount_s1099);
[L3083]  COND FALSE  !(revert)
[L3086]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1099];
[L3087]              _balances_COM[this][account_s1099] := __var_29;
[L3088]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1099];
[L3089]              assert { :EventEmitted "Transfer_COM" } true;
[L3033]  RET         call _burn~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1051);
[L3034]  COND FALSE  !(revert)
[L1300]  RET         call burn~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, amount_s1051);
[L1301]              assume !revert && gas >= 0;
[L4269]  RET         call burn~uint256_COM(this, msgsender_MSG, msgvalue_MSG, amount_s1051);
[L4296]  RET         call CorralChoice_COM(this);
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND TRUE   choice == 10
[L4213]              gas := gas - 21000;
[L4214]  COND TRUE   gas >= 0
[L4215]              assume value_s702 >= 0 && value_s702 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4216]              assume msgvalue_MSG == 0;
[L4217]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L1054]              havoc __exception;
[L1055]              revert := false;
[L1056]  COND FALSE  !(__exception)
[L1084]  CALL        call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2657]  COND FALSE  !(!(value_s702 <= _balances_COM[this][from_s702]))
[L2661]  COND FALSE  !(!(value_s702 <= _allowed_COM[this][from_s702][msgsender_MSG]))
[L2665]              __var_13 := null;
[L2666]  COND FALSE  !(!(to_s702 != null))
[L2670]  COND TRUE   value_s702 < noFee_COM[this]
[L2671]  CALL        call _transferFromBurnNo~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2867]  COND FALSE  !(!(value_s906 <= _balances_COM[this][from_s906]))
[L2871]  COND FALSE  !(!(value_s906 <= _allowed_COM[this][from_s906][msgsender_MSG]))
[L2875]              __var_19 := null;
[L2876]  COND FALSE  !(!(to_s906 != null))
[L2880]  COND FALSE  !(!(value_s906 < noFee_COM[this]))
[L2884]  CALL        call __var_20 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s906], value_s906);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2884]  RET         call __var_20 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][from_s906], value_s906);
[L2885]  COND FALSE  !(revert)
[L2888]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][from_s906];
[L2889]              _balances_COM[this][from_s906] := __var_20;
[L2890]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][from_s906];
[L2891]  CALL        call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s906], value_s906);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2891]  RET         call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s906], value_s906);
[L2892]  COND FALSE  !(revert)
[L2895]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s906];
[L2896]              _balances_COM[this][to_s906] := __var_21;
[L2897]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s906];
[L2898]  CALL        call __var_22 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s906][msgsender_MSG], value_s906);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2898]  RET         call __var_22 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][from_s906][msgsender_MSG], value_s906);
[L2899]  COND FALSE  !(revert)
[L2902]              sum__allowed1[from_s906] := sum__allowed1[from_s906] - _allowed_COM[this][from_s906][msgsender_MSG];
[L2903]              _allowed_COM[this][from_s906][msgsender_MSG] := __var_22;
[L2904]              sum__allowed1[from_s906] := sum__allowed1[from_s906] + _allowed_COM[this][from_s906][msgsender_MSG];
[L2905]              assert { :EventEmitted "Transfer_COM" } true;
[L2671]  RET         call _transferFromBurnNo~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L2672]  COND FALSE  !(revert)
[L2681]              __ret_0_ := true;
[L1084]  RET         call __ret_0_ := transferFrom~address~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L1085]              assume !revert && gas >= 0;
[L4217]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, from_s702, to_s702, value_s702);
[L4296]  RET         call CorralChoice_COM(this);
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s454 && (value_s454 > _balances_COM[this][msgsender_MSG] || _balances_COM[this][to_s454] + value_s454 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COM0 := true;
[L2]                 call_transfer_COM0 := false;
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND FALSE  !(__exception)
[L940]   CALL        call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2393]  COND FALSE  !(!(value_s454 <= _balances_COM[this][msgsender_MSG]))
[L2397]              __var_4 := null;
[L2398]  COND FALSE  !(!(to_s454 != null))
[L2402]  COND FALSE  !(value_s454 < noFee_COM[this])
[L2408]  CALL        call _transferBurnYes~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2477]  COND FALSE  !(!(value_s545 <= _balances_COM[this][msgsender_MSG]))
[L2481]              __var_5 := null;
[L2482]  COND FALSE  !(!(to_s545 != null))
[L2486]  COND FALSE  !(!(value_s545 >= noFee_COM[this]))
[L2490]  CALL        call tokensToBurn_s545 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s545);
[L2309]  CALL        call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND TRUE   now < heightEnd20Percent_COM[this]
[L2346]              __ret_0_ := 50;
[L2309]  RET         call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]  COND FALSE  !(revert)
[L2313]              currentRate_s365 := currentRate_s365;
[L2314]  CALL        call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L1978]              c_s119 := nonlinearDiv(a_s119, b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1979]              __ret_0_ := c_s119;
[L2314]  RET         call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L2315]  COND FALSE  !(revert)
[L2318]              onePercent_s365 := onePercent_s365;
[L2319]              __ret_0_ := onePercent_s365;
[L2490]  RET         call tokensToBurn_s545 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s545);
[L2491]  COND FALSE  !(revert)
[L2494]              tokensToBurn_s545 := tokensToBurn_s545;
[L2495]  CALL        call tokensToTransfer_s545 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s545, tokensToBurn_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2495]  RET         call tokensToTransfer_s545 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s545, tokensToBurn_s545);
[L2496]  COND FALSE  !(revert)
[L2499]              tokensToTransfer_s545 := tokensToTransfer_s545;
[L2500]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2500]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s545);
[L2501]  COND FALSE  !(revert)
[L2504]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][msgsender_MSG];
[L2505]              _balances_COM[this][msgsender_MSG] := __var_6;
[L2506]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][msgsender_MSG];
[L2507]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s545], tokensToTransfer_s545);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2507]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s545], tokensToTransfer_s545);
[L2508]  COND FALSE  !(revert)
[L2511]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s545];
[L2512]              _balances_COM[this][to_s545] := __var_7;
[L2513]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s545];
[L2514]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s545);
[L2515]  COND FALSE  !(revert)
[L2518]              _totalSupply_COM[this] := __var_8;
[L2519]              assert { :EventEmitted "Transfer_COM" } true;
[L2520]              assert { :EventEmitted "Transfer_COM" } true;
[L2408]  RET         call _transferBurnYes~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2409]  COND FALSE  !(revert)
[L2413]              __ret_0_ := true;
[L940]   RET         call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L941]               assume !revert && gas >= 0;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);

Loop:
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND FALSE  !(choice == 10)
[L4219]  COND FALSE  !(choice == 9)
[L4225]  COND FALSE  !(choice == 8)
[L4231]  COND FALSE  !(choice == 7)
[L4237]  COND FALSE  !(choice == 6)
[L4244]  COND FALSE  !(choice == 5)
[L4250]  COND FALSE  !(choice == 4)
[L4257]  COND FALSE  !(choice == 3)
[L4264]  COND FALSE  !(choice == 2)
[L4271]  COND TRUE   choice == 1
[L4272]              gas := gas - 21000;
[L4273]  COND TRUE   gas >= 0
[L4274]              assume amount_s1140 >= 0 && amount_s1140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4275]              assume msgvalue_MSG == 0;
[L4276]  CALL        call burnFrom~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, account_s1140, amount_s1140);
[L1344]              havoc __exception;
[L1345]              revert := false;
[L1346]  COND FALSE  !(__exception)
[L1374]  CALL        call burnFrom~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, account_s1140, amount_s1140);
[L3115]  COND FALSE  !(!(amount_s1140 <= _allowed_COM[this][account_s1140][msgsender_MSG]))
[L3119]  CALL        call __var_30 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][account_s1140][msgsender_MSG], amount_s1140);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3119]  RET         call __var_30 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_COM[this][account_s1140][msgsender_MSG], amount_s1140);
[L3120]  COND FALSE  !(revert)
[L3123]              sum__allowed1[account_s1140] := sum__allowed1[account_s1140] - _allowed_COM[this][account_s1140][msgsender_MSG];
[L3124]              _allowed_COM[this][account_s1140][msgsender_MSG] := __var_30;
[L3125]              sum__allowed1[account_s1140] := sum__allowed1[account_s1140] + _allowed_COM[this][account_s1140][msgsender_MSG];
[L3126]  CALL        call _burn~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, account_s1140, amount_s1140);
[L3069]  COND FALSE  !(!(amount_s1099 != 0))
[L3073]  COND FALSE  !(!(amount_s1099 <= _balances_COM[this][account_s1099]))
[L3077]  CALL        call __var_28 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], amount_s1099);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3077]  RET         call __var_28 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], amount_s1099);
[L3078]  COND FALSE  !(revert)
[L3081]              _totalSupply_COM[this] := __var_28;
[L3082]  CALL        call __var_29 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1099], amount_s1099);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3082]  RET         call __var_29 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1099], amount_s1099);
[L3083]  COND FALSE  !(revert)
[L3086]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1099];
[L3087]              _balances_COM[this][account_s1099] := __var_29;
[L3088]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1099];
[L3089]              assert { :EventEmitted "Transfer_COM" } true;
[L3126]  RET         call _burn~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, account_s1140, amount_s1140);
[L3127]  COND FALSE  !(revert)
[L1374]  RET         call burnFrom~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, account_s1140, amount_s1140);
[L1375]              assume !revert && gas >= 0;
[L4276]  RET         call burnFrom~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, account_s1140, amount_s1140);
[L4296]  RET         call CorralChoice_COM(this);

[2020-11-25 12:22:16,709 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:22:16,709 INFO  L82        PathProgramCache]: Analyzing trace with hash 1115338424, now seen corresponding path program 1 times
[2020-11-25 12:22:16,709 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:22:16,744 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:22:17,640 WARN  L188               SmtUtils]: Spent 164.00 ms on a formula simplification. DAG size of input: 102 DAG size of output: 65
[2020-11-25 12:22:18,398 WARN  L188               SmtUtils]: Spent 166.00 ms on a formula simplification. DAG size of input: 120 DAG size of output: 66
[2020-11-25 12:22:18,983 INFO  L134       CoverageAnalysis]: Checked inductivity of 221 backedges. 9 proven. 115 refuted. 0 times theorem prover too weak. 97 trivial. 0 not checked.
[2020-11-25 12:22:18,983 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 12:22:18,983 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [43] total 43
[2020-11-25 12:22:18,983 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:22:18,984 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 44 interpolants.
[2020-11-25 12:22:18,984 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=152, Invalid=1740, Unknown=0, NotChecked=0, Total=1892
[2020-11-25 12:22:18,984 INFO  L87              Difference]: Start difference. First operand 2686 states and 2967 transitions. cyclomatic complexity: 292 Second operand 44 states.
[2020-11-25 12:22:34,271 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:22:34,271 INFO  L93              Difference]: Finished difference Result 2739 states and 3059 transitions.
[2020-11-25 12:22:34,271 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 43 states. 
[2020-11-25 12:22:34,271 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2739 states and 3059 transitions.
[2020-11-25 12:22:34,276 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 12:22:34,281 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2739 states to 2739 states and 3059 transitions.
[2020-11-25 12:22:34,281 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 707
[2020-11-25 12:22:34,282 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 707
[2020-11-25 12:22:34,282 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2739 states and 3059 transitions.
[2020-11-25 12:22:34,283 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:22:34,283 INFO  L728         BuchiCegarLoop]: Abstraction has 2739 states and 3059 transitions.
[2020-11-25 12:22:34,285 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2739 states and 3059 transitions.
[2020-11-25 12:22:34,296 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2739 to 2686.
[2020-11-25 12:22:34,296 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2686 states.
[2020-11-25 12:22:34,299 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2686 states to 2686 states and 2967 transitions.
[2020-11-25 12:22:34,299 INFO  L751         BuchiCegarLoop]: Abstraction has 2686 states and 2967 transitions.
[2020-11-25 12:22:34,299 INFO  L631         BuchiCegarLoop]: Abstraction has 2686 states and 2967 transitions.
[2020-11-25 12:22:34,299 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-11-25 12:22:34,299 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2686 states and 2967 transitions.
[2020-11-25 12:22:34,302 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 12:22:34,302 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:22:34,302 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:22:34,303 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:22:34,303 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_COM0 := false;
[L2]                 call_transfer_COM0 := false;
[L2]     CALL        call main();
[L4286]              assume null == 0;
[L4287]  CALL        call this := FreshRefGenerator__success();
[L1872]              havoc newRef;
[L1873]              assume Alloc[newRef] == false;
[L1874]              Alloc[newRef] := true;
[L1875]              assume newRef != null;
[L4287]  RET         call this := FreshRefGenerator__success();
[L4288]              assume now >= 0;
[L4289]              assume DType[this] == COM;
[L4290]              assume msgvalue_MSG >= 0;
[L4291]              gas := gas - 53000;
[L4292]  CALL        call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND FALSE  !(__exception)
[L553]   CALL        call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2237]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]  COND FALSE  !(revert)
[L2241]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2115]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2115]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2119]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2090]              assume msgsender_MSG != null;
[L2091]              Balance[this] := 0;
[L2092]              _name_ERC20Detailed[this] := -1465673266;
[L2093]              _symbol_ERC20Detailed[this] := -1465673266;
[L2094]              _decimals_ERC20Detailed[this] := 0;
[L2096]              _name_ERC20Detailed[this] := name_s228;
[L2097]              _symbol_ERC20Detailed[this] := symbol_s228;
[L2098]              _decimals_ERC20Detailed[this] := decimals_s228;
[L2119]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2120]  COND FALSE  !(revert)
[L2241]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2242]  COND FALSE  !(revert)
[L2245]  CALL        call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]              assume msgsender_MSG != null;
[L2194]              Balance[this] := 0;
[L2195]              _balances_COM[this] := zeroRefintArr();
[L2196]              sum__balances0[this] := 0;
[L2197]              _allowed_COM[this] := zeroRefRefintArr();
[L2198]              sum__allowed1[this] := 0;
[L2199]              tokenName_COM[this] := -963585000;
[L2200]              tokenSymbol_COM[this] := -1124477489;
[L2201]              tokenDecimals_COM[this] := 18;
[L2202]              _totalSupply_COM[this] := 1000000000000000000000000;
[L2203]              noFee_COM[this] := 10000000000000000001;
[L2204]              heightEnd20Percent_COM[this] := 10328752;
[L2205]              heightEnd10Percent_COM[this] := 12582818;
[L2206]              heightEnd05Percent_COM[this] := 14836884;
[L2209]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2210]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2211]              Balance[this] := Balance[this] + msgvalue_MSG;
[L2213]  CALL        call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L3009]  COND FALSE  !(!(amount_s1039 != 0))
[L3013]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L3013]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L3014]  COND FALSE  !(revert)
[L3017]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1039];
[L3018]              _balances_COM[this][account_s1039] := __var_27;
[L3019]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1039];
[L3020]              assert { :EventEmitted "Transfer_COM" } true;
[L2213]  RET         call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L2214]  COND FALSE  !(revert)
[L2245]  RET         call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2246]  COND FALSE  !(revert)
[L553]   RET         call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L554]               assume !revert && gas >= 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L4293]              assume !revert && gas >= 0;
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != to_s454 && (value_s454 > _balances_COM[this][msgsender_MSG] || _balances_COM[this][to_s454] + value_s454 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND FALSE  !(__exception)
[L940]   CALL        call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2393]  COND FALSE  !(!(value_s454 <= _balances_COM[this][msgsender_MSG]))
[L2397]              __var_4 := null;
[L2398]  COND FALSE  !(!(to_s454 != null))
[L2402]  COND TRUE   value_s454 < noFee_COM[this]
[L2403]  CALL        call _transferBurnNo~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2562]  COND FALSE  !(!(value_s607 <= _balances_COM[this][msgsender_MSG]))
[L2566]              __var_9 := null;
[L2567]  COND FALSE  !(!(to_s607 != null))
[L2571]  COND FALSE  !(!(value_s607 < noFee_COM[this]))
[L2575]  CALL        call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s607);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2575]  RET         call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s607);
[L2576]  COND FALSE  !(revert)
[L2579]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][msgsender_MSG];
[L2580]              _balances_COM[this][msgsender_MSG] := __var_10;
[L2581]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][msgsender_MSG];
[L2582]  CALL        call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s607], value_s607);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2582]  RET         call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s607], value_s607);
[L2583]  COND FALSE  !(revert)
[L2586]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s607];
[L2587]              _balances_COM[this][to_s607] := __var_11;
[L2588]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s607];
[L2589]              assert { :EventEmitted "Transfer_COM" } true;
[L2403]  RET         call _transferBurnNo~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2404]  COND FALSE  !(revert)
[L2413]              __ret_0_ := true;
[L940]   RET         call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L941]               assume !revert && gas >= 0;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND FALSE  !(choice == 10)
[L4219]  COND FALSE  !(choice == 9)
[L4225]  COND FALSE  !(choice == 8)
[L4231]  COND FALSE  !(choice == 7)
[L4237]  COND FALSE  !(choice == 6)
[L4244]  COND FALSE  !(choice == 5)
[L4250]  COND FALSE  !(choice == 4)
[L4257]  COND FALSE  !(choice == 3)
[L4264]  COND TRUE   choice == 2
[L4265]              gas := gas - 21000;
[L4266]  COND TRUE   gas >= 0
[L4267]              assume amount_s1051 >= 0 && amount_s1051 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4268]              assume msgvalue_MSG == 0;
[L4269]  CALL        call burn~uint256_COM(this, msgsender_MSG, msgvalue_MSG, amount_s1051);
[L1270]              havoc __exception;
[L1271]              revert := false;
[L1272]  COND FALSE  !(__exception)
[L1300]  CALL        call burn~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, amount_s1051);
[L3033]  CALL        call _burn~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1051);
[L3069]  COND FALSE  !(!(amount_s1099 != 0))
[L3073]  COND FALSE  !(!(amount_s1099 <= _balances_COM[this][account_s1099]))
[L3077]  CALL        call __var_28 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], amount_s1099);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3077]  RET         call __var_28 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], amount_s1099);
[L3078]  COND FALSE  !(revert)
[L3081]              _totalSupply_COM[this] := __var_28;
[L3082]  CALL        call __var_29 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1099], amount_s1099);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3082]  RET         call __var_29 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1099], amount_s1099);
[L3083]  COND FALSE  !(revert)
[L3086]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1099];
[L3087]              _balances_COM[this][account_s1099] := __var_29;
[L3088]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1099];
[L3089]              assert { :EventEmitted "Transfer_COM" } true;
[L3033]  RET         call _burn~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1051);
[L3034]  COND FALSE  !(revert)
[L1300]  RET         call burn~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, amount_s1051);
[L1301]              assume !revert && gas >= 0;
[L4269]  RET         call burn~uint256_COM(this, msgsender_MSG, msgvalue_MSG, amount_s1051);
[L4296]  RET         call CorralChoice_COM(this);
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s454 && (value_s454 > _balances_COM[this][msgsender_MSG] || _balances_COM[this][to_s454] + value_s454 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COM0 := true;
[L2]                 call_transfer_COM0 := false;
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND FALSE  !(__exception)
[L940]   CALL        call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2393]  COND FALSE  !(!(value_s454 <= _balances_COM[this][msgsender_MSG]))
[L2397]              __var_4 := null;
[L2398]  COND FALSE  !(!(to_s454 != null))
[L2402]  COND FALSE  !(value_s454 < noFee_COM[this])
[L2408]  CALL        call _transferBurnYes~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2477]  COND FALSE  !(!(value_s545 <= _balances_COM[this][msgsender_MSG]))
[L2481]              __var_5 := null;
[L2482]  COND FALSE  !(!(to_s545 != null))
[L2486]  COND FALSE  !(!(value_s545 >= noFee_COM[this]))
[L2490]  CALL        call tokensToBurn_s545 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s545);
[L2309]  CALL        call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND TRUE   now < heightEnd20Percent_COM[this]
[L2346]              __ret_0_ := 50;
[L2309]  RET         call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]  COND FALSE  !(revert)
[L2313]              currentRate_s365 := currentRate_s365;
[L2314]  CALL        call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L1978]              c_s119 := nonlinearDiv(a_s119, b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1979]              __ret_0_ := c_s119;
[L2314]  RET         call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L2315]  COND FALSE  !(revert)
[L2318]              onePercent_s365 := onePercent_s365;
[L2319]              __ret_0_ := onePercent_s365;
[L2490]  RET         call tokensToBurn_s545 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s545);
[L2491]  COND FALSE  !(revert)
[L2494]              tokensToBurn_s545 := tokensToBurn_s545;
[L2495]  CALL        call tokensToTransfer_s545 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s545, tokensToBurn_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2495]  RET         call tokensToTransfer_s545 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s545, tokensToBurn_s545);
[L2496]  COND FALSE  !(revert)
[L2499]              tokensToTransfer_s545 := tokensToTransfer_s545;
[L2500]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2500]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s545);
[L2501]  COND FALSE  !(revert)
[L2504]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][msgsender_MSG];
[L2505]              _balances_COM[this][msgsender_MSG] := __var_6;
[L2506]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][msgsender_MSG];
[L2507]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s545], tokensToTransfer_s545);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2507]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s545], tokensToTransfer_s545);
[L2508]  COND FALSE  !(revert)
[L2511]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s545];
[L2512]              _balances_COM[this][to_s545] := __var_7;
[L2513]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s545];
[L2514]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s545);
[L2515]  COND FALSE  !(revert)
[L2518]              _totalSupply_COM[this] := __var_8;
[L2519]              assert { :EventEmitted "Transfer_COM" } true;
[L2520]              assert { :EventEmitted "Transfer_COM" } true;
[L2408]  RET         call _transferBurnYes~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2409]  COND FALSE  !(revert)
[L2413]              __ret_0_ := true;
[L940]   RET         call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L941]               assume !revert && gas >= 0;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);

Loop:
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND TRUE   choice == 15
[L4181]              gas := gas - 21000;
[L4182]  COND FALSE  !(gas >= 0)
[L4296]  RET         call CorralChoice_COM(this);

[2020-11-25 12:22:34,306 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:22:34,306 INFO  L82        PathProgramCache]: Analyzing trace with hash 987163471, now seen corresponding path program 2 times
[2020-11-25 12:22:34,306 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:22:34,355 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:22:37,337 WARN  L188               SmtUtils]: Spent 1.49 s on a formula simplification. DAG size of input: 598 DAG size of output: 94
[2020-11-25 12:22:39,897 WARN  L188               SmtUtils]: Spent 1.74 s on a formula simplification. DAG size of input: 598 DAG size of output: 94
[2020-11-25 12:22:41,216 WARN  L188               SmtUtils]: Spent 568.00 ms on a formula simplification. DAG size of input: 387 DAG size of output: 40
[2020-11-25 12:22:41,723 WARN  L188               SmtUtils]: Spent 388.00 ms on a formula simplification. DAG size of input: 299 DAG size of output: 46
[2020-11-25 12:22:42,372 WARN  L188               SmtUtils]: Spent 170.00 ms on a formula simplification. DAG size of input: 143 DAG size of output: 47
[2020-11-25 12:22:45,055 WARN  L188               SmtUtils]: Spent 2.00 s on a formula simplification. DAG size of input: 261 DAG size of output: 127
[2020-11-25 12:22:46,700 WARN  L188               SmtUtils]: Spent 1.07 s on a formula simplification. DAG size of input: 394 DAG size of output: 55
[2020-11-25 12:22:48,893 WARN  L188               SmtUtils]: Spent 855.00 ms on a formula simplification. DAG size of input: 276 DAG size of output: 107
[2020-11-25 12:22:50,757 WARN  L188               SmtUtils]: Spent 1.02 s on a formula simplification. DAG size of input: 261 DAG size of output: 80
[2020-11-25 12:22:51,688 INFO  L134       CoverageAnalysis]: Checked inductivity of 216 backedges. 5 proven. 15 refuted. 0 times theorem prover too weak. 196 trivial. 0 not checked.
[2020-11-25 12:22:51,689 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 12:22:51,689 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [48] total 48
[2020-11-25 12:22:51,689 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:22:51,689 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 49 interpolants.
[2020-11-25 12:22:51,689 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=159, Invalid=2193, Unknown=0, NotChecked=0, Total=2352
[2020-11-25 12:22:51,690 INFO  L87              Difference]: Start difference. First operand 2686 states and 2967 transitions. cyclomatic complexity: 292 Second operand 49 states.
[2020-11-25 12:23:11,883 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:23:11,883 INFO  L93              Difference]: Finished difference Result 2757 states and 3104 transitions.
[2020-11-25 12:23:11,883 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 45 states. 
[2020-11-25 12:23:11,883 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2757 states and 3104 transitions.
[2020-11-25 12:23:11,889 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 12:23:11,894 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2757 states to 2757 states and 3104 transitions.
[2020-11-25 12:23:11,894 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 714
[2020-11-25 12:23:11,894 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 714
[2020-11-25 12:23:11,894 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2757 states and 3104 transitions.
[2020-11-25 12:23:11,896 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:23:11,896 INFO  L728         BuchiCegarLoop]: Abstraction has 2757 states and 3104 transitions.
[2020-11-25 12:23:11,898 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2757 states and 3104 transitions.
[2020-11-25 12:23:11,909 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2757 to 2697.
[2020-11-25 12:23:11,909 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2697 states.
[2020-11-25 12:23:11,912 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2697 states to 2697 states and 3000 transitions.
[2020-11-25 12:23:11,912 INFO  L751         BuchiCegarLoop]: Abstraction has 2697 states and 3000 transitions.
[2020-11-25 12:23:11,912 INFO  L631         BuchiCegarLoop]: Abstraction has 2697 states and 3000 transitions.
[2020-11-25 12:23:11,912 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-11-25 12:23:11,912 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2697 states and 3000 transitions.
[2020-11-25 12:23:11,914 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 12:23:11,914 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:23:11,914 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:23:11,915 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:23:11,916 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_COM0 := false;
[L2]                 call_transfer_COM0 := false;
[L2]     CALL        call main();
[L4286]              assume null == 0;
[L4287]  CALL        call this := FreshRefGenerator__success();
[L1872]              havoc newRef;
[L1873]              assume Alloc[newRef] == false;
[L1874]              Alloc[newRef] := true;
[L1875]              assume newRef != null;
[L4287]  RET         call this := FreshRefGenerator__success();
[L4288]              assume now >= 0;
[L4289]              assume DType[this] == COM;
[L4290]              assume msgvalue_MSG >= 0;
[L4291]              gas := gas - 53000;
[L4292]  CALL        call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND FALSE  !(__exception)
[L553]   CALL        call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2237]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]  COND FALSE  !(revert)
[L2241]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2115]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2115]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2119]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2090]              assume msgsender_MSG != null;
[L2091]              Balance[this] := 0;
[L2092]              _name_ERC20Detailed[this] := -1465673266;
[L2093]              _symbol_ERC20Detailed[this] := -1465673266;
[L2094]              _decimals_ERC20Detailed[this] := 0;
[L2096]              _name_ERC20Detailed[this] := name_s228;
[L2097]              _symbol_ERC20Detailed[this] := symbol_s228;
[L2098]              _decimals_ERC20Detailed[this] := decimals_s228;
[L2119]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2120]  COND FALSE  !(revert)
[L2241]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2242]  COND FALSE  !(revert)
[L2245]  CALL        call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]              assume msgsender_MSG != null;
[L2194]              Balance[this] := 0;
[L2195]              _balances_COM[this] := zeroRefintArr();
[L2196]              sum__balances0[this] := 0;
[L2197]              _allowed_COM[this] := zeroRefRefintArr();
[L2198]              sum__allowed1[this] := 0;
[L2199]              tokenName_COM[this] := -963585000;
[L2200]              tokenSymbol_COM[this] := -1124477489;
[L2201]              tokenDecimals_COM[this] := 18;
[L2202]              _totalSupply_COM[this] := 1000000000000000000000000;
[L2203]              noFee_COM[this] := 10000000000000000001;
[L2204]              heightEnd20Percent_COM[this] := 10328752;
[L2205]              heightEnd10Percent_COM[this] := 12582818;
[L2206]              heightEnd05Percent_COM[this] := 14836884;
[L2209]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2210]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2211]              Balance[this] := Balance[this] + msgvalue_MSG;
[L2213]  CALL        call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L3009]  COND FALSE  !(!(amount_s1039 != 0))
[L3013]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L3013]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L3014]  COND FALSE  !(revert)
[L3017]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1039];
[L3018]              _balances_COM[this][account_s1039] := __var_27;
[L3019]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1039];
[L3020]              assert { :EventEmitted "Transfer_COM" } true;
[L2213]  RET         call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L2214]  COND FALSE  !(revert)
[L2245]  RET         call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2246]  COND FALSE  !(revert)
[L553]   RET         call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L554]               assume !revert && gas >= 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L4293]              assume !revert && gas >= 0;
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != to_s454 && (value_s454 > _balances_COM[this][msgsender_MSG] || _balances_COM[this][to_s454] + value_s454 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND FALSE  !(__exception)
[L940]   CALL        call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2393]  COND FALSE  !(!(value_s454 <= _balances_COM[this][msgsender_MSG]))
[L2397]              __var_4 := null;
[L2398]  COND FALSE  !(!(to_s454 != null))
[L2402]  COND TRUE   value_s454 < noFee_COM[this]
[L2403]  CALL        call _transferBurnNo~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2562]  COND FALSE  !(!(value_s607 <= _balances_COM[this][msgsender_MSG]))
[L2566]              __var_9 := null;
[L2567]  COND FALSE  !(!(to_s607 != null))
[L2571]  COND FALSE  !(!(value_s607 < noFee_COM[this]))
[L2575]  CALL        call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s607);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2575]  RET         call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s607);
[L2576]  COND FALSE  !(revert)
[L2579]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][msgsender_MSG];
[L2580]              _balances_COM[this][msgsender_MSG] := __var_10;
[L2581]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][msgsender_MSG];
[L2582]  CALL        call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s607], value_s607);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2582]  RET         call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s607], value_s607);
[L2583]  COND FALSE  !(revert)
[L2586]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s607];
[L2587]              _balances_COM[this][to_s607] := __var_11;
[L2588]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s607];
[L2589]              assert { :EventEmitted "Transfer_COM" } true;
[L2403]  RET         call _transferBurnNo~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2404]  COND FALSE  !(revert)
[L2413]              __ret_0_ := true;
[L940]   RET         call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L941]               assume !revert && gas >= 0;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != to_s454 && (value_s454 > _balances_COM[this][msgsender_MSG] || _balances_COM[this][to_s454] + value_s454 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND FALSE  !(__exception)
[L940]   CALL        call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2393]  COND FALSE  !(!(value_s454 <= _balances_COM[this][msgsender_MSG]))
[L2397]              __var_4 := null;
[L2398]  COND FALSE  !(!(to_s454 != null))
[L2402]  COND TRUE   value_s454 < noFee_COM[this]
[L2403]  CALL        call _transferBurnNo~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2562]  COND FALSE  !(!(value_s607 <= _balances_COM[this][msgsender_MSG]))
[L2566]              __var_9 := null;
[L2567]  COND FALSE  !(!(to_s607 != null))
[L2571]  COND FALSE  !(!(value_s607 < noFee_COM[this]))
[L2575]  CALL        call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s607);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2575]  RET         call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s607);
[L2576]  COND FALSE  !(revert)
[L2579]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][msgsender_MSG];
[L2580]              _balances_COM[this][msgsender_MSG] := __var_10;
[L2581]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][msgsender_MSG];
[L2582]  CALL        call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s607], value_s607);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2582]  RET         call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s607], value_s607);
[L2583]  COND FALSE  !(revert)
[L2586]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s607];
[L2587]              _balances_COM[this][to_s607] := __var_11;
[L2588]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s607];
[L2589]              assert { :EventEmitted "Transfer_COM" } true;
[L2403]  RET         call _transferBurnNo~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2404]  COND FALSE  !(revert)
[L2413]              __ret_0_ := true;
[L940]   RET         call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L941]               assume !revert && gas >= 0;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s454 && (value_s454 > _balances_COM[this][msgsender_MSG] || _balances_COM[this][to_s454] + value_s454 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COM0 := true;
[L2]                 call_transfer_COM0 := false;
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND FALSE  !(__exception)
[L940]   CALL        call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2393]  COND FALSE  !(!(value_s454 <= _balances_COM[this][msgsender_MSG]))
[L2397]              __var_4 := null;
[L2398]  COND FALSE  !(!(to_s454 != null))
[L2402]  COND FALSE  !(value_s454 < noFee_COM[this])
[L2408]  CALL        call _transferBurnYes~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2477]  COND FALSE  !(!(value_s545 <= _balances_COM[this][msgsender_MSG]))
[L2481]              __var_5 := null;
[L2482]  COND FALSE  !(!(to_s545 != null))
[L2486]  COND FALSE  !(!(value_s545 >= noFee_COM[this]))
[L2490]  CALL        call tokensToBurn_s545 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s545);
[L2309]  CALL        call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND TRUE   now < heightEnd20Percent_COM[this]
[L2346]              __ret_0_ := 50;
[L2309]  RET         call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]  COND FALSE  !(revert)
[L2313]              currentRate_s365 := currentRate_s365;
[L2314]  CALL        call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L1978]              c_s119 := nonlinearDiv(a_s119, b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1979]              __ret_0_ := c_s119;
[L2314]  RET         call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L2315]  COND FALSE  !(revert)
[L2318]              onePercent_s365 := onePercent_s365;
[L2319]              __ret_0_ := onePercent_s365;
[L2490]  RET         call tokensToBurn_s545 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s545);
[L2491]  COND FALSE  !(revert)
[L2494]              tokensToBurn_s545 := tokensToBurn_s545;
[L2495]  CALL        call tokensToTransfer_s545 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s545, tokensToBurn_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2495]  RET         call tokensToTransfer_s545 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s545, tokensToBurn_s545);
[L2496]  COND FALSE  !(revert)
[L2499]              tokensToTransfer_s545 := tokensToTransfer_s545;
[L2500]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2500]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s545);
[L2501]  COND FALSE  !(revert)
[L2504]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][msgsender_MSG];
[L2505]              _balances_COM[this][msgsender_MSG] := __var_6;
[L2506]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][msgsender_MSG];
[L2507]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s545], tokensToTransfer_s545);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2507]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s545], tokensToTransfer_s545);
[L2508]  COND FALSE  !(revert)
[L2511]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s545];
[L2512]              _balances_COM[this][to_s545] := __var_7;
[L2513]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s545];
[L2514]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s545);
[L2515]  COND FALSE  !(revert)
[L2518]              _totalSupply_COM[this] := __var_8;
[L2519]              assert { :EventEmitted "Transfer_COM" } true;
[L2520]              assert { :EventEmitted "Transfer_COM" } true;
[L2408]  RET         call _transferBurnYes~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2409]  COND FALSE  !(revert)
[L2413]              __ret_0_ := true;
[L940]   RET         call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L941]               assume !revert && gas >= 0;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);

Loop:
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s454 && (value_s454 > _balances_COM[this][msgsender_MSG] || _balances_COM[this][to_s454] + value_s454 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COM0 := true;
[L2]                 call_transfer_COM0 := false;
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND FALSE  !(__exception)
[L940]   CALL        call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2393]  COND FALSE  !(!(value_s454 <= _balances_COM[this][msgsender_MSG]))
[L2397]              __var_4 := null;
[L2398]  COND FALSE  !(!(to_s454 != null))
[L2402]  COND FALSE  !(value_s454 < noFee_COM[this])
[L2408]  CALL        call _transferBurnYes~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2477]  COND FALSE  !(!(value_s545 <= _balances_COM[this][msgsender_MSG]))
[L2481]              __var_5 := null;
[L2482]  COND FALSE  !(!(to_s545 != null))
[L2486]  COND FALSE  !(!(value_s545 >= noFee_COM[this]))
[L2490]  CALL        call tokensToBurn_s545 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s545);
[L2309]  CALL        call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND TRUE   now < heightEnd20Percent_COM[this]
[L2346]              __ret_0_ := 50;
[L2309]  RET         call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]  COND FALSE  !(revert)
[L2313]              currentRate_s365 := currentRate_s365;
[L2314]  CALL        call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L1978]              c_s119 := nonlinearDiv(a_s119, b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1979]              __ret_0_ := c_s119;
[L2314]  RET         call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L2315]  COND FALSE  !(revert)
[L2318]              onePercent_s365 := onePercent_s365;
[L2319]              __ret_0_ := onePercent_s365;
[L2490]  RET         call tokensToBurn_s545 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s545);
[L2491]  COND FALSE  !(revert)
[L2494]              tokensToBurn_s545 := tokensToBurn_s545;
[L2495]  CALL        call tokensToTransfer_s545 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s545, tokensToBurn_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2495]  RET         call tokensToTransfer_s545 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s545, tokensToBurn_s545);
[L2496]  COND FALSE  !(revert)
[L2499]              tokensToTransfer_s545 := tokensToTransfer_s545;
[L2500]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2500]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s545);
[L2501]  COND FALSE  !(revert)
[L2504]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][msgsender_MSG];
[L2505]              _balances_COM[this][msgsender_MSG] := __var_6;
[L2506]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][msgsender_MSG];
[L2507]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s545], tokensToTransfer_s545);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2507]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s545], tokensToTransfer_s545);
[L2508]  COND FALSE  !(revert)
[L2511]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s545];
[L2512]              _balances_COM[this][to_s545] := __var_7;
[L2513]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s545];
[L2514]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s545);
[L2515]  COND FALSE  !(revert)
[L2518]              _totalSupply_COM[this] := __var_8;
[L2519]              assert { :EventEmitted "Transfer_COM" } true;
[L2520]              assert { :EventEmitted "Transfer_COM" } true;
[L2408]  RET         call _transferBurnYes~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2409]  COND FALSE  !(revert)
[L2413]              __ret_0_ := true;
[L940]   RET         call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L941]               assume !revert && gas >= 0;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);

[2020-11-25 12:23:11,919 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:23:11,919 INFO  L82        PathProgramCache]: Analyzing trace with hash -580377534, now seen corresponding path program 2 times
[2020-11-25 12:23:11,919 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:23:12,065 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
Received shutdown request...
[2020-11-25 12:34:30,118 WARN  L250   erpolLogProxyWrapper]: Unable to check validity of interpolant: cancelled
Cannot interrupt operation gracefully because timeout expired. Forcing shutdown
