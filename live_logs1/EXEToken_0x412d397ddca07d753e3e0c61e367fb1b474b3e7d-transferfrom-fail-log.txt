This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 16:11:23,823 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 16:11:23,824 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 16:11:23,835 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 16:11:23,835 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 16:11:23,836 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 16:11:23,837 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 16:11:23,838 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 16:11:23,840 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 16:11:23,840 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 16:11:23,841 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 16:11:23,841 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 16:11:23,842 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 16:11:23,842 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 16:11:23,843 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 16:11:23,844 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 16:11:23,844 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 16:11:23,846 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 16:11:23,847 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 16:11:23,849 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 16:11:23,849 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 16:11:23,850 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 16:11:23,852 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 16:11:23,852 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 16:11:23,852 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 16:11:23,853 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 16:11:23,853 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 16:11:23,854 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 16:11:23,854 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 16:11:23,854 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 16:11:23,855 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 16:11:23,855 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 16:11:23,856 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 16:11:23,856 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 16:11:23,857 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 16:11:23,857 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 16:11:23,858 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 16:11:23,858 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 16:11:23,858 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 16:11:23,859 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 16:11:23,859 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 16:11:23,859 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 16:11:23,867 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 16:11:23,867 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 16:11:23,868 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 16:11:23,868 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 16:11:23,869 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 16:11:23,869 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 16:11:23,869 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 16:11:23,869 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 16:11:23,869 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 16:11:23,869 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 16:11:23,869 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 16:11:23,869 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 16:11:23,870 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 16:11:23,870 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 16:11:23,870 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 16:11:23,870 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 16:11:23,870 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 16:11:23,870 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 16:11:23,870 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 16:11:23,870 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 16:11:23,870 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 16:11:23,871 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 16:11:23,871 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 16:11:23,871 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 16:11:23,871 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 16:11:23,871 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 16:11:23,891 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 16:11:23,903 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 16:11:23,905 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 16:11:23,906 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 16:11:23,907 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 16:11:23,907 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-fail.bpl
[2020-11-25 16:11:23,908 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-fail.bpl'
[2020-11-25 16:11:24,009 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 16:11:24,010 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 16:11:24,011 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 16:11:24,011 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 16:11:24,011 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 16:11:24,028 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:11:24" (1/1) ...
[2020-11-25 16:11:24,030 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:11:24" (1/1) ...
[2020-11-25 16:11:24,067 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:11:24" (1/1) ...
[2020-11-25 16:11:24,068 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:11:24" (1/1) ...
[2020-11-25 16:11:24,095 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:11:24" (1/1) ...
[2020-11-25 16:11:24,108 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:11:24" (1/1) ...
[2020-11-25 16:11:24,118 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:11:24" (1/1) ...
[2020-11-25 16:11:24,131 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 16:11:24,132 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 16:11:24,132 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 16:11:24,134 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 16:11:24,138 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:11:24" (1/1) ...
[2020-11-25 16:11:24,157 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(EXEToken.transferFrom(from, to, value), from != to && (value > _balances_ERC20[this][from] || value > _allowed_ERC20[this][from][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ERC20[this][from][msg.sender] >= 0 && _allowed_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(EXEToken.transferFrom)))
[2020-11-25 16:11:24,163 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(EXEToken.transferFrom(from, to, value), from != to && (value > _balances_ERC20[this][from] || value > _allowed_ERC20[this][from][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ERC20[this][from][msg.sender] >= 0 && _allowed_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(EXEToken.transferFrom)))
[2020-11-25 16:11:24,170 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(EXEToken.transferFrom(from, to, value), from != to && (value > _balances_ERC20[this][from] || value > _allowed_ERC20[this][from][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ERC20[this][from][msg.sender] >= 0 && _allowed_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(EXEToken.transferFrom)))
[2020-11-25 16:11:24,180 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( sender_s1113!=recipient_s1113 && ( ( amount_s1113>_balances_ERC20[this][sender_s1113] || amount_s1113>_allowed_ERC20[this][sender_s1113][msg.sender] ) || ( _balances_ERC20[this][recipient_s1113] + amount_s1113 )>=115792089237316195423570985008687907853269984665640564039457584007913129639936 ) ) && amount_s1113>=0 ) && amount_s1113<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][recipient_s1113]>=0 ) && _balances_ERC20[this][recipient_s1113]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][sender_s1113]>=0 ) && _balances_ERC20[this][sender_s1113]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _allowed_ERC20[this][sender_s1113][msg.sender]>=0 ) && _allowed_ERC20[this][sender_s1113][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[sender_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>],IdentifierExpression[recipient_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]],BinaryExpression[LOGICOR,BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[amount_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],[IdentifierExpression[sender_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]]],BinaryExpression[COMPGT,IdentifierExpression[amount_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],[IdentifierExpression[sender_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]]]],BinaryExpression[COMPGEQ,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],[IdentifierExpression[recipient_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],IdentifierExpression[amount_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]],BinaryExpression[COMPGEQ,IdentifierExpression[amount_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[amount_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],[IdentifierExpression[recipient_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],[IdentifierExpression[recipient_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],[IdentifierExpression[sender_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],[IdentifierExpression[sender_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],[IdentifierExpression[sender_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],[IdentifierExpression[sender_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 16:11:24,186 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(EXEToken.transferFrom(from, to, value), from != to && (value > _balances_ERC20[this][from] || value > _allowed_ERC20[this][from][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ERC20[this][from][msg.sender] >= 0 && _allowed_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(EXEToken.transferFrom)))
[2020-11-25 16:11:24,186 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_EXEToken0) ==> ( <>AP(fail_transferFrom_EXEToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 16:11:24,199 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:11:24 PropertyContainer
[2020-11-25 16:11:24,200 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 16:11:24,200 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 16:11:24,200 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 16:11:24,200 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 16:11:24,201 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:11:24" (1/2) ...
[2020-11-25 16:11:24,201 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 16:11:24,201 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 16:11:24,221 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:11:24" (2/2) ...
[2020-11-25 16:11:24,221 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 16:11:24,221 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 16:11:24,221 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 16:11:24,221 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 16:11:24,222 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:11:24" (1/2) ...
[2020-11-25 16:11:24,276 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 16:11:24,276 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 16:11:24,276 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 16:11:24,276 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 16:11:24,277 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 16:11:24,277 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 16:11:24,277 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 16:11:24,277 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 16:11:24,277 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 16:11:24,277 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 16:11:24,277 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-25 16:11:24,277 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-25 16:11:24,277 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-25 16:11:24,277 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-25 16:11:24,277 INFO  L130     BoogieDeclarations]: Found specification of procedure _isOwner_Ownable__success
[2020-11-25 16:11:24,278 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-25 16:11:24,278 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-25 16:11:24,278 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__success
[2020-11-25 16:11:24,278 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 16:11:24,278 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 16:11:24,278 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 16:11:24,278 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 16:11:24,278 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 16:11:24,278 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 16:11:24,278 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 16:11:24,278 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 16:11:24,279 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 16:11:24,279 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 16:11:24,279 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 16:11:24,279 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 16:11:24,279 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 16:11:24,279 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 16:11:24,279 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 16:11:24,279 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 16:11:24,279 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 16:11:24,279 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 16:11:24,279 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 16:11:24,279 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 16:11:24,280 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 16:11:24,280 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 16:11:24,280 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 16:11:24,280 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 16:11:24,280 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 16:11:24,280 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 16:11:24,280 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 16:11:24,280 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 16:11:24,280 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 16:11:24,280 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 16:11:24,280 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 16:11:24,280 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 16:11:24,281 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 16:11:24,281 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 16:11:24,281 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 16:11:24,281 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 16:11:24,281 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 16:11:24,281 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 16:11:24,281 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 16:11:24,281 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 16:11:24,281 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-25 16:11:24,281 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable
[2020-11-25 16:11:24,282 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable
[2020-11-25 16:11:24,282 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable
[2020-11-25 16:11:24,282 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable
[2020-11-25 16:11:24,282 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-25 16:11:24,282 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-25 16:11:24,282 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20Burnable__success
[2020-11-25 16:11:24,282 INFO  L130     BoogieDeclarations]: Found specification of procedure Stoppable_Stoppable_NoBaseCtor__success
[2020-11-25 16:11:24,282 INFO  L130     BoogieDeclarations]: Found specification of procedure Stoppable_Stoppable
[2020-11-25 16:11:24,282 INFO  L138     BoogieDeclarations]: Found implementation of procedure Stoppable_Stoppable
[2020-11-25 16:11:24,283 INFO  L130     BoogieDeclarations]: Found specification of procedure stop_Stoppable
[2020-11-25 16:11:24,283 INFO  L138     BoogieDeclarations]: Found implementation of procedure stop_Stoppable
[2020-11-25 16:11:24,283 INFO  L130     BoogieDeclarations]: Found specification of procedure start_Stoppable
[2020-11-25 16:11:24,283 INFO  L138     BoogieDeclarations]: Found implementation of procedure start_Stoppable
[2020-11-25 16:11:24,283 INFO  L130     BoogieDeclarations]: Found specification of procedure stopped_Stoppable
[2020-11-25 16:11:24,283 INFO  L138     BoogieDeclarations]: Found implementation of procedure stopped_Stoppable
[2020-11-25 16:11:24,283 INFO  L130     BoogieDeclarations]: Found specification of procedure EXEToken_EXEToken_NoBaseCtor__success
[2020-11-25 16:11:24,283 INFO  L130     BoogieDeclarations]: Found specification of procedure EXEToken_EXEToken
[2020-11-25 16:11:24,283 INFO  L138     BoogieDeclarations]: Found implementation of procedure EXEToken_EXEToken
[2020-11-25 16:11:24,284 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_EXEToken__success
[2020-11-25 16:11:24,284 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_EXEToken
[2020-11-25 16:11:24,284 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_EXEToken
[2020-11-25 16:11:24,284 INFO  L130     BoogieDeclarations]: Found specification of procedure setLock~address~uint256~uint256_EXEToken
[2020-11-25 16:11:24,284 INFO  L138     BoogieDeclarations]: Found implementation of procedure setLock~address~uint256~uint256_EXEToken
[2020-11-25 16:11:24,284 INFO  L130     BoogieDeclarations]: Found specification of procedure getLock~address_EXEToken
[2020-11-25 16:11:24,284 INFO  L138     BoogieDeclarations]: Found implementation of procedure getLock~address_EXEToken
[2020-11-25 16:11:24,284 INFO  L130     BoogieDeclarations]: Found specification of procedure _isLocked~address~uint256_EXEToken__success
[2020-11-25 16:11:24,284 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_EXEToken
[2020-11-25 16:11:24,284 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_EXEToken
[2020-11-25 16:11:24,285 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_EXEToken
[2020-11-25 16:11:24,285 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_EXEToken
[2020-11-25 16:11:24,285 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 16:11:24,285 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 16:11:24,285 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 16:11:24,285 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 16:11:24,285 INFO  L130     BoogieDeclarations]: Found specification of procedure enabled_pre__success
[2020-11-25 16:11:24,285 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 16:11:24,285 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 16:11:24,285 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-25 16:11:24,286 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-25 16:11:24,286 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 16:11:24,286 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 16:11:24,286 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 16:11:24,286 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 16:11:24,286 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 16:11:24,286 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 16:11:24,286 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Burnable
[2020-11-25 16:11:24,286 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Burnable
[2020-11-25 16:11:24,286 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Stoppable
[2020-11-25 16:11:24,286 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Stoppable
[2020-11-25 16:11:24,287 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_EXEToken
[2020-11-25 16:11:24,287 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 16:11:24,287 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 16:11:24,287 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 16:11:24,287 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 16:11:24,287 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 16:11:24,287 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 16:11:24,287 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 16:11:24,287 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 16:11:24,288 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 16:11:24,288 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 16:11:24,288 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 16:11:24,288 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-25 16:11:24,288 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-25 16:11:24,288 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-25 16:11:24,288 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-25 16:11:24,288 INFO  L130     BoogieDeclarations]: Found specification of procedure _isOwner_Ownable__fail
[2020-11-25 16:11:24,288 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-25 16:11:24,289 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-25 16:11:24,289 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 16:11:24,289 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 16:11:24,289 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 16:11:24,289 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 16:11:24,289 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 16:11:24,289 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 16:11:24,289 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 16:11:24,289 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 16:11:24,289 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 16:11:24,290 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 16:11:24,290 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 16:11:24,290 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 16:11:24,290 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 16:11:24,290 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 16:11:24,290 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 16:11:24,290 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 16:11:24,290 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 16:11:24,290 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 16:11:24,291 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 16:11:24,291 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 16:11:24,291 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 16:11:24,291 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 16:11:24,291 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 16:11:24,291 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 16:11:24,291 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 16:11:24,291 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 16:11:24,291 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 16:11:24,291 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 16:11:24,292 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 16:11:24,292 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 16:11:24,292 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 16:11:24,292 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 16:11:24,292 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 16:11:24,292 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 16:11:24,292 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 16:11:24,292 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-25 16:11:24,292 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-25 16:11:24,292 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-25 16:11:24,292 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__success
[2020-11-25 16:11:24,293 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__fail
[2020-11-25 16:11:24,293 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-25 16:11:24,293 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-25 16:11:24,293 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20Burnable__fail
[2020-11-25 16:11:24,293 INFO  L130     BoogieDeclarations]: Found specification of procedure Stoppable_Stoppable_NoBaseCtor__fail
[2020-11-25 16:11:24,293 INFO  L130     BoogieDeclarations]: Found specification of procedure Stoppable_Stoppable__success
[2020-11-25 16:11:24,293 INFO  L130     BoogieDeclarations]: Found specification of procedure Stoppable_Stoppable__fail
[2020-11-25 16:11:24,293 INFO  L130     BoogieDeclarations]: Found specification of procedure stop_Stoppable__success
[2020-11-25 16:11:24,293 INFO  L130     BoogieDeclarations]: Found specification of procedure stop_Stoppable__fail
[2020-11-25 16:11:24,293 INFO  L130     BoogieDeclarations]: Found specification of procedure start_Stoppable__success
[2020-11-25 16:11:24,293 INFO  L130     BoogieDeclarations]: Found specification of procedure start_Stoppable__fail
[2020-11-25 16:11:24,294 INFO  L130     BoogieDeclarations]: Found specification of procedure stopped_Stoppable__success
[2020-11-25 16:11:24,294 INFO  L130     BoogieDeclarations]: Found specification of procedure stopped_Stoppable__fail
[2020-11-25 16:11:24,294 INFO  L130     BoogieDeclarations]: Found specification of procedure EXEToken_EXEToken_NoBaseCtor__fail
[2020-11-25 16:11:24,294 INFO  L130     BoogieDeclarations]: Found specification of procedure EXEToken_EXEToken__success
[2020-11-25 16:11:24,294 INFO  L130     BoogieDeclarations]: Found specification of procedure EXEToken_EXEToken__fail
[2020-11-25 16:11:24,294 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_EXEToken__fail
[2020-11-25 16:11:24,294 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_EXEToken__success
[2020-11-25 16:11:24,294 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_EXEToken__fail
[2020-11-25 16:11:24,294 INFO  L130     BoogieDeclarations]: Found specification of procedure setLock~address~uint256~uint256_EXEToken__success
[2020-11-25 16:11:24,294 INFO  L130     BoogieDeclarations]: Found specification of procedure setLock~address~uint256~uint256_EXEToken__fail
[2020-11-25 16:11:24,294 INFO  L130     BoogieDeclarations]: Found specification of procedure getLock~address_EXEToken__success
[2020-11-25 16:11:24,295 INFO  L130     BoogieDeclarations]: Found specification of procedure getLock~address_EXEToken__fail
[2020-11-25 16:11:24,295 INFO  L130     BoogieDeclarations]: Found specification of procedure _isLocked~address~uint256_EXEToken__fail
[2020-11-25 16:11:24,295 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_EXEToken__success
[2020-11-25 16:11:24,295 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_EXEToken__fail
[2020-11-25 16:11:24,295 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_EXEToken__success
[2020-11-25 16:11:24,295 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_EXEToken__fail
[2020-11-25 16:11:24,295 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 16:11:24,295 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 16:11:24,295 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 16:11:24,295 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 16:11:24,295 INFO  L130     BoogieDeclarations]: Found specification of procedure enabled_pre__fail
[2020-11-25 16:11:24,295 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 16:11:24,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 16:11:24,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 16:11:24,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 16:11:24,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 16:11:24,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 16:11:24,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 16:11:24,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 16:11:24,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 16:11:24,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 16:11:24,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 16:11:24,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 16:11:24,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 16:11:24,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 16:11:24,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 16:11:24,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 16:11:24,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 16:11:24,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 16:11:24,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-25 16:11:24,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-25 16:11:24,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-25 16:11:24,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-25 16:11:24,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure _isOwner_Ownable__fail
[2020-11-25 16:11:24,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure _isOwner_Ownable__success
[2020-11-25 16:11:24,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-25 16:11:24,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-25 16:11:24,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 16:11:24,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__success
[2020-11-25 16:11:24,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 16:11:24,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 16:11:24,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 16:11:24,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 16:11:24,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 16:11:24,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 16:11:24,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 16:11:24,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 16:11:24,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 16:11:24,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 16:11:24,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 16:11:24,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 16:11:24,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 16:11:24,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 16:11:24,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 16:11:24,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 16:11:24,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 16:11:24,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 16:11:24,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 16:11:24,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 16:11:24,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 16:11:24,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 16:11:24,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 16:11:24,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 16:11:24,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 16:11:24,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 16:11:24,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 16:11:24,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 16:11:24,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 16:11:24,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 16:11:24,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 16:11:24,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 16:11:24,301 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 16:11:24,301 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 16:11:24,301 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 16:11:24,301 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 16:11:24,301 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 16:11:24,301 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 16:11:24,301 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 16:11:24,301 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 16:11:24,301 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-25 16:11:24,301 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-25 16:11:24,301 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-25 16:11:24,301 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-25 16:11:24,302 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__fail
[2020-11-25 16:11:24,302 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__success
[2020-11-25 16:11:24,302 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-25 16:11:24,302 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-25 16:11:24,302 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20Burnable__fail
[2020-11-25 16:11:24,302 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20Burnable__success
[2020-11-25 16:11:24,302 INFO  L138     BoogieDeclarations]: Found implementation of procedure Stoppable_Stoppable_NoBaseCtor__fail
[2020-11-25 16:11:24,302 INFO  L138     BoogieDeclarations]: Found implementation of procedure Stoppable_Stoppable_NoBaseCtor__success
[2020-11-25 16:11:24,302 INFO  L138     BoogieDeclarations]: Found implementation of procedure Stoppable_Stoppable__fail
[2020-11-25 16:11:24,302 INFO  L138     BoogieDeclarations]: Found implementation of procedure Stoppable_Stoppable__success
[2020-11-25 16:11:24,302 INFO  L138     BoogieDeclarations]: Found implementation of procedure stop_Stoppable__fail
[2020-11-25 16:11:24,303 INFO  L138     BoogieDeclarations]: Found implementation of procedure stop_Stoppable__success
[2020-11-25 16:11:24,303 INFO  L138     BoogieDeclarations]: Found implementation of procedure start_Stoppable__fail
[2020-11-25 16:11:24,303 INFO  L138     BoogieDeclarations]: Found implementation of procedure start_Stoppable__success
[2020-11-25 16:11:24,304 INFO  L138     BoogieDeclarations]: Found implementation of procedure stopped_Stoppable__fail
[2020-11-25 16:11:24,304 INFO  L138     BoogieDeclarations]: Found implementation of procedure stopped_Stoppable__success
[2020-11-25 16:11:24,304 INFO  L138     BoogieDeclarations]: Found implementation of procedure EXEToken_EXEToken_NoBaseCtor__fail
[2020-11-25 16:11:24,304 INFO  L138     BoogieDeclarations]: Found implementation of procedure EXEToken_EXEToken_NoBaseCtor__success
[2020-11-25 16:11:24,305 INFO  L138     BoogieDeclarations]: Found implementation of procedure EXEToken_EXEToken__fail
[2020-11-25 16:11:24,305 INFO  L138     BoogieDeclarations]: Found implementation of procedure EXEToken_EXEToken__success
[2020-11-25 16:11:24,305 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_EXEToken__fail
[2020-11-25 16:11:24,305 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_EXEToken__success
[2020-11-25 16:11:24,305 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_EXEToken__fail
[2020-11-25 16:11:24,306 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_EXEToken__success
[2020-11-25 16:11:24,306 INFO  L138     BoogieDeclarations]: Found implementation of procedure setLock~address~uint256~uint256_EXEToken__fail
[2020-11-25 16:11:24,306 INFO  L138     BoogieDeclarations]: Found implementation of procedure setLock~address~uint256~uint256_EXEToken__success
[2020-11-25 16:11:24,306 INFO  L138     BoogieDeclarations]: Found implementation of procedure getLock~address_EXEToken__fail
[2020-11-25 16:11:24,306 INFO  L138     BoogieDeclarations]: Found implementation of procedure getLock~address_EXEToken__success
[2020-11-25 16:11:24,307 INFO  L138     BoogieDeclarations]: Found implementation of procedure _isLocked~address~uint256_EXEToken__fail
[2020-11-25 16:11:24,307 INFO  L138     BoogieDeclarations]: Found implementation of procedure _isLocked~address~uint256_EXEToken__success
[2020-11-25 16:11:24,307 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_EXEToken__fail
[2020-11-25 16:11:24,307 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_EXEToken__success
[2020-11-25 16:11:24,307 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_EXEToken__fail
[2020-11-25 16:11:24,308 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_EXEToken__success
[2020-11-25 16:11:24,308 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 16:11:24,308 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 16:11:24,308 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 16:11:24,308 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 16:11:24,308 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 16:11:24,309 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 16:11:24,309 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 16:11:24,309 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 16:11:24,309 INFO  L138     BoogieDeclarations]: Found implementation of procedure enabled_pre__fail
[2020-11-25 16:11:24,309 INFO  L138     BoogieDeclarations]: Found implementation of procedure enabled_pre__success
[2020-11-25 16:11:24,310 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 16:11:24,310 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 16:11:24,310 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-25 16:11:24,310 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-25 16:11:24,310 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 16:11:24,311 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 16:11:24,311 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 16:11:24,311 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 16:11:24,311 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 16:11:24,311 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 16:11:24,312 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Burnable
[2020-11-25 16:11:24,312 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Burnable
[2020-11-25 16:11:24,312 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Stoppable
[2020-11-25 16:11:24,312 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Stoppable
[2020-11-25 16:11:24,312 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_EXEToken
[2020-11-25 16:11:24,313 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 16:11:24,313 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 16:11:24,313 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 16:11:25,081 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 16:11:25,081 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 16:11:25,278 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 16:11:25,278 INFO  L286             CfgBuilder]: Removed 8 assue(true) statements.
[2020-11-25 16:11:25,280 INFO  L202        PluginConnector]: Adding new model EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:11:25 BoogieIcfgContainer
[2020-11-25 16:11:25,280 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:11:24" (2/2) ...
[2020-11-25 16:11:25,280 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 16:11:25,281 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@364f409b and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:11:25, skipping insertion in model container
[2020-11-25 16:11:25,281 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 16:11:25,281 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 16:11:25,281 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 16:11:25,282 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 16:11:25,282 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:11:24" (1/3) ...
[2020-11-25 16:11:25,282 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@4a5b962a and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:11:25, skipping insertion in model container
[2020-11-25 16:11:25,282 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:11:24" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 16:11:25,315 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:11:25 NWAContainer
[2020-11-25 16:11:25,315 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 16:11:25,315 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 16:11:25,315 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 16:11:25,316 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 16:11:25,317 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:11:25" (3/4) ...
[2020-11-25 16:11:25,317 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@5f314233 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:11:25, skipping insertion in model container
[2020-11-25 16:11:25,317 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:11:25" (4/4) ...
[2020-11-25 16:11:25,319 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 16:11:25,323 INFO  L110   BuchiProductObserver]: Initial RCFG 2511 locations, 3418 edges
[2020-11-25 16:11:25,323 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 16:11:25,332 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 16:11:27,013 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 16:11:27,021 INFO  L110   BuchiProductObserver]: BuchiProgram size 6228 locations, 11157 edges
[2020-11-25 16:11:27,022 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:11:27 BoogieIcfgContainer
[2020-11-25 16:11:27,022 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 16:11:27,022 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 16:11:27,022 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 16:11:27,023 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 16:11:27,024 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:11:27" (1/1) ...
[2020-11-25 16:11:27,143 INFO  L313           BlockEncoder]: Initial Icfg 6228 locations, 11157 edges
[2020-11-25 16:11:27,143 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 16:11:27,144 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 16:11:27,144 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 16:11:27,144 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 16:11:27,158 INFO  L70    emoveInfeasibleEdges]: Removed 159 edges and 19 locations because of local infeasibility
[2020-11-25 16:11:27,170 INFO  L70        RemoveSinkStates]: Removed 130 edges and 78 locations by removing sink states
[2020-11-25 16:11:27,184 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 16:11:27,188 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 16:11:27,195 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 16:11:27,195 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 16:11:27,200 INFO  L313           BlockEncoder]: Encoded RCFG 6097 locations, 10818 edges
[2020-11-25 16:11:27,200 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 04:11:27 BasicIcfg
[2020-11-25 16:11:27,200 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 16:11:27,201 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 16:11:27,201 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 16:11:27,203 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 16:11:27,203 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:11:27,203 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:11:24" (1/6) ...
[2020-11-25 16:11:27,205 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2aa8ef41 and model type EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:11:27, skipping insertion in model container
[2020-11-25 16:11:27,205 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:11:27,205 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:11:24" (2/6) ...
[2020-11-25 16:11:27,206 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2aa8ef41 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:11:27, skipping insertion in model container
[2020-11-25 16:11:27,206 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:11:27,206 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:11:25" (3/6) ...
[2020-11-25 16:11:27,206 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2aa8ef41 and model type EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 04:11:27, skipping insertion in model container
[2020-11-25 16:11:27,206 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:11:27,206 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:11:25" (4/6) ...
[2020-11-25 16:11:27,206 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2aa8ef41 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:11:27, skipping insertion in model container
[2020-11-25 16:11:27,207 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:11:27,207 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:11:27" (5/6) ...
[2020-11-25 16:11:27,207 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2aa8ef41 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 04:11:27, skipping insertion in model container
[2020-11-25 16:11:27,207 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:11:27,207 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 04:11:27" (6/6) ...
[2020-11-25 16:11:27,208 INFO  L404   chiAutomizerObserver]: Analyzing ICFG EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-fail.bpl_BEv2
[2020-11-25 16:11:27,242 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 16:11:27,243 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 16:11:27,243 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 16:11:27,243 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 16:11:27,243 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 16:11:27,243 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 16:11:27,243 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 16:11:27,243 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 16:11:27,243 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 16:11:27,286 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6097 states.
[2020-11-25 16:11:27,342 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:11:27,342 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:11:27,342 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:11:27,349 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:11:27,349 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:11:27,349 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 16:11:27,349 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6097 states.
[2020-11-25 16:11:27,373 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:11:27,373 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:11:27,373 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:11:27,375 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:11:27,375 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_EXEToken0 := false;
[L2]                 call_transferFrom_EXEToken0 := false;
[L2]     CALL        call main();
[L7037]              assume null == 0;
[L7038]  CALL        call this := FreshRefGenerator__success();
[L3028]              havoc newRef;
[L3029]              assume Alloc[newRef] == false;
[L3030]              Alloc[newRef] := true;
[L3031]              assume newRef != null;
[L7038]  RET         call this := FreshRefGenerator__success();
[L7039]              assume now >= 0;
[L7040]              assume DType[this] == EXEToken;
[L7041]              assume msgvalue_MSG == 0;
[L7042]              gas := gas - 53000;
[L7043]  CALL        call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1769]              havoc __exception;
[L1770]              revert := false;
[L1771]  COND FALSE  !(__exception)
[L1798]  CALL        call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4314]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND TRUE   revert
[L4314]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4315]  COND TRUE   revert
[L1798]  RET         call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1799]              assume !revert && gas >= 0;
[L7043]  RET         call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L7044]              assume !revert && gas >= 0;

Loop:
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND TRUE   choice == 21
[L6890]              gas := gas - 21000;
[L6891]  COND FALSE  !(gas >= 0)
[L7047]  RET         call CorralChoice_EXEToken(this);

[2020-11-25 16:11:27,388 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:11:27,388 INFO  L82        PathProgramCache]: Analyzing trace with hash 1288196765, now seen corresponding path program 1 times
[2020-11-25 16:11:27,392 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:11:27,411 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:11:27,444 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 16:11:27,445 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:11:27,445 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 16:11:27,796 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:11:27,804 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 16:11:27,805 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 16:11:27,806 INFO  L87              Difference]: Start difference. First operand 6097 states. Second operand 4 states.
[2020-11-25 16:11:28,396 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:11:28,397 INFO  L93              Difference]: Finished difference Result 3750 states and 4316 transitions.
[2020-11-25 16:11:28,397 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 16:11:28,398 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3750 states and 4316 transitions.
[2020-11-25 16:11:28,418 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:11:28,449 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3750 states to 3750 states and 4316 transitions.
[2020-11-25 16:11:28,450 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 16:11:28,453 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 828
[2020-11-25 16:11:28,453 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3750 states and 4316 transitions.
[2020-11-25 16:11:28,463 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:11:28,463 INFO  L728         BuchiCegarLoop]: Abstraction has 3750 states and 4316 transitions.
[2020-11-25 16:11:28,479 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3750 states and 4316 transitions.
[2020-11-25 16:11:28,535 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3750 to 3750.
[2020-11-25 16:11:28,536 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3750 states.
[2020-11-25 16:11:28,542 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3750 states to 3750 states and 4316 transitions.
[2020-11-25 16:11:28,543 INFO  L751         BuchiCegarLoop]: Abstraction has 3750 states and 4316 transitions.
[2020-11-25 16:11:28,543 INFO  L631         BuchiCegarLoop]: Abstraction has 3750 states and 4316 transitions.
[2020-11-25 16:11:28,543 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 16:11:28,543 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3750 states and 4316 transitions.
[2020-11-25 16:11:28,551 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:11:28,551 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:11:28,551 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:11:28,553 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:11:28,553 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_EXEToken0 := false;
[L2]                 call_transferFrom_EXEToken0 := false;
[L2]     CALL        call main();
[L7037]              assume null == 0;
[L7038]  CALL        call this := FreshRefGenerator__success();
[L3028]              havoc newRef;
[L3029]              assume Alloc[newRef] == false;
[L3030]              Alloc[newRef] := true;
[L3031]              assume newRef != null;
[L7038]  RET         call this := FreshRefGenerator__success();
[L7039]              assume now >= 0;
[L7040]              assume DType[this] == EXEToken;
[L7041]              assume msgvalue_MSG == 0;
[L7042]              gas := gas - 53000;
[L7043]  CALL        call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1769]              havoc __exception;
[L1770]              revert := false;
[L1771]  COND FALSE  !(__exception)
[L1798]  CALL        call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4314]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4314]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4315]  COND TRUE   revert
[L1798]  RET         call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1799]              assume !revert && gas >= 0;
[L7043]  RET         call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L7044]              assume !revert && gas >= 0;
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND FALSE  !(choice == 16)
[L6926]  COND FALSE  !(choice == 15)
[L6933]  COND TRUE   choice == 14
[L6934]              gas := gas - 21000;
[L6935]  COND TRUE   gas >= 0
[L6936]              assume amount_s1113 >= 0 && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6937]              assume msgvalue_MSG == 0;
[L6938]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s1113 != recipient_s1113 && ((amount_s1113 > _balances_ERC20[this][sender_s1113] || amount_s1113 > _allowed_ERC20[this][sender_s1113][msgsender_MSG]) || _balances_ERC20[this][recipient_s1113] + amount_s1113 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s1113 >= 0) && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1113] >= 0) && _balances_ERC20[this][recipient_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s1113] >= 0) && _balances_ERC20[this][sender_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] >= 0) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_EXEToken0 := true;
[L2]                 call_transferFrom_EXEToken0 := false;
[L2]                 revert := revert_hold;
[L2099]              havoc __exception;
[L2100]              revert := false;
[L2101]  COND FALSE  !(__exception)
[L2128]  CALL        call __ret_0_ := transferFrom~address~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4595]  CALL        call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6067]  COND FALSE  !(!!stopped_Stoppable[this])
[L4595]  RET         call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4596]  COND TRUE   revert
[L2128]  RET         call __ret_0_ := transferFrom~address~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L2129]              assume !revert && gas >= 0;
[L6938]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L7047]  RET         call CorralChoice_EXEToken(this);

Loop:
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND FALSE  !(choice == 16)
[L6926]  COND FALSE  !(choice == 15)
[L6933]  COND TRUE   choice == 14
[L6934]              gas := gas - 21000;
[L6935]  COND TRUE   gas >= 0
[L6936]              assume amount_s1113 >= 0 && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6937]              assume msgvalue_MSG == 0;
[L6938]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s1113 != recipient_s1113 && ((amount_s1113 > _balances_ERC20[this][sender_s1113] || amount_s1113 > _allowed_ERC20[this][sender_s1113][msgsender_MSG]) || _balances_ERC20[this][recipient_s1113] + amount_s1113 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s1113 >= 0) && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1113] >= 0) && _balances_ERC20[this][recipient_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s1113] >= 0) && _balances_ERC20[this][sender_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] >= 0) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_EXEToken0 := true;
[L2]                 call_transferFrom_EXEToken0 := false;
[L2]                 revert := revert_hold;
[L2099]              havoc __exception;
[L2100]              revert := false;
[L2101]  COND FALSE  !(__exception)
[L2128]  CALL        call __ret_0_ := transferFrom~address~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4595]  CALL        call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6067]  COND FALSE  !(!!stopped_Stoppable[this])
[L4595]  RET         call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4596]  COND TRUE   revert
[L2128]  RET         call __ret_0_ := transferFrom~address~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L2129]              assume !revert && gas >= 0;
[L6938]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L7047]  RET         call CorralChoice_EXEToken(this);

[2020-11-25 16:11:28,557 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:11:28,557 INFO  L82        PathProgramCache]: Analyzing trace with hash 243221150, now seen corresponding path program 1 times
[2020-11-25 16:11:28,558 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:11:28,567 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:11:28,591 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 16:11:28,591 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:11:28,592 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 16:11:28,593 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:11:28,593 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 16:11:28,593 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 16:11:28,593 INFO  L87              Difference]: Start difference. First operand 3750 states and 4316 transitions. cyclomatic complexity: 568 Second operand 3 states.
[2020-11-25 16:11:28,689 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:11:28,689 INFO  L93              Difference]: Finished difference Result 4907 states and 5669 transitions.
[2020-11-25 16:11:28,689 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 16:11:28,690 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4907 states and 5669 transitions.
[2020-11-25 16:11:28,706 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 16:11:28,727 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4907 states to 4907 states and 5669 transitions.
[2020-11-25 16:11:28,727 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1152
[2020-11-25 16:11:28,729 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1152
[2020-11-25 16:11:28,729 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4907 states and 5669 transitions.
[2020-11-25 16:11:28,742 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:11:28,742 INFO  L728         BuchiCegarLoop]: Abstraction has 4907 states and 5669 transitions.
[2020-11-25 16:11:28,748 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4907 states and 5669 transitions.
[2020-11-25 16:11:28,803 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4907 to 4350.
[2020-11-25 16:11:28,804 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4350 states.
[2020-11-25 16:11:28,811 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4350 states to 4350 states and 5001 transitions.
[2020-11-25 16:11:28,811 INFO  L751         BuchiCegarLoop]: Abstraction has 4350 states and 5001 transitions.
[2020-11-25 16:11:28,811 INFO  L631         BuchiCegarLoop]: Abstraction has 4350 states and 5001 transitions.
[2020-11-25 16:11:28,811 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 16:11:28,811 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4350 states and 5001 transitions.
[2020-11-25 16:11:28,819 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 16:11:28,819 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:11:28,819 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:11:28,822 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:11:28,823 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_EXEToken0 := false;
[L2]                 call_transferFrom_EXEToken0 := false;
[L2]     CALL        call main();
[L7037]              assume null == 0;
[L7038]  CALL        call this := FreshRefGenerator__success();
[L3028]              havoc newRef;
[L3029]              assume Alloc[newRef] == false;
[L3030]              Alloc[newRef] := true;
[L3031]              assume newRef != null;
[L7038]  RET         call this := FreshRefGenerator__success();
[L7039]              assume now >= 0;
[L7040]              assume DType[this] == EXEToken;
[L7041]              assume msgvalue_MSG == 0;
[L7042]              gas := gas - 53000;
[L7043]  CALL        call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1769]              havoc __exception;
[L1770]              revert := false;
[L1771]  COND FALSE  !(__exception)
[L1798]  CALL        call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4314]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4314]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4315]  COND FALSE  !(revert)
[L4318]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L3926]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3926]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3927]  COND FALSE  !(revert)
[L3930]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3901]              assume msgsender_MSG != null;
[L3902]              Balance[this] := 0;
[L3903]              _name_ERC20Detailed[this] := 427332508;
[L3904]              _symbol_ERC20Detailed[this] := 427332508;
[L3905]              _decimals_ERC20Detailed[this] := 0;
[L3907]              _name_ERC20Detailed[this] := name_s778;
[L3908]              _symbol_ERC20Detailed[this] := symbol_s778;
[L3909]              _decimals_ERC20Detailed[this] := decimals_s778;
[L3930]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3931]  COND FALSE  !(revert)
[L4318]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L4319]  COND FALSE  !(revert)
[L4322]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3397]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3373]              assume msgsender_MSG != null;
[L3374]              Balance[this] := 0;
[L3375]              _balances_ERC20[this] := zeroRefintArr();
[L3376]              sum__balances0[this] := 0;
[L3377]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3378]              sum__allowed1[this] := 0;
[L3379]              _totalSupply_ERC20[this] := 0;
[L3401]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L4322]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4323]  COND FALSE  !(revert)
[L4326]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4006]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3397]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3373]              assume msgsender_MSG != null;
[L3374]              Balance[this] := 0;
[L3375]              _balances_ERC20[this] := zeroRefintArr();
[L3376]              sum__balances0[this] := 0;
[L3377]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3378]              sum__allowed1[this] := 0;
[L3379]              _totalSupply_ERC20[this] := 0;
[L3401]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L4010]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4014]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3983]              assume msgsender_MSG != null;
[L3984]              Balance[this] := 0;
[L4014]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4015]  COND FALSE  !(revert)
[L4326]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4327]  COND FALSE  !(revert)
[L4330]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3220]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3203]              assume msgsender_MSG != null;
[L3204]              Balance[this] := 0;
[L3205]              _owner_Ownable[this] := null;
[L3207]              _owner_Ownable[this] := msgsender_MSG;
[L3220]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  COND FALSE  !(revert)
[L4330]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4156]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3220]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3203]              assume msgsender_MSG != null;
[L3204]              Balance[this] := 0;
[L3205]              _owner_Ownable[this] := null;
[L3207]              _owner_Ownable[this] := msgsender_MSG;
[L3220]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  COND FALSE  !(revert)
[L4156]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4157]  COND FALSE  !(revert)
[L4160]  CALL        call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4136]              assume msgsender_MSG != null;
[L4137]              Balance[this] := 0;
[L4138]              stopped_Stoppable[this] := false;
[L4160]  RET         call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4161]  COND FALSE  !(revert)
[L4334]  RET         call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4250]              assume msgsender_MSG != null;
[L4251]              Balance[this] := 0;
[L4252]              _lockTimes_EXEToken[this] := zeroRefintArr();
[L4253]              sum__lockTimes2[this] := 0;
[L4254]              _lockAmounts_EXEToken[this] := zeroRefintArr();
[L4255]              sum__lockAmounts3[this] := 0;
[L4257]  COND TRUE   DType[this] == EXEToken
[L4258]  CALL        call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3234]              __ret_0_ := _owner_Ownable[this];
[L4258]  RET         call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]  COND FALSE  !(revert)
[L4265]              __var_24 := decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4266]  COND TRUE   DType[this] == EXEToken
[L4267]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3739]              __var_15 := null;
[L3740]  COND TRUE   !(account_s654 != null)
[L3741]              revert := true;
[L4267]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4268]  COND TRUE   revert
[L4338]  RET         call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4339]  COND FALSE  !(revert)
[L1798]  RET         call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1799]              assume !revert && gas >= 0;
[L7043]  RET         call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L7044]              assume !revert && gas >= 0;
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND FALSE  !(choice == 16)
[L6926]  COND FALSE  !(choice == 15)
[L6933]  COND TRUE   choice == 14
[L6934]              gas := gas - 21000;
[L6935]  COND TRUE   gas >= 0
[L6936]              assume amount_s1113 >= 0 && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6937]              assume msgvalue_MSG == 0;
[L6938]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s1113 != recipient_s1113 && ((amount_s1113 > _balances_ERC20[this][sender_s1113] || amount_s1113 > _allowed_ERC20[this][sender_s1113][msgsender_MSG]) || _balances_ERC20[this][recipient_s1113] + amount_s1113 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s1113 >= 0) && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1113] >= 0) && _balances_ERC20[this][recipient_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s1113] >= 0) && _balances_ERC20[this][sender_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] >= 0) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_EXEToken0 := true;
[L2]                 call_transferFrom_EXEToken0 := false;
[L2]                 revert := revert_hold;
[L2099]              havoc __exception;
[L2100]              revert := false;
[L2101]  COND FALSE  !(__exception)
[L2128]  CALL        call __ret_0_ := transferFrom~address~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4595]  CALL        call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6067]  COND TRUE   !!stopped_Stoppable[this]
[L6068]              revert := true;
[L4595]  RET         call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4596]  COND TRUE   revert
[L2128]  RET         call __ret_0_ := transferFrom~address~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L2129]              assume !revert && gas >= 0;
[L6938]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L7047]  RET         call CorralChoice_EXEToken(this);

Loop:
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND FALSE  !(choice == 16)
[L6926]  COND FALSE  !(choice == 15)
[L6933]  COND TRUE   choice == 14
[L6934]              gas := gas - 21000;
[L6935]  COND TRUE   gas >= 0
[L6936]              assume amount_s1113 >= 0 && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6937]              assume msgvalue_MSG == 0;
[L6938]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s1113 != recipient_s1113 && ((amount_s1113 > _balances_ERC20[this][sender_s1113] || amount_s1113 > _allowed_ERC20[this][sender_s1113][msgsender_MSG]) || _balances_ERC20[this][recipient_s1113] + amount_s1113 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s1113 >= 0) && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1113] >= 0) && _balances_ERC20[this][recipient_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s1113] >= 0) && _balances_ERC20[this][sender_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] >= 0) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_EXEToken0 := true;
[L2]                 call_transferFrom_EXEToken0 := false;
[L2]                 revert := revert_hold;
[L2099]              havoc __exception;
[L2100]              revert := false;
[L2101]  COND FALSE  !(__exception)
[L2128]  CALL        call __ret_0_ := transferFrom~address~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4595]  CALL        call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6067]  COND TRUE   !!stopped_Stoppable[this]
[L6068]              revert := true;
[L4595]  RET         call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4596]  COND TRUE   revert
[L2128]  RET         call __ret_0_ := transferFrom~address~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L2129]              assume !revert && gas >= 0;
[L6938]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L7047]  RET         call CorralChoice_EXEToken(this);

[2020-11-25 16:11:28,829 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:11:28,829 INFO  L82        PathProgramCache]: Analyzing trace with hash -121340731, now seen corresponding path program 1 times
[2020-11-25 16:11:28,830 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:11:28,850 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:11:28,966 INFO  L134       CoverageAnalysis]: Checked inductivity of 131 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 131 trivial. 0 not checked.
[2020-11-25 16:11:28,966 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:11:28,966 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 16:11:28,967 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:11:28,967 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 16:11:28,967 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 16:11:28,968 INFO  L87              Difference]: Start difference. First operand 4350 states and 5001 transitions. cyclomatic complexity: 653 Second operand 3 states.
[2020-11-25 16:11:29,071 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:11:29,072 INFO  L93              Difference]: Finished difference Result 4910 states and 5501 transitions.
[2020-11-25 16:11:29,072 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 16:11:29,072 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4910 states and 5501 transitions.
[2020-11-25 16:11:29,085 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 16:11:29,103 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4910 states to 4556 states and 5083 transitions.
[2020-11-25 16:11:29,103 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1025
[2020-11-25 16:11:29,104 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1055
[2020-11-25 16:11:29,104 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4556 states and 5083 transitions.
[2020-11-25 16:11:29,109 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:11:29,109 INFO  L728         BuchiCegarLoop]: Abstraction has 4556 states and 5083 transitions.
[2020-11-25 16:11:29,113 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4556 states and 5083 transitions.
[2020-11-25 16:11:29,153 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4556 to 4108.
[2020-11-25 16:11:29,153 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4108 states.
[2020-11-25 16:11:29,157 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4108 states to 4108 states and 4524 transitions.
[2020-11-25 16:11:29,157 INFO  L751         BuchiCegarLoop]: Abstraction has 4108 states and 4524 transitions.
[2020-11-25 16:11:29,158 INFO  L631         BuchiCegarLoop]: Abstraction has 4108 states and 4524 transitions.
[2020-11-25 16:11:29,158 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 16:11:29,158 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4108 states and 4524 transitions.
[2020-11-25 16:11:29,162 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 16:11:29,163 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:11:29,163 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:11:29,166 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:11:29,166 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_EXEToken0 := false;
[L2]                 call_transferFrom_EXEToken0 := false;
[L2]     CALL        call main();
[L7037]              assume null == 0;
[L7038]  CALL        call this := FreshRefGenerator__success();
[L3028]              havoc newRef;
[L3029]              assume Alloc[newRef] == false;
[L3030]              Alloc[newRef] := true;
[L3031]              assume newRef != null;
[L7038]  RET         call this := FreshRefGenerator__success();
[L7039]              assume now >= 0;
[L7040]              assume DType[this] == EXEToken;
[L7041]              assume msgvalue_MSG == 0;
[L7042]              gas := gas - 53000;
[L7043]  CALL        call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1769]              havoc __exception;
[L1770]              revert := false;
[L1771]  COND FALSE  !(__exception)
[L1798]  CALL        call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4314]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4314]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4315]  COND FALSE  !(revert)
[L4318]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L3926]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3926]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3927]  COND FALSE  !(revert)
[L3930]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3901]              assume msgsender_MSG != null;
[L3902]              Balance[this] := 0;
[L3903]              _name_ERC20Detailed[this] := 427332508;
[L3904]              _symbol_ERC20Detailed[this] := 427332508;
[L3905]              _decimals_ERC20Detailed[this] := 0;
[L3907]              _name_ERC20Detailed[this] := name_s778;
[L3908]              _symbol_ERC20Detailed[this] := symbol_s778;
[L3909]              _decimals_ERC20Detailed[this] := decimals_s778;
[L3930]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3931]  COND FALSE  !(revert)
[L4318]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L4319]  COND FALSE  !(revert)
[L4322]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3397]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3373]              assume msgsender_MSG != null;
[L3374]              Balance[this] := 0;
[L3375]              _balances_ERC20[this] := zeroRefintArr();
[L3376]              sum__balances0[this] := 0;
[L3377]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3378]              sum__allowed1[this] := 0;
[L3379]              _totalSupply_ERC20[this] := 0;
[L3401]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L4322]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4323]  COND FALSE  !(revert)
[L4326]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4006]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3397]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3373]              assume msgsender_MSG != null;
[L3374]              Balance[this] := 0;
[L3375]              _balances_ERC20[this] := zeroRefintArr();
[L3376]              sum__balances0[this] := 0;
[L3377]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3378]              sum__allowed1[this] := 0;
[L3379]              _totalSupply_ERC20[this] := 0;
[L3401]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L4010]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4014]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3983]              assume msgsender_MSG != null;
[L3984]              Balance[this] := 0;
[L4014]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4015]  COND FALSE  !(revert)
[L4326]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4327]  COND FALSE  !(revert)
[L4330]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3220]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3203]              assume msgsender_MSG != null;
[L3204]              Balance[this] := 0;
[L3205]              _owner_Ownable[this] := null;
[L3207]              _owner_Ownable[this] := msgsender_MSG;
[L3220]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  COND FALSE  !(revert)
[L4330]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4156]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3220]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3203]              assume msgsender_MSG != null;
[L3204]              Balance[this] := 0;
[L3205]              _owner_Ownable[this] := null;
[L3207]              _owner_Ownable[this] := msgsender_MSG;
[L3220]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  COND FALSE  !(revert)
[L4156]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4157]  COND FALSE  !(revert)
[L4160]  CALL        call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4136]              assume msgsender_MSG != null;
[L4137]              Balance[this] := 0;
[L4138]              stopped_Stoppable[this] := false;
[L4160]  RET         call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4161]  COND FALSE  !(revert)
[L4334]  RET         call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4250]              assume msgsender_MSG != null;
[L4251]              Balance[this] := 0;
[L4252]              _lockTimes_EXEToken[this] := zeroRefintArr();
[L4253]              sum__lockTimes2[this] := 0;
[L4254]              _lockAmounts_EXEToken[this] := zeroRefintArr();
[L4255]              sum__lockAmounts3[this] := 0;
[L4257]  COND TRUE   DType[this] == EXEToken
[L4258]  CALL        call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3234]              __ret_0_ := _owner_Ownable[this];
[L4258]  RET         call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]  COND FALSE  !(revert)
[L4265]              __var_24 := decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4266]  COND TRUE   DType[this] == EXEToken
[L4267]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3739]              __var_15 := null;
[L3740]  COND FALSE  !(!(account_s654 != null))
[L3744]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3744]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3745]  COND FALSE  !(revert)
[L3748]              _totalSupply_ERC20[this] := __var_16;
[L3749]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3749]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3750]  COND FALSE  !(revert)
[L3753]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s654];
[L3754]              _balances_ERC20[this][account_s654] := __var_17;
[L3755]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s654];
[L3756]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4267]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4268]  COND FALSE  !(revert)
[L4338]  RET         call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4339]  COND FALSE  !(revert)
[L1798]  RET         call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1799]              assume !revert && gas >= 0;
[L7043]  RET         call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L7044]              assume !revert && gas >= 0;
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND FALSE  !(choice == 16)
[L6926]  COND FALSE  !(choice == 15)
[L6933]  COND TRUE   choice == 14
[L6934]              gas := gas - 21000;
[L6935]  COND TRUE   gas >= 0
[L6936]              assume amount_s1113 >= 0 && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6937]              assume msgvalue_MSG == 0;
[L6938]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s1113 != recipient_s1113 && ((amount_s1113 > _balances_ERC20[this][sender_s1113] || amount_s1113 > _allowed_ERC20[this][sender_s1113][msgsender_MSG]) || _balances_ERC20[this][recipient_s1113] + amount_s1113 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s1113 >= 0) && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1113] >= 0) && _balances_ERC20[this][recipient_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s1113] >= 0) && _balances_ERC20[this][sender_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] >= 0) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_EXEToken0 := true;
[L2]                 call_transferFrom_EXEToken0 := false;
[L2]                 revert := revert_hold;
[L2099]              havoc __exception;
[L2100]              revert := false;
[L2101]  COND FALSE  !(__exception)
[L2128]  CALL        call __ret_0_ := transferFrom~address~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4595]  CALL        call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6067]  COND FALSE  !(!!stopped_Stoppable[this])
[L4595]  RET         call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4596]  COND FALSE  !(revert)
[L4599]  CALL        call __var_31 := _isLocked~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, amount_s1113);
[L4479]  COND TRUE   DType[this] == EXEToken
[L4480]  CALL        call __var_25 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3427]              __ret_0_ := _balances_ERC20[this][owner_s312];
[L4480]  RET         call __var_25 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4481]  COND FALSE  !(revert)
[L4487]  COND TRUE   DType[this] == EXEToken
[L4488]  CALL        call __var_27 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3427]              __ret_0_ := _balances_ERC20[this][owner_s312];
[L4488]  RET         call __var_27 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4489]  COND FALSE  !(revert)
[L4495]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, __var_27, _lockAmounts_EXEToken[this][account_s1055]);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L4495]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, __var_27, _lockAmounts_EXEToken[this][account_s1055]);
[L4496]  COND FALSE  !(revert)
[L4499]              __ret_0_ := ((_lockTimes_EXEToken[this][account_s1055] != 0 && _lockAmounts_EXEToken[this][account_s1055] != 0) && _lockTimes_EXEToken[this][account_s1055] > now) && (__var_25 <= _lockAmounts_EXEToken[this][account_s1055] || __var_26 < amount_s1055);
[L4599]  RET         call __var_31 := _isLocked~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, amount_s1113);
[L4600]  COND FALSE  !(revert)
[L4603]  COND FALSE  !(!!__var_31)
[L4607]  COND TRUE   DType[this] == EXEToken
[L4608]  CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L3589]  COND FALSE  !(!(value_s512 <= _balances_ERC20[this][from_s512]))
[L3593]  COND FALSE  !(!(value_s512 <= _allowed_ERC20[this][from_s512][msgsender_MSG]))
[L3597]              __var_7 := null;
[L3598]  COND FALSE  !(!(to_s512 != null))
[L3602]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s512], value_s512);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L3602]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s512], value_s512);
[L3603]  COND FALSE  !(revert)
[L3606]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s512];
[L3607]              _balances_ERC20[this][from_s512] := __var_8;
[L3608]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s512];
[L3609]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s512], value_s512);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3609]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s512], value_s512);
[L3610]  COND FALSE  !(revert)
[L3613]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s512];
[L3614]              _balances_ERC20[this][to_s512] := __var_9;
[L3615]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s512];
[L3616]  CALL        call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s512][msgsender_MSG], value_s512);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L3616]  RET         call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s512][msgsender_MSG], value_s512);
[L3617]  COND FALSE  !(revert)
[L3620]              sum__allowed1[from_s512] := sum__allowed1[from_s512] - _allowed_ERC20[this][from_s512][msgsender_MSG];
[L3621]              _allowed_ERC20[this][from_s512][msgsender_MSG] := __var_10;
[L3622]              sum__allowed1[from_s512] := sum__allowed1[from_s512] + _allowed_ERC20[this][from_s512][msgsender_MSG];
[L3623]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3624]              __ret_0_ := true;
[L4608]  RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4609]  COND FALSE  !(revert)
[L4615]              __ret_0_ := __var_32;
[L2128]  RET         call __ret_0_ := transferFrom~address~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L2129]              assume !revert && gas >= 0;
[L6938]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L7047]  RET         call CorralChoice_EXEToken(this);

Loop:
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND FALSE  !(choice == 16)
[L6926]  COND FALSE  !(choice == 15)
[L6933]  COND TRUE   choice == 14
[L6934]              gas := gas - 21000;
[L6935]  COND TRUE   gas >= 0
[L6936]              assume amount_s1113 >= 0 && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6937]              assume msgvalue_MSG == 0;
[L6938]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s1113 != recipient_s1113 && ((amount_s1113 > _balances_ERC20[this][sender_s1113] || amount_s1113 > _allowed_ERC20[this][sender_s1113][msgsender_MSG]) || _balances_ERC20[this][recipient_s1113] + amount_s1113 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s1113 >= 0) && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1113] >= 0) && _balances_ERC20[this][recipient_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s1113] >= 0) && _balances_ERC20[this][sender_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] >= 0) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_EXEToken0 := true;
[L2]                 call_transferFrom_EXEToken0 := false;
[L2]                 revert := revert_hold;
[L2099]              havoc __exception;
[L2100]              revert := false;
[L2101]  COND FALSE  !(__exception)
[L2128]  CALL        call __ret_0_ := transferFrom~address~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4595]  CALL        call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6067]  COND FALSE  !(!!stopped_Stoppable[this])
[L4595]  RET         call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4596]  COND FALSE  !(revert)
[L4599]  CALL        call __var_31 := _isLocked~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, amount_s1113);
[L4479]  COND TRUE   DType[this] == EXEToken
[L4480]  CALL        call __var_25 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3427]              __ret_0_ := _balances_ERC20[this][owner_s312];
[L4480]  RET         call __var_25 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4481]  COND FALSE  !(revert)
[L4487]  COND TRUE   DType[this] == EXEToken
[L4488]  CALL        call __var_27 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3427]              __ret_0_ := _balances_ERC20[this][owner_s312];
[L4488]  RET         call __var_27 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4489]  COND FALSE  !(revert)
[L4495]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, __var_27, _lockAmounts_EXEToken[this][account_s1055]);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L4495]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, __var_27, _lockAmounts_EXEToken[this][account_s1055]);
[L4496]  COND FALSE  !(revert)
[L4499]              __ret_0_ := ((_lockTimes_EXEToken[this][account_s1055] != 0 && _lockAmounts_EXEToken[this][account_s1055] != 0) && _lockTimes_EXEToken[this][account_s1055] > now) && (__var_25 <= _lockAmounts_EXEToken[this][account_s1055] || __var_26 < amount_s1055);
[L4599]  RET         call __var_31 := _isLocked~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, amount_s1113);
[L4600]  COND FALSE  !(revert)
[L4603]  COND FALSE  !(!!__var_31)
[L4607]  COND TRUE   DType[this] == EXEToken
[L4608]  CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L3589]  COND FALSE  !(!(value_s512 <= _balances_ERC20[this][from_s512]))
[L3593]  COND FALSE  !(!(value_s512 <= _allowed_ERC20[this][from_s512][msgsender_MSG]))
[L3597]              __var_7 := null;
[L3598]  COND FALSE  !(!(to_s512 != null))
[L3602]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s512], value_s512);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L3602]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s512], value_s512);
[L3603]  COND FALSE  !(revert)
[L3606]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s512];
[L3607]              _balances_ERC20[this][from_s512] := __var_8;
[L3608]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s512];
[L3609]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s512], value_s512);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3609]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s512], value_s512);
[L3610]  COND FALSE  !(revert)
[L3613]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s512];
[L3614]              _balances_ERC20[this][to_s512] := __var_9;
[L3615]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s512];
[L3616]  CALL        call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s512][msgsender_MSG], value_s512);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L3616]  RET         call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s512][msgsender_MSG], value_s512);
[L3617]  COND FALSE  !(revert)
[L3620]              sum__allowed1[from_s512] := sum__allowed1[from_s512] - _allowed_ERC20[this][from_s512][msgsender_MSG];
[L3621]              _allowed_ERC20[this][from_s512][msgsender_MSG] := __var_10;
[L3622]              sum__allowed1[from_s512] := sum__allowed1[from_s512] + _allowed_ERC20[this][from_s512][msgsender_MSG];
[L3623]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3624]              __ret_0_ := true;
[L4608]  RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4609]  COND FALSE  !(revert)
[L4615]              __ret_0_ := __var_32;
[L2128]  RET         call __ret_0_ := transferFrom~address~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L2129]              assume !revert && gas >= 0;
[L6938]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L7047]  RET         call CorralChoice_EXEToken(this);

[2020-11-25 16:11:29,171 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:11:29,171 INFO  L82        PathProgramCache]: Analyzing trace with hash 1436471468, now seen corresponding path program 1 times
[2020-11-25 16:11:29,172 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:11:29,195 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:11:29,543 INFO  L134       CoverageAnalysis]: Checked inductivity of 154 backedges. 10 proven. 8 refuted. 0 times theorem prover too weak. 136 trivial. 0 not checked.
[2020-11-25 16:11:29,543 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 16:11:29,544 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [25] total 25
[2020-11-25 16:11:29,544 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:11:29,544 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2020-11-25 16:11:29,545 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=57, Invalid=593, Unknown=0, NotChecked=0, Total=650
[2020-11-25 16:11:29,545 INFO  L87              Difference]: Start difference. First operand 4108 states and 4524 transitions. cyclomatic complexity: 418 Second operand 26 states.
[2020-11-25 16:11:34,717 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:11:34,717 INFO  L93              Difference]: Finished difference Result 4262 states and 4714 transitions.
[2020-11-25 16:11:34,717 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 33 states. 
[2020-11-25 16:11:34,717 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4262 states and 4714 transitions.
[2020-11-25 16:11:34,725 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 16:11:34,737 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4262 states to 4262 states and 4714 transitions.
[2020-11-25 16:11:34,737 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1041
[2020-11-25 16:11:34,738 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1041
[2020-11-25 16:11:34,738 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4262 states and 4714 transitions.
[2020-11-25 16:11:34,741 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:11:34,741 INFO  L728         BuchiCegarLoop]: Abstraction has 4262 states and 4714 transitions.
[2020-11-25 16:11:34,744 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4262 states and 4714 transitions.
[2020-11-25 16:11:34,767 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4262 to 3965.
[2020-11-25 16:11:34,767 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3965 states.
[2020-11-25 16:11:34,771 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3965 states to 3965 states and 4342 transitions.
[2020-11-25 16:11:34,771 INFO  L751         BuchiCegarLoop]: Abstraction has 3965 states and 4342 transitions.
[2020-11-25 16:11:34,771 INFO  L631         BuchiCegarLoop]: Abstraction has 3965 states and 4342 transitions.
[2020-11-25 16:11:34,771 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 16:11:34,771 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3965 states and 4342 transitions.
[2020-11-25 16:11:34,775 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:11:34,775 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:11:34,775 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:11:34,778 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:11:34,778 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_EXEToken0 := false;
[L2]                 call_transferFrom_EXEToken0 := false;
[L2]     CALL        call main();
[L7037]              assume null == 0;
[L7038]  CALL        call this := FreshRefGenerator__success();
[L3028]              havoc newRef;
[L3029]              assume Alloc[newRef] == false;
[L3030]              Alloc[newRef] := true;
[L3031]              assume newRef != null;
[L7038]  RET         call this := FreshRefGenerator__success();
[L7039]              assume now >= 0;
[L7040]              assume DType[this] == EXEToken;
[L7041]              assume msgvalue_MSG == 0;
[L7042]              gas := gas - 53000;
[L7043]  CALL        call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1769]              havoc __exception;
[L1770]              revert := false;
[L1771]  COND FALSE  !(__exception)
[L1798]  CALL        call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4314]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4314]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4315]  COND FALSE  !(revert)
[L4318]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L3926]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3926]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3927]  COND FALSE  !(revert)
[L3930]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3901]              assume msgsender_MSG != null;
[L3902]              Balance[this] := 0;
[L3903]              _name_ERC20Detailed[this] := 427332508;
[L3904]              _symbol_ERC20Detailed[this] := 427332508;
[L3905]              _decimals_ERC20Detailed[this] := 0;
[L3907]              _name_ERC20Detailed[this] := name_s778;
[L3908]              _symbol_ERC20Detailed[this] := symbol_s778;
[L3909]              _decimals_ERC20Detailed[this] := decimals_s778;
[L3930]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3931]  COND FALSE  !(revert)
[L4318]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L4319]  COND FALSE  !(revert)
[L4322]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3397]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3373]              assume msgsender_MSG != null;
[L3374]              Balance[this] := 0;
[L3375]              _balances_ERC20[this] := zeroRefintArr();
[L3376]              sum__balances0[this] := 0;
[L3377]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3378]              sum__allowed1[this] := 0;
[L3379]              _totalSupply_ERC20[this] := 0;
[L3401]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L4322]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4323]  COND FALSE  !(revert)
[L4326]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4006]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3397]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3373]              assume msgsender_MSG != null;
[L3374]              Balance[this] := 0;
[L3375]              _balances_ERC20[this] := zeroRefintArr();
[L3376]              sum__balances0[this] := 0;
[L3377]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3378]              sum__allowed1[this] := 0;
[L3379]              _totalSupply_ERC20[this] := 0;
[L3401]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L4010]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4014]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3983]              assume msgsender_MSG != null;
[L3984]              Balance[this] := 0;
[L4014]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4015]  COND FALSE  !(revert)
[L4326]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4327]  COND FALSE  !(revert)
[L4330]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3220]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3203]              assume msgsender_MSG != null;
[L3204]              Balance[this] := 0;
[L3205]              _owner_Ownable[this] := null;
[L3207]              _owner_Ownable[this] := msgsender_MSG;
[L3220]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  COND FALSE  !(revert)
[L4330]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4156]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3220]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3203]              assume msgsender_MSG != null;
[L3204]              Balance[this] := 0;
[L3205]              _owner_Ownable[this] := null;
[L3207]              _owner_Ownable[this] := msgsender_MSG;
[L3220]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  COND FALSE  !(revert)
[L4156]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4157]  COND FALSE  !(revert)
[L4160]  CALL        call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4136]              assume msgsender_MSG != null;
[L4137]              Balance[this] := 0;
[L4138]              stopped_Stoppable[this] := false;
[L4160]  RET         call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4161]  COND FALSE  !(revert)
[L4334]  RET         call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4250]              assume msgsender_MSG != null;
[L4251]              Balance[this] := 0;
[L4252]              _lockTimes_EXEToken[this] := zeroRefintArr();
[L4253]              sum__lockTimes2[this] := 0;
[L4254]              _lockAmounts_EXEToken[this] := zeroRefintArr();
[L4255]              sum__lockAmounts3[this] := 0;
[L4257]  COND TRUE   DType[this] == EXEToken
[L4258]  CALL        call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3234]              __ret_0_ := _owner_Ownable[this];
[L4258]  RET         call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]  COND FALSE  !(revert)
[L4265]              __var_24 := decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4266]  COND TRUE   DType[this] == EXEToken
[L4267]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3739]              __var_15 := null;
[L3740]  COND FALSE  !(!(account_s654 != null))
[L3744]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3744]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3745]  COND FALSE  !(revert)
[L3748]              _totalSupply_ERC20[this] := __var_16;
[L3749]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3749]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3750]  COND FALSE  !(revert)
[L3753]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s654];
[L3754]              _balances_ERC20[this][account_s654] := __var_17;
[L3755]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s654];
[L3756]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4267]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4268]  COND FALSE  !(revert)
[L4338]  RET         call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4339]  COND FALSE  !(revert)
[L1798]  RET         call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1799]              assume !revert && gas >= 0;
[L7043]  RET         call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L7044]              assume !revert && gas >= 0;
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND FALSE  !(choice == 16)
[L6926]  COND TRUE   choice == 15
[L6927]              gas := gas - 21000;
[L6928]  COND TRUE   gas >= 0
[L6929]              assume value_s425 >= 0 && value_s425 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6930]              assume msgvalue_MSG == 0;
[L6931]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s425, value_s425);
[L747]               havoc __exception;
[L748]               revert := false;
[L749]   COND FALSE  !(__exception)
[L776]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s425, value_s425);
[L3526]              __var_6 := null;
[L3527]  COND FALSE  !(!(spender_s425 != null))
[L3531]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ERC20[this][msgsender_MSG][spender_s425];
[L3532]              _allowed_ERC20[this][msgsender_MSG][spender_s425] := value_s425;
[L3533]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ERC20[this][msgsender_MSG][spender_s425];
[L3534]              assert { :EventEmitted "Approval_ERC20" } true;
[L3535]              __ret_0_ := true;
[L776]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s425, value_s425);
[L777]               assume !revert && gas >= 0;
[L6931]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s425, value_s425);
[L7047]  RET         call CorralChoice_EXEToken(this);
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND FALSE  !(choice == 16)
[L6926]  COND FALSE  !(choice == 15)
[L6933]  COND TRUE   choice == 14
[L6934]              gas := gas - 21000;
[L6935]  COND TRUE   gas >= 0
[L6936]              assume amount_s1113 >= 0 && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6937]              assume msgvalue_MSG == 0;
[L6938]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s1113 != recipient_s1113 && ((amount_s1113 > _balances_ERC20[this][sender_s1113] || amount_s1113 > _allowed_ERC20[this][sender_s1113][msgsender_MSG]) || _balances_ERC20[this][recipient_s1113] + amount_s1113 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s1113 >= 0) && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1113] >= 0) && _balances_ERC20[this][recipient_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s1113] >= 0) && _balances_ERC20[this][sender_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] >= 0) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_EXEToken0 := true;
[L2]                 call_transferFrom_EXEToken0 := false;
[L2]                 revert := revert_hold;
[L2099]              havoc __exception;
[L2100]              revert := false;
[L2101]  COND FALSE  !(__exception)
[L2128]  CALL        call __ret_0_ := transferFrom~address~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4595]  CALL        call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6067]  COND FALSE  !(!!stopped_Stoppable[this])
[L4595]  RET         call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4596]  COND FALSE  !(revert)
[L4599]  CALL        call __var_31 := _isLocked~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, amount_s1113);
[L4479]  COND TRUE   DType[this] == EXEToken
[L4480]  CALL        call __var_25 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3427]              __ret_0_ := _balances_ERC20[this][owner_s312];
[L4480]  RET         call __var_25 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4481]  COND FALSE  !(revert)
[L4487]  COND TRUE   DType[this] == EXEToken
[L4488]  CALL        call __var_27 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3427]              __ret_0_ := _balances_ERC20[this][owner_s312];
[L4488]  RET         call __var_27 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4489]  COND FALSE  !(revert)
[L4495]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, __var_27, _lockAmounts_EXEToken[this][account_s1055]);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L4495]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, __var_27, _lockAmounts_EXEToken[this][account_s1055]);
[L4496]  COND FALSE  !(revert)
[L4499]              __ret_0_ := ((_lockTimes_EXEToken[this][account_s1055] != 0 && _lockAmounts_EXEToken[this][account_s1055] != 0) && _lockTimes_EXEToken[this][account_s1055] > now) && (__var_25 <= _lockAmounts_EXEToken[this][account_s1055] || __var_26 < amount_s1055);
[L4599]  RET         call __var_31 := _isLocked~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, amount_s1113);
[L4600]  COND FALSE  !(revert)
[L4603]  COND FALSE  !(!!__var_31)
[L4607]  COND TRUE   DType[this] == EXEToken
[L4608]  CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L3589]  COND FALSE  !(!(value_s512 <= _balances_ERC20[this][from_s512]))
[L3593]  COND FALSE  !(!(value_s512 <= _allowed_ERC20[this][from_s512][msgsender_MSG]))
[L3597]              __var_7 := null;
[L3598]  COND FALSE  !(!(to_s512 != null))
[L3602]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s512], value_s512);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L3602]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s512], value_s512);
[L3603]  COND FALSE  !(revert)
[L3606]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s512];
[L3607]              _balances_ERC20[this][from_s512] := __var_8;
[L3608]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s512];
[L3609]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s512], value_s512);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3609]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s512], value_s512);
[L3610]  COND FALSE  !(revert)
[L3613]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s512];
[L3614]              _balances_ERC20[this][to_s512] := __var_9;
[L3615]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s512];
[L3616]  CALL        call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s512][msgsender_MSG], value_s512);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L3616]  RET         call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s512][msgsender_MSG], value_s512);
[L3617]  COND FALSE  !(revert)
[L3620]              sum__allowed1[from_s512] := sum__allowed1[from_s512] - _allowed_ERC20[this][from_s512][msgsender_MSG];
[L3621]              _allowed_ERC20[this][from_s512][msgsender_MSG] := __var_10;
[L3622]              sum__allowed1[from_s512] := sum__allowed1[from_s512] + _allowed_ERC20[this][from_s512][msgsender_MSG];
[L3623]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3624]              __ret_0_ := true;
[L4608]  RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4609]  COND FALSE  !(revert)
[L4615]              __ret_0_ := __var_32;
[L2128]  RET         call __ret_0_ := transferFrom~address~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L2129]              assume !revert && gas >= 0;
[L6938]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L7047]  RET         call CorralChoice_EXEToken(this);

Loop:
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND FALSE  !(choice == 16)
[L6926]  COND FALSE  !(choice == 15)
[L6933]  COND TRUE   choice == 14
[L6934]              gas := gas - 21000;
[L6935]  COND TRUE   gas >= 0
[L6936]              assume amount_s1113 >= 0 && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6937]              assume msgvalue_MSG == 0;
[L6938]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s1113 != recipient_s1113 && ((amount_s1113 > _balances_ERC20[this][sender_s1113] || amount_s1113 > _allowed_ERC20[this][sender_s1113][msgsender_MSG]) || _balances_ERC20[this][recipient_s1113] + amount_s1113 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s1113 >= 0) && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1113] >= 0) && _balances_ERC20[this][recipient_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s1113] >= 0) && _balances_ERC20[this][sender_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] >= 0) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_EXEToken0 := true;
[L2]                 call_transferFrom_EXEToken0 := false;
[L2]                 revert := revert_hold;
[L2099]              havoc __exception;
[L2100]              revert := false;
[L2101]  COND FALSE  !(__exception)
[L2128]  CALL        call __ret_0_ := transferFrom~address~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4595]  CALL        call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6067]  COND FALSE  !(!!stopped_Stoppable[this])
[L4595]  RET         call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4596]  COND FALSE  !(revert)
[L4599]  CALL        call __var_31 := _isLocked~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, amount_s1113);
[L4479]  COND TRUE   DType[this] == EXEToken
[L4480]  CALL        call __var_25 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3427]              __ret_0_ := _balances_ERC20[this][owner_s312];
[L4480]  RET         call __var_25 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4481]  COND FALSE  !(revert)
[L4487]  COND TRUE   DType[this] == EXEToken
[L4488]  CALL        call __var_27 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3427]              __ret_0_ := _balances_ERC20[this][owner_s312];
[L4488]  RET         call __var_27 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4489]  COND FALSE  !(revert)
[L4495]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, __var_27, _lockAmounts_EXEToken[this][account_s1055]);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L4495]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, __var_27, _lockAmounts_EXEToken[this][account_s1055]);
[L4496]  COND FALSE  !(revert)
[L4499]              __ret_0_ := ((_lockTimes_EXEToken[this][account_s1055] != 0 && _lockAmounts_EXEToken[this][account_s1055] != 0) && _lockTimes_EXEToken[this][account_s1055] > now) && (__var_25 <= _lockAmounts_EXEToken[this][account_s1055] || __var_26 < amount_s1055);
[L4599]  RET         call __var_31 := _isLocked~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, amount_s1113);
[L4600]  COND FALSE  !(revert)
[L4603]  COND FALSE  !(!!__var_31)
[L4607]  COND TRUE   DType[this] == EXEToken
[L4608]  CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L3589]  COND FALSE  !(!(value_s512 <= _balances_ERC20[this][from_s512]))
[L3593]  COND FALSE  !(!(value_s512 <= _allowed_ERC20[this][from_s512][msgsender_MSG]))
[L3597]              __var_7 := null;
[L3598]  COND FALSE  !(!(to_s512 != null))
[L3602]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s512], value_s512);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L3602]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s512], value_s512);
[L3603]  COND FALSE  !(revert)
[L3606]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s512];
[L3607]              _balances_ERC20[this][from_s512] := __var_8;
[L3608]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s512];
[L3609]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s512], value_s512);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3609]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s512], value_s512);
[L3610]  COND FALSE  !(revert)
[L3613]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s512];
[L3614]              _balances_ERC20[this][to_s512] := __var_9;
[L3615]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s512];
[L3616]  CALL        call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s512][msgsender_MSG], value_s512);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L3616]  RET         call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s512][msgsender_MSG], value_s512);
[L3617]  COND FALSE  !(revert)
[L3620]              sum__allowed1[from_s512] := sum__allowed1[from_s512] - _allowed_ERC20[this][from_s512][msgsender_MSG];
[L3621]              _allowed_ERC20[this][from_s512][msgsender_MSG] := __var_10;
[L3622]              sum__allowed1[from_s512] := sum__allowed1[from_s512] + _allowed_ERC20[this][from_s512][msgsender_MSG];
[L3623]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3624]              __ret_0_ := true;
[L4608]  RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4609]  COND FALSE  !(revert)
[L4615]              __ret_0_ := __var_32;
[L2128]  RET         call __ret_0_ := transferFrom~address~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L2129]              assume !revert && gas >= 0;
[L6938]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L7047]  RET         call CorralChoice_EXEToken(this);

[2020-11-25 16:11:34,784 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:11:34,785 INFO  L82        PathProgramCache]: Analyzing trace with hash 965431056, now seen corresponding path program 1 times
[2020-11-25 16:11:34,785 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:11:34,808 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:11:35,261 INFO  L134       CoverageAnalysis]: Checked inductivity of 229 backedges. 24 proven. 0 refuted. 0 times theorem prover too weak. 205 trivial. 0 not checked.
[2020-11-25 16:11:35,261 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:11:35,262 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [28] imperfect sequences [] total 28
[2020-11-25 16:11:35,262 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:11:35,263 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 29 interpolants.
[2020-11-25 16:11:35,263 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=65, Invalid=747, Unknown=0, NotChecked=0, Total=812
[2020-11-25 16:11:35,263 INFO  L87              Difference]: Start difference. First operand 3965 states and 4342 transitions. cyclomatic complexity: 380 Second operand 29 states.
[2020-11-25 16:11:41,461 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:11:41,461 INFO  L93              Difference]: Finished difference Result 4057 states and 4476 transitions.
[2020-11-25 16:11:41,461 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 35 states. 
[2020-11-25 16:11:41,461 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4057 states and 4476 transitions.
[2020-11-25 16:11:41,492 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:11:41,503 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4057 states to 4057 states and 4476 transitions.
[2020-11-25 16:11:41,503 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 939
[2020-11-25 16:11:41,504 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 939
[2020-11-25 16:11:41,504 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4057 states and 4476 transitions.
[2020-11-25 16:11:41,506 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:11:41,506 INFO  L728         BuchiCegarLoop]: Abstraction has 4057 states and 4476 transitions.
[2020-11-25 16:11:41,510 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4057 states and 4476 transitions.
[2020-11-25 16:11:41,532 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4057 to 3982.
[2020-11-25 16:11:41,532 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3982 states.
[2020-11-25 16:11:41,536 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3982 states to 3982 states and 4369 transitions.
[2020-11-25 16:11:41,536 INFO  L751         BuchiCegarLoop]: Abstraction has 3982 states and 4369 transitions.
[2020-11-25 16:11:41,536 INFO  L631         BuchiCegarLoop]: Abstraction has 3982 states and 4369 transitions.
[2020-11-25 16:11:41,536 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 16:11:41,536 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3982 states and 4369 transitions.
[2020-11-25 16:11:41,540 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:11:41,540 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:11:41,540 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:11:41,541 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:11:41,541 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_EXEToken0 := false;
[L2]                 call_transferFrom_EXEToken0 := false;
[L2]     CALL        call main();
[L7037]              assume null == 0;
[L7038]  CALL        call this := FreshRefGenerator__success();
[L3028]              havoc newRef;
[L3029]              assume Alloc[newRef] == false;
[L3030]              Alloc[newRef] := true;
[L3031]              assume newRef != null;
[L7038]  RET         call this := FreshRefGenerator__success();
[L7039]              assume now >= 0;
[L7040]              assume DType[this] == EXEToken;
[L7041]              assume msgvalue_MSG == 0;
[L7042]              gas := gas - 53000;
[L7043]  CALL        call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1769]              havoc __exception;
[L1770]              revert := false;
[L1771]  COND TRUE   __exception
[L1772]              __tmp__Balance := Balance;
[L1773]              __tmp__DType := DType;
[L1774]              __tmp__Alloc := Alloc;
[L1775]              __tmp__balance_ADDR := balance_ADDR;
[L1776]              __tmp__M_Ref_int := M_Ref_int;
[L1777]              __tmp__sum__balances0 := sum__balances0;
[L1778]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1779]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1780]              __tmp__sum__allowed1 := sum__allowed1;
[L1781]              __tmp__sum__lockTimes2 := sum__lockTimes2;
[L1782]              __tmp__sum__lockAmounts3 := sum__lockAmounts3;
[L1783]              __tmp__Length := Length;
[L1784]              __tmp__now := now;
[L1785]              __tmp___owner_Ownable := _owner_Ownable;
[L1786]              __tmp___balances_ERC20 := _balances_ERC20;
[L1787]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1788]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1789]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1790]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1791]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1792]              __tmp__stopped_Stoppable := stopped_Stoppable;
[L1793]              __tmp___lockTimes_EXEToken := _lockTimes_EXEToken;
[L1794]              __tmp___lockAmounts_EXEToken := _lockAmounts_EXEToken;
[L1795]  CALL        call EXEToken_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4280]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3343]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3328]              assume msgsender_MSG != null;
[L3329]              __tmp__Balance[this] := 0;
[L3343]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L4280]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4281]  COND FALSE  !(revert)
[L4284]  CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L3914]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3343]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3328]              assume msgsender_MSG != null;
[L3329]              __tmp__Balance[this] := 0;
[L3343]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3914]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3915]  COND FALSE  !(revert)
[L3918]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3887]              assume msgsender_MSG != null;
[L3888]              __tmp__Balance[this] := 0;
[L3889]              __tmp___name_ERC20Detailed[this] := 427332508;
[L3890]              __tmp___symbol_ERC20Detailed[this] := 427332508;
[L3891]              __tmp___decimals_ERC20Detailed[this] := 0;
[L3893]              __tmp___name_ERC20Detailed[this] := name_s778;
[L3894]              __tmp___symbol_ERC20Detailed[this] := symbol_s778;
[L3895]              __tmp___decimals_ERC20Detailed[this] := decimals_s778;
[L3918]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3919]  COND FALSE  !(revert)
[L4284]  RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L4285]  COND FALSE  !(revert)
[L4288]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3385]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3343]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3328]              assume msgsender_MSG != null;
[L3329]              __tmp__Balance[this] := 0;
[L3343]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3385]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3386]  COND FALSE  !(revert)
[L3389]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3360]              assume msgsender_MSG != null;
[L3361]              __tmp__Balance[this] := 0;
[L3362]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3363]              __tmp__sum__balances0[this] := 0;
[L3364]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L3365]              __tmp__sum__allowed1[this] := 0;
[L3366]              __tmp___totalSupply_ERC20[this] := 0;
[L3389]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3390]  COND FALSE  !(revert)
[L4288]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4289]  COND FALSE  !(revert)
[L4292]  CALL        call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3990]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3343]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3328]              assume msgsender_MSG != null;
[L3329]              __tmp__Balance[this] := 0;
[L3343]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3990]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3991]  COND FALSE  !(revert)
[L3994]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3385]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3343]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3328]              assume msgsender_MSG != null;
[L3329]              __tmp__Balance[this] := 0;
[L3343]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3385]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3386]  COND FALSE  !(revert)
[L3389]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3360]              assume msgsender_MSG != null;
[L3361]              __tmp__Balance[this] := 0;
[L3362]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3363]              __tmp__sum__balances0[this] := 0;
[L3364]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L3365]              __tmp__sum__allowed1[this] := 0;
[L3366]              __tmp___totalSupply_ERC20[this] := 0;
[L3389]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3390]  COND FALSE  !(revert)
[L3994]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3995]  COND FALSE  !(revert)
[L3998]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3975]              assume msgsender_MSG != null;
[L3976]              __tmp__Balance[this] := 0;
[L3998]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3999]  COND FALSE  !(revert)
[L4292]  RET         call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4293]  COND FALSE  !(revert)
[L4296]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3212]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3193]              assume msgsender_MSG != null;
[L3194]              __tmp__Balance[this] := 0;
[L3195]              __tmp___owner_Ownable[this] := null;
[L3197]              __tmp___owner_Ownable[this] := msgsender_MSG;
[L3212]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3213]  COND FALSE  !(revert)
[L4296]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4297]  COND FALSE  !(revert)
[L4300]  CALL        call Stoppable_Stoppable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4144]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3212]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3193]              assume msgsender_MSG != null;
[L3194]              __tmp__Balance[this] := 0;
[L3195]              __tmp___owner_Ownable[this] := null;
[L3197]              __tmp___owner_Ownable[this] := msgsender_MSG;
[L3212]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3213]  COND FALSE  !(revert)
[L4144]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4145]  COND FALSE  !(revert)
[L4148]  CALL        call Stoppable_Stoppable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              __tmp__Balance[this] := 0;
[L4129]              __tmp__stopped_Stoppable[this] := false;
[L4148]  RET         call Stoppable_Stoppable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4149]  COND FALSE  !(revert)
[L4300]  RET         call Stoppable_Stoppable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4301]  COND FALSE  !(revert)
[L4304]  CALL        call EXEToken_EXEToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4219]              assume msgsender_MSG != null;
[L4220]              __tmp__Balance[this] := 0;
[L4221]              __tmp___lockTimes_EXEToken[this] := zeroRefintArr();
[L4222]              __tmp__sum__lockTimes2[this] := 0;
[L4223]              __tmp___lockAmounts_EXEToken[this] := zeroRefintArr();
[L4224]              __tmp__sum__lockAmounts3[this] := 0;
[L4226]  COND TRUE   __tmp__DType[this] == EXEToken
[L4227]  CALL        call __var_23 := owner_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3228]              __ret_0_ := __tmp___owner_Ownable[this];
[L4227]  RET         call __var_23 := owner_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4228]  COND FALSE  !(revert)
[L4234]              __var_24 := decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4235]  COND TRUE   __tmp__DType[this] == EXEToken
[L4236]  CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3715]              __var_15 := null;
[L3716]  COND FALSE  !(!(account_s654 != null))
[L3720]  CALL        call __var_16 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s654);
[L3149]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3150]  COND FALSE  !(!(c_s106 >= a_s106))
[L3154]              __ret_0_ := c_s106;
[L3720]  RET         call __var_16 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s654);
[L3721]  COND FALSE  !(revert)
[L3724]              __tmp___totalSupply_ERC20[this] := __var_16;
[L3725]  CALL        call __var_17 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s654], amount_s654);
[L3149]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3150]  COND FALSE  !(!(c_s106 >= a_s106))
[L3154]              __ret_0_ := c_s106;
[L3725]  RET         call __var_17 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s654], amount_s654);
[L3726]  COND FALSE  !(revert)
[L3729]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s654];
[L3730]              __tmp___balances_ERC20[this][account_s654] := __var_17;
[L3731]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s654];
[L4236]  RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4237]  COND FALSE  !(revert)
[L4304]  RET         call EXEToken_EXEToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4305]  COND FALSE  !(revert)
[L1795]  RET         call EXEToken_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1796]              assume revert || gas < 0;
[L7043]  RET         call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L7044]              assume !revert && gas >= 0;
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND FALSE  !(choice == 16)
[L6926]  COND FALSE  !(choice == 15)
[L6933]  COND TRUE   choice == 14
[L6934]              gas := gas - 21000;
[L6935]  COND TRUE   gas >= 0
[L6936]              assume amount_s1113 >= 0 && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6937]              assume msgvalue_MSG == 0;
[L6938]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s1113 != recipient_s1113 && ((amount_s1113 > _balances_ERC20[this][sender_s1113] || amount_s1113 > _allowed_ERC20[this][sender_s1113][msgsender_MSG]) || _balances_ERC20[this][recipient_s1113] + amount_s1113 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s1113 >= 0) && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1113] >= 0) && _balances_ERC20[this][recipient_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s1113] >= 0) && _balances_ERC20[this][sender_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] >= 0) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_EXEToken0 := true;
[L2]                 call_transferFrom_EXEToken0 := false;
[L2]                 revert := revert_hold;
[L2099]              havoc __exception;
[L2100]              revert := false;
[L2101]  COND FALSE  !(__exception)
[L2128]  CALL        call __ret_0_ := transferFrom~address~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4595]  CALL        call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6067]  COND FALSE  !(!!stopped_Stoppable[this])
[L4595]  RET         call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4596]  COND FALSE  !(revert)
[L4599]  CALL        call __var_31 := _isLocked~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, amount_s1113);
[L4479]  COND TRUE   DType[this] == EXEToken
[L4480]  CALL        call __var_25 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3427]              __ret_0_ := _balances_ERC20[this][owner_s312];
[L4480]  RET         call __var_25 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4481]  COND FALSE  !(revert)
[L4487]  COND TRUE   DType[this] == EXEToken
[L4488]  CALL        call __var_27 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3427]              __ret_0_ := _balances_ERC20[this][owner_s312];
[L4488]  RET         call __var_27 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4489]  COND FALSE  !(revert)
[L4495]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, __var_27, _lockAmounts_EXEToken[this][account_s1055]);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L4495]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, __var_27, _lockAmounts_EXEToken[this][account_s1055]);
[L4496]  COND FALSE  !(revert)
[L4499]              __ret_0_ := ((_lockTimes_EXEToken[this][account_s1055] != 0 && _lockAmounts_EXEToken[this][account_s1055] != 0) && _lockTimes_EXEToken[this][account_s1055] > now) && (__var_25 <= _lockAmounts_EXEToken[this][account_s1055] || __var_26 < amount_s1055);
[L4599]  RET         call __var_31 := _isLocked~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, amount_s1113);
[L4600]  COND FALSE  !(revert)
[L4603]  COND FALSE  !(!!__var_31)
[L4607]  COND TRUE   DType[this] == EXEToken
[L4608]  CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L3589]  COND FALSE  !(!(value_s512 <= _balances_ERC20[this][from_s512]))
[L3593]  COND FALSE  !(!(value_s512 <= _allowed_ERC20[this][from_s512][msgsender_MSG]))
[L3597]              __var_7 := null;
[L3598]  COND FALSE  !(!(to_s512 != null))
[L3602]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s512], value_s512);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L3602]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s512], value_s512);
[L3603]  COND FALSE  !(revert)
[L3606]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s512];
[L3607]              _balances_ERC20[this][from_s512] := __var_8;
[L3608]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s512];
[L3609]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s512], value_s512);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3609]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s512], value_s512);
[L3610]  COND FALSE  !(revert)
[L3613]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s512];
[L3614]              _balances_ERC20[this][to_s512] := __var_9;
[L3615]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s512];
[L3616]  CALL        call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s512][msgsender_MSG], value_s512);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L3616]  RET         call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s512][msgsender_MSG], value_s512);
[L3617]  COND FALSE  !(revert)
[L3620]              sum__allowed1[from_s512] := sum__allowed1[from_s512] - _allowed_ERC20[this][from_s512][msgsender_MSG];
[L3621]              _allowed_ERC20[this][from_s512][msgsender_MSG] := __var_10;
[L3622]              sum__allowed1[from_s512] := sum__allowed1[from_s512] + _allowed_ERC20[this][from_s512][msgsender_MSG];
[L3623]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3624]              __ret_0_ := true;
[L4608]  RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4609]  COND FALSE  !(revert)
[L4615]              __ret_0_ := __var_32;
[L2128]  RET         call __ret_0_ := transferFrom~address~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L2129]              assume !revert && gas >= 0;
[L6938]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L7047]  RET         call CorralChoice_EXEToken(this);

Loop:
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND TRUE   choice == 21
[L6890]              gas := gas - 21000;
[L6891]  COND FALSE  !(gas >= 0)
[L7047]  RET         call CorralChoice_EXEToken(this);

[2020-11-25 16:11:41,550 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:11:41,550 INFO  L82        PathProgramCache]: Analyzing trace with hash -62552975, now seen corresponding path program 1 times
[2020-11-25 16:11:41,551 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:11:41,563 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:11:41,626 INFO  L134       CoverageAnalysis]: Checked inductivity of 154 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 154 trivial. 0 not checked.
[2020-11-25 16:11:41,627 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:11:41,627 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 16:11:41,627 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:11:41,627 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 16:11:41,627 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 16:11:41,627 INFO  L87              Difference]: Start difference. First operand 3982 states and 4369 transitions. cyclomatic complexity: 392 Second operand 4 states.
[2020-11-25 16:11:41,745 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:11:41,745 INFO  L93              Difference]: Finished difference Result 4984 states and 5667 transitions.
[2020-11-25 16:11:41,745 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 16:11:41,745 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4984 states and 5667 transitions.
[2020-11-25 16:11:41,755 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 16:11:41,768 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4984 states to 4810 states and 5486 transitions.
[2020-11-25 16:11:41,768 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1131
[2020-11-25 16:11:41,769 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1131
[2020-11-25 16:11:41,769 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4810 states and 5486 transitions.
[2020-11-25 16:11:41,773 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:11:41,773 INFO  L728         BuchiCegarLoop]: Abstraction has 4810 states and 5486 transitions.
[2020-11-25 16:11:41,776 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4810 states and 5486 transitions.
[2020-11-25 16:11:41,802 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4810 to 3808.
[2020-11-25 16:11:41,802 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3808 states.
[2020-11-25 16:11:41,806 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3808 states to 3808 states and 4187 transitions.
[2020-11-25 16:11:41,806 INFO  L751         BuchiCegarLoop]: Abstraction has 3808 states and 4187 transitions.
[2020-11-25 16:11:41,806 INFO  L631         BuchiCegarLoop]: Abstraction has 3808 states and 4187 transitions.
[2020-11-25 16:11:41,806 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 16:11:41,806 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3808 states and 4187 transitions.
[2020-11-25 16:11:41,809 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:11:41,809 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:11:41,809 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:11:41,811 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:11:41,811 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_EXEToken0 := false;
[L2]                 call_transferFrom_EXEToken0 := false;
[L2]     CALL        call main();
[L7037]              assume null == 0;
[L7038]  CALL        call this := FreshRefGenerator__success();
[L3028]              havoc newRef;
[L3029]              assume Alloc[newRef] == false;
[L3030]              Alloc[newRef] := true;
[L3031]              assume newRef != null;
[L7038]  RET         call this := FreshRefGenerator__success();
[L7039]              assume now >= 0;
[L7040]              assume DType[this] == EXEToken;
[L7041]              assume msgvalue_MSG == 0;
[L7042]              gas := gas - 53000;
[L7043]  CALL        call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1769]              havoc __exception;
[L1770]              revert := false;
[L1771]  COND FALSE  !(__exception)
[L1798]  CALL        call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4314]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4314]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4315]  COND FALSE  !(revert)
[L4318]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L3926]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3926]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3927]  COND FALSE  !(revert)
[L3930]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3901]              assume msgsender_MSG != null;
[L3902]              Balance[this] := 0;
[L3903]              _name_ERC20Detailed[this] := 427332508;
[L3904]              _symbol_ERC20Detailed[this] := 427332508;
[L3905]              _decimals_ERC20Detailed[this] := 0;
[L3907]              _name_ERC20Detailed[this] := name_s778;
[L3908]              _symbol_ERC20Detailed[this] := symbol_s778;
[L3909]              _decimals_ERC20Detailed[this] := decimals_s778;
[L3930]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3931]  COND FALSE  !(revert)
[L4318]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L4319]  COND FALSE  !(revert)
[L4322]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3397]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3373]              assume msgsender_MSG != null;
[L3374]              Balance[this] := 0;
[L3375]              _balances_ERC20[this] := zeroRefintArr();
[L3376]              sum__balances0[this] := 0;
[L3377]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3378]              sum__allowed1[this] := 0;
[L3379]              _totalSupply_ERC20[this] := 0;
[L3401]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L4322]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4323]  COND FALSE  !(revert)
[L4326]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4006]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3397]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3373]              assume msgsender_MSG != null;
[L3374]              Balance[this] := 0;
[L3375]              _balances_ERC20[this] := zeroRefintArr();
[L3376]              sum__balances0[this] := 0;
[L3377]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3378]              sum__allowed1[this] := 0;
[L3379]              _totalSupply_ERC20[this] := 0;
[L3401]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L4010]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4014]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3983]              assume msgsender_MSG != null;
[L3984]              Balance[this] := 0;
[L4014]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4015]  COND FALSE  !(revert)
[L4326]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4327]  COND FALSE  !(revert)
[L4330]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3220]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3203]              assume msgsender_MSG != null;
[L3204]              Balance[this] := 0;
[L3205]              _owner_Ownable[this] := null;
[L3207]              _owner_Ownable[this] := msgsender_MSG;
[L3220]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  COND FALSE  !(revert)
[L4330]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4156]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3220]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3203]              assume msgsender_MSG != null;
[L3204]              Balance[this] := 0;
[L3205]              _owner_Ownable[this] := null;
[L3207]              _owner_Ownable[this] := msgsender_MSG;
[L3220]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  COND FALSE  !(revert)
[L4156]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4157]  COND FALSE  !(revert)
[L4160]  CALL        call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4136]              assume msgsender_MSG != null;
[L4137]              Balance[this] := 0;
[L4138]              stopped_Stoppable[this] := false;
[L4160]  RET         call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4161]  COND FALSE  !(revert)
[L4334]  RET         call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4250]              assume msgsender_MSG != null;
[L4251]              Balance[this] := 0;
[L4252]              _lockTimes_EXEToken[this] := zeroRefintArr();
[L4253]              sum__lockTimes2[this] := 0;
[L4254]              _lockAmounts_EXEToken[this] := zeroRefintArr();
[L4255]              sum__lockAmounts3[this] := 0;
[L4257]  COND TRUE   DType[this] == EXEToken
[L4258]  CALL        call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3234]              __ret_0_ := _owner_Ownable[this];
[L4258]  RET         call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]  COND FALSE  !(revert)
[L4265]              __var_24 := decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4266]  COND TRUE   DType[this] == EXEToken
[L4267]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3739]              __var_15 := null;
[L3740]  COND FALSE  !(!(account_s654 != null))
[L3744]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3744]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3745]  COND FALSE  !(revert)
[L3748]              _totalSupply_ERC20[this] := __var_16;
[L3749]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3749]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3750]  COND FALSE  !(revert)
[L3753]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s654];
[L3754]              _balances_ERC20[this][account_s654] := __var_17;
[L3755]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s654];
[L3756]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4267]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4268]  COND FALSE  !(revert)
[L4338]  RET         call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4339]  COND FALSE  !(revert)
[L1798]  RET         call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1799]              assume !revert && gas >= 0;
[L7043]  RET         call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L7044]              assume !revert && gas >= 0;
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND FALSE  !(choice == 16)
[L6926]  COND FALSE  !(choice == 15)
[L6933]  COND FALSE  !(choice == 14)
[L6940]  COND FALSE  !(choice == 13)
[L6947]  COND FALSE  !(choice == 12)
[L6954]  COND FALSE  !(choice == 11)
[L6960]  COND FALSE  !(choice == 10)
[L6966]  COND FALSE  !(choice == 9)
[L6972]  COND FALSE  !(choice == 8)
[L6979]  COND FALSE  !(choice == 7)
[L6986]  COND FALSE  !(choice == 6)
[L6992]  COND FALSE  !(choice == 5)
[L6998]  COND FALSE  !(choice == 4)
[L7004]  COND FALSE  !(choice == 3)
[L7011]  COND TRUE   choice == 2
[L7012]              gas := gas - 21000;
[L7013]  COND TRUE   gas >= 0
[L7014]              assume releaseTime_s988 >= 0 && releaseTime_s988 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7015]              assume amount_s988 >= 0 && amount_s988 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7016]              assume msgvalue_MSG == 0;
[L7017]  CALL        call setLock~address~uint256~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, account_s988, releaseTime_s988, amount_s988);
[L1905]              havoc __exception;
[L1906]              revert := false;
[L1907]  COND FALSE  !(__exception)
[L1934]  CALL        call setLock~address~uint256~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, account_s988, releaseTime_s988, amount_s988);
[L4418]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6033]  COND TRUE   DType[this] == EXEToken
[L6034]  CALL        call __var_1 := _isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3246]              __ret_0_ := msgsender_MSG == _owner_Ownable[this];
[L6034]  RET         call __var_1 := _isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6035]  COND FALSE  !(revert)
[L6051]  COND FALSE  !(!__var_1)
[L4418]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4419]  COND FALSE  !(revert)
[L4422]              sum__lockTimes2[this] := sum__lockTimes2[this] - _lockTimes_EXEToken[this][account_s988];
[L4423]              _lockTimes_EXEToken[this][account_s988] := releaseTime_s988;
[L4424]              sum__lockTimes2[this] := sum__lockTimes2[this] + _lockTimes_EXEToken[this][account_s988];
[L4425]              sum__lockAmounts3[this] := sum__lockAmounts3[this] - _lockAmounts_EXEToken[this][account_s988];
[L4426]              _lockAmounts_EXEToken[this][account_s988] := amount_s988;
[L4427]              sum__lockAmounts3[this] := sum__lockAmounts3[this] + _lockAmounts_EXEToken[this][account_s988];
[L4428]              assert { :EventEmitted "LockChanged_EXEToken" } true;
[L1934]  RET         call setLock~address~uint256~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, account_s988, releaseTime_s988, amount_s988);
[L1935]              assume !revert && gas >= 0;
[L7017]  RET         call setLock~address~uint256~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, account_s988, releaseTime_s988, amount_s988);
[L7047]  RET         call CorralChoice_EXEToken(this);
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND FALSE  !(choice == 16)
[L6926]  COND FALSE  !(choice == 15)
[L6933]  COND TRUE   choice == 14
[L6934]              gas := gas - 21000;
[L6935]  COND TRUE   gas >= 0
[L6936]              assume amount_s1113 >= 0 && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6937]              assume msgvalue_MSG == 0;
[L6938]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s1113 != recipient_s1113 && ((amount_s1113 > _balances_ERC20[this][sender_s1113] || amount_s1113 > _allowed_ERC20[this][sender_s1113][msgsender_MSG]) || _balances_ERC20[this][recipient_s1113] + amount_s1113 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s1113 >= 0) && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1113] >= 0) && _balances_ERC20[this][recipient_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s1113] >= 0) && _balances_ERC20[this][sender_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] >= 0) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_EXEToken0 := true;
[L2]                 call_transferFrom_EXEToken0 := false;
[L2]                 revert := revert_hold;
[L2099]              havoc __exception;
[L2100]              revert := false;
[L2101]  COND FALSE  !(__exception)
[L2128]  CALL        call __ret_0_ := transferFrom~address~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4595]  CALL        call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6067]  COND FALSE  !(!!stopped_Stoppable[this])
[L4595]  RET         call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4596]  COND FALSE  !(revert)
[L4599]  CALL        call __var_31 := _isLocked~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, amount_s1113);
[L4479]  COND TRUE   DType[this] == EXEToken
[L4480]  CALL        call __var_25 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3427]              __ret_0_ := _balances_ERC20[this][owner_s312];
[L4480]  RET         call __var_25 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4481]  COND FALSE  !(revert)
[L4487]  COND TRUE   DType[this] == EXEToken
[L4488]  CALL        call __var_27 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3427]              __ret_0_ := _balances_ERC20[this][owner_s312];
[L4488]  RET         call __var_27 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4489]  COND FALSE  !(revert)
[L4495]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, __var_27, _lockAmounts_EXEToken[this][account_s1055]);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L4495]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, __var_27, _lockAmounts_EXEToken[this][account_s1055]);
[L4496]  COND FALSE  !(revert)
[L4499]              __ret_0_ := ((_lockTimes_EXEToken[this][account_s1055] != 0 && _lockAmounts_EXEToken[this][account_s1055] != 0) && _lockTimes_EXEToken[this][account_s1055] > now) && (__var_25 <= _lockAmounts_EXEToken[this][account_s1055] || __var_26 < amount_s1055);
[L4599]  RET         call __var_31 := _isLocked~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, amount_s1113);
[L4600]  COND FALSE  !(revert)
[L4603]  COND FALSE  !(!!__var_31)
[L4607]  COND TRUE   DType[this] == EXEToken
[L4608]  CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L3589]  COND FALSE  !(!(value_s512 <= _balances_ERC20[this][from_s512]))
[L3593]  COND FALSE  !(!(value_s512 <= _allowed_ERC20[this][from_s512][msgsender_MSG]))
[L3597]              __var_7 := null;
[L3598]  COND FALSE  !(!(to_s512 != null))
[L3602]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s512], value_s512);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L3602]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s512], value_s512);
[L3603]  COND FALSE  !(revert)
[L3606]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s512];
[L3607]              _balances_ERC20[this][from_s512] := __var_8;
[L3608]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s512];
[L3609]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s512], value_s512);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3609]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s512], value_s512);
[L3610]  COND FALSE  !(revert)
[L3613]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s512];
[L3614]              _balances_ERC20[this][to_s512] := __var_9;
[L3615]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s512];
[L3616]  CALL        call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s512][msgsender_MSG], value_s512);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L3616]  RET         call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s512][msgsender_MSG], value_s512);
[L3617]  COND FALSE  !(revert)
[L3620]              sum__allowed1[from_s512] := sum__allowed1[from_s512] - _allowed_ERC20[this][from_s512][msgsender_MSG];
[L3621]              _allowed_ERC20[this][from_s512][msgsender_MSG] := __var_10;
[L3622]              sum__allowed1[from_s512] := sum__allowed1[from_s512] + _allowed_ERC20[this][from_s512][msgsender_MSG];
[L3623]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3624]              __ret_0_ := true;
[L4608]  RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4609]  COND FALSE  !(revert)
[L4615]              __ret_0_ := __var_32;
[L2128]  RET         call __ret_0_ := transferFrom~address~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L2129]              assume !revert && gas >= 0;
[L6938]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L7047]  RET         call CorralChoice_EXEToken(this);

Loop:
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND FALSE  !(choice == 16)
[L6926]  COND FALSE  !(choice == 15)
[L6933]  COND TRUE   choice == 14
[L6934]              gas := gas - 21000;
[L6935]  COND TRUE   gas >= 0
[L6936]              assume amount_s1113 >= 0 && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6937]              assume msgvalue_MSG == 0;
[L6938]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s1113 != recipient_s1113 && ((amount_s1113 > _balances_ERC20[this][sender_s1113] || amount_s1113 > _allowed_ERC20[this][sender_s1113][msgsender_MSG]) || _balances_ERC20[this][recipient_s1113] + amount_s1113 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s1113 >= 0) && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1113] >= 0) && _balances_ERC20[this][recipient_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s1113] >= 0) && _balances_ERC20[this][sender_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] >= 0) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_EXEToken0 := true;
[L2]                 call_transferFrom_EXEToken0 := false;
[L2]                 revert := revert_hold;
[L2099]              havoc __exception;
[L2100]              revert := false;
[L2101]  COND FALSE  !(__exception)
[L2128]  CALL        call __ret_0_ := transferFrom~address~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4595]  CALL        call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6067]  COND FALSE  !(!!stopped_Stoppable[this])
[L4595]  RET         call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4596]  COND FALSE  !(revert)
[L4599]  CALL        call __var_31 := _isLocked~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, amount_s1113);
[L4479]  COND TRUE   DType[this] == EXEToken
[L4480]  CALL        call __var_25 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3427]              __ret_0_ := _balances_ERC20[this][owner_s312];
[L4480]  RET         call __var_25 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4481]  COND FALSE  !(revert)
[L4487]  COND TRUE   DType[this] == EXEToken
[L4488]  CALL        call __var_27 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3427]              __ret_0_ := _balances_ERC20[this][owner_s312];
[L4488]  RET         call __var_27 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4489]  COND FALSE  !(revert)
[L4495]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, __var_27, _lockAmounts_EXEToken[this][account_s1055]);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L4495]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, __var_27, _lockAmounts_EXEToken[this][account_s1055]);
[L4496]  COND FALSE  !(revert)
[L4499]              __ret_0_ := ((_lockTimes_EXEToken[this][account_s1055] != 0 && _lockAmounts_EXEToken[this][account_s1055] != 0) && _lockTimes_EXEToken[this][account_s1055] > now) && (__var_25 <= _lockAmounts_EXEToken[this][account_s1055] || __var_26 < amount_s1055);
[L4599]  RET         call __var_31 := _isLocked~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, amount_s1113);
[L4600]  COND FALSE  !(revert)
[L4603]  COND FALSE  !(!!__var_31)
[L4607]  COND TRUE   DType[this] == EXEToken
[L4608]  CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L3589]  COND FALSE  !(!(value_s512 <= _balances_ERC20[this][from_s512]))
[L3593]  COND FALSE  !(!(value_s512 <= _allowed_ERC20[this][from_s512][msgsender_MSG]))
[L3597]              __var_7 := null;
[L3598]  COND FALSE  !(!(to_s512 != null))
[L3602]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s512], value_s512);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L3602]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s512], value_s512);
[L3603]  COND FALSE  !(revert)
[L3606]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s512];
[L3607]              _balances_ERC20[this][from_s512] := __var_8;
[L3608]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s512];
[L3609]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s512], value_s512);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3609]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s512], value_s512);
[L3610]  COND FALSE  !(revert)
[L3613]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s512];
[L3614]              _balances_ERC20[this][to_s512] := __var_9;
[L3615]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s512];
[L3616]  CALL        call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s512][msgsender_MSG], value_s512);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L3616]  RET         call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s512][msgsender_MSG], value_s512);
[L3617]  COND FALSE  !(revert)
[L3620]              sum__allowed1[from_s512] := sum__allowed1[from_s512] - _allowed_ERC20[this][from_s512][msgsender_MSG];
[L3621]              _allowed_ERC20[this][from_s512][msgsender_MSG] := __var_10;
[L3622]              sum__allowed1[from_s512] := sum__allowed1[from_s512] + _allowed_ERC20[this][from_s512][msgsender_MSG];
[L3623]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3624]              __ret_0_ := true;
[L4608]  RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4609]  COND FALSE  !(revert)
[L4615]              __ret_0_ := __var_32;
[L2128]  RET         call __ret_0_ := transferFrom~address~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L2129]              assume !revert && gas >= 0;
[L6938]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L7047]  RET         call CorralChoice_EXEToken(this);

[2020-11-25 16:11:41,816 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:11:41,817 INFO  L82        PathProgramCache]: Analyzing trace with hash -815137668, now seen corresponding path program 1 times
[2020-11-25 16:11:41,817 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:11:41,835 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:11:42,006 INFO  L134       CoverageAnalysis]: Checked inductivity of 230 backedges. 16 proven. 0 refuted. 0 times theorem prover too weak. 214 trivial. 0 not checked.
[2020-11-25 16:11:42,006 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:11:42,007 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [15] imperfect sequences [] total 15
[2020-11-25 16:11:42,007 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:11:42,007 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-25 16:11:42,007 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=30, Invalid=210, Unknown=0, NotChecked=0, Total=240
[2020-11-25 16:11:42,007 INFO  L87              Difference]: Start difference. First operand 3808 states and 4187 transitions. cyclomatic complexity: 384 Second operand 16 states.
[2020-11-25 16:11:44,110 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:11:44,110 INFO  L93              Difference]: Finished difference Result 3861 states and 4249 transitions.
[2020-11-25 16:11:44,110 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-11-25 16:11:44,110 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3861 states and 4249 transitions.
[2020-11-25 16:11:44,117 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:11:44,125 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3861 states to 3861 states and 4249 transitions.
[2020-11-25 16:11:44,125 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 923
[2020-11-25 16:11:44,125 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 923
[2020-11-25 16:11:44,125 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3861 states and 4249 transitions.
[2020-11-25 16:11:44,127 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:11:44,127 INFO  L728         BuchiCegarLoop]: Abstraction has 3861 states and 4249 transitions.
[2020-11-25 16:11:44,133 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3861 states and 4249 transitions.
[2020-11-25 16:11:44,154 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3861 to 3808.
[2020-11-25 16:11:44,154 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3808 states.
[2020-11-25 16:11:44,158 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3808 states to 3808 states and 4187 transitions.
[2020-11-25 16:11:44,158 INFO  L751         BuchiCegarLoop]: Abstraction has 3808 states and 4187 transitions.
[2020-11-25 16:11:44,158 INFO  L631         BuchiCegarLoop]: Abstraction has 3808 states and 4187 transitions.
[2020-11-25 16:11:44,158 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 16:11:44,158 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3808 states and 4187 transitions.
[2020-11-25 16:11:44,162 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:11:44,162 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:11:44,162 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:11:44,163 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:11:44,163 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_EXEToken0 := false;
[L2]                 call_transferFrom_EXEToken0 := false;
[L2]     CALL        call main();
[L7037]              assume null == 0;
[L7038]  CALL        call this := FreshRefGenerator__success();
[L3028]              havoc newRef;
[L3029]              assume Alloc[newRef] == false;
[L3030]              Alloc[newRef] := true;
[L3031]              assume newRef != null;
[L7038]  RET         call this := FreshRefGenerator__success();
[L7039]              assume now >= 0;
[L7040]              assume DType[this] == EXEToken;
[L7041]              assume msgvalue_MSG == 0;
[L7042]              gas := gas - 53000;
[L7043]  CALL        call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1769]              havoc __exception;
[L1770]              revert := false;
[L1771]  COND FALSE  !(__exception)
[L1798]  CALL        call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4314]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4314]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4315]  COND FALSE  !(revert)
[L4318]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L3926]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3926]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3927]  COND FALSE  !(revert)
[L3930]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3901]              assume msgsender_MSG != null;
[L3902]              Balance[this] := 0;
[L3903]              _name_ERC20Detailed[this] := 427332508;
[L3904]              _symbol_ERC20Detailed[this] := 427332508;
[L3905]              _decimals_ERC20Detailed[this] := 0;
[L3907]              _name_ERC20Detailed[this] := name_s778;
[L3908]              _symbol_ERC20Detailed[this] := symbol_s778;
[L3909]              _decimals_ERC20Detailed[this] := decimals_s778;
[L3930]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3931]  COND FALSE  !(revert)
[L4318]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L4319]  COND FALSE  !(revert)
[L4322]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3397]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3373]              assume msgsender_MSG != null;
[L3374]              Balance[this] := 0;
[L3375]              _balances_ERC20[this] := zeroRefintArr();
[L3376]              sum__balances0[this] := 0;
[L3377]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3378]              sum__allowed1[this] := 0;
[L3379]              _totalSupply_ERC20[this] := 0;
[L3401]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L4322]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4323]  COND FALSE  !(revert)
[L4326]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4006]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3397]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3373]              assume msgsender_MSG != null;
[L3374]              Balance[this] := 0;
[L3375]              _balances_ERC20[this] := zeroRefintArr();
[L3376]              sum__balances0[this] := 0;
[L3377]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3378]              sum__allowed1[this] := 0;
[L3379]              _totalSupply_ERC20[this] := 0;
[L3401]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L4010]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4014]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3983]              assume msgsender_MSG != null;
[L3984]              Balance[this] := 0;
[L4014]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4015]  COND FALSE  !(revert)
[L4326]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4327]  COND FALSE  !(revert)
[L4330]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3220]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3203]              assume msgsender_MSG != null;
[L3204]              Balance[this] := 0;
[L3205]              _owner_Ownable[this] := null;
[L3207]              _owner_Ownable[this] := msgsender_MSG;
[L3220]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  COND FALSE  !(revert)
[L4330]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4156]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3220]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3203]              assume msgsender_MSG != null;
[L3204]              Balance[this] := 0;
[L3205]              _owner_Ownable[this] := null;
[L3207]              _owner_Ownable[this] := msgsender_MSG;
[L3220]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  COND FALSE  !(revert)
[L4156]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4157]  COND FALSE  !(revert)
[L4160]  CALL        call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4136]              assume msgsender_MSG != null;
[L4137]              Balance[this] := 0;
[L4138]              stopped_Stoppable[this] := false;
[L4160]  RET         call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4161]  COND FALSE  !(revert)
[L4334]  RET         call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4250]              assume msgsender_MSG != null;
[L4251]              Balance[this] := 0;
[L4252]              _lockTimes_EXEToken[this] := zeroRefintArr();
[L4253]              sum__lockTimes2[this] := 0;
[L4254]              _lockAmounts_EXEToken[this] := zeroRefintArr();
[L4255]              sum__lockAmounts3[this] := 0;
[L4257]  COND TRUE   DType[this] == EXEToken
[L4258]  CALL        call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3234]              __ret_0_ := _owner_Ownable[this];
[L4258]  RET         call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]  COND FALSE  !(revert)
[L4265]              __var_24 := decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4266]  COND TRUE   DType[this] == EXEToken
[L4267]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3739]              __var_15 := null;
[L3740]  COND FALSE  !(!(account_s654 != null))
[L3744]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3744]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3745]  COND FALSE  !(revert)
[L3748]              _totalSupply_ERC20[this] := __var_16;
[L3749]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3749]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3750]  COND FALSE  !(revert)
[L3753]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s654];
[L3754]              _balances_ERC20[this][account_s654] := __var_17;
[L3755]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s654];
[L3756]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4267]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4268]  COND FALSE  !(revert)
[L4338]  RET         call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4339]  COND FALSE  !(revert)
[L1798]  RET         call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1799]              assume !revert && gas >= 0;
[L7043]  RET         call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L7044]              assume !revert && gas >= 0;
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND FALSE  !(choice == 16)
[L6926]  COND FALSE  !(choice == 15)
[L6933]  COND FALSE  !(choice == 14)
[L6940]  COND FALSE  !(choice == 13)
[L6947]  COND FALSE  !(choice == 12)
[L6954]  COND FALSE  !(choice == 11)
[L6960]  COND FALSE  !(choice == 10)
[L6966]  COND FALSE  !(choice == 9)
[L6972]  COND FALSE  !(choice == 8)
[L6979]  COND TRUE   choice == 7
[L6980]              gas := gas - 21000;
[L6981]  COND TRUE   gas >= 0
[L6982]              assume value_s830 >= 0 && value_s830 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6983]              assume msgvalue_MSG == 0;
[L6984]  CALL        call burnFrom~address~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, from_s830, value_s830);
[L1420]              havoc __exception;
[L1421]              revert := false;
[L1422]  COND FALSE  !(__exception)
[L1449]  CALL        call burnFrom~address~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, from_s830, value_s830);
[L4073]  COND TRUE   DType[this] == EXEToken
[L4074]  CALL        call _burnFrom~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s830, value_s830);
[L3853]  COND FALSE  !(!(amount_s747 <= _allowed_ERC20[this][account_s747][msgsender_MSG]))
[L3857]  CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][account_s747][msgsender_MSG], amount_s747);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L3857]  RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][account_s747][msgsender_MSG], amount_s747);
[L3858]  COND FALSE  !(revert)
[L3861]              sum__allowed1[account_s747] := sum__allowed1[account_s747] - _allowed_ERC20[this][account_s747][msgsender_MSG];
[L3862]              _allowed_ERC20[this][account_s747][msgsender_MSG] := __var_21;
[L3863]              sum__allowed1[account_s747] := sum__allowed1[account_s747] + _allowed_ERC20[this][account_s747][msgsender_MSG];
[L3864]  COND TRUE   DType[this] == EXEToken
[L3865]  CALL        call _burn~address~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, account_s747, amount_s747);
[L4109]  COND FALSE  !(DType[this] == EXEToken)
[L4114]  COND TRUE   DType[this] == ERC20Burnable
[L4115]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, who_s845, value_s845);
[L3792]              __var_18 := null;
[L3793]  COND FALSE  !(!(account_s705 != null))
[L3797]  COND FALSE  !(!(amount_s705 <= _balances_ERC20[this][account_s705]))
[L3801]  CALL        call __var_19 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s705);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L3801]  RET         call __var_19 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s705);
[L3802]  COND FALSE  !(revert)
[L3805]              _totalSupply_ERC20[this] := __var_19;
[L3806]  CALL        call __var_20 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s705], amount_s705);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L3806]  RET         call __var_20 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s705], amount_s705);
[L3807]  COND FALSE  !(revert)
[L3810]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s705];
[L3811]              _balances_ERC20[this][account_s705] := __var_20;
[L3812]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s705];
[L3813]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4115]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, who_s845, value_s845);
[L4116]  COND FALSE  !(revert)
[L3865]  RET         call _burn~address~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, account_s747, amount_s747);
[L3866]  COND FALSE  !(revert)
[L4074]  RET         call _burnFrom~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s830, value_s830);
[L4075]  COND FALSE  !(revert)
[L1449]  RET         call burnFrom~address~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, from_s830, value_s830);
[L1450]              assume !revert && gas >= 0;
[L6984]  RET         call burnFrom~address~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, from_s830, value_s830);
[L7047]  RET         call CorralChoice_EXEToken(this);
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND FALSE  !(choice == 16)
[L6926]  COND FALSE  !(choice == 15)
[L6933]  COND TRUE   choice == 14
[L6934]              gas := gas - 21000;
[L6935]  COND TRUE   gas >= 0
[L6936]              assume amount_s1113 >= 0 && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6937]              assume msgvalue_MSG == 0;
[L6938]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s1113 != recipient_s1113 && ((amount_s1113 > _balances_ERC20[this][sender_s1113] || amount_s1113 > _allowed_ERC20[this][sender_s1113][msgsender_MSG]) || _balances_ERC20[this][recipient_s1113] + amount_s1113 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s1113 >= 0) && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1113] >= 0) && _balances_ERC20[this][recipient_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s1113] >= 0) && _balances_ERC20[this][sender_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] >= 0) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_EXEToken0 := true;
[L2]                 call_transferFrom_EXEToken0 := false;
[L2]                 revert := revert_hold;
[L2099]              havoc __exception;
[L2100]              revert := false;
[L2101]  COND FALSE  !(__exception)
[L2128]  CALL        call __ret_0_ := transferFrom~address~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4595]  CALL        call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6067]  COND FALSE  !(!!stopped_Stoppable[this])
[L4595]  RET         call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4596]  COND FALSE  !(revert)
[L4599]  CALL        call __var_31 := _isLocked~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, amount_s1113);
[L4479]  COND TRUE   DType[this] == EXEToken
[L4480]  CALL        call __var_25 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3427]              __ret_0_ := _balances_ERC20[this][owner_s312];
[L4480]  RET         call __var_25 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4481]  COND FALSE  !(revert)
[L4487]  COND TRUE   DType[this] == EXEToken
[L4488]  CALL        call __var_27 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3427]              __ret_0_ := _balances_ERC20[this][owner_s312];
[L4488]  RET         call __var_27 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4489]  COND FALSE  !(revert)
[L4495]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, __var_27, _lockAmounts_EXEToken[this][account_s1055]);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L4495]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, __var_27, _lockAmounts_EXEToken[this][account_s1055]);
[L4496]  COND FALSE  !(revert)
[L4499]              __ret_0_ := ((_lockTimes_EXEToken[this][account_s1055] != 0 && _lockAmounts_EXEToken[this][account_s1055] != 0) && _lockTimes_EXEToken[this][account_s1055] > now) && (__var_25 <= _lockAmounts_EXEToken[this][account_s1055] || __var_26 < amount_s1055);
[L4599]  RET         call __var_31 := _isLocked~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, amount_s1113);
[L4600]  COND FALSE  !(revert)
[L4603]  COND FALSE  !(!!__var_31)
[L4607]  COND TRUE   DType[this] == EXEToken
[L4608]  CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L3589]  COND FALSE  !(!(value_s512 <= _balances_ERC20[this][from_s512]))
[L3593]  COND FALSE  !(!(value_s512 <= _allowed_ERC20[this][from_s512][msgsender_MSG]))
[L3597]              __var_7 := null;
[L3598]  COND FALSE  !(!(to_s512 != null))
[L3602]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s512], value_s512);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L3602]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s512], value_s512);
[L3603]  COND FALSE  !(revert)
[L3606]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s512];
[L3607]              _balances_ERC20[this][from_s512] := __var_8;
[L3608]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s512];
[L3609]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s512], value_s512);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3609]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s512], value_s512);
[L3610]  COND FALSE  !(revert)
[L3613]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s512];
[L3614]              _balances_ERC20[this][to_s512] := __var_9;
[L3615]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s512];
[L3616]  CALL        call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s512][msgsender_MSG], value_s512);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L3616]  RET         call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s512][msgsender_MSG], value_s512);
[L3617]  COND FALSE  !(revert)
[L3620]              sum__allowed1[from_s512] := sum__allowed1[from_s512] - _allowed_ERC20[this][from_s512][msgsender_MSG];
[L3621]              _allowed_ERC20[this][from_s512][msgsender_MSG] := __var_10;
[L3622]              sum__allowed1[from_s512] := sum__allowed1[from_s512] + _allowed_ERC20[this][from_s512][msgsender_MSG];
[L3623]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3624]              __ret_0_ := true;
[L4608]  RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4609]  COND FALSE  !(revert)
[L4615]              __ret_0_ := __var_32;
[L2128]  RET         call __ret_0_ := transferFrom~address~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L2129]              assume !revert && gas >= 0;
[L6938]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L7047]  RET         call CorralChoice_EXEToken(this);

Loop:
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND TRUE   choice == 21
[L6890]              gas := gas - 21000;
[L6891]  COND FALSE  !(gas >= 0)
[L7047]  RET         call CorralChoice_EXEToken(this);

[2020-11-25 16:11:44,168 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:11:44,168 INFO  L82        PathProgramCache]: Analyzing trace with hash -1819401583, now seen corresponding path program 1 times
[2020-11-25 16:11:44,169 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:11:44,188 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:11:44,315 INFO  L134       CoverageAnalysis]: Checked inductivity of 245 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 244 trivial. 0 not checked.
[2020-11-25 16:11:44,315 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:11:44,315 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 16:11:44,316 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:11:44,316 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 16:11:44,316 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 16:11:44,316 INFO  L87              Difference]: Start difference. First operand 3808 states and 4187 transitions. cyclomatic complexity: 384 Second operand 8 states.
[2020-11-25 16:11:44,394 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:11:44,395 INFO  L93              Difference]: Finished difference Result 3860 states and 4243 transitions.
[2020-11-25 16:11:44,395 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 16:11:44,395 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3860 states and 4243 transitions.
[2020-11-25 16:11:44,401 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:11:44,408 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3860 states to 3782 states and 4151 transitions.
[2020-11-25 16:11:44,408 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 905
[2020-11-25 16:11:44,408 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 905
[2020-11-25 16:11:44,408 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3782 states and 4151 transitions.
[2020-11-25 16:11:44,410 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:11:44,410 INFO  L728         BuchiCegarLoop]: Abstraction has 3782 states and 4151 transitions.
[2020-11-25 16:11:44,413 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3782 states and 4151 transitions.
[2020-11-25 16:11:44,430 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3782 to 3782.
[2020-11-25 16:11:44,430 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3782 states.
[2020-11-25 16:11:44,434 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3782 states to 3782 states and 4151 transitions.
[2020-11-25 16:11:44,434 INFO  L751         BuchiCegarLoop]: Abstraction has 3782 states and 4151 transitions.
[2020-11-25 16:11:44,434 INFO  L631         BuchiCegarLoop]: Abstraction has 3782 states and 4151 transitions.
[2020-11-25 16:11:44,434 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 16:11:44,434 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3782 states and 4151 transitions.
[2020-11-25 16:11:44,437 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:11:44,437 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:11:44,437 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:11:44,439 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:11:44,439 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_EXEToken0 := false;
[L2]                 call_transferFrom_EXEToken0 := false;
[L2]     CALL        call main();
[L7037]              assume null == 0;
[L7038]  CALL        call this := FreshRefGenerator__success();
[L3028]              havoc newRef;
[L3029]              assume Alloc[newRef] == false;
[L3030]              Alloc[newRef] := true;
[L3031]              assume newRef != null;
[L7038]  RET         call this := FreshRefGenerator__success();
[L7039]              assume now >= 0;
[L7040]              assume DType[this] == EXEToken;
[L7041]              assume msgvalue_MSG == 0;
[L7042]              gas := gas - 53000;
[L7043]  CALL        call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1769]              havoc __exception;
[L1770]              revert := false;
[L1771]  COND FALSE  !(__exception)
[L1798]  CALL        call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4314]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4314]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4315]  COND FALSE  !(revert)
[L4318]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L3926]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3926]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3927]  COND FALSE  !(revert)
[L3930]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3901]              assume msgsender_MSG != null;
[L3902]              Balance[this] := 0;
[L3903]              _name_ERC20Detailed[this] := 427332508;
[L3904]              _symbol_ERC20Detailed[this] := 427332508;
[L3905]              _decimals_ERC20Detailed[this] := 0;
[L3907]              _name_ERC20Detailed[this] := name_s778;
[L3908]              _symbol_ERC20Detailed[this] := symbol_s778;
[L3909]              _decimals_ERC20Detailed[this] := decimals_s778;
[L3930]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3931]  COND FALSE  !(revert)
[L4318]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L4319]  COND FALSE  !(revert)
[L4322]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3397]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3373]              assume msgsender_MSG != null;
[L3374]              Balance[this] := 0;
[L3375]              _balances_ERC20[this] := zeroRefintArr();
[L3376]              sum__balances0[this] := 0;
[L3377]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3378]              sum__allowed1[this] := 0;
[L3379]              _totalSupply_ERC20[this] := 0;
[L3401]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L4322]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4323]  COND FALSE  !(revert)
[L4326]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4006]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3397]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3373]              assume msgsender_MSG != null;
[L3374]              Balance[this] := 0;
[L3375]              _balances_ERC20[this] := zeroRefintArr();
[L3376]              sum__balances0[this] := 0;
[L3377]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3378]              sum__allowed1[this] := 0;
[L3379]              _totalSupply_ERC20[this] := 0;
[L3401]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L4010]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4014]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3983]              assume msgsender_MSG != null;
[L3984]              Balance[this] := 0;
[L4014]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4015]  COND FALSE  !(revert)
[L4326]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4327]  COND FALSE  !(revert)
[L4330]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3220]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3203]              assume msgsender_MSG != null;
[L3204]              Balance[this] := 0;
[L3205]              _owner_Ownable[this] := null;
[L3207]              _owner_Ownable[this] := msgsender_MSG;
[L3220]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  COND FALSE  !(revert)
[L4330]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4156]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3220]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3203]              assume msgsender_MSG != null;
[L3204]              Balance[this] := 0;
[L3205]              _owner_Ownable[this] := null;
[L3207]              _owner_Ownable[this] := msgsender_MSG;
[L3220]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  COND FALSE  !(revert)
[L4156]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4157]  COND FALSE  !(revert)
[L4160]  CALL        call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4136]              assume msgsender_MSG != null;
[L4137]              Balance[this] := 0;
[L4138]              stopped_Stoppable[this] := false;
[L4160]  RET         call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4161]  COND FALSE  !(revert)
[L4334]  RET         call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4250]              assume msgsender_MSG != null;
[L4251]              Balance[this] := 0;
[L4252]              _lockTimes_EXEToken[this] := zeroRefintArr();
[L4253]              sum__lockTimes2[this] := 0;
[L4254]              _lockAmounts_EXEToken[this] := zeroRefintArr();
[L4255]              sum__lockAmounts3[this] := 0;
[L4257]  COND TRUE   DType[this] == EXEToken
[L4258]  CALL        call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3234]              __ret_0_ := _owner_Ownable[this];
[L4258]  RET         call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]  COND FALSE  !(revert)
[L4265]              __var_24 := decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4266]  COND TRUE   DType[this] == EXEToken
[L4267]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3739]              __var_15 := null;
[L3740]  COND FALSE  !(!(account_s654 != null))
[L3744]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3744]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3745]  COND FALSE  !(revert)
[L3748]              _totalSupply_ERC20[this] := __var_16;
[L3749]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3749]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3750]  COND FALSE  !(revert)
[L3753]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s654];
[L3754]              _balances_ERC20[this][account_s654] := __var_17;
[L3755]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s654];
[L3756]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4267]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4268]  COND FALSE  !(revert)
[L4338]  RET         call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4339]  COND FALSE  !(revert)
[L1798]  RET         call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1799]              assume !revert && gas >= 0;
[L7043]  RET         call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L7044]              assume !revert && gas >= 0;
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND FALSE  !(choice == 16)
[L6926]  COND FALSE  !(choice == 15)
[L6933]  COND FALSE  !(choice == 14)
[L6940]  COND FALSE  !(choice == 13)
[L6947]  COND FALSE  !(choice == 12)
[L6954]  COND FALSE  !(choice == 11)
[L6960]  COND FALSE  !(choice == 10)
[L6966]  COND FALSE  !(choice == 9)
[L6972]  COND FALSE  !(choice == 8)
[L6979]  COND TRUE   choice == 7
[L6980]              gas := gas - 21000;
[L6981]  COND TRUE   gas >= 0
[L6982]              assume value_s830 >= 0 && value_s830 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6983]              assume msgvalue_MSG == 0;
[L6984]  CALL        call burnFrom~address~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, from_s830, value_s830);
[L1420]              havoc __exception;
[L1421]              revert := false;
[L1422]  COND FALSE  !(__exception)
[L1449]  CALL        call burnFrom~address~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, from_s830, value_s830);
[L4073]  COND TRUE   DType[this] == EXEToken
[L4074]  CALL        call _burnFrom~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s830, value_s830);
[L3853]  COND FALSE  !(!(amount_s747 <= _allowed_ERC20[this][account_s747][msgsender_MSG]))
[L3857]  CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][account_s747][msgsender_MSG], amount_s747);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L3857]  RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][account_s747][msgsender_MSG], amount_s747);
[L3858]  COND FALSE  !(revert)
[L3861]              sum__allowed1[account_s747] := sum__allowed1[account_s747] - _allowed_ERC20[this][account_s747][msgsender_MSG];
[L3862]              _allowed_ERC20[this][account_s747][msgsender_MSG] := __var_21;
[L3863]              sum__allowed1[account_s747] := sum__allowed1[account_s747] + _allowed_ERC20[this][account_s747][msgsender_MSG];
[L3864]  COND TRUE   DType[this] == EXEToken
[L3865]  CALL        call _burn~address~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, account_s747, amount_s747);
[L4109]  COND TRUE   DType[this] == EXEToken
[L4110]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, who_s845, value_s845);
[L3792]              __var_18 := null;
[L3793]  COND FALSE  !(!(account_s705 != null))
[L3797]  COND FALSE  !(!(amount_s705 <= _balances_ERC20[this][account_s705]))
[L3801]  CALL        call __var_19 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s705);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L3801]  RET         call __var_19 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s705);
[L3802]  COND FALSE  !(revert)
[L3805]              _totalSupply_ERC20[this] := __var_19;
[L3806]  CALL        call __var_20 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s705], amount_s705);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L3806]  RET         call __var_20 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s705], amount_s705);
[L3807]  COND FALSE  !(revert)
[L3810]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s705];
[L3811]              _balances_ERC20[this][account_s705] := __var_20;
[L3812]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s705];
[L3813]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4110]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, who_s845, value_s845);
[L4111]  COND FALSE  !(revert)
[L3865]  RET         call _burn~address~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, account_s747, amount_s747);
[L3866]  COND FALSE  !(revert)
[L4074]  RET         call _burnFrom~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s830, value_s830);
[L4075]  COND FALSE  !(revert)
[L1449]  RET         call burnFrom~address~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, from_s830, value_s830);
[L1450]              assume !revert && gas >= 0;
[L6984]  RET         call burnFrom~address~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, from_s830, value_s830);
[L7047]  RET         call CorralChoice_EXEToken(this);
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND FALSE  !(choice == 16)
[L6926]  COND FALSE  !(choice == 15)
[L6933]  COND TRUE   choice == 14
[L6934]              gas := gas - 21000;
[L6935]  COND TRUE   gas >= 0
[L6936]              assume amount_s1113 >= 0 && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6937]              assume msgvalue_MSG == 0;
[L6938]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s1113 != recipient_s1113 && ((amount_s1113 > _balances_ERC20[this][sender_s1113] || amount_s1113 > _allowed_ERC20[this][sender_s1113][msgsender_MSG]) || _balances_ERC20[this][recipient_s1113] + amount_s1113 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s1113 >= 0) && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1113] >= 0) && _balances_ERC20[this][recipient_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s1113] >= 0) && _balances_ERC20[this][sender_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] >= 0) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_EXEToken0 := true;
[L2]                 call_transferFrom_EXEToken0 := false;
[L2]                 revert := revert_hold;
[L2099]              havoc __exception;
[L2100]              revert := false;
[L2101]  COND FALSE  !(__exception)
[L2128]  CALL        call __ret_0_ := transferFrom~address~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4595]  CALL        call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6067]  COND FALSE  !(!!stopped_Stoppable[this])
[L4595]  RET         call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4596]  COND FALSE  !(revert)
[L4599]  CALL        call __var_31 := _isLocked~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, amount_s1113);
[L4479]  COND TRUE   DType[this] == EXEToken
[L4480]  CALL        call __var_25 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3427]              __ret_0_ := _balances_ERC20[this][owner_s312];
[L4480]  RET         call __var_25 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4481]  COND FALSE  !(revert)
[L4487]  COND TRUE   DType[this] == EXEToken
[L4488]  CALL        call __var_27 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3427]              __ret_0_ := _balances_ERC20[this][owner_s312];
[L4488]  RET         call __var_27 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4489]  COND FALSE  !(revert)
[L4495]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, __var_27, _lockAmounts_EXEToken[this][account_s1055]);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L4495]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, __var_27, _lockAmounts_EXEToken[this][account_s1055]);
[L4496]  COND FALSE  !(revert)
[L4499]              __ret_0_ := ((_lockTimes_EXEToken[this][account_s1055] != 0 && _lockAmounts_EXEToken[this][account_s1055] != 0) && _lockTimes_EXEToken[this][account_s1055] > now) && (__var_25 <= _lockAmounts_EXEToken[this][account_s1055] || __var_26 < amount_s1055);
[L4599]  RET         call __var_31 := _isLocked~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, amount_s1113);
[L4600]  COND FALSE  !(revert)
[L4603]  COND FALSE  !(!!__var_31)
[L4607]  COND TRUE   DType[this] == EXEToken
[L4608]  CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L3589]  COND FALSE  !(!(value_s512 <= _balances_ERC20[this][from_s512]))
[L3593]  COND FALSE  !(!(value_s512 <= _allowed_ERC20[this][from_s512][msgsender_MSG]))
[L3597]              __var_7 := null;
[L3598]  COND FALSE  !(!(to_s512 != null))
[L3602]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s512], value_s512);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L3602]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s512], value_s512);
[L3603]  COND FALSE  !(revert)
[L3606]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s512];
[L3607]              _balances_ERC20[this][from_s512] := __var_8;
[L3608]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s512];
[L3609]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s512], value_s512);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3609]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s512], value_s512);
[L3610]  COND FALSE  !(revert)
[L3613]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s512];
[L3614]              _balances_ERC20[this][to_s512] := __var_9;
[L3615]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s512];
[L3616]  CALL        call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s512][msgsender_MSG], value_s512);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L3616]  RET         call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s512][msgsender_MSG], value_s512);
[L3617]  COND FALSE  !(revert)
[L3620]              sum__allowed1[from_s512] := sum__allowed1[from_s512] - _allowed_ERC20[this][from_s512][msgsender_MSG];
[L3621]              _allowed_ERC20[this][from_s512][msgsender_MSG] := __var_10;
[L3622]              sum__allowed1[from_s512] := sum__allowed1[from_s512] + _allowed_ERC20[this][from_s512][msgsender_MSG];
[L3623]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3624]              __ret_0_ := true;
[L4608]  RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4609]  COND FALSE  !(revert)
[L4615]              __ret_0_ := __var_32;
[L2128]  RET         call __ret_0_ := transferFrom~address~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L2129]              assume !revert && gas >= 0;
[L6938]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L7047]  RET         call CorralChoice_EXEToken(this);

Loop:
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND FALSE  !(choice == 16)
[L6926]  COND FALSE  !(choice == 15)
[L6933]  COND TRUE   choice == 14
[L6934]              gas := gas - 21000;
[L6935]  COND TRUE   gas >= 0
[L6936]              assume amount_s1113 >= 0 && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6937]              assume msgvalue_MSG == 0;
[L6938]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s1113 != recipient_s1113 && ((amount_s1113 > _balances_ERC20[this][sender_s1113] || amount_s1113 > _allowed_ERC20[this][sender_s1113][msgsender_MSG]) || _balances_ERC20[this][recipient_s1113] + amount_s1113 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s1113 >= 0) && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1113] >= 0) && _balances_ERC20[this][recipient_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s1113] >= 0) && _balances_ERC20[this][sender_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] >= 0) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_EXEToken0 := true;
[L2]                 call_transferFrom_EXEToken0 := false;
[L2]                 revert := revert_hold;
[L2099]              havoc __exception;
[L2100]              revert := false;
[L2101]  COND FALSE  !(__exception)
[L2128]  CALL        call __ret_0_ := transferFrom~address~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4595]  CALL        call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6067]  COND FALSE  !(!!stopped_Stoppable[this])
[L4595]  RET         call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4596]  COND FALSE  !(revert)
[L4599]  CALL        call __var_31 := _isLocked~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, amount_s1113);
[L4479]  COND TRUE   DType[this] == EXEToken
[L4480]  CALL        call __var_25 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3427]              __ret_0_ := _balances_ERC20[this][owner_s312];
[L4480]  RET         call __var_25 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4481]  COND FALSE  !(revert)
[L4487]  COND TRUE   DType[this] == EXEToken
[L4488]  CALL        call __var_27 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3427]              __ret_0_ := _balances_ERC20[this][owner_s312];
[L4488]  RET         call __var_27 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4489]  COND FALSE  !(revert)
[L4495]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, __var_27, _lockAmounts_EXEToken[this][account_s1055]);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L4495]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, __var_27, _lockAmounts_EXEToken[this][account_s1055]);
[L4496]  COND FALSE  !(revert)
[L4499]              __ret_0_ := ((_lockTimes_EXEToken[this][account_s1055] != 0 && _lockAmounts_EXEToken[this][account_s1055] != 0) && _lockTimes_EXEToken[this][account_s1055] > now) && (__var_25 <= _lockAmounts_EXEToken[this][account_s1055] || __var_26 < amount_s1055);
[L4599]  RET         call __var_31 := _isLocked~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, amount_s1113);
[L4600]  COND FALSE  !(revert)
[L4603]  COND FALSE  !(!!__var_31)
[L4607]  COND TRUE   DType[this] == EXEToken
[L4608]  CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L3589]  COND FALSE  !(!(value_s512 <= _balances_ERC20[this][from_s512]))
[L3593]  COND FALSE  !(!(value_s512 <= _allowed_ERC20[this][from_s512][msgsender_MSG]))
[L3597]              __var_7 := null;
[L3598]  COND FALSE  !(!(to_s512 != null))
[L3602]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s512], value_s512);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L3602]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s512], value_s512);
[L3603]  COND FALSE  !(revert)
[L3606]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s512];
[L3607]              _balances_ERC20[this][from_s512] := __var_8;
[L3608]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s512];
[L3609]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s512], value_s512);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3609]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s512], value_s512);
[L3610]  COND FALSE  !(revert)
[L3613]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s512];
[L3614]              _balances_ERC20[this][to_s512] := __var_9;
[L3615]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s512];
[L3616]  CALL        call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s512][msgsender_MSG], value_s512);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L3616]  RET         call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s512][msgsender_MSG], value_s512);
[L3617]  COND FALSE  !(revert)
[L3620]              sum__allowed1[from_s512] := sum__allowed1[from_s512] - _allowed_ERC20[this][from_s512][msgsender_MSG];
[L3621]              _allowed_ERC20[this][from_s512][msgsender_MSG] := __var_10;
[L3622]              sum__allowed1[from_s512] := sum__allowed1[from_s512] + _allowed_ERC20[this][from_s512][msgsender_MSG];
[L3623]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3624]              __ret_0_ := true;
[L4608]  RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4609]  COND FALSE  !(revert)
[L4615]              __ret_0_ := __var_32;
[L2128]  RET         call __ret_0_ := transferFrom~address~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L2129]              assume !revert && gas >= 0;
[L6938]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L7047]  RET         call CorralChoice_EXEToken(this);

[2020-11-25 16:11:44,444 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:11:44,444 INFO  L82        PathProgramCache]: Analyzing trace with hash 2061886429, now seen corresponding path program 1 times
[2020-11-25 16:11:44,444 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:11:44,470 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:11:44,696 INFO  L134       CoverageAnalysis]: Checked inductivity of 245 backedges. 10 proven. 0 refuted. 0 times theorem prover too weak. 235 trivial. 0 not checked.
[2020-11-25 16:11:44,696 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:11:44,696 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [16] imperfect sequences [] total 16
[2020-11-25 16:11:44,697 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:11:44,697 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-25 16:11:44,697 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=34, Invalid=206, Unknown=0, NotChecked=0, Total=240
[2020-11-25 16:11:44,697 INFO  L87              Difference]: Start difference. First operand 3782 states and 4151 transitions. cyclomatic complexity: 374 Second operand 16 states.
[2020-11-25 16:11:46,881 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:11:46,881 INFO  L93              Difference]: Finished difference Result 2171 states and 2378 transitions.
[2020-11-25 16:11:46,881 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-11-25 16:11:46,882 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2171 states and 2378 transitions.
[2020-11-25 16:11:46,892 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 16:11:46,892 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2171 states to 0 states and 0 transitions.
[2020-11-25 16:11:46,892 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 16:11:46,892 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 16:11:46,892 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 16:11:46,892 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:11:46,892 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 16:11:46,892 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 16:11:46,892 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 16:11:46,892 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 16:11:46,892 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 16:11:46,892 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 16:11:46,892 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 16:11:46,895 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 04:11:46 BasicIcfg
[2020-11-25 16:11:46,895 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 16:11:46,896 INFO  L168              Benchmark]: Toolchain (without parser) took 22886.15 ms. Allocated memory was 1.0 GB in the beginning and 2.4 GB in the end (delta: 1.4 GB). Free memory was 929.8 MB in the beginning and 2.3 GB in the end (delta: -1.3 GB). Peak memory consumption was 70.6 MB. Max. memory is 15.3 GB.
[2020-11-25 16:11:46,897 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 16:11:46,897 INFO  L168              Benchmark]: Boogie Preprocessor took 121.03 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.7 MB in the end (delta: 16.2 MB). Peak memory consumption was 16.2 MB. Max. memory is 15.3 GB.
[2020-11-25 16:11:46,897 INFO  L168              Benchmark]: UtopiaSpecLang took 67.64 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 908.3 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 16:11:46,897 INFO  L168              Benchmark]: Boogie Printer took 21.03 ms. Allocated memory is still 1.0 GB. Free memory was 908.3 MB in the beginning and 902.9 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 16:11:46,898 INFO  L168              Benchmark]: RCFGBuilder took 1059.30 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 68.7 MB). Free memory was 902.9 MB in the beginning and 1.0 GB in the end (delta: -97.8 MB). Peak memory consumption was 191.1 MB. Max. memory is 15.3 GB.
[2020-11-25 16:11:46,898 INFO  L168              Benchmark]: UtopiaLTL2Aut took 34.19 ms. Allocated memory is still 1.1 GB. Free memory was 1.0 GB in the beginning and 993.7 MB in the end (delta: 7.0 MB). Peak memory consumption was 7.0 MB. Max. memory is 15.3 GB.
[2020-11-25 16:11:46,898 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1706.83 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 155.7 MB). Free memory was 993.7 MB in the beginning and 925.2 MB in the end (delta: 68.5 MB). Peak memory consumption was 515.2 MB. Max. memory is 15.3 GB.
[2020-11-25 16:11:46,899 INFO  L168              Benchmark]: BlockEncodingV2 took 178.32 ms. Allocated memory is still 1.3 GB. Free memory was 925.2 MB in the beginning and 828.0 MB in the end (delta: 97.2 MB). Peak memory consumption was 97.2 MB. Max. memory is 15.3 GB.
[2020-11-25 16:11:46,899 INFO  L168              Benchmark]: BuchiAutomizer took 19694.80 ms. Allocated memory was 1.3 GB in the beginning and 2.4 GB in the end (delta: 1.2 GB). Free memory was 828.0 MB in the beginning and 2.3 GB in the end (delta: -1.4 GB). There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 16:11:46,901 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    6228 locations, 11157 edges
  - StatisticsResult: Encoded RCFG
    6097 locations, 10818 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 121.03 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.7 MB in the end (delta: 16.2 MB). Peak memory consumption was 16.2 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 67.64 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 908.3 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 21.03 ms. Allocated memory is still 1.0 GB. Free memory was 908.3 MB in the beginning and 902.9 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1059.30 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 68.7 MB). Free memory was 902.9 MB in the beginning and 1.0 GB in the end (delta: -97.8 MB). Peak memory consumption was 191.1 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 34.19 ms. Allocated memory is still 1.1 GB. Free memory was 1.0 GB in the beginning and 993.7 MB in the end (delta: 7.0 MB). Peak memory consumption was 7.0 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1706.83 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 155.7 MB). Free memory was 993.7 MB in the beginning and 925.2 MB in the end (delta: 68.5 MB). Peak memory consumption was 515.2 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 178.32 ms. Allocated memory is still 1.3 GB. Free memory was 925.2 MB in the beginning and 828.0 MB in the end (delta: 97.2 MB). Peak memory consumption was 97.2 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 19694.80 ms. Allocated memory was 1.3 GB in the beginning and 2.4 GB in the end (delta: 1.2 GB). Free memory was 828.0 MB in the beginning and 2.3 GB in the end (delta: -1.4 GB). There was no memory consumed. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2511 locations, 3418 edges
  - StatisticsResult: BuchiProgram size
    6228 locations, 11157 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 9 terminating modules (9 trivial, 0 deterministic, 0 nondeterministic). 9 modules have a trivial ranking function, the largest among these consists of 29 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 19.6s and 10 iterations.  TraceHistogramMax:5. Analysis of lassos took 2.1s. Construction of modules took 12.4s. BÃ¼chi inclusion checks took 4.1s. Highest rank in rank-based complementation 0. Minimization of det autom 9. Minimization of nondet autom 0. Automata minimization 0.3s AutomataMinimizationTime, 8 MinimizatonAttempts, 2432 StatesRemovedByMinimization, 6 NontrivialMinimizations. Non-live state removal took 0.2s Buchi closure took 0.0s. Biggest automaton had 4350 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 34835 SDtfs, 31873 SDslu, 83733 SDs, 0 SdLazy, 207759 SolverSat, 6033 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 12.4s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU9 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_EXEToken0) ==> ( <>(fail_transferFrom_EXEToken0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
