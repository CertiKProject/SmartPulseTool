This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 02:32:58,645 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 02:32:58,647 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 02:32:58,657 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 02:32:58,657 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 02:32:58,658 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 02:32:58,659 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 02:32:58,660 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 02:32:58,662 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 02:32:58,662 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 02:32:58,663 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 02:32:58,663 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 02:32:58,664 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 02:32:58,664 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 02:32:58,665 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 02:32:58,666 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 02:32:58,666 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 02:32:58,667 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 02:32:58,669 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 02:32:58,670 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 02:32:58,671 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 02:32:58,671 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 02:32:58,673 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 02:32:58,673 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 02:32:58,673 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 02:32:58,674 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 02:32:58,674 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 02:32:58,675 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 02:32:58,675 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 02:32:58,675 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 02:32:58,675 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 02:32:58,676 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 02:32:58,676 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 02:32:58,677 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 02:32:58,677 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 02:32:58,678 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 02:32:58,678 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 02:32:58,678 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 02:32:58,678 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 02:32:58,679 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 02:32:58,679 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 02:32:58,680 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 02:32:58,687 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 02:32:58,687 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 02:32:58,688 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 02:32:58,688 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 02:32:58,688 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 02:32:58,689 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 02:32:58,689 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 02:32:58,689 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 02:32:58,689 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 02:32:58,689 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 02:32:58,689 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 02:32:58,689 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 02:32:58,689 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 02:32:58,689 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 02:32:58,689 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 02:32:58,690 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 02:32:58,690 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 02:32:58,690 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 02:32:58,690 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 02:32:58,690 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 02:32:58,690 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 02:32:58,690 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 02:32:58,690 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 02:32:58,690 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 02:32:58,690 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 02:32:58,691 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 02:32:58,716 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 02:32:58,728 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 02:32:58,730 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 02:32:58,731 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 02:32:58,732 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 02:32:58,732 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-self-fail.bpl
[2020-11-25 02:32:58,732 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-self-fail.bpl'
[2020-11-25 02:32:58,856 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 02:32:58,858 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 02:32:58,858 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 02:32:58,858 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 02:32:58,858 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 02:32:58,874 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:32:58" (1/1) ...
[2020-11-25 02:32:58,876 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:32:58" (1/1) ...
[2020-11-25 02:32:58,917 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:32:58" (1/1) ...
[2020-11-25 02:32:58,919 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:32:58" (1/1) ...
[2020-11-25 02:32:58,958 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:32:58" (1/1) ...
[2020-11-25 02:32:58,976 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:32:58" (1/1) ...
[2020-11-25 02:32:58,991 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:32:58" (1/1) ...
[2020-11-25 02:32:59,008 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 02:32:59,009 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 02:32:59,009 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 02:32:59,011 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 02:32:59,015 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:32:58" (1/1) ...
[2020-11-25 02:32:59,037 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20Pausable.transfer(to, value), msg.sender == to && value > _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20Pausable.transfer)))
[2020-11-25 02:32:59,042 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20Pausable.transfer(to, value), msg.sender == to && value > _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20Pausable.transfer)))
[2020-11-25 02:32:59,049 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20Pausable.transfer(to, value), msg.sender == to && value > _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20Pausable.transfer)))
[2020-11-25 02:32:59,056 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==to_s916 && value_s916>_balances_ERC20[this][msg.sender] ) && value_s916>=0 ) && value_s916<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][to_s916]>=0 ) && _balances_ERC20[this][to_s916]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][msg.sender]>=0 ) && _balances_ERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>],IdentifierExpression[to_s916,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]],BinaryExpression[COMPGT,IdentifierExpression[value_s916,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[value_s916,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[value_s916,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[to_s916,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[to_s916,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 02:32:59,063 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20Pausable.transfer(to, value), msg.sender == to && value > _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20Pausable.transfer)))
[2020-11-25 02:32:59,063 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_ERC20Pausable0) ==> ( <>AP(fail_transfer_ERC20Pausable0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 02:32:59,084 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:32:59 PropertyContainer
[2020-11-25 02:32:59,084 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 02:32:59,085 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 02:32:59,085 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 02:32:59,085 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 02:32:59,087 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:32:58" (1/2) ...
[2020-11-25 02:32:59,088 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 02:32:59,088 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 02:32:59,116 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:32:59" (2/2) ...
[2020-11-25 02:32:59,116 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 02:32:59,116 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 02:32:59,116 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 02:32:59,117 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 02:32:59,117 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:32:58" (1/2) ...
[2020-11-25 02:32:59,170 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 02:32:59,170 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__success
[2020-11-25 02:32:59,170 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 02:32:59,170 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 02:32:59,170 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 02:32:59,170 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 02:32:59,171 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 02:32:59,171 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 02:32:59,171 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 02:32:59,171 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 02:32:59,171 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 02:32:59,171 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 02:32:59,171 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 02:32:59,171 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 02:32:59,171 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 02:32:59,171 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 02:32:59,172 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 02:32:59,172 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 02:32:59,172 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 02:32:59,172 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 02:32:59,172 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 02:32:59,173 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 02:32:59,173 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 02:32:59,173 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 02:32:59,173 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 02:32:59,173 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 02:32:59,173 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 02:32:59,173 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 02:32:59,173 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 02:32:59,173 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 02:32:59,173 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 02:32:59,174 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 02:32:59,174 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 02:32:59,174 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 02:32:59,174 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 02:32:59,174 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 02:32:59,174 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 02:32:59,174 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 02:32:59,174 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 02:32:59,174 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 02:32:59,174 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 02:32:59,174 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 02:32:59,175 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 02:32:59,175 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles
[2020-11-25 02:32:59,175 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles
[2020-11-25 02:32:59,175 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__success
[2020-11-25 02:32:59,175 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__success
[2020-11-25 02:32:59,175 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__success
[2020-11-25 02:32:59,175 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 02:32:59,175 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole
[2020-11-25 02:32:59,175 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole
[2020-11-25 02:32:59,175 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole
[2020-11-25 02:32:59,176 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole
[2020-11-25 02:32:59,176 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole
[2020-11-25 02:32:59,176 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole
[2020-11-25 02:32:59,176 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole
[2020-11-25 02:32:59,176 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole
[2020-11-25 02:32:59,176 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__success
[2020-11-25 02:32:59,176 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__success
[2020-11-25 02:32:59,176 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 02:32:59,176 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-25 02:32:59,176 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-25 02:32:59,176 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-25 02:32:59,177 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-25 02:32:59,177 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-25 02:32:59,177 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-25 02:32:59,177 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-25 02:32:59,177 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-25 02:32:59,177 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 02:32:59,177 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 02:32:59,177 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 02:32:59,177 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 02:32:59,177 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 02:32:59,178 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 02:32:59,178 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 02:32:59,178 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable
[2020-11-25 02:32:59,178 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable
[2020-11-25 02:32:59,178 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 02:32:59,178 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 02:32:59,178 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 02:32:59,178 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 02:32:59,178 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 02:32:59,178 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 02:32:59,179 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 02:32:59,179 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 02:32:59,179 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 02:32:59,179 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 02:32:59,179 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 02:32:59,179 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 02:32:59,179 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 02:32:59,179 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 02:32:59,179 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole
[2020-11-25 02:32:59,179 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole
[2020-11-25 02:32:59,179 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole
[2020-11-25 02:32:59,180 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole
[2020-11-25 02:32:59,180 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole
[2020-11-25 02:32:59,180 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole
[2020-11-25 02:32:59,180 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole
[2020-11-25 02:32:59,180 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole
[2020-11-25 02:32:59,180 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__success
[2020-11-25 02:32:59,180 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__success
[2020-11-25 02:32:59,180 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 02:32:59,180 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 02:32:59,180 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 02:32:59,180 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 02:32:59,181 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 02:32:59,181 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-25 02:32:59,181 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable
[2020-11-25 02:32:59,181 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable
[2020-11-25 02:32:59,181 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable
[2020-11-25 02:32:59,181 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable
[2020-11-25 02:32:59,181 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-25 02:32:59,181 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-25 02:32:59,181 INFO  L130     BoogieDeclarations]: Found specification of procedure OMToken_OMToken_NoBaseCtor__success
[2020-11-25 02:32:59,181 INFO  L130     BoogieDeclarations]: Found specification of procedure OMToken_OMToken
[2020-11-25 02:32:59,182 INFO  L138     BoogieDeclarations]: Found implementation of procedure OMToken_OMToken
[2020-11-25 02:32:59,182 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 02:32:59,182 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 02:32:59,182 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 02:32:59,182 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__success
[2020-11-25 02:32:59,182 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-25 02:32:59,182 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-25 02:32:59,182 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__success
[2020-11-25 02:32:59,182 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 02:32:59,182 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 02:32:59,183 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 02:32:59,183 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 02:32:59,183 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 02:32:59,183 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 02:32:59,183 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Roles
[2020-11-25 02:32:59,183 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Roles
[2020-11-25 02:32:59,183 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_PauserRole
[2020-11-25 02:32:59,183 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_PauserRole
[2020-11-25 02:32:59,183 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-25 02:32:59,183 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-25 02:32:59,184 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Pausable
[2020-11-25 02:32:59,184 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Pausable
[2020-11-25 02:32:59,184 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 02:32:59,184 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 02:32:59,184 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MinterRole
[2020-11-25 02:32:59,184 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MinterRole
[2020-11-25 02:32:59,184 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Mintable
[2020-11-25 02:32:59,184 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Mintable
[2020-11-25 02:32:59,184 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Burnable
[2020-11-25 02:32:59,184 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Burnable
[2020-11-25 02:32:59,185 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_OMToken
[2020-11-25 02:32:59,185 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 02:32:59,185 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 02:32:59,185 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__fail
[2020-11-25 02:32:59,185 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 02:32:59,185 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 02:32:59,185 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 02:32:59,185 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 02:32:59,185 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 02:32:59,185 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 02:32:59,186 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 02:32:59,186 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 02:32:59,186 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 02:32:59,186 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 02:32:59,186 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 02:32:59,186 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 02:32:59,186 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 02:32:59,186 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 02:32:59,186 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 02:32:59,186 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 02:32:59,187 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 02:32:59,187 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 02:32:59,187 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 02:32:59,187 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 02:32:59,187 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 02:32:59,187 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 02:32:59,187 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 02:32:59,187 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 02:32:59,187 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 02:32:59,187 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 02:32:59,187 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:32:59,187 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:32:59,188 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:32:59,188 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:32:59,188 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 02:32:59,188 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 02:32:59,188 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 02:32:59,188 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 02:32:59,188 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 02:32:59,188 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__success
[2020-11-25 02:32:59,188 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__fail
[2020-11-25 02:32:59,188 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__fail
[2020-11-25 02:32:59,188 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__fail
[2020-11-25 02:32:59,188 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__fail
[2020-11-25 02:32:59,189 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 02:32:59,189 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__success
[2020-11-25 02:32:59,189 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__fail
[2020-11-25 02:32:59,189 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__success
[2020-11-25 02:32:59,189 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__fail
[2020-11-25 02:32:59,189 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__success
[2020-11-25 02:32:59,189 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__fail
[2020-11-25 02:32:59,189 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__success
[2020-11-25 02:32:59,189 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__fail
[2020-11-25 02:32:59,189 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__fail
[2020-11-25 02:32:59,189 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__fail
[2020-11-25 02:32:59,189 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 02:32:59,190 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-25 02:32:59,190 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-25 02:32:59,190 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-25 02:32:59,190 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-25 02:32:59,190 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-25 02:32:59,190 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-25 02:32:59,190 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-25 02:32:59,190 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-25 02:32:59,190 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 02:32:59,190 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 02:32:59,190 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 02:32:59,190 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 02:32:59,191 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 02:32:59,191 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 02:32:59,191 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 02:32:59,191 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable__success
[2020-11-25 02:32:59,191 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable__fail
[2020-11-25 02:32:59,191 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 02:32:59,191 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 02:32:59,191 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 02:32:59,191 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 02:32:59,191 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 02:32:59,191 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 02:32:59,191 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 02:32:59,192 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 02:32:59,192 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 02:32:59,192 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 02:32:59,192 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 02:32:59,192 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 02:32:59,192 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 02:32:59,192 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 02:32:59,192 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__success
[2020-11-25 02:32:59,192 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__fail
[2020-11-25 02:32:59,192 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__success
[2020-11-25 02:32:59,192 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__fail
[2020-11-25 02:32:59,193 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__success
[2020-11-25 02:32:59,193 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__fail
[2020-11-25 02:32:59,193 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__success
[2020-11-25 02:32:59,193 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__fail
[2020-11-25 02:32:59,193 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__fail
[2020-11-25 02:32:59,193 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 02:32:59,193 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 02:32:59,193 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 02:32:59,193 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 02:32:59,193 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 02:32:59,193 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 02:32:59,193 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-25 02:32:59,194 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-25 02:32:59,194 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-25 02:32:59,194 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__success
[2020-11-25 02:32:59,194 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__fail
[2020-11-25 02:32:59,194 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-25 02:32:59,194 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-25 02:32:59,194 INFO  L130     BoogieDeclarations]: Found specification of procedure OMToken_OMToken_NoBaseCtor__fail
[2020-11-25 02:32:59,194 INFO  L130     BoogieDeclarations]: Found specification of procedure OMToken_OMToken__success
[2020-11-25 02:32:59,194 INFO  L130     BoogieDeclarations]: Found specification of procedure OMToken_OMToken__fail
[2020-11-25 02:32:59,194 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 02:32:59,194 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 02:32:59,194 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 02:32:59,195 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__fail
[2020-11-25 02:32:59,195 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-25 02:32:59,195 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-25 02:32:59,195 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__fail
[2020-11-25 02:32:59,195 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 02:32:59,195 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 02:32:59,195 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__fail
[2020-11-25 02:32:59,195 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__success
[2020-11-25 02:32:59,195 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 02:32:59,195 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 02:32:59,195 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 02:32:59,195 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 02:32:59,196 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 02:32:59,196 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 02:32:59,196 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 02:32:59,196 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 02:32:59,196 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 02:32:59,196 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 02:32:59,196 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 02:32:59,196 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 02:32:59,197 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 02:32:59,197 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 02:32:59,197 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 02:32:59,197 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 02:32:59,197 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 02:32:59,197 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 02:32:59,197 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 02:32:59,197 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 02:32:59,197 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 02:32:59,197 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 02:32:59,198 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 02:32:59,198 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 02:32:59,198 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 02:32:59,198 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 02:32:59,198 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 02:32:59,198 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 02:32:59,198 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 02:32:59,198 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 02:32:59,198 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 02:32:59,198 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 02:32:59,198 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 02:32:59,199 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 02:32:59,199 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:32:59,199 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:32:59,199 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:32:59,199 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:32:59,199 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 02:32:59,199 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 02:32:59,199 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 02:32:59,199 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 02:32:59,199 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 02:32:59,199 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 02:32:59,199 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 02:32:59,200 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 02:32:59,200 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 02:32:59,200 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 02:32:59,200 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__fail
[2020-11-25 02:32:59,200 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__success
[2020-11-25 02:32:59,200 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__fail
[2020-11-25 02:32:59,200 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__success
[2020-11-25 02:32:59,200 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__fail
[2020-11-25 02:32:59,200 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__success
[2020-11-25 02:32:59,200 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__fail
[2020-11-25 02:32:59,200 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__success
[2020-11-25 02:32:59,200 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 02:32:59,201 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 02:32:59,201 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__fail
[2020-11-25 02:32:59,201 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__success
[2020-11-25 02:32:59,201 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__fail
[2020-11-25 02:32:59,201 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__success
[2020-11-25 02:32:59,201 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__fail
[2020-11-25 02:32:59,201 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__success
[2020-11-25 02:32:59,201 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__fail
[2020-11-25 02:32:59,201 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__success
[2020-11-25 02:32:59,201 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__fail
[2020-11-25 02:32:59,201 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__success
[2020-11-25 02:32:59,201 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__fail
[2020-11-25 02:32:59,201 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__success
[2020-11-25 02:32:59,202 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 02:32:59,202 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 02:32:59,202 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-25 02:32:59,202 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-25 02:32:59,202 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-25 02:32:59,202 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-25 02:32:59,202 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-25 02:32:59,202 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-25 02:32:59,202 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-25 02:32:59,202 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-25 02:32:59,202 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 02:32:59,202 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 02:32:59,202 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 02:32:59,203 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 02:32:59,203 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 02:32:59,203 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 02:32:59,203 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 02:32:59,203 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 02:32:59,203 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable__fail
[2020-11-25 02:32:59,203 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable__success
[2020-11-25 02:32:59,203 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 02:32:59,203 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 02:32:59,203 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 02:32:59,203 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 02:32:59,203 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 02:32:59,204 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 02:32:59,204 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 02:32:59,204 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 02:32:59,204 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 02:32:59,204 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 02:32:59,204 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 02:32:59,204 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 02:32:59,204 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 02:32:59,204 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 02:32:59,204 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 02:32:59,204 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 02:32:59,204 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__fail
[2020-11-25 02:32:59,204 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__success
[2020-11-25 02:32:59,205 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__fail
[2020-11-25 02:32:59,205 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__success
[2020-11-25 02:32:59,205 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__fail
[2020-11-25 02:32:59,205 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__success
[2020-11-25 02:32:59,205 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__fail
[2020-11-25 02:32:59,205 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__success
[2020-11-25 02:32:59,205 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__fail
[2020-11-25 02:32:59,205 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__success
[2020-11-25 02:32:59,205 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 02:32:59,205 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__success
[2020-11-25 02:32:59,205 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 02:32:59,206 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 02:32:59,206 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 02:32:59,206 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 02:32:59,206 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 02:32:59,206 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 02:32:59,206 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-25 02:32:59,206 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-25 02:32:59,206 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-25 02:32:59,206 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-25 02:32:59,206 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__fail
[2020-11-25 02:32:59,206 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__success
[2020-11-25 02:32:59,206 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-25 02:32:59,206 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-25 02:32:59,207 INFO  L138     BoogieDeclarations]: Found implementation of procedure OMToken_OMToken_NoBaseCtor__fail
[2020-11-25 02:32:59,207 INFO  L138     BoogieDeclarations]: Found implementation of procedure OMToken_OMToken_NoBaseCtor__success
[2020-11-25 02:32:59,207 INFO  L138     BoogieDeclarations]: Found implementation of procedure OMToken_OMToken__fail
[2020-11-25 02:32:59,207 INFO  L138     BoogieDeclarations]: Found implementation of procedure OMToken_OMToken__success
[2020-11-25 02:32:59,207 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 02:32:59,207 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 02:32:59,207 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 02:32:59,207 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 02:32:59,207 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 02:32:59,207 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 02:32:59,207 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__fail
[2020-11-25 02:32:59,207 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__success
[2020-11-25 02:32:59,207 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-25 02:32:59,208 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-25 02:32:59,208 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-25 02:32:59,208 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-25 02:32:59,208 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__fail
[2020-11-25 02:32:59,208 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__success
[2020-11-25 02:32:59,208 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 02:32:59,208 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 02:32:59,208 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 02:32:59,208 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 02:32:59,208 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 02:32:59,208 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 02:32:59,208 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Roles
[2020-11-25 02:32:59,209 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Roles
[2020-11-25 02:32:59,209 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_PauserRole
[2020-11-25 02:32:59,209 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_PauserRole
[2020-11-25 02:32:59,209 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-25 02:32:59,209 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-25 02:32:59,209 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Pausable
[2020-11-25 02:32:59,209 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Pausable
[2020-11-25 02:32:59,209 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 02:32:59,209 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 02:32:59,209 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MinterRole
[2020-11-25 02:32:59,209 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MinterRole
[2020-11-25 02:32:59,209 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Mintable
[2020-11-25 02:32:59,209 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Mintable
[2020-11-25 02:32:59,209 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Burnable
[2020-11-25 02:32:59,210 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Burnable
[2020-11-25 02:32:59,210 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_OMToken
[2020-11-25 02:32:59,210 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 02:32:59,210 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 02:32:59,210 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 02:33:00,200 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:33:00,200 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:33:00,395 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 02:33:00,395 INFO  L286             CfgBuilder]: Removed 12 assue(true) statements.
[2020-11-25 02:33:00,397 INFO  L202        PluginConnector]: Adding new model OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:33:00 BoogieIcfgContainer
[2020-11-25 02:33:00,397 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:32:59" (2/2) ...
[2020-11-25 02:33:00,397 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 02:33:00,397 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@9cd7ee and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:33:00, skipping insertion in model container
[2020-11-25 02:33:00,397 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 02:33:00,398 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 02:33:00,398 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 02:33:00,399 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 02:33:00,399 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:32:58" (1/3) ...
[2020-11-25 02:33:00,399 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@594ea49c and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:33:00, skipping insertion in model container
[2020-11-25 02:33:00,399 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:32:59" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 02:33:00,432 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:33:00 NWAContainer
[2020-11-25 02:33:00,433 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 02:33:00,433 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 02:33:00,433 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 02:33:00,434 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 02:33:00,434 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:33:00" (3/4) ...
[2020-11-25 02:33:00,436 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@5a815058 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:33:00, skipping insertion in model container
[2020-11-25 02:33:00,436 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:33:00" (4/4) ...
[2020-11-25 02:33:00,442 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 02:33:00,450 INFO  L110   BuchiProductObserver]: Initial RCFG 3607 locations, 5219 edges
[2020-11-25 02:33:00,451 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 02:33:00,466 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 02:33:03,468 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 02:33:03,480 INFO  L110   BuchiProductObserver]: BuchiProgram size 9270 locations, 17164 edges
[2020-11-25 02:33:03,481 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:33:03 BoogieIcfgContainer
[2020-11-25 02:33:03,481 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 02:33:03,481 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 02:33:03,481 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 02:33:03,482 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 02:33:03,482 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:33:03" (1/1) ...
[2020-11-25 02:33:03,653 INFO  L313           BlockEncoder]: Initial Icfg 9270 locations, 17164 edges
[2020-11-25 02:33:03,654 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 02:33:03,654 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 02:33:03,654 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 02:33:03,655 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 02:33:03,676 INFO  L70    emoveInfeasibleEdges]: Removed 237 edges and 28 locations because of local infeasibility
[2020-11-25 02:33:03,696 INFO  L70        RemoveSinkStates]: Removed 218 edges and 128 locations by removing sink states
[2020-11-25 02:33:03,720 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 02:33:03,727 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 02:33:03,735 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 02:33:03,736 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 02:33:03,741 INFO  L313           BlockEncoder]: Encoded RCFG 9062 locations, 16632 edges
[2020-11-25 02:33:03,742 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:33:03 BasicIcfg
[2020-11-25 02:33:03,742 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 02:33:03,743 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 02:33:03,743 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 02:33:03,745 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 02:33:03,745 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:33:03,745 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:32:58" (1/6) ...
[2020-11-25 02:33:03,747 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@66684253 and model type OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:33:03, skipping insertion in model container
[2020-11-25 02:33:03,747 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:33:03,747 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:32:59" (2/6) ...
[2020-11-25 02:33:03,747 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@66684253 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:33:03, skipping insertion in model container
[2020-11-25 02:33:03,747 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:33:03,748 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:33:00" (3/6) ...
[2020-11-25 02:33:03,748 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@66684253 and model type OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:33:03, skipping insertion in model container
[2020-11-25 02:33:03,748 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:33:03,748 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:33:00" (4/6) ...
[2020-11-25 02:33:03,748 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@66684253 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:33:03, skipping insertion in model container
[2020-11-25 02:33:03,748 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:33:03,748 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:33:03" (5/6) ...
[2020-11-25 02:33:03,749 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@66684253 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 02:33:03, skipping insertion in model container
[2020-11-25 02:33:03,749 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:33:03,749 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:33:03" (6/6) ...
[2020-11-25 02:33:03,750 INFO  L404   chiAutomizerObserver]: Analyzing ICFG OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-self-fail.bpl_BEv2
[2020-11-25 02:33:03,789 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 02:33:03,789 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 02:33:03,789 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 02:33:03,789 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 02:33:03,789 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 02:33:03,789 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 02:33:03,789 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 02:33:03,789 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 02:33:03,789 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 02:33:03,865 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9062 states.
[2020-11-25 02:33:03,948 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:33:03,949 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:33:03,949 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:33:03,959 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:33:03,959 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:33:03,959 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 02:33:03,959 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9062 states.
[2020-11-25 02:33:04,001 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:33:04,001 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:33:04,001 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:33:04,003 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:33:04,003 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND TRUE   revert
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND FALSE  !(gas >= 0)
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:33:04,020 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:33:04,021 INFO  L82        PathProgramCache]: Analyzing trace with hash 588524747, now seen corresponding path program 1 times
[2020-11-25 02:33:04,027 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:33:04,050 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:33:04,095 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 02:33:04,097 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:33:04,097 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 02:33:04,418 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:33:04,430 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 02:33:04,431 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 02:33:04,432 INFO  L87              Difference]: Start difference. First operand 9062 states. Second operand 4 states.
[2020-11-25 02:33:05,280 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:33:05,280 INFO  L93              Difference]: Finished difference Result 4849 states and 5852 transitions.
[2020-11-25 02:33:05,280 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 02:33:05,281 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4849 states and 5852 transitions.
[2020-11-25 02:33:05,307 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:33:05,337 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4849 states to 4849 states and 5852 transitions.
[2020-11-25 02:33:05,338 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 02:33:05,341 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 900
[2020-11-25 02:33:05,341 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4849 states and 5852 transitions.
[2020-11-25 02:33:05,352 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:33:05,352 INFO  L728         BuchiCegarLoop]: Abstraction has 4849 states and 5852 transitions.
[2020-11-25 02:33:05,373 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4849 states and 5852 transitions.
[2020-11-25 02:33:05,445 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4849 to 4849.
[2020-11-25 02:33:05,446 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4849 states.
[2020-11-25 02:33:05,453 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4849 states to 4849 states and 5852 transitions.
[2020-11-25 02:33:05,453 INFO  L751         BuchiCegarLoop]: Abstraction has 4849 states and 5852 transitions.
[2020-11-25 02:33:05,454 INFO  L631         BuchiCegarLoop]: Abstraction has 4849 states and 5852 transitions.
[2020-11-25 02:33:05,454 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 02:33:05,454 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4849 states and 5852 transitions.
[2020-11-25 02:33:05,465 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:33:05,465 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:33:05,465 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:33:05,467 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:33:05,467 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND TRUE   revert
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 > _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND FALSE  !(__exception)
[L1540]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5355]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5355]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5356]  COND TRUE   revert
[L1540]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1541]              assume !revert && gas >= 0;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 > _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND FALSE  !(__exception)
[L1540]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5355]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5355]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5356]  COND TRUE   revert
[L1540]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1541]              assume !revert && gas >= 0;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:33:05,471 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:33:05,471 INFO  L82        PathProgramCache]: Analyzing trace with hash 1999150429, now seen corresponding path program 1 times
[2020-11-25 02:33:05,472 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:33:05,482 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:33:05,503 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 02:33:05,503 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:33:05,503 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 02:33:05,504 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:33:05,505 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 02:33:05,505 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 02:33:05,505 INFO  L87              Difference]: Start difference. First operand 4849 states and 5852 transitions. cyclomatic complexity: 1005 Second operand 3 states.
[2020-11-25 02:33:05,671 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:33:05,671 INFO  L93              Difference]: Finished difference Result 6619 states and 7996 transitions.
[2020-11-25 02:33:05,671 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 02:33:05,672 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6619 states and 7996 transitions.
[2020-11-25 02:33:05,691 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:33:05,718 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6619 states to 6619 states and 7996 transitions.
[2020-11-25 02:33:05,719 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1383
[2020-11-25 02:33:05,720 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1383
[2020-11-25 02:33:05,720 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6619 states and 7996 transitions.
[2020-11-25 02:33:05,727 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:33:05,727 INFO  L728         BuchiCegarLoop]: Abstraction has 6619 states and 7996 transitions.
[2020-11-25 02:33:05,732 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6619 states and 7996 transitions.
[2020-11-25 02:33:05,795 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6619 to 5991.
[2020-11-25 02:33:05,795 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5991 states.
[2020-11-25 02:33:05,805 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5991 states to 5991 states and 7242 transitions.
[2020-11-25 02:33:05,805 INFO  L751         BuchiCegarLoop]: Abstraction has 5991 states and 7242 transitions.
[2020-11-25 02:33:05,805 INFO  L631         BuchiCegarLoop]: Abstraction has 5991 states and 7242 transitions.
[2020-11-25 02:33:05,805 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 02:33:05,805 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5991 states and 7242 transitions.
[2020-11-25 02:33:05,814 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:33:05,814 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:33:05,814 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:33:05,816 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:33:05,816 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND FALSE  !(DType[this] == OMToken)
[L4942]  COND TRUE   DType[this] == ERC20Pausable
[L4943]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND TRUE   !(account_s659 != null)
[L4808]              revert := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND TRUE   revert
[L4943]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4944]  COND TRUE   revert
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND TRUE   revert
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND TRUE   revert
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 > _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND FALSE  !(__exception)
[L1540]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5355]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND TRUE   !!_paused_Pausable[this]
[L8321]              revert := true;
[L5355]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5356]  COND TRUE   revert
[L1540]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1541]              assume !revert && gas >= 0;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 > _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND FALSE  !(__exception)
[L1540]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5355]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND TRUE   !!_paused_Pausable[this]
[L8321]              revert := true;
[L5355]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5356]  COND TRUE   revert
[L1540]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1541]              assume !revert && gas >= 0;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:33:05,819 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:33:05,820 INFO  L82        PathProgramCache]: Analyzing trace with hash -1957201366, now seen corresponding path program 1 times
[2020-11-25 02:33:05,820 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:33:05,828 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:33:05,882 INFO  L134       CoverageAnalysis]: Checked inductivity of 16 backedges. 0 proven. 7 refuted. 0 times theorem prover too weak. 9 trivial. 0 not checked.
[2020-11-25 02:33:05,882 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:33:05,882 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [9] total 9
[2020-11-25 02:33:05,882 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:33:05,883 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 02:33:05,883 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 02:33:05,883 INFO  L87              Difference]: Start difference. First operand 5991 states and 7242 transitions. cyclomatic complexity: 1253 Second operand 9 states.
[2020-11-25 02:33:06,062 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:33:06,062 INFO  L93              Difference]: Finished difference Result 6037 states and 7319 transitions.
[2020-11-25 02:33:06,062 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 02:33:06,063 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6037 states and 7319 transitions.
[2020-11-25 02:33:06,082 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:33:06,108 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6037 states to 6037 states and 7319 transitions.
[2020-11-25 02:33:06,108 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1291
[2020-11-25 02:33:06,109 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1291
[2020-11-25 02:33:06,109 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6037 states and 7319 transitions.
[2020-11-25 02:33:06,116 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:33:06,116 INFO  L728         BuchiCegarLoop]: Abstraction has 6037 states and 7319 transitions.
[2020-11-25 02:33:06,122 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6037 states and 7319 transitions.
[2020-11-25 02:33:06,182 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6037 to 6028.
[2020-11-25 02:33:06,183 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6028 states.
[2020-11-25 02:33:06,192 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6028 states to 6028 states and 7302 transitions.
[2020-11-25 02:33:06,192 INFO  L751         BuchiCegarLoop]: Abstraction has 6028 states and 7302 transitions.
[2020-11-25 02:33:06,192 INFO  L631         BuchiCegarLoop]: Abstraction has 6028 states and 7302 transitions.
[2020-11-25 02:33:06,192 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 02:33:06,192 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6028 states and 7302 transitions.
[2020-11-25 02:33:06,224 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:33:06,224 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:33:06,224 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:33:06,226 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:33:06,226 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND FALSE  !(DType[this] == OMToken)
[L4942]  COND TRUE   DType[this] == ERC20Pausable
[L4943]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND TRUE   !(account_s713 != null)
[L4879]              revert := true;
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND TRUE   revert
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND TRUE   revert
[L4943]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4944]  COND TRUE   revert
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND TRUE   revert
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND TRUE   revert
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 > _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND FALSE  !(__exception)
[L1540]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5355]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND TRUE   !!_paused_Pausable[this]
[L8321]              revert := true;
[L5355]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5356]  COND TRUE   revert
[L1540]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1541]              assume !revert && gas >= 0;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 > _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND FALSE  !(__exception)
[L1540]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5355]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND TRUE   !!_paused_Pausable[this]
[L8321]              revert := true;
[L5355]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5356]  COND TRUE   revert
[L1540]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1541]              assume !revert && gas >= 0;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:33:06,236 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:33:06,236 INFO  L82        PathProgramCache]: Analyzing trace with hash -1423376836, now seen corresponding path program 1 times
[2020-11-25 02:33:06,237 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:33:06,243 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:33:06,291 INFO  L134       CoverageAnalysis]: Checked inductivity of 16 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 16 trivial. 0 not checked.
[2020-11-25 02:33:06,291 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:33:06,291 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 02:33:06,292 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:33:06,292 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 02:33:06,292 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 02:33:06,292 INFO  L87              Difference]: Start difference. First operand 6028 states and 7302 transitions. cyclomatic complexity: 1276 Second operand 7 states.
[2020-11-25 02:33:06,506 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:33:06,507 INFO  L93              Difference]: Finished difference Result 6091 states and 7388 transitions.
[2020-11-25 02:33:06,507 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 02:33:06,507 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6091 states and 7388 transitions.
[2020-11-25 02:33:06,521 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:33:06,540 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6091 states to 6052 states and 7332 transitions.
[2020-11-25 02:33:06,540 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1282
[2020-11-25 02:33:06,541 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1282
[2020-11-25 02:33:06,541 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6052 states and 7332 transitions.
[2020-11-25 02:33:06,546 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:33:06,546 INFO  L728         BuchiCegarLoop]: Abstraction has 6052 states and 7332 transitions.
[2020-11-25 02:33:06,551 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6052 states and 7332 transitions.
[2020-11-25 02:33:06,588 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6052 to 6024.
[2020-11-25 02:33:06,588 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6024 states.
[2020-11-25 02:33:06,595 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6024 states to 6024 states and 7297 transitions.
[2020-11-25 02:33:06,595 INFO  L751         BuchiCegarLoop]: Abstraction has 6024 states and 7297 transitions.
[2020-11-25 02:33:06,595 INFO  L631         BuchiCegarLoop]: Abstraction has 6024 states and 7297 transitions.
[2020-11-25 02:33:06,595 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 02:33:06,595 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6024 states and 7297 transitions.
[2020-11-25 02:33:06,601 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:33:06,601 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:33:06,601 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:33:06,602 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:33:06,603 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND FALSE  !(DType[this] == OMToken)
[L4942]  COND FALSE  !(DType[this] == ERC20Pausable)
[L4947]  COND FALSE  !(DType[this] == Pausable)
[L4952]  COND TRUE   DType[this] == PauserRole
[L4953]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND TRUE   !(account_s713 != null)
[L4879]              revert := true;
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND TRUE   revert
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND TRUE   revert
[L4953]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4954]  COND TRUE   revert
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND TRUE   revert
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND TRUE   revert
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 > _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND FALSE  !(__exception)
[L1540]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5355]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND TRUE   !!_paused_Pausable[this]
[L8321]              revert := true;
[L5355]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5356]  COND TRUE   revert
[L1540]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1541]              assume !revert && gas >= 0;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 > _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND FALSE  !(__exception)
[L1540]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5355]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND TRUE   !!_paused_Pausable[this]
[L8321]              revert := true;
[L5355]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5356]  COND TRUE   revert
[L1540]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1541]              assume !revert && gas >= 0;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:33:06,605 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:33:06,606 INFO  L82        PathProgramCache]: Analyzing trace with hash 672054537, now seen corresponding path program 1 times
[2020-11-25 02:33:06,606 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:33:06,612 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:33:06,642 INFO  L134       CoverageAnalysis]: Checked inductivity of 16 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 16 trivial. 0 not checked.
[2020-11-25 02:33:06,642 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:33:06,642 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 02:33:06,643 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:33:06,643 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 02:33:06,643 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 02:33:06,643 INFO  L87              Difference]: Start difference. First operand 6024 states and 7297 transitions. cyclomatic complexity: 1275 Second operand 7 states.
[2020-11-25 02:33:06,784 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:33:06,784 INFO  L93              Difference]: Finished difference Result 6087 states and 7383 transitions.
[2020-11-25 02:33:06,784 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 02:33:06,784 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6087 states and 7383 transitions.
[2020-11-25 02:33:06,796 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:33:06,810 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6087 states to 6048 states and 7327 transitions.
[2020-11-25 02:33:06,810 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1282
[2020-11-25 02:33:06,811 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1282
[2020-11-25 02:33:06,811 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6048 states and 7327 transitions.
[2020-11-25 02:33:06,814 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:33:06,815 INFO  L728         BuchiCegarLoop]: Abstraction has 6048 states and 7327 transitions.
[2020-11-25 02:33:06,819 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6048 states and 7327 transitions.
[2020-11-25 02:33:06,852 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6048 to 6016.
[2020-11-25 02:33:06,852 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6016 states.
[2020-11-25 02:33:06,858 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6016 states to 6016 states and 7287 transitions.
[2020-11-25 02:33:06,858 INFO  L751         BuchiCegarLoop]: Abstraction has 6016 states and 7287 transitions.
[2020-11-25 02:33:06,858 INFO  L631         BuchiCegarLoop]: Abstraction has 6016 states and 7287 transitions.
[2020-11-25 02:33:06,858 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 02:33:06,858 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6016 states and 7287 transitions.
[2020-11-25 02:33:06,864 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:33:06,864 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:33:06,864 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:33:06,865 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:33:06,865 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND TRUE   !(account_s713 != null)
[L4879]              revert := true;
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND TRUE   revert
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND TRUE   revert
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND TRUE   revert
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND TRUE   revert
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND TRUE   revert
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 > _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND FALSE  !(__exception)
[L1540]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5355]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND TRUE   !!_paused_Pausable[this]
[L8321]              revert := true;
[L5355]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5356]  COND TRUE   revert
[L1540]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1541]              assume !revert && gas >= 0;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 > _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND FALSE  !(__exception)
[L1540]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5355]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND TRUE   !!_paused_Pausable[this]
[L8321]              revert := true;
[L5355]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5356]  COND TRUE   revert
[L1540]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1541]              assume !revert && gas >= 0;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:33:06,868 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:33:06,868 INFO  L82        PathProgramCache]: Analyzing trace with hash -2018607425, now seen corresponding path program 1 times
[2020-11-25 02:33:06,869 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:33:06,876 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:33:06,904 INFO  L134       CoverageAnalysis]: Checked inductivity of 16 backedges. 0 proven. 7 refuted. 0 times theorem prover too weak. 9 trivial. 0 not checked.
[2020-11-25 02:33:06,905 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:33:06,905 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-11-25 02:33:06,905 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:33:06,905 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 02:33:06,905 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=73, Unknown=0, NotChecked=0, Total=90
[2020-11-25 02:33:06,905 INFO  L87              Difference]: Start difference. First operand 6016 states and 7287 transitions. cyclomatic complexity: 1273 Second operand 10 states.
[2020-11-25 02:33:06,987 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:33:06,987 INFO  L93              Difference]: Finished difference Result 6088 states and 7397 transitions.
[2020-11-25 02:33:06,987 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 02:33:06,987 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6088 states and 7397 transitions.
[2020-11-25 02:33:06,998 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:33:07,010 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6088 states to 6088 states and 7397 transitions.
[2020-11-25 02:33:07,010 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1298
[2020-11-25 02:33:07,011 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1298
[2020-11-25 02:33:07,011 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6088 states and 7397 transitions.
[2020-11-25 02:33:07,015 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:33:07,015 INFO  L728         BuchiCegarLoop]: Abstraction has 6088 states and 7397 transitions.
[2020-11-25 02:33:07,020 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6088 states and 7397 transitions.
[2020-11-25 02:33:07,050 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6088 to 6023.
[2020-11-25 02:33:07,051 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6023 states.
[2020-11-25 02:33:07,057 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6023 states to 6023 states and 7296 transitions.
[2020-11-25 02:33:07,057 INFO  L751         BuchiCegarLoop]: Abstraction has 6023 states and 7296 transitions.
[2020-11-25 02:33:07,057 INFO  L631         BuchiCegarLoop]: Abstraction has 6023 states and 7296 transitions.
[2020-11-25 02:33:07,057 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 02:33:07,057 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6023 states and 7296 transitions.
[2020-11-25 02:33:07,063 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:33:07,064 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:33:07,064 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:33:07,065 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:33:07,065 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND TRUE   !!__var_18
[L4816]              revert := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND TRUE   revert
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND TRUE   revert
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND TRUE   revert
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND TRUE   revert
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 > _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND FALSE  !(__exception)
[L1540]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5355]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND TRUE   !!_paused_Pausable[this]
[L8321]              revert := true;
[L5355]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5356]  COND TRUE   revert
[L1540]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1541]              assume !revert && gas >= 0;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 > _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND FALSE  !(__exception)
[L1540]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5355]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND TRUE   !!_paused_Pausable[this]
[L8321]              revert := true;
[L5355]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5356]  COND TRUE   revert
[L1540]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1541]              assume !revert && gas >= 0;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:33:07,068 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:33:07,068 INFO  L82        PathProgramCache]: Analyzing trace with hash 1870184593, now seen corresponding path program 1 times
[2020-11-25 02:33:07,069 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:33:07,075 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:33:07,096 INFO  L134       CoverageAnalysis]: Checked inductivity of 16 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 16 trivial. 0 not checked.
[2020-11-25 02:33:07,096 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:33:07,096 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 02:33:07,096 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:33:07,096 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 02:33:07,096 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 02:33:07,097 INFO  L87              Difference]: Start difference. First operand 6023 states and 7296 transitions. cyclomatic complexity: 1275 Second operand 3 states.
[2020-11-25 02:33:07,199 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:33:07,199 INFO  L93              Difference]: Finished difference Result 6644 states and 7655 transitions.
[2020-11-25 02:33:07,199 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 02:33:07,199 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6644 states and 7655 transitions.
[2020-11-25 02:33:07,212 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:33:07,226 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6644 states to 5940 states and 6800 transitions.
[2020-11-25 02:33:07,227 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1160
[2020-11-25 02:33:07,227 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1218
[2020-11-25 02:33:07,227 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5940 states and 6800 transitions.
[2020-11-25 02:33:07,231 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:33:07,231 INFO  L728         BuchiCegarLoop]: Abstraction has 5940 states and 6800 transitions.
[2020-11-25 02:33:07,236 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5940 states and 6800 transitions.
[2020-11-25 02:33:07,267 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5940 to 5445.
[2020-11-25 02:33:07,267 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5445 states.
[2020-11-25 02:33:07,273 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5445 states to 5445 states and 6179 transitions.
[2020-11-25 02:33:07,273 INFO  L751         BuchiCegarLoop]: Abstraction has 5445 states and 6179 transitions.
[2020-11-25 02:33:07,273 INFO  L631         BuchiCegarLoop]: Abstraction has 5445 states and 6179 transitions.
[2020-11-25 02:33:07,273 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 02:33:07,273 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5445 states and 6179 transitions.
[2020-11-25 02:33:07,280 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:33:07,280 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:33:07,280 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:33:07,283 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:33:07,284 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND FALSE  !(revert)
[L6192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L6192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6193]  COND FALSE  !(revert)
[L6196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5304]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5304]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  COND FALSE  !(revert)
[L5308]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5308]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5309]  COND FALSE  !(revert)
[L5312]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5312]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5313]  COND FALSE  !(revert)
[L5316]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L5316]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5317]  COND FALSE  !(revert)
[L5320]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5273]              assume msgsender_MSG != null;
[L5274]              Balance[this] := 0;
[L5320]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5321]  COND FALSE  !(revert)
[L6196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6197]  COND FALSE  !(revert)
[L6200]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5618]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5618]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5619]  COND FALSE  !(revert)
[L5622]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5593]              assume msgsender_MSG != null;
[L5594]              Balance[this] := 0;
[L5595]              _name_ERC20Detailed[this] := -1676908070;
[L5596]              _symbol_ERC20Detailed[this] := -1676908070;
[L5597]              _decimals_ERC20Detailed[this] := 0;
[L5599]              _name_ERC20Detailed[this] := name_s1022;
[L5600]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5601]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5622]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5623]  COND FALSE  !(revert)
[L6200]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6201]  COND FALSE  !(revert)
[L6204]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND FALSE  !(DType[this] == OMToken)
[L5715]  COND FALSE  !(DType[this] == ERC20Mintable)
[L5720]  COND TRUE   DType[this] == MinterRole
[L5721]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5721]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5722]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L6204]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6205]  COND FALSE  !(revert)
[L6208]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5938]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5938]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  COND FALSE  !(revert)
[L5942]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5942]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5943]  COND FALSE  !(revert)
[L5946]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND FALSE  !(DType[this] == OMToken)
[L5715]  COND FALSE  !(DType[this] == ERC20Mintable)
[L5720]  COND TRUE   DType[this] == MinterRole
[L5721]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5721]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5722]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L5946]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5947]  COND FALSE  !(revert)
[L5950]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5911]              assume msgsender_MSG != null;
[L5912]              Balance[this] := 0;
[L5950]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5951]  COND FALSE  !(revert)
[L6208]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6209]  COND FALSE  !(revert)
[L6212]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6036]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6036]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  COND FALSE  !(revert)
[L6040]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6040]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6041]  COND FALSE  !(revert)
[L6044]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]              assume msgsender_MSG != null;
[L6014]              Balance[this] := 0;
[L6044]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6045]  COND FALSE  !(revert)
[L6212]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]  COND FALSE  !(revert)
[L6216]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6129]              assume msgsender_MSG != null;
[L6130]              Balance[this] := 0;
[L6216]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6217]  COND FALSE  !(revert)
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 > _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND FALSE  !(__exception)
[L1540]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5355]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5355]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5356]  COND FALSE  !(revert)
[L5359]  COND TRUE   DType[this] == OMToken
[L5360]  CALL        call __var_25 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L4288]  COND TRUE   DType[this] == OMToken
[L4289]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4549]              __var_7 := null;
[L4550]  COND FALSE  !(!(to_s495 != null))
[L4554]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4554]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4555]  COND FALSE  !(revert)
[L4558]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L4559]              _balances_ERC20[this][from_s495] := __var_8;
[L4560]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L4561]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4137]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND FALSE  !(!(c_s173 >= a_s173))
[L4142]              __ret_0_ := c_s173;
[L4561]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4562]  COND FALSE  !(revert)
[L4565]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L4566]              _balances_ERC20[this][to_s495] := __var_9;
[L4567]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L4568]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4289]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4290]  COND FALSE  !(revert)
[L4316]              __ret_0_ := true;
[L5360]  RET         call __var_25 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5361]  COND FALSE  !(revert)
[L5372]              __ret_0_ := __var_25;
[L1540]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1541]              assume !revert && gas >= 0;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 > _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND FALSE  !(__exception)
[L1540]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5355]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5355]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5356]  COND FALSE  !(revert)
[L5359]  COND TRUE   DType[this] == OMToken
[L5360]  CALL        call __var_25 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L4288]  COND TRUE   DType[this] == OMToken
[L4289]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4549]              __var_7 := null;
[L4550]  COND FALSE  !(!(to_s495 != null))
[L4554]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4554]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4555]  COND FALSE  !(revert)
[L4558]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L4559]              _balances_ERC20[this][from_s495] := __var_8;
[L4560]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L4561]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4137]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND FALSE  !(!(c_s173 >= a_s173))
[L4142]              __ret_0_ := c_s173;
[L4561]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4562]  COND FALSE  !(revert)
[L4565]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L4566]              _balances_ERC20[this][to_s495] := __var_9;
[L4567]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L4568]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4289]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4290]  COND FALSE  !(revert)
[L4316]              __ret_0_ := true;
[L5360]  RET         call __var_25 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5361]  COND FALSE  !(revert)
[L5372]              __ret_0_ := __var_25;
[L1540]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1541]              assume !revert && gas >= 0;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:33:07,290 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:33:07,290 INFO  L82        PathProgramCache]: Analyzing trace with hash 36712506, now seen corresponding path program 1 times
[2020-11-25 02:33:07,291 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:33:07,317 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:33:07,528 INFO  L134       CoverageAnalysis]: Checked inductivity of 1032 backedges. 0 proven. 9 refuted. 0 times theorem prover too weak. 1023 trivial. 0 not checked.
[2020-11-25 02:33:07,528 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:33:07,528 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 02:33:07,528 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:33:07,529 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 02:33:07,529 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 02:33:07,529 INFO  L87              Difference]: Start difference. First operand 5445 states and 6179 transitions. cyclomatic complexity: 736 Second operand 7 states.
[2020-11-25 02:33:07,639 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:33:07,640 INFO  L93              Difference]: Finished difference Result 5468 states and 6205 transitions.
[2020-11-25 02:33:07,640 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 02:33:07,640 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5468 states and 6205 transitions.
[2020-11-25 02:33:07,649 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:33:07,659 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5468 states to 5451 states and 6185 transitions.
[2020-11-25 02:33:07,659 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1177
[2020-11-25 02:33:07,659 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1177
[2020-11-25 02:33:07,659 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5451 states and 6185 transitions.
[2020-11-25 02:33:07,662 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:33:07,663 INFO  L728         BuchiCegarLoop]: Abstraction has 5451 states and 6185 transitions.
[2020-11-25 02:33:07,666 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5451 states and 6185 transitions.
[2020-11-25 02:33:07,691 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5451 to 5451.
[2020-11-25 02:33:07,691 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5451 states.
[2020-11-25 02:33:07,696 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5451 states to 5451 states and 6185 transitions.
[2020-11-25 02:33:07,696 INFO  L751         BuchiCegarLoop]: Abstraction has 5451 states and 6185 transitions.
[2020-11-25 02:33:07,696 INFO  L631         BuchiCegarLoop]: Abstraction has 5451 states and 6185 transitions.
[2020-11-25 02:33:07,697 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 02:33:07,697 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5451 states and 6185 transitions.
[2020-11-25 02:33:07,702 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:33:07,702 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:33:07,702 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:33:07,704 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:33:07,704 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND FALSE  !(revert)
[L6192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L6192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6193]  COND FALSE  !(revert)
[L6196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5304]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5304]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  COND FALSE  !(revert)
[L5308]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5308]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5309]  COND FALSE  !(revert)
[L5312]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5312]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5313]  COND FALSE  !(revert)
[L5316]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L5316]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5317]  COND FALSE  !(revert)
[L5320]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5273]              assume msgsender_MSG != null;
[L5274]              Balance[this] := 0;
[L5320]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5321]  COND FALSE  !(revert)
[L6196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6197]  COND FALSE  !(revert)
[L6200]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5618]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5618]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5619]  COND FALSE  !(revert)
[L5622]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5593]              assume msgsender_MSG != null;
[L5594]              Balance[this] := 0;
[L5595]              _name_ERC20Detailed[this] := -1676908070;
[L5596]              _symbol_ERC20Detailed[this] := -1676908070;
[L5597]              _decimals_ERC20Detailed[this] := 0;
[L5599]              _name_ERC20Detailed[this] := name_s1022;
[L5600]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5601]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5622]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5623]  COND FALSE  !(revert)
[L6200]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6201]  COND FALSE  !(revert)
[L6204]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L6204]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6205]  COND FALSE  !(revert)
[L6208]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5938]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5938]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  COND FALSE  !(revert)
[L5942]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5942]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5943]  COND FALSE  !(revert)
[L5946]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L5946]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5947]  COND FALSE  !(revert)
[L5950]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5911]              assume msgsender_MSG != null;
[L5912]              Balance[this] := 0;
[L5950]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5951]  COND FALSE  !(revert)
[L6208]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6209]  COND FALSE  !(revert)
[L6212]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6036]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6036]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  COND FALSE  !(revert)
[L6040]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6040]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6041]  COND FALSE  !(revert)
[L6044]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]              assume msgsender_MSG != null;
[L6014]              Balance[this] := 0;
[L6044]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6045]  COND FALSE  !(revert)
[L6212]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]  COND FALSE  !(revert)
[L6216]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6129]              assume msgsender_MSG != null;
[L6130]              Balance[this] := 0;
[L6216]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6217]  COND FALSE  !(revert)
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 > _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND FALSE  !(__exception)
[L1540]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5355]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5355]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5356]  COND FALSE  !(revert)
[L5359]  COND TRUE   DType[this] == OMToken
[L5360]  CALL        call __var_25 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L4288]  COND TRUE   DType[this] == OMToken
[L4289]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4549]              __var_7 := null;
[L4550]  COND FALSE  !(!(to_s495 != null))
[L4554]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4554]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4555]  COND FALSE  !(revert)
[L4558]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L4559]              _balances_ERC20[this][from_s495] := __var_8;
[L4560]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L4561]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4137]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND FALSE  !(!(c_s173 >= a_s173))
[L4142]              __ret_0_ := c_s173;
[L4561]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4562]  COND FALSE  !(revert)
[L4565]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L4566]              _balances_ERC20[this][to_s495] := __var_9;
[L4567]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L4568]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4289]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4290]  COND FALSE  !(revert)
[L4316]              __ret_0_ := true;
[L5360]  RET         call __var_25 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5361]  COND FALSE  !(revert)
[L5372]              __ret_0_ := __var_25;
[L1540]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1541]              assume !revert && gas >= 0;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND TRUE   gas >= 0
[L9759]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]              assume msgvalue_MSG == 0;
[L9761]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s916 && value_s916 > _balances_ERC20[this][msgsender_MSG]) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1511]              havoc __exception;
[L1512]              revert := false;
[L1513]  COND FALSE  !(__exception)
[L1540]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5355]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8320]  COND FALSE  !(!!_paused_Pausable[this])
[L5355]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5356]  COND FALSE  !(revert)
[L5359]  COND TRUE   DType[this] == OMToken
[L5360]  CALL        call __var_25 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L4288]  COND TRUE   DType[this] == OMToken
[L4289]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4549]              __var_7 := null;
[L4550]  COND FALSE  !(!(to_s495 != null))
[L4554]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4113]  COND FALSE  !(!(b_s149 <= a_s149))
[L4117]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4118]              __ret_0_ := c_s149;
[L4554]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s495], value_s495);
[L4555]  COND FALSE  !(revert)
[L4558]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s495];
[L4559]              _balances_ERC20[this][from_s495] := __var_8;
[L4560]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s495];
[L4561]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4137]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND FALSE  !(!(c_s173 >= a_s173))
[L4142]              __ret_0_ := c_s173;
[L4561]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s495], value_s495);
[L4562]  COND FALSE  !(revert)
[L4565]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s495];
[L4566]              _balances_ERC20[this][to_s495] := __var_9;
[L4567]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s495];
[L4568]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4289]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4290]  COND FALSE  !(revert)
[L4316]              __ret_0_ := true;
[L5360]  RET         call __var_25 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5361]  COND FALSE  !(revert)
[L5372]              __ret_0_ := __var_25;
[L1540]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1541]              assume !revert && gas >= 0;
[L9761]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:33:07,710 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:33:07,710 INFO  L82        PathProgramCache]: Analyzing trace with hash -1946878310, now seen corresponding path program 1 times
[2020-11-25 02:33:07,712 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:33:07,737 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:33:07,975 INFO  L134       CoverageAnalysis]: Checked inductivity of 1030 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1030 trivial. 0 not checked.
[2020-11-25 02:33:07,975 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:33:07,975 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 02:33:07,976 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:33:07,976 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 02:33:07,976 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=55, Unknown=0, NotChecked=0, Total=72
[2020-11-25 02:33:07,976 INFO  L87              Difference]: Start difference. First operand 5451 states and 6185 transitions. cyclomatic complexity: 736 Second operand 9 states.
[2020-11-25 02:33:09,713 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:33:09,713 INFO  L93              Difference]: Finished difference Result 3149 states and 3554 transitions.
[2020-11-25 02:33:09,714 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 02:33:09,714 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3149 states and 3554 transitions.
[2020-11-25 02:33:09,719 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 02:33:09,719 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3149 states to 0 states and 0 transitions.
[2020-11-25 02:33:09,719 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 02:33:09,719 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 02:33:09,719 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 02:33:09,719 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:33:09,719 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 02:33:09,719 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 02:33:09,719 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 02:33:09,719 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 02:33:09,719 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 02:33:09,719 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 02:33:09,719 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 02:33:09,723 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:33:09 BasicIcfg
[2020-11-25 02:33:09,723 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 02:33:09,723 INFO  L168              Benchmark]: Toolchain (without parser) took 10866.19 ms. Allocated memory was 1.0 GB in the beginning and 2.3 GB in the end (delta: 1.3 GB). Free memory was 924.5 MB in the beginning and 2.1 GB in the end (delta: -1.1 GB). Peak memory consumption was 128.8 MB. Max. memory is 15.3 GB.
[2020-11-25 02:33:09,724 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 02:33:09,724 INFO  L168              Benchmark]: Boogie Preprocessor took 150.88 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 903.0 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
[2020-11-25 02:33:09,724 INFO  L168              Benchmark]: UtopiaSpecLang took 75.59 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 892.3 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 02:33:09,724 INFO  L168              Benchmark]: Boogie Printer took 31.07 ms. Allocated memory is still 1.0 GB. Free memory was 892.3 MB in the beginning and 886.7 MB in the end (delta: 5.6 MB). Peak memory consumption was 5.6 MB. Max. memory is 15.3 GB.
[2020-11-25 02:33:09,725 INFO  L168              Benchmark]: RCFGBuilder took 1281.07 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 69.7 MB). Free memory was 886.7 MB in the beginning and 848.2 MB in the end (delta: 38.5 MB). Peak memory consumption was 175.8 MB. Max. memory is 15.3 GB.
[2020-11-25 02:33:09,725 INFO  L168              Benchmark]: UtopiaLTL2Aut took 35.04 ms. Allocated memory is still 1.1 GB. Free memory was 848.2 MB in the beginning and 837.8 MB in the end (delta: 10.3 MB). Peak memory consumption was 10.3 MB. Max. memory is 15.3 GB.
[2020-11-25 02:33:09,726 INFO  L168              Benchmark]: BÃ¼chi Program Product took 3047.97 ms. Allocated memory was 1.1 GB in the beginning and 1.6 GB in the end (delta: 451.4 MB). Free memory was 837.8 MB in the beginning and 1.3 GB in the end (delta: -479.6 MB). Peak memory consumption was 417.3 MB. Max. memory is 15.3 GB.
[2020-11-25 02:33:09,726 INFO  L168              Benchmark]: BlockEncodingV2 took 261.40 ms. Allocated memory is still 1.6 GB. Free memory was 1.3 GB in the beginning and 1.2 GB in the end (delta: 143.8 MB). Peak memory consumption was 143.8 MB. Max. memory is 15.3 GB.
[2020-11-25 02:33:09,726 INFO  L168              Benchmark]: BuchiAutomizer took 5980.15 ms. Allocated memory was 1.6 GB in the beginning and 2.3 GB in the end (delta: 751.3 MB). Free memory was 1.2 GB in the beginning and 2.1 GB in the end (delta: -894.4 MB). There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 02:33:09,728 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    9270 locations, 17164 edges
  - StatisticsResult: Encoded RCFG
    9062 locations, 16632 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 150.88 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 903.0 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 75.59 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 892.3 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 31.07 ms. Allocated memory is still 1.0 GB. Free memory was 892.3 MB in the beginning and 886.7 MB in the end (delta: 5.6 MB). Peak memory consumption was 5.6 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1281.07 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 69.7 MB). Free memory was 886.7 MB in the beginning and 848.2 MB in the end (delta: 38.5 MB). Peak memory consumption was 175.8 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 35.04 ms. Allocated memory is still 1.1 GB. Free memory was 848.2 MB in the beginning and 837.8 MB in the end (delta: 10.3 MB). Peak memory consumption was 10.3 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 3047.97 ms. Allocated memory was 1.1 GB in the beginning and 1.6 GB in the end (delta: 451.4 MB). Free memory was 837.8 MB in the beginning and 1.3 GB in the end (delta: -479.6 MB). Peak memory consumption was 417.3 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 261.40 ms. Allocated memory is still 1.6 GB. Free memory was 1.3 GB in the beginning and 1.2 GB in the end (delta: 143.8 MB). Peak memory consumption was 143.8 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 5980.15 ms. Allocated memory was 1.6 GB in the beginning and 2.3 GB in the end (delta: 751.3 MB). Free memory was 1.2 GB in the beginning and 2.1 GB in the end (delta: -894.4 MB). There was no memory consumed. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    3607 locations, 5219 edges
  - StatisticsResult: BuchiProgram size
    9270 locations, 17164 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 9 terminating modules (9 trivial, 0 deterministic, 0 nondeterministic). 9 modules have a trivial ranking function, the largest among these consists of 10 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 5.9s and 10 iterations.  TraceHistogramMax:9. Analysis of lassos took 1.2s. Construction of modules took 2.3s. BÃ¼chi inclusion checks took 1.2s. Highest rank in rank-based complementation 0. Minimization of det autom 9. Minimization of nondet autom 0. Automata minimization 0.4s AutomataMinimizationTime, 8 MinimizatonAttempts, 1257 StatesRemovedByMinimization, 6 NontrivialMinimizations. Non-live state removal took 0.2s Buchi closure took 0.0s. Biggest automaton had 6028 states and ocurred in iteration 3.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 50423 SDtfs, 15604 SDslu, 184850 SDs, 0 SdLazy, 22802 SolverSat, 4045 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 2.3s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU9 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transfer_ERC20Pausable0) ==> ( <>(fail_transfer_ERC20Pausable0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
