This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 13:24:25,238 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 13:24:25,241 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 13:24:25,253 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 13:24:25,253 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 13:24:25,254 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 13:24:25,255 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 13:24:25,257 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 13:24:25,260 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 13:24:25,261 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 13:24:25,262 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 13:24:25,263 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 13:24:25,264 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 13:24:25,265 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 13:24:25,266 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 13:24:25,267 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 13:24:25,268 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 13:24:25,269 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 13:24:25,271 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 13:24:25,272 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 13:24:25,273 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 13:24:25,273 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 13:24:25,275 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 13:24:25,275 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 13:24:25,275 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 13:24:25,276 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 13:24:25,276 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 13:24:25,277 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 13:24:25,277 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 13:24:25,277 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 13:24:25,277 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 13:24:25,278 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 13:24:25,278 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 13:24:25,279 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 13:24:25,279 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 13:24:25,280 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 13:24:25,280 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 13:24:25,280 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 13:24:25,280 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 13:24:25,281 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 13:24:25,281 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 13:24:25,282 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 13:24:25,289 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 13:24:25,290 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 13:24:25,290 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 13:24:25,290 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 13:24:25,291 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 13:24:25,291 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 13:24:25,291 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 13:24:25,291 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 13:24:25,291 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 13:24:25,291 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 13:24:25,291 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 13:24:25,291 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 13:24:25,292 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 13:24:25,292 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 13:24:25,292 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 13:24:25,292 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 13:24:25,292 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 13:24:25,292 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 13:24:25,292 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 13:24:25,292 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 13:24:25,292 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 13:24:25,293 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 13:24:25,293 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 13:24:25,293 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 13:24:25,293 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 13:24:25,293 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 13:24:25,320 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 13:24:25,334 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 13:24:25,336 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 13:24:25,337 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 13:24:25,338 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 13:24:25,338 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_transfer-self.bpl
[2020-11-25 13:24:25,338 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_transfer-self.bpl'
[2020-11-25 13:24:25,457 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 13:24:25,458 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 13:24:25,458 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 13:24:25,459 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 13:24:25,459 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 13:24:25,475 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:24:25" (1/1) ...
[2020-11-25 13:24:25,476 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:24:25" (1/1) ...
[2020-11-25 13:24:25,517 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:24:25" (1/1) ...
[2020-11-25 13:24:25,518 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:24:25" (1/1) ...
[2020-11-25 13:24:25,549 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:24:25" (1/1) ...
[2020-11-25 13:24:25,576 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:24:25" (1/1) ...
[2020-11-25 13:24:25,591 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:24:25" (1/1) ...
[2020-11-25 13:24:25,609 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 13:24:25,610 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 13:24:25,610 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 13:24:25,612 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 13:24:25,616 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:24:25" (1/1) ...
[2020-11-25 13:24:25,641 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(DEAPCoin.transfer(to, value), msg.sender == to && value <= balances_BasicToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(DEAPCoin.transfer(to, value), return == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && owner_wallet_DEAPCoin[this] == old(owner_wallet_DEAPCoin[this]) && unsale_owner_wallet_DEAPCoin[this] == old(unsale_owner_wallet_DEAPCoin[this]) && group_lockup_DEAPCoin[this] == old(group_lockup_DEAPCoin[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-25 13:24:25,646 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(DEAPCoin.transfer(to, value), msg.sender == to && value <= balances_BasicToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(DEAPCoin.transfer(to, value), return == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && owner_wallet_DEAPCoin[this] == old(owner_wallet_DEAPCoin[this]) && unsale_owner_wallet_DEAPCoin[this] == old(unsale_owner_wallet_DEAPCoin[this]) && group_lockup_DEAPCoin[this] == old(group_lockup_DEAPCoin[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-25 13:24:25,654 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(DEAPCoin.transfer(to, value), msg.sender == to && value <= balances_BasicToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(DEAPCoin.transfer(to, value), return == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && owner_wallet_DEAPCoin[this] == old(owner_wallet_DEAPCoin[this]) && unsale_owner_wallet_DEAPCoin[this] == old(unsale_owner_wallet_DEAPCoin[this]) && group_lockup_DEAPCoin[this] == old(group_lockup_DEAPCoin[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-25 13:24:25,667 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==_to_s1284 && _value_s1284<=balances_BasicToken[this][msg.sender] ) && _value_s1284>=0 ) && _value_s1284<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BasicToken[this][_to_s1284]>=0 ) && balances_BasicToken[this][_to_s1284]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BasicToken[this][msg.sender]>=0 ) && balances_BasicToken[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DEAPCoin>],IdentifierExpression[_to_s1284,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DEAPCoin>]],BinaryExpression[COMPLEQ,IdentifierExpression[_value_s1284,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DEAPCoin>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DEAPCoin>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DEAPCoin>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[_value_s1284,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DEAPCoin>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_value_s1284,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DEAPCoin>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DEAPCoin>]]],[IdentifierExpression[_to_s1284,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DEAPCoin>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DEAPCoin>]]],[IdentifierExpression[_to_s1284,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DEAPCoin>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DEAPCoin>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DEAPCoin>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DEAPCoin>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DEAPCoin>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 13:24:25,671 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( __ret_0_==true && totalSupply__BasicToken[this]==( old(totalSupply__BasicToken[this]) ) ) && balances_BasicToken[this]==( old(balances_BasicToken[this]) ) ) && allowed_StandardToken[this]==( old(allowed_StandardToken[this]) ) ) && owner_wallet_DEAPCoin[this]==( old(owner_wallet_DEAPCoin[this]) ) ) && unsale_owner_wallet_DEAPCoin[this]==( old(unsale_owner_wallet_DEAPCoin[this]) ) ) && group_lockup_DEAPCoin[this]==( old(group_lockup_DEAPCoin[this]) ) ) && mintingFinished_MintableToken[this]==( old(mintingFinished_MintableToken[this]) ) ) && owner_Ownable[this]==( old(owner_Ownable[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_DEAPCoin>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DEAPCoin>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DEAPCoin>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DEAPCoin>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DEAPCoin>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DEAPCoin>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DEAPCoin>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_wallet_DEAPCoin,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DEAPCoin>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_wallet_DEAPCoin,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DEAPCoin>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[unsale_owner_wallet_DEAPCoin,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DEAPCoin>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[unsale_owner_wallet_DEAPCoin,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DEAPCoin>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[group_lockup_DEAPCoin,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DEAPCoin>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[group_lockup_DEAPCoin,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DEAPCoin>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[mintingFinished_MintableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DEAPCoin>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[mintingFinished_MintableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DEAPCoin>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DEAPCoin>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DEAPCoin>]]]]]]
[2020-11-25 13:24:25,678 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(DEAPCoin.transfer(to, value), msg.sender == to && value <= balances_BasicToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(DEAPCoin.transfer(to, value), return == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && owner_wallet_DEAPCoin[this] == old(owner_wallet_DEAPCoin[this]) && unsale_owner_wallet_DEAPCoin[this] == old(unsale_owner_wallet_DEAPCoin[this]) && group_lockup_DEAPCoin[this] == old(group_lockup_DEAPCoin[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-25 13:24:25,678 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_DEAPCoin0) ==> ( <>AP(success_transfer_DEAPCoin0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 13:24:25,695 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:24:25 PropertyContainer
[2020-11-25 13:24:25,696 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 13:24:25,696 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 13:24:25,696 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 13:24:25,696 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 13:24:25,697 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:24:25" (1/2) ...
[2020-11-25 13:24:25,697 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 13:24:25,697 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 13:24:25,721 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:24:25" (2/2) ...
[2020-11-25 13:24:25,721 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 13:24:25,721 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 13:24:25,721 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 13:24:25,722 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 13:24:25,722 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:24:25" (1/2) ...
[2020-11-25 13:24:25,781 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 13:24:25,781 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 13:24:25,781 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-25 13:24:25,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-25 13:24:25,781 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-25 13:24:25,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-25 13:24:25,782 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-25 13:24:25,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-25 13:24:25,782 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 13:24:25,782 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 13:24:25,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 13:24:25,782 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 13:24:25,782 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 13:24:25,782 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 13:24:25,782 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 13:24:25,782 INFO  L130     BoogieDeclarations]: Found specification of procedure GroupLockup_GroupLockup_NoBaseCtor__success
[2020-11-25 13:24:25,783 INFO  L130     BoogieDeclarations]: Found specification of procedure GroupLockup_GroupLockup
[2020-11-25 13:24:25,783 INFO  L138     BoogieDeclarations]: Found implementation of procedure GroupLockup_GroupLockup
[2020-11-25 13:24:25,783 INFO  L130     BoogieDeclarations]: Found specification of procedure getLockupTime~address_GroupLockup
[2020-11-25 13:24:25,783 INFO  L138     BoogieDeclarations]: Found implementation of procedure getLockupTime~address_GroupLockup
[2020-11-25 13:24:25,783 INFO  L130     BoogieDeclarations]: Found specification of procedure isLockup~uint256_GroupLockup
[2020-11-25 13:24:25,783 INFO  L138     BoogieDeclarations]: Found implementation of procedure isLockup~uint256_GroupLockup
[2020-11-25 13:24:25,783 INFO  L130     BoogieDeclarations]: Found specification of procedure inLockupList~address_GroupLockup
[2020-11-25 13:24:25,783 INFO  L138     BoogieDeclarations]: Found implementation of procedure inLockupList~address_GroupLockup
[2020-11-25 13:24:25,783 INFO  L130     BoogieDeclarations]: Found specification of procedure updateLockupList~address~uint256_GroupLockup
[2020-11-25 13:24:25,783 INFO  L138     BoogieDeclarations]: Found implementation of procedure updateLockupList~address~uint256_GroupLockup
[2020-11-25 13:24:25,783 INFO  L130     BoogieDeclarations]: Found specification of procedure updateLockupTime~uint256~uint256_GroupLockup
[2020-11-25 13:24:25,784 INFO  L138     BoogieDeclarations]: Found implementation of procedure updateLockupTime~uint256~uint256_GroupLockup
[2020-11-25 13:24:25,784 INFO  L130     BoogieDeclarations]: Found specification of procedure lockup_list~address_GroupLockup
[2020-11-25 13:24:25,784 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockup_list~address_GroupLockup
[2020-11-25 13:24:25,784 INFO  L130     BoogieDeclarations]: Found specification of procedure lockup_list_flag~uint256_GroupLockup
[2020-11-25 13:24:25,784 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockup_list_flag~uint256_GroupLockup
[2020-11-25 13:24:25,784 INFO  L130     BoogieDeclarations]: Found specification of procedure user_list~uint256_GroupLockup
[2020-11-25 13:24:25,784 INFO  L138     BoogieDeclarations]: Found implementation of procedure user_list~uint256_GroupLockup
[2020-11-25 13:24:25,784 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-25 13:24:25,784 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic
[2020-11-25 13:24:25,784 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic
[2020-11-25 13:24:25,784 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Basic
[2020-11-25 13:24:25,784 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Basic
[2020-11-25 13:24:25,784 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Basic
[2020-11-25 13:24:25,785 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-25 13:24:25,785 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken
[2020-11-25 13:24:25,785 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken
[2020-11-25 13:24:25,785 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken
[2020-11-25 13:24:25,785 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken
[2020-11-25 13:24:25,785 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken
[2020-11-25 13:24:25,785 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken
[2020-11-25 13:24:25,785 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken
[2020-11-25 13:24:25,785 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken
[2020-11-25 13:24:25,785 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 13:24:25,785 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 13:24:25,785 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 13:24:25,785 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 13:24:25,786 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 13:24:25,786 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 13:24:25,786 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-25 13:24:25,786 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken
[2020-11-25 13:24:25,786 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken
[2020-11-25 13:24:25,786 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-25 13:24:25,786 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-25 13:24:25,786 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken
[2020-11-25 13:24:25,786 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken
[2020-11-25 13:24:25,786 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken
[2020-11-25 13:24:25,786 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken
[2020-11-25 13:24:25,786 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken
[2020-11-25 13:24:25,786 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken
[2020-11-25 13:24:25,786 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-25 13:24:25,787 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-25 13:24:25,787 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-25 13:24:25,787 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken
[2020-11-25 13:24:25,787 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken
[2020-11-25 13:24:25,787 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken
[2020-11-25 13:24:25,787 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken
[2020-11-25 13:24:25,787 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken
[2020-11-25 13:24:25,787 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken
[2020-11-25 13:24:25,787 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken
[2020-11-25 13:24:25,787 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken
[2020-11-25 13:24:25,787 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC223Token_ERC223Token_NoBaseCtor__success
[2020-11-25 13:24:25,787 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC223Token_ERC223Token
[2020-11-25 13:24:25,787 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC223Token_ERC223Token
[2020-11-25 13:24:25,787 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer_ERC223~address~uint256~bytes_ERC223Token
[2020-11-25 13:24:25,788 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC223ContractInterface_ERC223ContractInterface_NoBaseCtor__success
[2020-11-25 13:24:25,788 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC223ContractInterface_ERC223ContractInterface
[2020-11-25 13:24:25,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC223ContractInterface_ERC223ContractInterface
[2020-11-25 13:24:25,788 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenFallback~address~uint256~bytes_ERC223ContractInterface
[2020-11-25 13:24:25,788 INFO  L130     BoogieDeclarations]: Found specification of procedure DEAPCoin_DEAPCoin_NoBaseCtor__success
[2020-11-25 13:24:25,788 INFO  L130     BoogieDeclarations]: Found specification of procedure DEAPCoin_DEAPCoin
[2020-11-25 13:24:25,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure DEAPCoin_DEAPCoin
[2020-11-25 13:24:25,788 INFO  L130     BoogieDeclarations]: Found specification of procedure sendTokens~address~uint256_DEAPCoin
[2020-11-25 13:24:25,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure sendTokens~address~uint256_DEAPCoin
[2020-11-25 13:24:25,788 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_DEAPCoin
[2020-11-25 13:24:25,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_DEAPCoin
[2020-11-25 13:24:25,788 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer_ERC223~address~uint256~bytes_DEAPCoin
[2020-11-25 13:24:25,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer_ERC223~address~uint256~bytes_DEAPCoin
[2020-11-25 13:24:25,789 INFO  L130     BoogieDeclarations]: Found specification of procedure batchTransfer~address~arr~arr_DEAPCoin
[2020-11-25 13:24:25,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure batchTransfer~address~arr~arr_DEAPCoin
[2020-11-25 13:24:25,789 INFO  L130     BoogieDeclarations]: Found specification of procedure name_DEAPCoin
[2020-11-25 13:24:25,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_DEAPCoin
[2020-11-25 13:24:25,789 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_DEAPCoin
[2020-11-25 13:24:25,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_DEAPCoin
[2020-11-25 13:24:25,789 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_DEAPCoin
[2020-11-25 13:24:25,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_DEAPCoin
[2020-11-25 13:24:25,789 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_DEAPCoin
[2020-11-25 13:24:25,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_DEAPCoin
[2020-11-25 13:24:25,789 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SALE_SUPPLY_DEAPCoin
[2020-11-25 13:24:25,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SALE_SUPPLY_DEAPCoin
[2020-11-25 13:24:25,789 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_UNSALE_SUPPLY_DEAPCoin
[2020-11-25 13:24:25,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_UNSALE_SUPPLY_DEAPCoin
[2020-11-25 13:24:25,790 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_wallet_DEAPCoin
[2020-11-25 13:24:25,790 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_wallet_DEAPCoin
[2020-11-25 13:24:25,790 INFO  L130     BoogieDeclarations]: Found specification of procedure unsale_owner_wallet_DEAPCoin
[2020-11-25 13:24:25,790 INFO  L138     BoogieDeclarations]: Found implementation of procedure unsale_owner_wallet_DEAPCoin
[2020-11-25 13:24:25,790 INFO  L130     BoogieDeclarations]: Found specification of procedure group_lockup_DEAPCoin
[2020-11-25 13:24:25,790 INFO  L138     BoogieDeclarations]: Found implementation of procedure group_lockup_DEAPCoin
[2020-11-25 13:24:25,790 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 13:24:25,790 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 13:24:25,790 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 13:24:25,790 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 13:24:25,790 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__success
[2020-11-25 13:24:25,790 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-25 13:24:25,790 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-25 13:24:25,791 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 13:24:25,791 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 13:24:25,791 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_GroupLockup
[2020-11-25 13:24:25,791 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_GroupLockup
[2020-11-25 13:24:25,791 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Basic
[2020-11-25 13:24:25,791 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Basic
[2020-11-25 13:24:25,791 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BasicToken
[2020-11-25 13:24:25,791 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BasicToken
[2020-11-25 13:24:25,791 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 13:24:25,791 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 13:24:25,791 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_StandardToken
[2020-11-25 13:24:25,791 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_StandardToken
[2020-11-25 13:24:25,791 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MintableToken
[2020-11-25 13:24:25,792 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MintableToken
[2020-11-25 13:24:25,792 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC223Token
[2020-11-25 13:24:25,792 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC223Token
[2020-11-25 13:24:25,792 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC223ContractInterface
[2020-11-25 13:24:25,792 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC223ContractInterface
[2020-11-25 13:24:25,792 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_DEAPCoin
[2020-11-25 13:24:25,792 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 13:24:25,792 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 13:24:25,792 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 13:24:25,792 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-25 13:24:25,792 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-25 13:24:25,792 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-25 13:24:25,793 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-25 13:24:25,793 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-25 13:24:25,793 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-25 13:24:25,793 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 13:24:25,793 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 13:24:25,793 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 13:24:25,793 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 13:24:25,793 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 13:24:25,793 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 13:24:25,793 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 13:24:25,793 INFO  L130     BoogieDeclarations]: Found specification of procedure GroupLockup_GroupLockup_NoBaseCtor__fail
[2020-11-25 13:24:25,793 INFO  L130     BoogieDeclarations]: Found specification of procedure GroupLockup_GroupLockup__success
[2020-11-25 13:24:25,794 INFO  L130     BoogieDeclarations]: Found specification of procedure GroupLockup_GroupLockup__fail
[2020-11-25 13:24:25,794 INFO  L130     BoogieDeclarations]: Found specification of procedure getLockupTime~address_GroupLockup__success
[2020-11-25 13:24:25,794 INFO  L130     BoogieDeclarations]: Found specification of procedure getLockupTime~address_GroupLockup__fail
[2020-11-25 13:24:25,794 INFO  L130     BoogieDeclarations]: Found specification of procedure isLockup~uint256_GroupLockup__success
[2020-11-25 13:24:25,794 INFO  L130     BoogieDeclarations]: Found specification of procedure isLockup~uint256_GroupLockup__fail
[2020-11-25 13:24:25,794 INFO  L130     BoogieDeclarations]: Found specification of procedure inLockupList~address_GroupLockup__success
[2020-11-25 13:24:25,794 INFO  L130     BoogieDeclarations]: Found specification of procedure inLockupList~address_GroupLockup__fail
[2020-11-25 13:24:25,794 INFO  L130     BoogieDeclarations]: Found specification of procedure updateLockupList~address~uint256_GroupLockup__success
[2020-11-25 13:24:25,794 INFO  L130     BoogieDeclarations]: Found specification of procedure updateLockupList~address~uint256_GroupLockup__fail
[2020-11-25 13:24:25,794 INFO  L130     BoogieDeclarations]: Found specification of procedure updateLockupTime~uint256~uint256_GroupLockup__success
[2020-11-25 13:24:25,794 INFO  L130     BoogieDeclarations]: Found specification of procedure updateLockupTime~uint256~uint256_GroupLockup__fail
[2020-11-25 13:24:25,794 INFO  L130     BoogieDeclarations]: Found specification of procedure lockup_list~address_GroupLockup__success
[2020-11-25 13:24:25,794 INFO  L130     BoogieDeclarations]: Found specification of procedure lockup_list~address_GroupLockup__fail
[2020-11-25 13:24:25,794 INFO  L130     BoogieDeclarations]: Found specification of procedure lockup_list_flag~uint256_GroupLockup__success
[2020-11-25 13:24:25,795 INFO  L130     BoogieDeclarations]: Found specification of procedure lockup_list_flag~uint256_GroupLockup__fail
[2020-11-25 13:24:25,795 INFO  L130     BoogieDeclarations]: Found specification of procedure user_list~uint256_GroupLockup__success
[2020-11-25 13:24:25,795 INFO  L130     BoogieDeclarations]: Found specification of procedure user_list~uint256_GroupLockup__fail
[2020-11-25 13:24:25,795 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-25 13:24:25,795 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__success
[2020-11-25 13:24:25,795 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__fail
[2020-11-25 13:24:25,795 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-25 13:24:25,795 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__success
[2020-11-25 13:24:25,795 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__fail
[2020-11-25 13:24:25,795 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__success
[2020-11-25 13:24:25,795 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__fail
[2020-11-25 13:24:25,795 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__success
[2020-11-25 13:24:25,795 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__fail
[2020-11-25 13:24:25,795 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__success
[2020-11-25 13:24:25,795 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__fail
[2020-11-25 13:24:25,796 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 13:24:25,796 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 13:24:25,796 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 13:24:25,796 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-25 13:24:25,796 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__success
[2020-11-25 13:24:25,796 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__fail
[2020-11-25 13:24:25,796 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-25 13:24:25,796 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-25 13:24:25,796 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__success
[2020-11-25 13:24:25,796 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__fail
[2020-11-25 13:24:25,796 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__success
[2020-11-25 13:24:25,796 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__fail
[2020-11-25 13:24:25,796 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-25 13:24:25,796 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-25 13:24:25,796 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-25 13:24:25,797 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-25 13:24:25,797 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-25 13:24:25,797 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__success
[2020-11-25 13:24:25,797 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__fail
[2020-11-25 13:24:25,797 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__success
[2020-11-25 13:24:25,797 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__fail
[2020-11-25 13:24:25,797 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__success
[2020-11-25 13:24:25,797 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__fail
[2020-11-25 13:24:25,797 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__success
[2020-11-25 13:24:25,797 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__fail
[2020-11-25 13:24:25,797 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC223Token_ERC223Token_NoBaseCtor__fail
[2020-11-25 13:24:25,797 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC223Token_ERC223Token__success
[2020-11-25 13:24:25,797 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC223Token_ERC223Token__fail
[2020-11-25 13:24:25,797 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC223ContractInterface_ERC223ContractInterface_NoBaseCtor__fail
[2020-11-25 13:24:25,797 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC223ContractInterface_ERC223ContractInterface__success
[2020-11-25 13:24:25,797 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC223ContractInterface_ERC223ContractInterface__fail
[2020-11-25 13:24:25,797 INFO  L130     BoogieDeclarations]: Found specification of procedure DEAPCoin_DEAPCoin_NoBaseCtor__fail
[2020-11-25 13:24:25,798 INFO  L130     BoogieDeclarations]: Found specification of procedure DEAPCoin_DEAPCoin__success
[2020-11-25 13:24:25,798 INFO  L130     BoogieDeclarations]: Found specification of procedure DEAPCoin_DEAPCoin__fail
[2020-11-25 13:24:25,798 INFO  L130     BoogieDeclarations]: Found specification of procedure sendTokens~address~uint256_DEAPCoin__success
[2020-11-25 13:24:25,798 INFO  L130     BoogieDeclarations]: Found specification of procedure sendTokens~address~uint256_DEAPCoin__fail
[2020-11-25 13:24:25,798 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_DEAPCoin__success
[2020-11-25 13:24:25,798 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_DEAPCoin__fail
[2020-11-25 13:24:25,798 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer_ERC223~address~uint256~bytes_DEAPCoin__success
[2020-11-25 13:24:25,798 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer_ERC223~address~uint256~bytes_DEAPCoin__fail
[2020-11-25 13:24:25,798 INFO  L130     BoogieDeclarations]: Found specification of procedure batchTransfer~address~arr~arr_DEAPCoin__success
[2020-11-25 13:24:25,798 INFO  L130     BoogieDeclarations]: Found specification of procedure batchTransfer~address~arr~arr_DEAPCoin__fail
[2020-11-25 13:24:25,798 INFO  L130     BoogieDeclarations]: Found specification of procedure name_DEAPCoin__success
[2020-11-25 13:24:25,798 INFO  L130     BoogieDeclarations]: Found specification of procedure name_DEAPCoin__fail
[2020-11-25 13:24:25,798 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_DEAPCoin__success
[2020-11-25 13:24:25,798 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_DEAPCoin__fail
[2020-11-25 13:24:25,798 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_DEAPCoin__success
[2020-11-25 13:24:25,798 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_DEAPCoin__fail
[2020-11-25 13:24:25,799 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_DEAPCoin__success
[2020-11-25 13:24:25,799 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_DEAPCoin__fail
[2020-11-25 13:24:25,799 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SALE_SUPPLY_DEAPCoin__success
[2020-11-25 13:24:25,799 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SALE_SUPPLY_DEAPCoin__fail
[2020-11-25 13:24:25,799 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_UNSALE_SUPPLY_DEAPCoin__success
[2020-11-25 13:24:25,799 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_UNSALE_SUPPLY_DEAPCoin__fail
[2020-11-25 13:24:25,799 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_wallet_DEAPCoin__success
[2020-11-25 13:24:25,799 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_wallet_DEAPCoin__fail
[2020-11-25 13:24:25,799 INFO  L130     BoogieDeclarations]: Found specification of procedure unsale_owner_wallet_DEAPCoin__success
[2020-11-25 13:24:25,799 INFO  L130     BoogieDeclarations]: Found specification of procedure unsale_owner_wallet_DEAPCoin__fail
[2020-11-25 13:24:25,799 INFO  L130     BoogieDeclarations]: Found specification of procedure group_lockup_DEAPCoin__success
[2020-11-25 13:24:25,799 INFO  L130     BoogieDeclarations]: Found specification of procedure group_lockup_DEAPCoin__fail
[2020-11-25 13:24:25,799 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 13:24:25,799 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 13:24:25,799 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 13:24:25,800 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 13:24:25,800 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__fail
[2020-11-25 13:24:25,800 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 13:24:25,800 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 13:24:25,800 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 13:24:25,800 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 13:24:25,800 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-25 13:24:25,800 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-25 13:24:25,800 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-25 13:24:25,800 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-25 13:24:25,800 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-25 13:24:25,800 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-25 13:24:25,800 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 13:24:25,800 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 13:24:25,800 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 13:24:25,800 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 13:24:25,801 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 13:24:25,801 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 13:24:25,801 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 13:24:25,801 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 13:24:25,801 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 13:24:25,801 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 13:24:25,801 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 13:24:25,801 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 13:24:25,801 INFO  L138     BoogieDeclarations]: Found implementation of procedure GroupLockup_GroupLockup_NoBaseCtor__fail
[2020-11-25 13:24:25,801 INFO  L138     BoogieDeclarations]: Found implementation of procedure GroupLockup_GroupLockup_NoBaseCtor__success
[2020-11-25 13:24:25,801 INFO  L138     BoogieDeclarations]: Found implementation of procedure GroupLockup_GroupLockup__fail
[2020-11-25 13:24:25,802 INFO  L138     BoogieDeclarations]: Found implementation of procedure GroupLockup_GroupLockup__success
[2020-11-25 13:24:25,802 INFO  L138     BoogieDeclarations]: Found implementation of procedure getLockupTime~address_GroupLockup__fail
[2020-11-25 13:24:25,802 INFO  L138     BoogieDeclarations]: Found implementation of procedure getLockupTime~address_GroupLockup__success
[2020-11-25 13:24:25,802 INFO  L138     BoogieDeclarations]: Found implementation of procedure isLockup~uint256_GroupLockup__fail
[2020-11-25 13:24:25,802 INFO  L138     BoogieDeclarations]: Found implementation of procedure isLockup~uint256_GroupLockup__success
[2020-11-25 13:24:25,802 INFO  L138     BoogieDeclarations]: Found implementation of procedure inLockupList~address_GroupLockup__fail
[2020-11-25 13:24:25,802 INFO  L138     BoogieDeclarations]: Found implementation of procedure inLockupList~address_GroupLockup__success
[2020-11-25 13:24:25,802 INFO  L138     BoogieDeclarations]: Found implementation of procedure updateLockupList~address~uint256_GroupLockup__fail
[2020-11-25 13:24:25,802 INFO  L138     BoogieDeclarations]: Found implementation of procedure updateLockupList~address~uint256_GroupLockup__success
[2020-11-25 13:24:25,802 INFO  L138     BoogieDeclarations]: Found implementation of procedure updateLockupTime~uint256~uint256_GroupLockup__fail
[2020-11-25 13:24:25,802 INFO  L138     BoogieDeclarations]: Found implementation of procedure updateLockupTime~uint256~uint256_GroupLockup__success
[2020-11-25 13:24:25,802 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockup_list~address_GroupLockup__fail
[2020-11-25 13:24:25,802 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockup_list~address_GroupLockup__success
[2020-11-25 13:24:25,802 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockup_list_flag~uint256_GroupLockup__fail
[2020-11-25 13:24:25,803 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockup_list_flag~uint256_GroupLockup__success
[2020-11-25 13:24:25,803 INFO  L138     BoogieDeclarations]: Found implementation of procedure user_list~uint256_GroupLockup__fail
[2020-11-25 13:24:25,803 INFO  L138     BoogieDeclarations]: Found implementation of procedure user_list~uint256_GroupLockup__success
[2020-11-25 13:24:25,803 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-25 13:24:25,803 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-25 13:24:25,803 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__fail
[2020-11-25 13:24:25,803 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__success
[2020-11-25 13:24:25,803 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-25 13:24:25,803 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-25 13:24:25,803 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__fail
[2020-11-25 13:24:25,803 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__success
[2020-11-25 13:24:25,803 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__fail
[2020-11-25 13:24:25,803 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__success
[2020-11-25 13:24:25,803 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__fail
[2020-11-25 13:24:25,803 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__success
[2020-11-25 13:24:25,803 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__fail
[2020-11-25 13:24:25,803 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__success
[2020-11-25 13:24:25,804 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 13:24:25,804 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 13:24:25,804 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 13:24:25,804 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 13:24:25,804 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-25 13:24:25,804 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-25 13:24:25,804 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__fail
[2020-11-25 13:24:25,804 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__success
[2020-11-25 13:24:25,804 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-25 13:24:25,804 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-25 13:24:25,804 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__fail
[2020-11-25 13:24:25,804 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__success
[2020-11-25 13:24:25,804 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__fail
[2020-11-25 13:24:25,804 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__success
[2020-11-25 13:24:25,804 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-25 13:24:25,805 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-25 13:24:25,805 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-25 13:24:25,805 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-25 13:24:25,805 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-25 13:24:25,805 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-25 13:24:25,805 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__fail
[2020-11-25 13:24:25,805 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__success
[2020-11-25 13:24:25,805 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__fail
[2020-11-25 13:24:25,805 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__success
[2020-11-25 13:24:25,805 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__fail
[2020-11-25 13:24:25,805 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__success
[2020-11-25 13:24:25,805 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__fail
[2020-11-25 13:24:25,805 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__success
[2020-11-25 13:24:25,805 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC223Token_ERC223Token_NoBaseCtor__fail
[2020-11-25 13:24:25,805 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC223Token_ERC223Token_NoBaseCtor__success
[2020-11-25 13:24:25,805 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC223Token_ERC223Token__fail
[2020-11-25 13:24:25,806 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC223Token_ERC223Token__success
[2020-11-25 13:24:25,806 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC223ContractInterface_ERC223ContractInterface_NoBaseCtor__fail
[2020-11-25 13:24:25,806 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC223ContractInterface_ERC223ContractInterface_NoBaseCtor__success
[2020-11-25 13:24:25,806 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC223ContractInterface_ERC223ContractInterface__fail
[2020-11-25 13:24:25,806 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC223ContractInterface_ERC223ContractInterface__success
[2020-11-25 13:24:25,806 INFO  L138     BoogieDeclarations]: Found implementation of procedure DEAPCoin_DEAPCoin_NoBaseCtor__fail
[2020-11-25 13:24:25,806 INFO  L138     BoogieDeclarations]: Found implementation of procedure DEAPCoin_DEAPCoin_NoBaseCtor__success
[2020-11-25 13:24:25,806 INFO  L138     BoogieDeclarations]: Found implementation of procedure DEAPCoin_DEAPCoin__fail
[2020-11-25 13:24:25,806 INFO  L138     BoogieDeclarations]: Found implementation of procedure DEAPCoin_DEAPCoin__success
[2020-11-25 13:24:25,806 INFO  L138     BoogieDeclarations]: Found implementation of procedure sendTokens~address~uint256_DEAPCoin__fail
[2020-11-25 13:24:25,806 INFO  L138     BoogieDeclarations]: Found implementation of procedure sendTokens~address~uint256_DEAPCoin__success
[2020-11-25 13:24:25,806 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_DEAPCoin__fail
[2020-11-25 13:24:25,806 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_DEAPCoin__success
[2020-11-25 13:24:25,806 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer_ERC223~address~uint256~bytes_DEAPCoin__fail
[2020-11-25 13:24:25,806 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer_ERC223~address~uint256~bytes_DEAPCoin__success
[2020-11-25 13:24:25,806 INFO  L138     BoogieDeclarations]: Found implementation of procedure batchTransfer~address~arr~arr_DEAPCoin__fail
[2020-11-25 13:24:25,806 INFO  L138     BoogieDeclarations]: Found implementation of procedure batchTransfer~address~arr~arr_DEAPCoin__success
[2020-11-25 13:24:25,806 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_DEAPCoin__fail
[2020-11-25 13:24:25,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_DEAPCoin__success
[2020-11-25 13:24:25,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_DEAPCoin__fail
[2020-11-25 13:24:25,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_DEAPCoin__success
[2020-11-25 13:24:25,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_DEAPCoin__fail
[2020-11-25 13:24:25,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_DEAPCoin__success
[2020-11-25 13:24:25,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_DEAPCoin__fail
[2020-11-25 13:24:25,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_DEAPCoin__success
[2020-11-25 13:24:25,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SALE_SUPPLY_DEAPCoin__fail
[2020-11-25 13:24:25,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SALE_SUPPLY_DEAPCoin__success
[2020-11-25 13:24:25,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_UNSALE_SUPPLY_DEAPCoin__fail
[2020-11-25 13:24:25,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_UNSALE_SUPPLY_DEAPCoin__success
[2020-11-25 13:24:25,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_wallet_DEAPCoin__fail
[2020-11-25 13:24:25,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_wallet_DEAPCoin__success
[2020-11-25 13:24:25,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure unsale_owner_wallet_DEAPCoin__fail
[2020-11-25 13:24:25,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure unsale_owner_wallet_DEAPCoin__success
[2020-11-25 13:24:25,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure group_lockup_DEAPCoin__fail
[2020-11-25 13:24:25,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure group_lockup_DEAPCoin__success
[2020-11-25 13:24:25,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 13:24:25,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 13:24:25,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 13:24:25,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 13:24:25,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 13:24:25,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 13:24:25,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 13:24:25,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 13:24:25,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__fail
[2020-11-25 13:24:25,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__success
[2020-11-25 13:24:25,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-25 13:24:25,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-25 13:24:25,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 13:24:25,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 13:24:25,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_GroupLockup
[2020-11-25 13:24:25,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_GroupLockup
[2020-11-25 13:24:25,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Basic
[2020-11-25 13:24:25,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Basic
[2020-11-25 13:24:25,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BasicToken
[2020-11-25 13:24:25,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BasicToken
[2020-11-25 13:24:25,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 13:24:25,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 13:24:25,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_StandardToken
[2020-11-25 13:24:25,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_StandardToken
[2020-11-25 13:24:25,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MintableToken
[2020-11-25 13:24:25,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MintableToken
[2020-11-25 13:24:25,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC223Token
[2020-11-25 13:24:25,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC223Token
[2020-11-25 13:24:25,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC223ContractInterface
[2020-11-25 13:24:25,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC223ContractInterface
[2020-11-25 13:24:25,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_DEAPCoin
[2020-11-25 13:24:25,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 13:24:25,809 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 13:24:25,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 13:24:26,562 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 13:24:26,562 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 13:24:26,563 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 13:24:27,004 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 13:24:27,004 INFO  L286             CfgBuilder]: Removed 11 assue(true) statements.
[2020-11-25 13:24:27,007 INFO  L202        PluginConnector]: Adding new model DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:24:27 BoogieIcfgContainer
[2020-11-25 13:24:27,007 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:24:25" (2/2) ...
[2020-11-25 13:24:27,007 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 13:24:27,008 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@1a5f6f61 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:24:27, skipping insertion in model container
[2020-11-25 13:24:27,008 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 13:24:27,008 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 13:24:27,008 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 13:24:27,009 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 13:24:27,009 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:24:25" (1/3) ...
[2020-11-25 13:24:27,010 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@4a36fa22 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:24:27, skipping insertion in model container
[2020-11-25 13:24:27,010 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:24:25" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 13:24:27,046 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:24:27 NWAContainer
[2020-11-25 13:24:27,046 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 13:24:27,046 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 13:24:27,047 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 13:24:27,048 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 13:24:27,049 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:24:27" (3/4) ...
[2020-11-25 13:24:27,049 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@32198a9f and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:24:27, skipping insertion in model container
[2020-11-25 13:24:27,050 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:24:27" (4/4) ...
[2020-11-25 13:24:27,052 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 13:24:27,059 INFO  L110   BuchiProductObserver]: Initial RCFG 3981 locations, 5225 edges
[2020-11-25 13:24:27,059 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 13:24:27,073 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 13:24:30,084 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 13:24:30,098 INFO  L110   BuchiProductObserver]: BuchiProgram size 9590 locations, 16974 edges
[2020-11-25 13:24:30,098 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:24:30 BoogieIcfgContainer
[2020-11-25 13:24:30,098 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 13:24:30,099 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 13:24:30,099 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 13:24:30,100 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 13:24:30,100 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:24:30" (1/1) ...
[2020-11-25 13:24:30,266 INFO  L313           BlockEncoder]: Initial Icfg 9590 locations, 16974 edges
[2020-11-25 13:24:30,266 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 13:24:30,267 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 13:24:30,267 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 13:24:30,267 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 13:24:30,287 INFO  L70    emoveInfeasibleEdges]: Removed 153 edges and 25 locations because of local infeasibility
[2020-11-25 13:24:30,304 INFO  L70        RemoveSinkStates]: Removed 20 edges and 13 locations by removing sink states
[2020-11-25 13:24:30,326 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 13:24:30,333 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 13:24:30,339 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 13:24:30,340 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 13:24:30,346 INFO  L313           BlockEncoder]: Encoded RCFG 9488 locations, 16706 edges
[2020-11-25 13:24:30,347 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 01:24:30 BasicIcfg
[2020-11-25 13:24:30,347 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 13:24:30,347 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 13:24:30,348 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 13:24:30,349 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 13:24:30,349 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:24:30,349 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:24:25" (1/6) ...
[2020-11-25 13:24:30,351 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@26570291 and model type DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:24:30, skipping insertion in model container
[2020-11-25 13:24:30,351 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:24:30,351 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:24:25" (2/6) ...
[2020-11-25 13:24:30,351 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@26570291 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:24:30, skipping insertion in model container
[2020-11-25 13:24:30,351 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:24:30,351 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:24:27" (3/6) ...
[2020-11-25 13:24:30,352 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@26570291 and model type DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 01:24:30, skipping insertion in model container
[2020-11-25 13:24:30,352 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:24:30,352 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:24:27" (4/6) ...
[2020-11-25 13:24:30,352 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@26570291 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:24:30, skipping insertion in model container
[2020-11-25 13:24:30,352 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:24:30,352 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:24:30" (5/6) ...
[2020-11-25 13:24:30,352 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@26570291 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 01:24:30, skipping insertion in model container
[2020-11-25 13:24:30,352 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:24:30,353 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 01:24:30" (6/6) ...
[2020-11-25 13:24:30,354 INFO  L404   chiAutomizerObserver]: Analyzing ICFG DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_transfer-self.bpl_BEv2
[2020-11-25 13:24:30,389 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 13:24:30,390 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 13:24:30,390 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 13:24:30,390 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 13:24:30,390 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 13:24:30,390 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 13:24:30,390 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 13:24:30,390 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 13:24:30,390 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 13:24:30,460 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9488 states.
[2020-11-25 13:24:30,525 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:24:30,525 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:24:30,525 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:24:30,533 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:24:30,533 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:24:30,533 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 13:24:30,533 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9488 states.
[2020-11-25 13:24:30,564 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:24:30,565 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:24:30,565 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:24:30,566 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:24:30,567 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_DEAPCoin0 := false;
[L2]                  call_transfer_DEAPCoin0 := false;
[L2]      CALL        call main();
[L10885]              assume null == 0;
[L10886]  CALL        call this := FreshRefGenerator__success();
[L5225]               havoc newRef;
[L5226]               assume Alloc[newRef] == false;
[L5227]               Alloc[newRef] := true;
[L5228]               assume newRef != null;
[L10886]  RET         call this := FreshRefGenerator__success();
[L10887]              assume now >= 0;
[L10888]              assume DType[this] == DEAPCoin;
[L10889]              assume msgvalue_MSG == 0;
[L10890]              gas := gas - 53000;
[L10891]  CALL        call DEAPCoin_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L2857]               havoc __exception;
[L2858]               revert := false;
[L2859]   COND FALSE  !(__exception)
[L2897]   CALL        call DEAPCoin_DEAPCoin__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6651]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6651]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6652]   COND TRUE   revert
[L2897]   RET         call DEAPCoin_DEAPCoin__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L2898]               assume !revert && gas >= 0;
[L10891]  RET         call DEAPCoin_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L10892]              assume !revert && gas >= 0;

Loop:
[L10895]  CALL        call CorralChoice_DEAPCoin(this);
[L10640]              havoc msgsender_MSG;
[L10641]              havoc msgvalue_MSG;
[L10642]              havoc choice;
[L10643]              havoc __ret_0_owner;
[L10644]              havoc newOwner_s54;
[L10645]              havoc __ret_0_totalSupply;
[L10646]              havoc _owner_s578;
[L10647]              havoc __ret_0_balanceOf;
[L10648]              havoc _to_s1284;
[L10649]              havoc _value_s1284;
[L10650]              havoc __ret_0_transfer;
[L10651]              havoc _owner_s759;
[L10652]              havoc _spender_s759;
[L10653]              havoc __ret_0_allowance;
[L10654]              havoc _from_s715;
[L10655]              havoc _to_s715;
[L10656]              havoc _value_s715;
[L10657]              havoc __ret_0_transferFrom;
[L10658]              havoc _spender_s743;
[L10659]              havoc _value_s743;
[L10660]              havoc __ret_0_approve;
[L10661]              havoc _spender_s800;
[L10662]              havoc _addedValue_s800;
[L10663]              havoc __ret_0_increaseApproval;
[L10664]              havoc _spender_s860;
[L10665]              havoc _subtractedValue_s860;
[L10666]              havoc __ret_0_decreaseApproval;
[L10667]              havoc __ret_0_mintingFinished;
[L10668]              havoc _to_s932;
[L10669]              havoc _amount_s932;
[L10670]              havoc __ret_0_mint;
[L10671]              havoc __ret_0_finishMinting;
[L10672]              havoc _to_s1413;
[L10673]              havoc _value_s1413;
[L10674]              havoc _data_s1413;
[L10675]              havoc __ret_0_transfer_ERC223;
[L10676]              havoc __ret_0_name;
[L10677]              havoc __ret_0_symbol;
[L10678]              havoc __ret_0_decimals;
[L10679]              havoc __ret_0_INITIAL_SUPPLY;
[L10680]              havoc __ret_0_INITIAL_SALE_SUPPLY;
[L10681]              havoc __ret_0_INITIAL_UNSALE_SUPPLY;
[L10682]              havoc __ret_0_owner_wallet;
[L10683]              havoc __ret_0_unsale_owner_wallet;
[L10684]              havoc __ret_0_group_lockup;
[L10685]              havoc _sale_owner_wallet_s1076;
[L10686]              havoc _unsale_owner_wallet_s1076;
[L10687]              havoc _group_lockup_s1076;
[L10688]              havoc _to_s1162;
[L10689]              havoc _value_s1162;
[L10690]              havoc __ret_0_sendTokens;
[L10691]              havoc _from_s1567;
[L10692]              havoc _users_s1567;
[L10693]              havoc _values_s1567;
[L10694]              havoc __ret_0_batchTransfer;
[L10695]              havoc tmpNow;
[L10696]              havoc gas;
[L10697]              assume gas > 4000000 && gas <= 8000000;
[L10698]              tmpNow := now;
[L10699]              havoc now;
[L10700]              assume now > tmpNow;
[L10701]              assume msgsender_MSG != null;
[L10702]              assume DType[msgsender_MSG] != Ownable;
[L10703]              assume DType[msgsender_MSG] != SafeMath;
[L10704]              assume DType[msgsender_MSG] != GroupLockup;
[L10705]              assume DType[msgsender_MSG] != ERC20Basic;
[L10706]              assume DType[msgsender_MSG] != BasicToken;
[L10707]              assume DType[msgsender_MSG] != ERC20;
[L10708]              assume DType[msgsender_MSG] != StandardToken;
[L10709]              assume DType[msgsender_MSG] != MintableToken;
[L10710]              assume DType[msgsender_MSG] != ERC223Token;
[L10711]              assume DType[msgsender_MSG] != ERC223ContractInterface;
[L10712]              assume DType[msgsender_MSG] != DEAPCoin;
[L10713]              Alloc[msgsender_MSG] := true;
[L10714]  COND TRUE   choice == 25
[L10715]              gas := gas - 21000;
[L10716]  COND FALSE  !(gas >= 0)
[L10895]  RET         call CorralChoice_DEAPCoin(this);

[2020-11-25 13:24:30,581 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:24:30,582 INFO  L82        PathProgramCache]: Analyzing trace with hash -198594450, now seen corresponding path program 1 times
[2020-11-25 13:24:30,586 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:24:30,608 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:24:30,640 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 13:24:30,641 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:24:30,641 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 13:24:31,027 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:24:31,036 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 13:24:31,037 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 13:24:31,038 INFO  L87              Difference]: Start difference. First operand 9488 states. Second operand 3 states.
[2020-11-25 13:24:31,387 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:24:31,387 INFO  L93              Difference]: Finished difference Result 4834 states and 5420 transitions.
[2020-11-25 13:24:31,387 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 13:24:31,388 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4834 states and 5420 transitions.
[2020-11-25 13:24:31,411 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:24:31,440 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4834 states to 4830 states and 5412 transitions.
[2020-11-25 13:24:31,441 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 13:24:31,444 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1208
[2020-11-25 13:24:31,444 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4830 states and 5412 transitions.
[2020-11-25 13:24:31,455 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:24:31,455 INFO  L728         BuchiCegarLoop]: Abstraction has 4830 states and 5412 transitions.
[2020-11-25 13:24:31,475 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4830 states and 5412 transitions.
[2020-11-25 13:24:31,543 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4830 to 4830.
[2020-11-25 13:24:31,544 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4830 states.
[2020-11-25 13:24:31,551 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4830 states to 4830 states and 5412 transitions.
[2020-11-25 13:24:31,552 INFO  L751         BuchiCegarLoop]: Abstraction has 4830 states and 5412 transitions.
[2020-11-25 13:24:31,553 INFO  L631         BuchiCegarLoop]: Abstraction has 4830 states and 5412 transitions.
[2020-11-25 13:24:31,553 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 13:24:31,553 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4830 states and 5412 transitions.
[2020-11-25 13:24:31,565 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:24:31,565 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:24:31,565 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:24:31,568 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:24:31,568 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_DEAPCoin0 := false;
[L2]                  call_transfer_DEAPCoin0 := false;
[L2]      CALL        call main();
[L10885]              assume null == 0;
[L10886]  CALL        call this := FreshRefGenerator__success();
[L5225]               havoc newRef;
[L5226]               assume Alloc[newRef] == false;
[L5227]               Alloc[newRef] := true;
[L5228]               assume newRef != null;
[L10886]  RET         call this := FreshRefGenerator__success();
[L10887]              assume now >= 0;
[L10888]              assume DType[this] == DEAPCoin;
[L10889]              assume msgvalue_MSG == 0;
[L10890]              gas := gas - 53000;
[L10891]  CALL        call DEAPCoin_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L2857]               havoc __exception;
[L2858]               revert := false;
[L2859]   COND FALSE  !(__exception)
[L2897]   CALL        call DEAPCoin_DEAPCoin__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6651]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6651]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6652]   COND TRUE   revert
[L2897]   RET         call DEAPCoin_DEAPCoin__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L2898]               assume !revert && gas >= 0;
[L10891]  RET         call DEAPCoin_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L10892]              assume !revert && gas >= 0;
[L10895]  CALL        call CorralChoice_DEAPCoin(this);
[L10640]              havoc msgsender_MSG;
[L10641]              havoc msgvalue_MSG;
[L10642]              havoc choice;
[L10643]              havoc __ret_0_owner;
[L10644]              havoc newOwner_s54;
[L10645]              havoc __ret_0_totalSupply;
[L10646]              havoc _owner_s578;
[L10647]              havoc __ret_0_balanceOf;
[L10648]              havoc _to_s1284;
[L10649]              havoc _value_s1284;
[L10650]              havoc __ret_0_transfer;
[L10651]              havoc _owner_s759;
[L10652]              havoc _spender_s759;
[L10653]              havoc __ret_0_allowance;
[L10654]              havoc _from_s715;
[L10655]              havoc _to_s715;
[L10656]              havoc _value_s715;
[L10657]              havoc __ret_0_transferFrom;
[L10658]              havoc _spender_s743;
[L10659]              havoc _value_s743;
[L10660]              havoc __ret_0_approve;
[L10661]              havoc _spender_s800;
[L10662]              havoc _addedValue_s800;
[L10663]              havoc __ret_0_increaseApproval;
[L10664]              havoc _spender_s860;
[L10665]              havoc _subtractedValue_s860;
[L10666]              havoc __ret_0_decreaseApproval;
[L10667]              havoc __ret_0_mintingFinished;
[L10668]              havoc _to_s932;
[L10669]              havoc _amount_s932;
[L10670]              havoc __ret_0_mint;
[L10671]              havoc __ret_0_finishMinting;
[L10672]              havoc _to_s1413;
[L10673]              havoc _value_s1413;
[L10674]              havoc _data_s1413;
[L10675]              havoc __ret_0_transfer_ERC223;
[L10676]              havoc __ret_0_name;
[L10677]              havoc __ret_0_symbol;
[L10678]              havoc __ret_0_decimals;
[L10679]              havoc __ret_0_INITIAL_SUPPLY;
[L10680]              havoc __ret_0_INITIAL_SALE_SUPPLY;
[L10681]              havoc __ret_0_INITIAL_UNSALE_SUPPLY;
[L10682]              havoc __ret_0_owner_wallet;
[L10683]              havoc __ret_0_unsale_owner_wallet;
[L10684]              havoc __ret_0_group_lockup;
[L10685]              havoc _sale_owner_wallet_s1076;
[L10686]              havoc _unsale_owner_wallet_s1076;
[L10687]              havoc _group_lockup_s1076;
[L10688]              havoc _to_s1162;
[L10689]              havoc _value_s1162;
[L10690]              havoc __ret_0_sendTokens;
[L10691]              havoc _from_s1567;
[L10692]              havoc _users_s1567;
[L10693]              havoc _values_s1567;
[L10694]              havoc __ret_0_batchTransfer;
[L10695]              havoc tmpNow;
[L10696]              havoc gas;
[L10697]              assume gas > 4000000 && gas <= 8000000;
[L10698]              tmpNow := now;
[L10699]              havoc now;
[L10700]              assume now > tmpNow;
[L10701]              assume msgsender_MSG != null;
[L10702]              assume DType[msgsender_MSG] != Ownable;
[L10703]              assume DType[msgsender_MSG] != SafeMath;
[L10704]              assume DType[msgsender_MSG] != GroupLockup;
[L10705]              assume DType[msgsender_MSG] != ERC20Basic;
[L10706]              assume DType[msgsender_MSG] != BasicToken;
[L10707]              assume DType[msgsender_MSG] != ERC20;
[L10708]              assume DType[msgsender_MSG] != StandardToken;
[L10709]              assume DType[msgsender_MSG] != MintableToken;
[L10710]              assume DType[msgsender_MSG] != ERC223Token;
[L10711]              assume DType[msgsender_MSG] != ERC223ContractInterface;
[L10712]              assume DType[msgsender_MSG] != DEAPCoin;
[L10713]              Alloc[msgsender_MSG] := true;
[L10714]  COND FALSE  !(choice == 25)
[L10720]  COND FALSE  !(choice == 24)
[L10726]  COND FALSE  !(choice == 23)
[L10732]  COND FALSE  !(choice == 22)
[L10738]  COND TRUE   choice == 21
[L10739]              gas := gas - 21000;
[L10740]  COND TRUE   gas >= 0
[L10741]              assume _value_s1284 >= 0 && _value_s1284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10742]              assume msgvalue_MSG == 0;
[L10743]  CALL        call __ret_0_transfer := transfer~address~uint256_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1284 && _value_s1284 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1284 >= 0) && _value_s1284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1284] >= 0) && balances_BasicToken[this][_to_s1284] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_DEAPCoin0 := true;
[L2]                  call_transfer_DEAPCoin0 := false;
[L2]                  revert := revert_hold;
[L3029]               havoc __exception;
[L3030]               revert := false;
[L3031]   COND FALSE  !(__exception)
[L3069]   CALL        call __ret_0_ := transfer~address~uint256_DEAPCoin__success(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L6874]               __var_25 := null;
[L6875]   COND TRUE   !(_to_s1284 != null)
[L6876]               revert := true;
[L3069]   RET         call __ret_0_ := transfer~address~uint256_DEAPCoin__success(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L3070]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && owner_wallet_DEAPCoin[this] == old(owner_wallet_DEAPCoin[this])) && unsale_owner_wallet_DEAPCoin[this] == old(unsale_owner_wallet_DEAPCoin[this])) && group_lockup_DEAPCoin[this] == old(group_lockup_DEAPCoin[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                  revert := revert_hold;
[L10743]  RET         call __ret_0_transfer := transfer~address~uint256_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L10895]  RET         call CorralChoice_DEAPCoin(this);

Loop:
[L10895]  CALL        call CorralChoice_DEAPCoin(this);
[L10640]              havoc msgsender_MSG;
[L10641]              havoc msgvalue_MSG;
[L10642]              havoc choice;
[L10643]              havoc __ret_0_owner;
[L10644]              havoc newOwner_s54;
[L10645]              havoc __ret_0_totalSupply;
[L10646]              havoc _owner_s578;
[L10647]              havoc __ret_0_balanceOf;
[L10648]              havoc _to_s1284;
[L10649]              havoc _value_s1284;
[L10650]              havoc __ret_0_transfer;
[L10651]              havoc _owner_s759;
[L10652]              havoc _spender_s759;
[L10653]              havoc __ret_0_allowance;
[L10654]              havoc _from_s715;
[L10655]              havoc _to_s715;
[L10656]              havoc _value_s715;
[L10657]              havoc __ret_0_transferFrom;
[L10658]              havoc _spender_s743;
[L10659]              havoc _value_s743;
[L10660]              havoc __ret_0_approve;
[L10661]              havoc _spender_s800;
[L10662]              havoc _addedValue_s800;
[L10663]              havoc __ret_0_increaseApproval;
[L10664]              havoc _spender_s860;
[L10665]              havoc _subtractedValue_s860;
[L10666]              havoc __ret_0_decreaseApproval;
[L10667]              havoc __ret_0_mintingFinished;
[L10668]              havoc _to_s932;
[L10669]              havoc _amount_s932;
[L10670]              havoc __ret_0_mint;
[L10671]              havoc __ret_0_finishMinting;
[L10672]              havoc _to_s1413;
[L10673]              havoc _value_s1413;
[L10674]              havoc _data_s1413;
[L10675]              havoc __ret_0_transfer_ERC223;
[L10676]              havoc __ret_0_name;
[L10677]              havoc __ret_0_symbol;
[L10678]              havoc __ret_0_decimals;
[L10679]              havoc __ret_0_INITIAL_SUPPLY;
[L10680]              havoc __ret_0_INITIAL_SALE_SUPPLY;
[L10681]              havoc __ret_0_INITIAL_UNSALE_SUPPLY;
[L10682]              havoc __ret_0_owner_wallet;
[L10683]              havoc __ret_0_unsale_owner_wallet;
[L10684]              havoc __ret_0_group_lockup;
[L10685]              havoc _sale_owner_wallet_s1076;
[L10686]              havoc _unsale_owner_wallet_s1076;
[L10687]              havoc _group_lockup_s1076;
[L10688]              havoc _to_s1162;
[L10689]              havoc _value_s1162;
[L10690]              havoc __ret_0_sendTokens;
[L10691]              havoc _from_s1567;
[L10692]              havoc _users_s1567;
[L10693]              havoc _values_s1567;
[L10694]              havoc __ret_0_batchTransfer;
[L10695]              havoc tmpNow;
[L10696]              havoc gas;
[L10697]              assume gas > 4000000 && gas <= 8000000;
[L10698]              tmpNow := now;
[L10699]              havoc now;
[L10700]              assume now > tmpNow;
[L10701]              assume msgsender_MSG != null;
[L10702]              assume DType[msgsender_MSG] != Ownable;
[L10703]              assume DType[msgsender_MSG] != SafeMath;
[L10704]              assume DType[msgsender_MSG] != GroupLockup;
[L10705]              assume DType[msgsender_MSG] != ERC20Basic;
[L10706]              assume DType[msgsender_MSG] != BasicToken;
[L10707]              assume DType[msgsender_MSG] != ERC20;
[L10708]              assume DType[msgsender_MSG] != StandardToken;
[L10709]              assume DType[msgsender_MSG] != MintableToken;
[L10710]              assume DType[msgsender_MSG] != ERC223Token;
[L10711]              assume DType[msgsender_MSG] != ERC223ContractInterface;
[L10712]              assume DType[msgsender_MSG] != DEAPCoin;
[L10713]              Alloc[msgsender_MSG] := true;
[L10714]  COND FALSE  !(choice == 25)
[L10720]  COND FALSE  !(choice == 24)
[L10726]  COND FALSE  !(choice == 23)
[L10732]  COND FALSE  !(choice == 22)
[L10738]  COND TRUE   choice == 21
[L10739]              gas := gas - 21000;
[L10740]  COND TRUE   gas >= 0
[L10741]              assume _value_s1284 >= 0 && _value_s1284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10742]              assume msgvalue_MSG == 0;
[L10743]  CALL        call __ret_0_transfer := transfer~address~uint256_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1284 && _value_s1284 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1284 >= 0) && _value_s1284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1284] >= 0) && balances_BasicToken[this][_to_s1284] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_DEAPCoin0 := true;
[L2]                  call_transfer_DEAPCoin0 := false;
[L2]                  revert := revert_hold;
[L3029]               havoc __exception;
[L3030]               revert := false;
[L3031]   COND FALSE  !(__exception)
[L3069]   CALL        call __ret_0_ := transfer~address~uint256_DEAPCoin__success(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L6874]               __var_25 := null;
[L6875]   COND TRUE   !(_to_s1284 != null)
[L6876]               revert := true;
[L3069]   RET         call __ret_0_ := transfer~address~uint256_DEAPCoin__success(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L3070]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && owner_wallet_DEAPCoin[this] == old(owner_wallet_DEAPCoin[this])) && unsale_owner_wallet_DEAPCoin[this] == old(unsale_owner_wallet_DEAPCoin[this])) && group_lockup_DEAPCoin[this] == old(group_lockup_DEAPCoin[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                  revert := revert_hold;
[L10743]  RET         call __ret_0_transfer := transfer~address~uint256_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L10895]  RET         call CorralChoice_DEAPCoin(this);

[2020-11-25 13:24:31,572 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:24:31,572 INFO  L82        PathProgramCache]: Analyzing trace with hash -394994713, now seen corresponding path program 1 times
[2020-11-25 13:24:31,573 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:24:31,585 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:24:31,609 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 13:24:31,609 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:24:31,609 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 13:24:31,610 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:24:31,611 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 13:24:31,611 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 13:24:31,611 INFO  L87              Difference]: Start difference. First operand 4830 states and 5412 transitions. cyclomatic complexity: 588 Second operand 3 states.
[2020-11-25 13:24:31,732 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:24:31,732 INFO  L93              Difference]: Finished difference Result 5708 states and 6350 transitions.
[2020-11-25 13:24:31,732 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 13:24:31,732 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5708 states and 6350 transitions.
[2020-11-25 13:24:31,748 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 13:24:31,770 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5708 states to 5708 states and 6350 transitions.
[2020-11-25 13:24:31,770 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1422
[2020-11-25 13:24:31,771 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1422
[2020-11-25 13:24:31,771 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5708 states and 6350 transitions.
[2020-11-25 13:24:31,778 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:24:31,778 INFO  L728         BuchiCegarLoop]: Abstraction has 5708 states and 6350 transitions.
[2020-11-25 13:24:31,784 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5708 states and 6350 transitions.
[2020-11-25 13:24:31,832 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5708 to 5147.
[2020-11-25 13:24:31,832 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5147 states.
[2020-11-25 13:24:31,838 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5147 states to 5147 states and 5665 transitions.
[2020-11-25 13:24:31,838 INFO  L751         BuchiCegarLoop]: Abstraction has 5147 states and 5665 transitions.
[2020-11-25 13:24:31,838 INFO  L631         BuchiCegarLoop]: Abstraction has 5147 states and 5665 transitions.
[2020-11-25 13:24:31,838 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 13:24:31,838 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5147 states and 5665 transitions.
[2020-11-25 13:24:31,845 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:24:31,845 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:24:31,845 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:24:31,850 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [24, 24, 24, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:24:31,851 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_DEAPCoin0 := false;
[L2]                  call_transfer_DEAPCoin0 := false;
[L2]      CALL        call main();
[L10885]              assume null == 0;
[L10886]  CALL        call this := FreshRefGenerator__success();
[L5225]               havoc newRef;
[L5226]               assume Alloc[newRef] == false;
[L5227]               Alloc[newRef] := true;
[L5228]               assume newRef != null;
[L10886]  RET         call this := FreshRefGenerator__success();
[L10887]              assume now >= 0;
[L10888]              assume DType[this] == DEAPCoin;
[L10889]              assume msgvalue_MSG == 0;
[L10890]              gas := gas - 53000;
[L10891]  CALL        call DEAPCoin_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L2857]               havoc __exception;
[L2858]               revert := false;
[L2859]   COND FALSE  !(__exception)
[L2897]   CALL        call DEAPCoin_DEAPCoin__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6651]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6651]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6652]   COND FALSE  !(revert)
[L6655]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6655]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6656]   COND FALSE  !(revert)
[L6659]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6659]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6660]   COND FALSE  !(revert)
[L6663]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6004]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6004]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   COND FALSE  !(revert)
[L6008]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6008]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6009]   COND FALSE  !(revert)
[L6012]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6012]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]   COND FALSE  !(revert)
[L6016]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5975]               assume msgsender_MSG != null;
[L5976]               Balance[this] := 0;
[L5977]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5978]               sum_allowed3[this] := 0;
[L6016]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6017]   COND FALSE  !(revert)
[L6663]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6664]   COND FALSE  !(revert)
[L6667]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5261]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]               assume msgsender_MSG != null;
[L5245]               Balance[this] := 0;
[L5246]               owner_Ownable[this] := null;
[L5248]               owner_Ownable[this] := msgsender_MSG;
[L5261]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   COND FALSE  !(revert)
[L6667]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6668]   COND FALSE  !(revert)
[L6671]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6264]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6264]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6265]   COND FALSE  !(revert)
[L6268]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6268]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6269]   COND FALSE  !(revert)
[L6272]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6272]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6273]   COND FALSE  !(revert)
[L6276]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6004]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6004]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   COND FALSE  !(revert)
[L6008]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6008]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6009]   COND FALSE  !(revert)
[L6012]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6012]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]   COND FALSE  !(revert)
[L6016]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5975]               assume msgsender_MSG != null;
[L5976]               Balance[this] := 0;
[L5977]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5978]               sum_allowed3[this] := 0;
[L6016]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6017]   COND FALSE  !(revert)
[L6276]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6277]   COND FALSE  !(revert)
[L6280]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5261]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]               assume msgsender_MSG != null;
[L5245]               Balance[this] := 0;
[L5246]               owner_Ownable[this] := null;
[L5248]               owner_Ownable[this] := msgsender_MSG;
[L5261]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   COND FALSE  !(revert)
[L6280]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6281]   COND FALSE  !(revert)
[L6284]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6228]               assume msgsender_MSG != null;
[L6229]               Balance[this] := 0;
[L6230]               mintingFinished_MintableToken[this] := false;
[L6284]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6285]   COND FALSE  !(revert)
[L6671]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6672]   COND FALSE  !(revert)
[L6675]   CALL        call ERC223Token_ERC223Token__success(this, msgsender_MSG, msgvalue_MSG);
[L6441]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6441]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6445]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6449]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6449]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   COND FALSE  !(revert)
[L6453]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6004]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6004]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   COND FALSE  !(revert)
[L6008]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6008]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6009]   COND FALSE  !(revert)
[L6012]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6012]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]   COND FALSE  !(revert)
[L6016]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5975]               assume msgsender_MSG != null;
[L5976]               Balance[this] := 0;
[L5977]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5978]               sum_allowed3[this] := 0;
[L6016]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6017]   COND FALSE  !(revert)
[L6453]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6454]   COND FALSE  !(revert)
[L6457]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5261]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]               assume msgsender_MSG != null;
[L5245]               Balance[this] := 0;
[L5246]               owner_Ownable[this] := null;
[L5248]               owner_Ownable[this] := msgsender_MSG;
[L5261]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   COND FALSE  !(revert)
[L6457]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6458]   COND FALSE  !(revert)
[L6461]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6264]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6264]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6265]   COND FALSE  !(revert)
[L6268]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6268]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6269]   COND FALSE  !(revert)
[L6272]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6272]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6273]   COND FALSE  !(revert)
[L6276]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6004]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6004]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   COND FALSE  !(revert)
[L6008]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6008]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6009]   COND FALSE  !(revert)
[L6012]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6012]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]   COND FALSE  !(revert)
[L6016]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5975]               assume msgsender_MSG != null;
[L5976]               Balance[this] := 0;
[L5977]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5978]               sum_allowed3[this] := 0;
[L6016]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6017]   COND FALSE  !(revert)
[L6276]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6277]   COND FALSE  !(revert)
[L6280]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5261]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]               assume msgsender_MSG != null;
[L5245]               Balance[this] := 0;
[L5246]               owner_Ownable[this] := null;
[L5248]               owner_Ownable[this] := msgsender_MSG;
[L5261]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   COND FALSE  !(revert)
[L6280]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6281]   COND FALSE  !(revert)
[L6284]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6228]               assume msgsender_MSG != null;
[L6229]               Balance[this] := 0;
[L6230]               mintingFinished_MintableToken[this] := false;
[L6284]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6285]   COND FALSE  !(revert)
[L6461]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6462]   COND FALSE  !(revert)
[L6465]   CALL        call ERC223Token_ERC223Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6402]               assume msgsender_MSG != null;
[L6403]               Balance[this] := 0;
[L6465]   RET         call ERC223Token_ERC223Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]   COND FALSE  !(revert)
[L6675]   RET         call ERC223Token_ERC223Token__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]   COND FALSE  !(revert)
[L6679]   CALL        call DEAPCoin_DEAPCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6561]               assume msgsender_MSG != null;
[L6562]               Balance[this] := 0;
[L6563]               name_DEAPCoin[this] := -635866188;
[L6564]               symbol_DEAPCoin[this] := -1031151507;
[L6565]               decimals_DEAPCoin[this] := 18;
[L6566]               __var_19 := decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6567]               INITIAL_SUPPLY_DEAPCoin[this] := 30000000000 * (nonlinearPow(10, decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6568]               __var_20 := decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6569]               INITIAL_SALE_SUPPLY_DEAPCoin[this] := 12000000000 * (nonlinearPow(10, decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6570]               INITIAL_UNSALE_SUPPLY_DEAPCoin[this] := (INITIAL_SUPPLY_DEAPCoin[this] - INITIAL_SALE_SUPPLY_DEAPCoin[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6571]               owner_wallet_DEAPCoin[this] := null;
[L6572]               unsale_owner_wallet_DEAPCoin[this] := null;
[L6574]               group_lockup_DEAPCoin[this] := _group_lockup_s1076;
[L6575]               owner_wallet_DEAPCoin[this] := _sale_owner_wallet_s1076;
[L6576]               unsale_owner_wallet_DEAPCoin[this] := _unsale_owner_wallet_s1076;
[L6577]   COND TRUE   DType[this] == DEAPCoin
[L6578]   CALL        call __var_16 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, owner_wallet_DEAPCoin[this], INITIAL_SALE_SUPPLY_DEAPCoin[this]);
[L6322]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9397]   COND TRUE   !(msgsender_MSG == owner_Ownable[this])
[L9398]               revert := true;
[L6322]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6323]   COND TRUE   revert
[L6578]   RET         call __var_16 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, owner_wallet_DEAPCoin[this], INITIAL_SALE_SUPPLY_DEAPCoin[this]);
[L6579]   COND TRUE   revert
[L6679]   RET         call DEAPCoin_DEAPCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6680]   COND FALSE  !(revert)
[L2897]   RET         call DEAPCoin_DEAPCoin__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L2898]               assume !revert && gas >= 0;
[L10891]  RET         call DEAPCoin_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L10892]              assume !revert && gas >= 0;
[L10895]  CALL        call CorralChoice_DEAPCoin(this);
[L10640]              havoc msgsender_MSG;
[L10641]              havoc msgvalue_MSG;
[L10642]              havoc choice;
[L10643]              havoc __ret_0_owner;
[L10644]              havoc newOwner_s54;
[L10645]              havoc __ret_0_totalSupply;
[L10646]              havoc _owner_s578;
[L10647]              havoc __ret_0_balanceOf;
[L10648]              havoc _to_s1284;
[L10649]              havoc _value_s1284;
[L10650]              havoc __ret_0_transfer;
[L10651]              havoc _owner_s759;
[L10652]              havoc _spender_s759;
[L10653]              havoc __ret_0_allowance;
[L10654]              havoc _from_s715;
[L10655]              havoc _to_s715;
[L10656]              havoc _value_s715;
[L10657]              havoc __ret_0_transferFrom;
[L10658]              havoc _spender_s743;
[L10659]              havoc _value_s743;
[L10660]              havoc __ret_0_approve;
[L10661]              havoc _spender_s800;
[L10662]              havoc _addedValue_s800;
[L10663]              havoc __ret_0_increaseApproval;
[L10664]              havoc _spender_s860;
[L10665]              havoc _subtractedValue_s860;
[L10666]              havoc __ret_0_decreaseApproval;
[L10667]              havoc __ret_0_mintingFinished;
[L10668]              havoc _to_s932;
[L10669]              havoc _amount_s932;
[L10670]              havoc __ret_0_mint;
[L10671]              havoc __ret_0_finishMinting;
[L10672]              havoc _to_s1413;
[L10673]              havoc _value_s1413;
[L10674]              havoc _data_s1413;
[L10675]              havoc __ret_0_transfer_ERC223;
[L10676]              havoc __ret_0_name;
[L10677]              havoc __ret_0_symbol;
[L10678]              havoc __ret_0_decimals;
[L10679]              havoc __ret_0_INITIAL_SUPPLY;
[L10680]              havoc __ret_0_INITIAL_SALE_SUPPLY;
[L10681]              havoc __ret_0_INITIAL_UNSALE_SUPPLY;
[L10682]              havoc __ret_0_owner_wallet;
[L10683]              havoc __ret_0_unsale_owner_wallet;
[L10684]              havoc __ret_0_group_lockup;
[L10685]              havoc _sale_owner_wallet_s1076;
[L10686]              havoc _unsale_owner_wallet_s1076;
[L10687]              havoc _group_lockup_s1076;
[L10688]              havoc _to_s1162;
[L10689]              havoc _value_s1162;
[L10690]              havoc __ret_0_sendTokens;
[L10691]              havoc _from_s1567;
[L10692]              havoc _users_s1567;
[L10693]              havoc _values_s1567;
[L10694]              havoc __ret_0_batchTransfer;
[L10695]              havoc tmpNow;
[L10696]              havoc gas;
[L10697]              assume gas > 4000000 && gas <= 8000000;
[L10698]              tmpNow := now;
[L10699]              havoc now;
[L10700]              assume now > tmpNow;
[L10701]              assume msgsender_MSG != null;
[L10702]              assume DType[msgsender_MSG] != Ownable;
[L10703]              assume DType[msgsender_MSG] != SafeMath;
[L10704]              assume DType[msgsender_MSG] != GroupLockup;
[L10705]              assume DType[msgsender_MSG] != ERC20Basic;
[L10706]              assume DType[msgsender_MSG] != BasicToken;
[L10707]              assume DType[msgsender_MSG] != ERC20;
[L10708]              assume DType[msgsender_MSG] != StandardToken;
[L10709]              assume DType[msgsender_MSG] != MintableToken;
[L10710]              assume DType[msgsender_MSG] != ERC223Token;
[L10711]              assume DType[msgsender_MSG] != ERC223ContractInterface;
[L10712]              assume DType[msgsender_MSG] != DEAPCoin;
[L10713]              Alloc[msgsender_MSG] := true;
[L10714]  COND FALSE  !(choice == 25)
[L10720]  COND FALSE  !(choice == 24)
[L10726]  COND FALSE  !(choice == 23)
[L10732]  COND FALSE  !(choice == 22)
[L10738]  COND TRUE   choice == 21
[L10739]              gas := gas - 21000;
[L10740]  COND TRUE   gas >= 0
[L10741]              assume _value_s1284 >= 0 && _value_s1284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10742]              assume msgvalue_MSG == 0;
[L10743]  CALL        call __ret_0_transfer := transfer~address~uint256_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1284 && _value_s1284 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1284 >= 0) && _value_s1284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1284] >= 0) && balances_BasicToken[this][_to_s1284] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_DEAPCoin0 := true;
[L2]                  call_transfer_DEAPCoin0 := false;
[L2]                  revert := revert_hold;
[L3029]               havoc __exception;
[L3030]               revert := false;
[L3031]   COND FALSE  !(__exception)
[L3069]   CALL        call __ret_0_ := transfer~address~uint256_DEAPCoin__success(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L6874]               __var_25 := null;
[L6875]   COND TRUE   !(_to_s1284 != null)
[L6876]               revert := true;
[L3069]   RET         call __ret_0_ := transfer~address~uint256_DEAPCoin__success(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L3070]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && owner_wallet_DEAPCoin[this] == old(owner_wallet_DEAPCoin[this])) && unsale_owner_wallet_DEAPCoin[this] == old(unsale_owner_wallet_DEAPCoin[this])) && group_lockup_DEAPCoin[this] == old(group_lockup_DEAPCoin[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                  revert := revert_hold;
[L10743]  RET         call __ret_0_transfer := transfer~address~uint256_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L10895]  RET         call CorralChoice_DEAPCoin(this);

Loop:
[L10895]  CALL        call CorralChoice_DEAPCoin(this);
[L10640]              havoc msgsender_MSG;
[L10641]              havoc msgvalue_MSG;
[L10642]              havoc choice;
[L10643]              havoc __ret_0_owner;
[L10644]              havoc newOwner_s54;
[L10645]              havoc __ret_0_totalSupply;
[L10646]              havoc _owner_s578;
[L10647]              havoc __ret_0_balanceOf;
[L10648]              havoc _to_s1284;
[L10649]              havoc _value_s1284;
[L10650]              havoc __ret_0_transfer;
[L10651]              havoc _owner_s759;
[L10652]              havoc _spender_s759;
[L10653]              havoc __ret_0_allowance;
[L10654]              havoc _from_s715;
[L10655]              havoc _to_s715;
[L10656]              havoc _value_s715;
[L10657]              havoc __ret_0_transferFrom;
[L10658]              havoc _spender_s743;
[L10659]              havoc _value_s743;
[L10660]              havoc __ret_0_approve;
[L10661]              havoc _spender_s800;
[L10662]              havoc _addedValue_s800;
[L10663]              havoc __ret_0_increaseApproval;
[L10664]              havoc _spender_s860;
[L10665]              havoc _subtractedValue_s860;
[L10666]              havoc __ret_0_decreaseApproval;
[L10667]              havoc __ret_0_mintingFinished;
[L10668]              havoc _to_s932;
[L10669]              havoc _amount_s932;
[L10670]              havoc __ret_0_mint;
[L10671]              havoc __ret_0_finishMinting;
[L10672]              havoc _to_s1413;
[L10673]              havoc _value_s1413;
[L10674]              havoc _data_s1413;
[L10675]              havoc __ret_0_transfer_ERC223;
[L10676]              havoc __ret_0_name;
[L10677]              havoc __ret_0_symbol;
[L10678]              havoc __ret_0_decimals;
[L10679]              havoc __ret_0_INITIAL_SUPPLY;
[L10680]              havoc __ret_0_INITIAL_SALE_SUPPLY;
[L10681]              havoc __ret_0_INITIAL_UNSALE_SUPPLY;
[L10682]              havoc __ret_0_owner_wallet;
[L10683]              havoc __ret_0_unsale_owner_wallet;
[L10684]              havoc __ret_0_group_lockup;
[L10685]              havoc _sale_owner_wallet_s1076;
[L10686]              havoc _unsale_owner_wallet_s1076;
[L10687]              havoc _group_lockup_s1076;
[L10688]              havoc _to_s1162;
[L10689]              havoc _value_s1162;
[L10690]              havoc __ret_0_sendTokens;
[L10691]              havoc _from_s1567;
[L10692]              havoc _users_s1567;
[L10693]              havoc _values_s1567;
[L10694]              havoc __ret_0_batchTransfer;
[L10695]              havoc tmpNow;
[L10696]              havoc gas;
[L10697]              assume gas > 4000000 && gas <= 8000000;
[L10698]              tmpNow := now;
[L10699]              havoc now;
[L10700]              assume now > tmpNow;
[L10701]              assume msgsender_MSG != null;
[L10702]              assume DType[msgsender_MSG] != Ownable;
[L10703]              assume DType[msgsender_MSG] != SafeMath;
[L10704]              assume DType[msgsender_MSG] != GroupLockup;
[L10705]              assume DType[msgsender_MSG] != ERC20Basic;
[L10706]              assume DType[msgsender_MSG] != BasicToken;
[L10707]              assume DType[msgsender_MSG] != ERC20;
[L10708]              assume DType[msgsender_MSG] != StandardToken;
[L10709]              assume DType[msgsender_MSG] != MintableToken;
[L10710]              assume DType[msgsender_MSG] != ERC223Token;
[L10711]              assume DType[msgsender_MSG] != ERC223ContractInterface;
[L10712]              assume DType[msgsender_MSG] != DEAPCoin;
[L10713]              Alloc[msgsender_MSG] := true;
[L10714]  COND FALSE  !(choice == 25)
[L10720]  COND FALSE  !(choice == 24)
[L10726]  COND FALSE  !(choice == 23)
[L10732]  COND FALSE  !(choice == 22)
[L10738]  COND TRUE   choice == 21
[L10739]              gas := gas - 21000;
[L10740]  COND TRUE   gas >= 0
[L10741]              assume _value_s1284 >= 0 && _value_s1284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10742]              assume msgvalue_MSG == 0;
[L10743]  CALL        call __ret_0_transfer := transfer~address~uint256_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1284 && _value_s1284 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1284 >= 0) && _value_s1284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1284] >= 0) && balances_BasicToken[this][_to_s1284] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_DEAPCoin0 := true;
[L2]                  call_transfer_DEAPCoin0 := false;
[L2]                  revert := revert_hold;
[L3029]               havoc __exception;
[L3030]               revert := false;
[L3031]   COND FALSE  !(__exception)
[L3069]   CALL        call __ret_0_ := transfer~address~uint256_DEAPCoin__success(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L6874]               __var_25 := null;
[L6875]   COND TRUE   !(_to_s1284 != null)
[L6876]               revert := true;
[L3069]   RET         call __ret_0_ := transfer~address~uint256_DEAPCoin__success(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L3070]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && owner_wallet_DEAPCoin[this] == old(owner_wallet_DEAPCoin[this])) && unsale_owner_wallet_DEAPCoin[this] == old(unsale_owner_wallet_DEAPCoin[this])) && group_lockup_DEAPCoin[this] == old(group_lockup_DEAPCoin[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                  revert := revert_hold;
[L10743]  RET         call __ret_0_transfer := transfer~address~uint256_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L10895]  RET         call CorralChoice_DEAPCoin(this);

[2020-11-25 13:24:31,859 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:24:31,859 INFO  L82        PathProgramCache]: Analyzing trace with hash -2012578398, now seen corresponding path program 1 times
[2020-11-25 13:24:31,860 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:24:31,887 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:24:32,222 INFO  L134       CoverageAnalysis]: Checked inductivity of 3875 backedges. 25 proven. 0 refuted. 0 times theorem prover too weak. 3850 trivial. 0 not checked.
[2020-11-25 13:24:32,222 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:24:32,223 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-11-25 13:24:32,223 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:24:32,224 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 13:24:32,224 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=73, Unknown=0, NotChecked=0, Total=90
[2020-11-25 13:24:32,224 INFO  L87              Difference]: Start difference. First operand 5147 states and 5665 transitions. cyclomatic complexity: 524 Second operand 10 states.
[2020-11-25 13:24:32,403 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:24:32,403 INFO  L93              Difference]: Finished difference Result 5218 states and 5757 transitions.
[2020-11-25 13:24:32,403 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 13:24:32,403 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5218 states and 5757 transitions.
[2020-11-25 13:24:32,414 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:24:32,431 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5218 states to 5194 states and 5723 transitions.
[2020-11-25 13:24:32,431 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1226
[2020-11-25 13:24:32,432 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1226
[2020-11-25 13:24:32,432 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5194 states and 5723 transitions.
[2020-11-25 13:24:32,436 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:24:32,436 INFO  L728         BuchiCegarLoop]: Abstraction has 5194 states and 5723 transitions.
[2020-11-25 13:24:32,442 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5194 states and 5723 transitions.
[2020-11-25 13:24:32,483 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5194 to 5167.
[2020-11-25 13:24:32,484 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5167 states.
[2020-11-25 13:24:32,489 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5167 states to 5167 states and 5690 transitions.
[2020-11-25 13:24:32,489 INFO  L751         BuchiCegarLoop]: Abstraction has 5167 states and 5690 transitions.
[2020-11-25 13:24:32,489 INFO  L631         BuchiCegarLoop]: Abstraction has 5167 states and 5690 transitions.
[2020-11-25 13:24:32,489 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 13:24:32,489 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5167 states and 5690 transitions.
[2020-11-25 13:24:32,495 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:24:32,495 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:24:32,496 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:24:32,499 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [24, 24, 24, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:24:32,499 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_DEAPCoin0 := false;
[L2]                  call_transfer_DEAPCoin0 := false;
[L2]      CALL        call main();
[L10885]              assume null == 0;
[L10886]  CALL        call this := FreshRefGenerator__success();
[L5225]               havoc newRef;
[L5226]               assume Alloc[newRef] == false;
[L5227]               Alloc[newRef] := true;
[L5228]               assume newRef != null;
[L10886]  RET         call this := FreshRefGenerator__success();
[L10887]              assume now >= 0;
[L10888]              assume DType[this] == DEAPCoin;
[L10889]              assume msgvalue_MSG == 0;
[L10890]              gas := gas - 53000;
[L10891]  CALL        call DEAPCoin_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L2857]               havoc __exception;
[L2858]               revert := false;
[L2859]   COND FALSE  !(__exception)
[L2897]   CALL        call DEAPCoin_DEAPCoin__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6651]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6651]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6652]   COND FALSE  !(revert)
[L6655]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6655]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6656]   COND FALSE  !(revert)
[L6659]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6659]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6660]   COND FALSE  !(revert)
[L6663]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6004]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6004]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   COND FALSE  !(revert)
[L6008]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6008]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6009]   COND FALSE  !(revert)
[L6012]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6012]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]   COND FALSE  !(revert)
[L6016]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5975]               assume msgsender_MSG != null;
[L5976]               Balance[this] := 0;
[L5977]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5978]               sum_allowed3[this] := 0;
[L6016]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6017]   COND FALSE  !(revert)
[L6663]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6664]   COND FALSE  !(revert)
[L6667]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5261]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]               assume msgsender_MSG != null;
[L5245]               Balance[this] := 0;
[L5246]               owner_Ownable[this] := null;
[L5248]               owner_Ownable[this] := msgsender_MSG;
[L5261]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   COND FALSE  !(revert)
[L6667]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6668]   COND FALSE  !(revert)
[L6671]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6264]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6264]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6265]   COND FALSE  !(revert)
[L6268]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6268]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6269]   COND FALSE  !(revert)
[L6272]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6272]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6273]   COND FALSE  !(revert)
[L6276]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6004]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6004]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   COND FALSE  !(revert)
[L6008]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6008]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6009]   COND FALSE  !(revert)
[L6012]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6012]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]   COND FALSE  !(revert)
[L6016]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5975]               assume msgsender_MSG != null;
[L5976]               Balance[this] := 0;
[L5977]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5978]               sum_allowed3[this] := 0;
[L6016]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6017]   COND FALSE  !(revert)
[L6276]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6277]   COND FALSE  !(revert)
[L6280]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5261]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]               assume msgsender_MSG != null;
[L5245]               Balance[this] := 0;
[L5246]               owner_Ownable[this] := null;
[L5248]               owner_Ownable[this] := msgsender_MSG;
[L5261]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   COND FALSE  !(revert)
[L6280]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6281]   COND FALSE  !(revert)
[L6284]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6228]               assume msgsender_MSG != null;
[L6229]               Balance[this] := 0;
[L6230]               mintingFinished_MintableToken[this] := false;
[L6284]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6285]   COND FALSE  !(revert)
[L6671]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6672]   COND FALSE  !(revert)
[L6675]   CALL        call ERC223Token_ERC223Token__success(this, msgsender_MSG, msgvalue_MSG);
[L6441]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6441]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6445]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6449]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6449]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   COND FALSE  !(revert)
[L6453]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6004]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6004]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   COND FALSE  !(revert)
[L6008]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6008]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6009]   COND FALSE  !(revert)
[L6012]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6012]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]   COND FALSE  !(revert)
[L6016]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5975]               assume msgsender_MSG != null;
[L5976]               Balance[this] := 0;
[L5977]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5978]               sum_allowed3[this] := 0;
[L6016]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6017]   COND FALSE  !(revert)
[L6453]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6454]   COND FALSE  !(revert)
[L6457]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5261]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]               assume msgsender_MSG != null;
[L5245]               Balance[this] := 0;
[L5246]               owner_Ownable[this] := null;
[L5248]               owner_Ownable[this] := msgsender_MSG;
[L5261]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   COND FALSE  !(revert)
[L6457]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6458]   COND FALSE  !(revert)
[L6461]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6264]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6264]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6265]   COND FALSE  !(revert)
[L6268]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6268]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6269]   COND FALSE  !(revert)
[L6272]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6272]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6273]   COND FALSE  !(revert)
[L6276]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6004]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6004]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   COND FALSE  !(revert)
[L6008]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6008]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6009]   COND FALSE  !(revert)
[L6012]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6012]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]   COND FALSE  !(revert)
[L6016]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5975]               assume msgsender_MSG != null;
[L5976]               Balance[this] := 0;
[L5977]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5978]               sum_allowed3[this] := 0;
[L6016]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6017]   COND FALSE  !(revert)
[L6276]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6277]   COND FALSE  !(revert)
[L6280]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5261]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]               assume msgsender_MSG != null;
[L5245]               Balance[this] := 0;
[L5246]               owner_Ownable[this] := null;
[L5248]               owner_Ownable[this] := msgsender_MSG;
[L5261]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   COND FALSE  !(revert)
[L6280]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6281]   COND FALSE  !(revert)
[L6284]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6228]               assume msgsender_MSG != null;
[L6229]               Balance[this] := 0;
[L6230]               mintingFinished_MintableToken[this] := false;
[L6284]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6285]   COND FALSE  !(revert)
[L6461]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6462]   COND FALSE  !(revert)
[L6465]   CALL        call ERC223Token_ERC223Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6402]               assume msgsender_MSG != null;
[L6403]               Balance[this] := 0;
[L6465]   RET         call ERC223Token_ERC223Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]   COND FALSE  !(revert)
[L6675]   RET         call ERC223Token_ERC223Token__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]   COND FALSE  !(revert)
[L6679]   CALL        call DEAPCoin_DEAPCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6561]               assume msgsender_MSG != null;
[L6562]               Balance[this] := 0;
[L6563]               name_DEAPCoin[this] := -635866188;
[L6564]               symbol_DEAPCoin[this] := -1031151507;
[L6565]               decimals_DEAPCoin[this] := 18;
[L6566]               __var_19 := decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6567]               INITIAL_SUPPLY_DEAPCoin[this] := 30000000000 * (nonlinearPow(10, decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6568]               __var_20 := decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6569]               INITIAL_SALE_SUPPLY_DEAPCoin[this] := 12000000000 * (nonlinearPow(10, decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6570]               INITIAL_UNSALE_SUPPLY_DEAPCoin[this] := (INITIAL_SUPPLY_DEAPCoin[this] - INITIAL_SALE_SUPPLY_DEAPCoin[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6571]               owner_wallet_DEAPCoin[this] := null;
[L6572]               unsale_owner_wallet_DEAPCoin[this] := null;
[L6574]               group_lockup_DEAPCoin[this] := _group_lockup_s1076;
[L6575]               owner_wallet_DEAPCoin[this] := _sale_owner_wallet_s1076;
[L6576]               unsale_owner_wallet_DEAPCoin[this] := _unsale_owner_wallet_s1076;
[L6577]   COND TRUE   DType[this] == DEAPCoin
[L6578]   CALL        call __var_16 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, owner_wallet_DEAPCoin[this], INITIAL_SALE_SUPPLY_DEAPCoin[this]);
[L6322]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9397]   COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L6322]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6323]   COND FALSE  !(revert)
[L6326]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9413]   COND TRUE   !!mintingFinished_MintableToken[this]
[L9414]               revert := true;
[L6326]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6327]   COND TRUE   revert
[L6578]   RET         call __var_16 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, owner_wallet_DEAPCoin[this], INITIAL_SALE_SUPPLY_DEAPCoin[this]);
[L6579]   COND TRUE   revert
[L6679]   RET         call DEAPCoin_DEAPCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6680]   COND FALSE  !(revert)
[L2897]   RET         call DEAPCoin_DEAPCoin__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L2898]               assume !revert && gas >= 0;
[L10891]  RET         call DEAPCoin_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L10892]              assume !revert && gas >= 0;
[L10895]  CALL        call CorralChoice_DEAPCoin(this);
[L10640]              havoc msgsender_MSG;
[L10641]              havoc msgvalue_MSG;
[L10642]              havoc choice;
[L10643]              havoc __ret_0_owner;
[L10644]              havoc newOwner_s54;
[L10645]              havoc __ret_0_totalSupply;
[L10646]              havoc _owner_s578;
[L10647]              havoc __ret_0_balanceOf;
[L10648]              havoc _to_s1284;
[L10649]              havoc _value_s1284;
[L10650]              havoc __ret_0_transfer;
[L10651]              havoc _owner_s759;
[L10652]              havoc _spender_s759;
[L10653]              havoc __ret_0_allowance;
[L10654]              havoc _from_s715;
[L10655]              havoc _to_s715;
[L10656]              havoc _value_s715;
[L10657]              havoc __ret_0_transferFrom;
[L10658]              havoc _spender_s743;
[L10659]              havoc _value_s743;
[L10660]              havoc __ret_0_approve;
[L10661]              havoc _spender_s800;
[L10662]              havoc _addedValue_s800;
[L10663]              havoc __ret_0_increaseApproval;
[L10664]              havoc _spender_s860;
[L10665]              havoc _subtractedValue_s860;
[L10666]              havoc __ret_0_decreaseApproval;
[L10667]              havoc __ret_0_mintingFinished;
[L10668]              havoc _to_s932;
[L10669]              havoc _amount_s932;
[L10670]              havoc __ret_0_mint;
[L10671]              havoc __ret_0_finishMinting;
[L10672]              havoc _to_s1413;
[L10673]              havoc _value_s1413;
[L10674]              havoc _data_s1413;
[L10675]              havoc __ret_0_transfer_ERC223;
[L10676]              havoc __ret_0_name;
[L10677]              havoc __ret_0_symbol;
[L10678]              havoc __ret_0_decimals;
[L10679]              havoc __ret_0_INITIAL_SUPPLY;
[L10680]              havoc __ret_0_INITIAL_SALE_SUPPLY;
[L10681]              havoc __ret_0_INITIAL_UNSALE_SUPPLY;
[L10682]              havoc __ret_0_owner_wallet;
[L10683]              havoc __ret_0_unsale_owner_wallet;
[L10684]              havoc __ret_0_group_lockup;
[L10685]              havoc _sale_owner_wallet_s1076;
[L10686]              havoc _unsale_owner_wallet_s1076;
[L10687]              havoc _group_lockup_s1076;
[L10688]              havoc _to_s1162;
[L10689]              havoc _value_s1162;
[L10690]              havoc __ret_0_sendTokens;
[L10691]              havoc _from_s1567;
[L10692]              havoc _users_s1567;
[L10693]              havoc _values_s1567;
[L10694]              havoc __ret_0_batchTransfer;
[L10695]              havoc tmpNow;
[L10696]              havoc gas;
[L10697]              assume gas > 4000000 && gas <= 8000000;
[L10698]              tmpNow := now;
[L10699]              havoc now;
[L10700]              assume now > tmpNow;
[L10701]              assume msgsender_MSG != null;
[L10702]              assume DType[msgsender_MSG] != Ownable;
[L10703]              assume DType[msgsender_MSG] != SafeMath;
[L10704]              assume DType[msgsender_MSG] != GroupLockup;
[L10705]              assume DType[msgsender_MSG] != ERC20Basic;
[L10706]              assume DType[msgsender_MSG] != BasicToken;
[L10707]              assume DType[msgsender_MSG] != ERC20;
[L10708]              assume DType[msgsender_MSG] != StandardToken;
[L10709]              assume DType[msgsender_MSG] != MintableToken;
[L10710]              assume DType[msgsender_MSG] != ERC223Token;
[L10711]              assume DType[msgsender_MSG] != ERC223ContractInterface;
[L10712]              assume DType[msgsender_MSG] != DEAPCoin;
[L10713]              Alloc[msgsender_MSG] := true;
[L10714]  COND FALSE  !(choice == 25)
[L10720]  COND FALSE  !(choice == 24)
[L10726]  COND FALSE  !(choice == 23)
[L10732]  COND FALSE  !(choice == 22)
[L10738]  COND TRUE   choice == 21
[L10739]              gas := gas - 21000;
[L10740]  COND TRUE   gas >= 0
[L10741]              assume _value_s1284 >= 0 && _value_s1284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10742]              assume msgvalue_MSG == 0;
[L10743]  CALL        call __ret_0_transfer := transfer~address~uint256_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1284 && _value_s1284 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1284 >= 0) && _value_s1284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1284] >= 0) && balances_BasicToken[this][_to_s1284] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_DEAPCoin0 := true;
[L2]                  call_transfer_DEAPCoin0 := false;
[L2]                  revert := revert_hold;
[L3029]               havoc __exception;
[L3030]               revert := false;
[L3031]   COND FALSE  !(__exception)
[L3069]   CALL        call __ret_0_ := transfer~address~uint256_DEAPCoin__success(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L6874]               __var_25 := null;
[L6875]   COND TRUE   !(_to_s1284 != null)
[L6876]               revert := true;
[L3069]   RET         call __ret_0_ := transfer~address~uint256_DEAPCoin__success(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L3070]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && owner_wallet_DEAPCoin[this] == old(owner_wallet_DEAPCoin[this])) && unsale_owner_wallet_DEAPCoin[this] == old(unsale_owner_wallet_DEAPCoin[this])) && group_lockup_DEAPCoin[this] == old(group_lockup_DEAPCoin[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                  revert := revert_hold;
[L10743]  RET         call __ret_0_transfer := transfer~address~uint256_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L10895]  RET         call CorralChoice_DEAPCoin(this);

Loop:
[L10895]  CALL        call CorralChoice_DEAPCoin(this);
[L10640]              havoc msgsender_MSG;
[L10641]              havoc msgvalue_MSG;
[L10642]              havoc choice;
[L10643]              havoc __ret_0_owner;
[L10644]              havoc newOwner_s54;
[L10645]              havoc __ret_0_totalSupply;
[L10646]              havoc _owner_s578;
[L10647]              havoc __ret_0_balanceOf;
[L10648]              havoc _to_s1284;
[L10649]              havoc _value_s1284;
[L10650]              havoc __ret_0_transfer;
[L10651]              havoc _owner_s759;
[L10652]              havoc _spender_s759;
[L10653]              havoc __ret_0_allowance;
[L10654]              havoc _from_s715;
[L10655]              havoc _to_s715;
[L10656]              havoc _value_s715;
[L10657]              havoc __ret_0_transferFrom;
[L10658]              havoc _spender_s743;
[L10659]              havoc _value_s743;
[L10660]              havoc __ret_0_approve;
[L10661]              havoc _spender_s800;
[L10662]              havoc _addedValue_s800;
[L10663]              havoc __ret_0_increaseApproval;
[L10664]              havoc _spender_s860;
[L10665]              havoc _subtractedValue_s860;
[L10666]              havoc __ret_0_decreaseApproval;
[L10667]              havoc __ret_0_mintingFinished;
[L10668]              havoc _to_s932;
[L10669]              havoc _amount_s932;
[L10670]              havoc __ret_0_mint;
[L10671]              havoc __ret_0_finishMinting;
[L10672]              havoc _to_s1413;
[L10673]              havoc _value_s1413;
[L10674]              havoc _data_s1413;
[L10675]              havoc __ret_0_transfer_ERC223;
[L10676]              havoc __ret_0_name;
[L10677]              havoc __ret_0_symbol;
[L10678]              havoc __ret_0_decimals;
[L10679]              havoc __ret_0_INITIAL_SUPPLY;
[L10680]              havoc __ret_0_INITIAL_SALE_SUPPLY;
[L10681]              havoc __ret_0_INITIAL_UNSALE_SUPPLY;
[L10682]              havoc __ret_0_owner_wallet;
[L10683]              havoc __ret_0_unsale_owner_wallet;
[L10684]              havoc __ret_0_group_lockup;
[L10685]              havoc _sale_owner_wallet_s1076;
[L10686]              havoc _unsale_owner_wallet_s1076;
[L10687]              havoc _group_lockup_s1076;
[L10688]              havoc _to_s1162;
[L10689]              havoc _value_s1162;
[L10690]              havoc __ret_0_sendTokens;
[L10691]              havoc _from_s1567;
[L10692]              havoc _users_s1567;
[L10693]              havoc _values_s1567;
[L10694]              havoc __ret_0_batchTransfer;
[L10695]              havoc tmpNow;
[L10696]              havoc gas;
[L10697]              assume gas > 4000000 && gas <= 8000000;
[L10698]              tmpNow := now;
[L10699]              havoc now;
[L10700]              assume now > tmpNow;
[L10701]              assume msgsender_MSG != null;
[L10702]              assume DType[msgsender_MSG] != Ownable;
[L10703]              assume DType[msgsender_MSG] != SafeMath;
[L10704]              assume DType[msgsender_MSG] != GroupLockup;
[L10705]              assume DType[msgsender_MSG] != ERC20Basic;
[L10706]              assume DType[msgsender_MSG] != BasicToken;
[L10707]              assume DType[msgsender_MSG] != ERC20;
[L10708]              assume DType[msgsender_MSG] != StandardToken;
[L10709]              assume DType[msgsender_MSG] != MintableToken;
[L10710]              assume DType[msgsender_MSG] != ERC223Token;
[L10711]              assume DType[msgsender_MSG] != ERC223ContractInterface;
[L10712]              assume DType[msgsender_MSG] != DEAPCoin;
[L10713]              Alloc[msgsender_MSG] := true;
[L10714]  COND FALSE  !(choice == 25)
[L10720]  COND FALSE  !(choice == 24)
[L10726]  COND FALSE  !(choice == 23)
[L10732]  COND FALSE  !(choice == 22)
[L10738]  COND TRUE   choice == 21
[L10739]              gas := gas - 21000;
[L10740]  COND TRUE   gas >= 0
[L10741]              assume _value_s1284 >= 0 && _value_s1284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10742]              assume msgvalue_MSG == 0;
[L10743]  CALL        call __ret_0_transfer := transfer~address~uint256_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1284 && _value_s1284 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1284 >= 0) && _value_s1284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1284] >= 0) && balances_BasicToken[this][_to_s1284] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_DEAPCoin0 := true;
[L2]                  call_transfer_DEAPCoin0 := false;
[L2]                  revert := revert_hold;
[L3029]               havoc __exception;
[L3030]               revert := false;
[L3031]   COND FALSE  !(__exception)
[L3069]   CALL        call __ret_0_ := transfer~address~uint256_DEAPCoin__success(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L6874]               __var_25 := null;
[L6875]   COND TRUE   !(_to_s1284 != null)
[L6876]               revert := true;
[L3069]   RET         call __ret_0_ := transfer~address~uint256_DEAPCoin__success(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L3070]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && owner_wallet_DEAPCoin[this] == old(owner_wallet_DEAPCoin[this])) && unsale_owner_wallet_DEAPCoin[this] == old(unsale_owner_wallet_DEAPCoin[this])) && group_lockup_DEAPCoin[this] == old(group_lockup_DEAPCoin[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                  revert := revert_hold;
[L10743]  RET         call __ret_0_transfer := transfer~address~uint256_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L10895]  RET         call CorralChoice_DEAPCoin(this);

[2020-11-25 13:24:32,506 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:24:32,506 INFO  L82        PathProgramCache]: Analyzing trace with hash -699368131, now seen corresponding path program 1 times
[2020-11-25 13:24:32,507 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:24:32,530 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:24:32,792 INFO  L134       CoverageAnalysis]: Checked inductivity of 3875 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 3875 trivial. 0 not checked.
[2020-11-25 13:24:32,792 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:24:32,793 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 13:24:32,793 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:24:32,794 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 13:24:32,794 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 13:24:32,794 INFO  L87              Difference]: Start difference. First operand 5167 states and 5690 transitions. cyclomatic complexity: 529 Second operand 3 states.
[2020-11-25 13:24:32,854 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:24:32,855 INFO  L93              Difference]: Finished difference Result 5878 states and 6524 transitions.
[2020-11-25 13:24:32,855 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 13:24:32,855 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5878 states and 6524 transitions.
[2020-11-25 13:24:32,867 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 13:24:32,885 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5878 states to 5712 states and 6328 transitions.
[2020-11-25 13:24:32,885 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1372
[2020-11-25 13:24:32,886 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1388
[2020-11-25 13:24:32,886 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5712 states and 6328 transitions.
[2020-11-25 13:24:32,891 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:24:32,891 INFO  L728         BuchiCegarLoop]: Abstraction has 5712 states and 6328 transitions.
[2020-11-25 13:24:32,897 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5712 states and 6328 transitions.
[2020-11-25 13:24:32,937 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5712 to 5006.
[2020-11-25 13:24:32,938 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5006 states.
[2020-11-25 13:24:32,943 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5006 states to 5006 states and 5440 transitions.
[2020-11-25 13:24:32,943 INFO  L751         BuchiCegarLoop]: Abstraction has 5006 states and 5440 transitions.
[2020-11-25 13:24:32,943 INFO  L631         BuchiCegarLoop]: Abstraction has 5006 states and 5440 transitions.
[2020-11-25 13:24:32,943 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 13:24:32,943 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5006 states and 5440 transitions.
[2020-11-25 13:24:32,949 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:24:32,949 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:24:32,949 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:24:32,952 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [24, 24, 24, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:24:32,952 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_DEAPCoin0 := false;
[L2]                  call_transfer_DEAPCoin0 := false;
[L2]      CALL        call main();
[L10885]              assume null == 0;
[L10886]  CALL        call this := FreshRefGenerator__success();
[L5225]               havoc newRef;
[L5226]               assume Alloc[newRef] == false;
[L5227]               Alloc[newRef] := true;
[L5228]               assume newRef != null;
[L10886]  RET         call this := FreshRefGenerator__success();
[L10887]              assume now >= 0;
[L10888]              assume DType[this] == DEAPCoin;
[L10889]              assume msgvalue_MSG == 0;
[L10890]              gas := gas - 53000;
[L10891]  CALL        call DEAPCoin_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L2857]               havoc __exception;
[L2858]               revert := false;
[L2859]   COND TRUE   __exception
[L2860]               __tmp__Balance := Balance;
[L2861]               __tmp__DType := DType;
[L2862]               __tmp__Alloc := Alloc;
[L2863]               __tmp__balance_ADDR := balance_ADDR;
[L2864]               __tmp__M_Ref_int := M_Ref_int;
[L2865]               __tmp__sum_lockup_list0 := sum_lockup_list0;
[L2866]               __tmp__M_int_bool := M_int_bool;
[L2867]               __tmp__sum_lockup_list_flag1 := sum_lockup_list_flag1;
[L2868]               __tmp__sum_balances2 := sum_balances2;
[L2869]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L2870]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2871]               __tmp__sum_allowed3 := sum_allowed3;
[L2872]               __tmp__M_int_Ref := M_int_Ref;
[L2873]               __tmp__sum := sum;
[L2874]               __tmp__M_int_int := M_int_int;
[L2875]               __tmp__Length := Length;
[L2876]               __tmp__now := now;
[L2877]               __tmp__owner_Ownable := owner_Ownable;
[L2878]               __tmp__lockup_list_GroupLockup := lockup_list_GroupLockup;
[L2879]               __tmp__lockup_list_flag_GroupLockup := lockup_list_flag_GroupLockup;
[L2880]               __tmp__user_list_GroupLockup := user_list_GroupLockup;
[L2881]               __tmp__balances_BasicToken := balances_BasicToken;
[L2882]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L2883]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L2884]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L2885]               __tmp__name_DEAPCoin := name_DEAPCoin;
[L2886]               __tmp__symbol_DEAPCoin := symbol_DEAPCoin;
[L2887]               __tmp__decimals_DEAPCoin := decimals_DEAPCoin;
[L2888]               __tmp__INITIAL_SUPPLY_DEAPCoin := INITIAL_SUPPLY_DEAPCoin;
[L2889]               __tmp__INITIAL_SALE_SUPPLY_DEAPCoin := INITIAL_SALE_SUPPLY_DEAPCoin;
[L2890]               __tmp__INITIAL_UNSALE_SUPPLY_DEAPCoin := INITIAL_UNSALE_SUPPLY_DEAPCoin;
[L2891]               __tmp__owner_wallet_DEAPCoin := owner_wallet_DEAPCoin;
[L2892]               __tmp__unsale_owner_wallet_DEAPCoin := unsale_owner_wallet_DEAPCoin;
[L2893]               __tmp__group_lockup_DEAPCoin := group_lockup_DEAPCoin;
[L2894]   CALL        call DEAPCoin_DEAPCoin__fail(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6610]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L6610]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6611]   COND FALSE  !(revert)
[L6614]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5940]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5940]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5941]   COND FALSE  !(revert)
[L5944]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5925]               assume msgsender_MSG != null;
[L5926]               __tmp__Balance[this] := 0;
[L5944]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5945]   COND FALSE  !(revert)
[L6614]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6615]   COND FALSE  !(revert)
[L6618]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5811]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5811]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5812]   COND FALSE  !(revert)
[L5815]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5790]               assume msgsender_MSG != null;
[L5791]               __tmp__Balance[this] := 0;
[L5792]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L5793]               __tmp__sum_balances2[this] := 0;
[L5794]               __tmp__totalSupply__BasicToken[this] := 0;
[L5815]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5816]   COND FALSE  !(revert)
[L6618]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6619]   COND FALSE  !(revert)
[L6622]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5984]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5984]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5985]   COND FALSE  !(revert)
[L5988]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5940]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5940]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5941]   COND FALSE  !(revert)
[L5944]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5925]               assume msgsender_MSG != null;
[L5926]               __tmp__Balance[this] := 0;
[L5944]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5945]   COND FALSE  !(revert)
[L5988]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5989]   COND FALSE  !(revert)
[L5992]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5811]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5811]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5812]   COND FALSE  !(revert)
[L5815]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5790]               assume msgsender_MSG != null;
[L5791]               __tmp__Balance[this] := 0;
[L5792]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L5793]               __tmp__sum_balances2[this] := 0;
[L5794]               __tmp__totalSupply__BasicToken[this] := 0;
[L5815]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5816]   COND FALSE  !(revert)
[L5992]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5993]   COND FALSE  !(revert)
[L5996]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5965]               assume msgsender_MSG != null;
[L5966]               __tmp__Balance[this] := 0;
[L5967]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L5968]               __tmp__sum_allowed3[this] := 0;
[L5996]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5997]   COND FALSE  !(revert)
[L6622]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6623]   COND FALSE  !(revert)
[L6626]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5253]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5234]               assume msgsender_MSG != null;
[L5235]               __tmp__Balance[this] := 0;
[L5236]               __tmp__owner_Ownable[this] := null;
[L5238]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5253]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5254]   COND FALSE  !(revert)
[L6626]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6627]   COND FALSE  !(revert)
[L6630]   CALL        call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6236]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L6236]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6237]   COND FALSE  !(revert)
[L6240]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5940]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5940]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5941]   COND FALSE  !(revert)
[L5944]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5925]               assume msgsender_MSG != null;
[L5926]               __tmp__Balance[this] := 0;
[L5944]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5945]   COND FALSE  !(revert)
[L6240]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6241]   COND FALSE  !(revert)
[L6244]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5811]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5811]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5812]   COND FALSE  !(revert)
[L5815]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5790]               assume msgsender_MSG != null;
[L5791]               __tmp__Balance[this] := 0;
[L5792]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L5793]               __tmp__sum_balances2[this] := 0;
[L5794]               __tmp__totalSupply__BasicToken[this] := 0;
[L5815]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5816]   COND FALSE  !(revert)
[L6244]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6245]   COND FALSE  !(revert)
[L6248]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5984]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5984]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5985]   COND FALSE  !(revert)
[L5988]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5940]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5940]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5941]   COND FALSE  !(revert)
[L5944]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5925]               assume msgsender_MSG != null;
[L5926]               __tmp__Balance[this] := 0;
[L5944]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5945]   COND FALSE  !(revert)
[L5988]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5989]   COND FALSE  !(revert)
[L5992]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5811]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5811]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5812]   COND FALSE  !(revert)
[L5815]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5790]               assume msgsender_MSG != null;
[L5791]               __tmp__Balance[this] := 0;
[L5792]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L5793]               __tmp__sum_balances2[this] := 0;
[L5794]               __tmp__totalSupply__BasicToken[this] := 0;
[L5815]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5816]   COND FALSE  !(revert)
[L5992]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5993]   COND FALSE  !(revert)
[L5996]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5965]               assume msgsender_MSG != null;
[L5966]               __tmp__Balance[this] := 0;
[L5967]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L5968]               __tmp__sum_allowed3[this] := 0;
[L5996]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5997]   COND FALSE  !(revert)
[L6248]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6249]   COND FALSE  !(revert)
[L6252]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5253]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5234]               assume msgsender_MSG != null;
[L5235]               __tmp__Balance[this] := 0;
[L5236]               __tmp__owner_Ownable[this] := null;
[L5238]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5253]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5254]   COND FALSE  !(revert)
[L6252]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6253]   COND FALSE  !(revert)
[L6256]   CALL        call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6219]               assume msgsender_MSG != null;
[L6220]               __tmp__Balance[this] := 0;
[L6221]               __tmp__mintingFinished_MintableToken[this] := false;
[L6256]   RET         call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6257]   COND FALSE  !(revert)
[L6630]   RET         call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6631]   COND FALSE  !(revert)
[L6634]   CALL        call ERC223Token_ERC223Token__fail(this, msgsender_MSG, msgvalue_MSG);
[L6409]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L6409]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6410]   COND FALSE  !(revert)
[L6413]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5940]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5940]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5941]   COND FALSE  !(revert)
[L5944]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5925]               assume msgsender_MSG != null;
[L5926]               __tmp__Balance[this] := 0;
[L5944]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5945]   COND FALSE  !(revert)
[L6413]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6414]   COND FALSE  !(revert)
[L6417]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5811]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5811]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5812]   COND FALSE  !(revert)
[L5815]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5790]               assume msgsender_MSG != null;
[L5791]               __tmp__Balance[this] := 0;
[L5792]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L5793]               __tmp__sum_balances2[this] := 0;
[L5794]               __tmp__totalSupply__BasicToken[this] := 0;
[L5815]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5816]   COND FALSE  !(revert)
[L6417]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6418]   COND FALSE  !(revert)
[L6421]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5984]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5984]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5985]   COND FALSE  !(revert)
[L5988]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5940]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5940]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5941]   COND FALSE  !(revert)
[L5944]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5925]               assume msgsender_MSG != null;
[L5926]               __tmp__Balance[this] := 0;
[L5944]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5945]   COND FALSE  !(revert)
[L5988]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5989]   COND FALSE  !(revert)
[L5992]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5811]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5811]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5812]   COND FALSE  !(revert)
[L5815]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5790]               assume msgsender_MSG != null;
[L5791]               __tmp__Balance[this] := 0;
[L5792]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L5793]               __tmp__sum_balances2[this] := 0;
[L5794]               __tmp__totalSupply__BasicToken[this] := 0;
[L5815]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5816]   COND FALSE  !(revert)
[L5992]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5993]   COND FALSE  !(revert)
[L5996]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5965]               assume msgsender_MSG != null;
[L5966]               __tmp__Balance[this] := 0;
[L5967]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L5968]               __tmp__sum_allowed3[this] := 0;
[L5996]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5997]   COND FALSE  !(revert)
[L6421]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L6425]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5253]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5234]               assume msgsender_MSG != null;
[L5235]               __tmp__Balance[this] := 0;
[L5236]               __tmp__owner_Ownable[this] := null;
[L5238]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5253]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5254]   COND FALSE  !(revert)
[L6425]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6426]   COND FALSE  !(revert)
[L6429]   CALL        call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6236]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L6236]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6237]   COND FALSE  !(revert)
[L6240]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5940]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5940]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5941]   COND FALSE  !(revert)
[L5944]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5925]               assume msgsender_MSG != null;
[L5926]               __tmp__Balance[this] := 0;
[L5944]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5945]   COND FALSE  !(revert)
[L6240]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6241]   COND FALSE  !(revert)
[L6244]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5811]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5811]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5812]   COND FALSE  !(revert)
[L5815]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5790]               assume msgsender_MSG != null;
[L5791]               __tmp__Balance[this] := 0;
[L5792]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L5793]               __tmp__sum_balances2[this] := 0;
[L5794]               __tmp__totalSupply__BasicToken[this] := 0;
[L5815]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5816]   COND FALSE  !(revert)
[L6244]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6245]   COND FALSE  !(revert)
[L6248]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5984]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5984]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5985]   COND FALSE  !(revert)
[L5988]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5940]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5940]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5941]   COND FALSE  !(revert)
[L5944]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5925]               assume msgsender_MSG != null;
[L5926]               __tmp__Balance[this] := 0;
[L5944]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5945]   COND FALSE  !(revert)
[L5988]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5989]   COND FALSE  !(revert)
[L5992]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5811]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5811]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5812]   COND FALSE  !(revert)
[L5815]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5790]               assume msgsender_MSG != null;
[L5791]               __tmp__Balance[this] := 0;
[L5792]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L5793]               __tmp__sum_balances2[this] := 0;
[L5794]               __tmp__totalSupply__BasicToken[this] := 0;
[L5815]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5816]   COND FALSE  !(revert)
[L5992]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5993]   COND FALSE  !(revert)
[L5996]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5965]               assume msgsender_MSG != null;
[L5966]               __tmp__Balance[this] := 0;
[L5967]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L5968]               __tmp__sum_allowed3[this] := 0;
[L5996]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5997]   COND FALSE  !(revert)
[L6248]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6249]   COND FALSE  !(revert)
[L6252]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5253]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5234]               assume msgsender_MSG != null;
[L5235]               __tmp__Balance[this] := 0;
[L5236]               __tmp__owner_Ownable[this] := null;
[L5238]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5253]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5254]   COND FALSE  !(revert)
[L6252]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6253]   COND FALSE  !(revert)
[L6256]   CALL        call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6219]               assume msgsender_MSG != null;
[L6220]               __tmp__Balance[this] := 0;
[L6221]               __tmp__mintingFinished_MintableToken[this] := false;
[L6256]   RET         call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6257]   COND FALSE  !(revert)
[L6429]   RET         call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6433]   CALL        call ERC223Token_ERC223Token_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6394]               assume msgsender_MSG != null;
[L6395]               __tmp__Balance[this] := 0;
[L6433]   RET         call ERC223Token_ERC223Token_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6434]   COND FALSE  !(revert)
[L6634]   RET         call ERC223Token_ERC223Token__fail(this, msgsender_MSG, msgvalue_MSG);
[L6635]   COND FALSE  !(revert)
[L6638]   CALL        call DEAPCoin_DEAPCoin_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6511]               assume msgsender_MSG != null;
[L6512]               __tmp__Balance[this] := 0;
[L6513]               __tmp__name_DEAPCoin[this] := -635866188;
[L6514]               __tmp__symbol_DEAPCoin[this] := -1031151507;
[L6515]               __tmp__decimals_DEAPCoin[this] := 18;
[L6516]               __var_19 := __tmp__decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6517]               __tmp__INITIAL_SUPPLY_DEAPCoin[this] := 30000000000 * (nonlinearPow(10, __tmp__decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6518]               __var_20 := __tmp__decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6519]               __tmp__INITIAL_SALE_SUPPLY_DEAPCoin[this] := 12000000000 * (nonlinearPow(10, __tmp__decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6520]               __tmp__INITIAL_UNSALE_SUPPLY_DEAPCoin[this] := (__tmp__INITIAL_SUPPLY_DEAPCoin[this] - __tmp__INITIAL_SALE_SUPPLY_DEAPCoin[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6521]               __tmp__owner_wallet_DEAPCoin[this] := null;
[L6522]               __tmp__unsale_owner_wallet_DEAPCoin[this] := null;
[L6524]               __tmp__group_lockup_DEAPCoin[this] := _group_lockup_s1076;
[L6525]               __tmp__owner_wallet_DEAPCoin[this] := _sale_owner_wallet_s1076;
[L6526]               __tmp__unsale_owner_wallet_DEAPCoin[this] := _unsale_owner_wallet_s1076;
[L6527]   COND TRUE   __tmp__DType[this] == DEAPCoin
[L6528]   CALL        call __var_16 := mint~address~uint256_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__owner_wallet_DEAPCoin[this], __tmp__INITIAL_SALE_SUPPLY_DEAPCoin[this]);
[L6294]   CALL        call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9389]   COND FALSE  !(!(msgsender_MSG == __tmp__owner_Ownable[this]))
[L6294]   RET         call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6295]   COND FALSE  !(revert)
[L6298]   CALL        call canMint_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9405]   COND FALSE  !(!!__tmp__mintingFinished_MintableToken[this])
[L6298]   RET         call canMint_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6299]   COND FALSE  !(revert)
[L6302]   CALL        call __var_14 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__totalSupply__BasicToken[this], _amount_s932);
[L5392]               c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5393]               c_s146 := c_s146;
[L6302]   RET         call __var_14 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__totalSupply__BasicToken[this], _amount_s932);
[L6303]   COND FALSE  !(revert)
[L6306]               __tmp__totalSupply__BasicToken[this] := __var_14;
[L6307]   CALL        call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][_to_s932], _amount_s932);
[L5392]               c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5393]               c_s146 := c_s146;
[L6307]   RET         call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][_to_s932], _amount_s932);
[L6308]   COND FALSE  !(revert)
[L6311]               __tmp__sum_balances2[this] := __tmp__sum_balances2[this] - __tmp__balances_BasicToken[this][_to_s932];
[L6312]               __tmp__balances_BasicToken[this][_to_s932] := __var_15;
[L6313]               __tmp__sum_balances2[this] := __tmp__sum_balances2[this] + __tmp__balances_BasicToken[this][_to_s932];
[L6314]               __ret_0_ := true;
[L6528]   RET         call __var_16 := mint~address~uint256_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__owner_wallet_DEAPCoin[this], __tmp__INITIAL_SALE_SUPPLY_DEAPCoin[this]);
[L6529]   COND FALSE  !(revert)
[L6535]   COND TRUE   __tmp__DType[this] == DEAPCoin
[L6536]   CALL        call __var_17 := mint~address~uint256_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__unsale_owner_wallet_DEAPCoin[this], __tmp__INITIAL_UNSALE_SUPPLY_DEAPCoin[this]);
[L6294]   CALL        call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9389]   COND FALSE  !(!(msgsender_MSG == __tmp__owner_Ownable[this]))
[L6294]   RET         call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6295]   COND FALSE  !(revert)
[L6298]   CALL        call canMint_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9405]   COND FALSE  !(!!__tmp__mintingFinished_MintableToken[this])
[L6298]   RET         call canMint_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6299]   COND FALSE  !(revert)
[L6302]   CALL        call __var_14 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__totalSupply__BasicToken[this], _amount_s932);
[L5392]               c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5393]               c_s146 := c_s146;
[L6302]   RET         call __var_14 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__totalSupply__BasicToken[this], _amount_s932);
[L6303]   COND FALSE  !(revert)
[L6306]               __tmp__totalSupply__BasicToken[this] := __var_14;
[L6307]   CALL        call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][_to_s932], _amount_s932);
[L5392]               c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5393]               c_s146 := c_s146;
[L6307]   RET         call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][_to_s932], _amount_s932);
[L6308]   COND FALSE  !(revert)
[L6311]               __tmp__sum_balances2[this] := __tmp__sum_balances2[this] - __tmp__balances_BasicToken[this][_to_s932];
[L6312]               __tmp__balances_BasicToken[this][_to_s932] := __var_15;
[L6313]               __tmp__sum_balances2[this] := __tmp__sum_balances2[this] + __tmp__balances_BasicToken[this][_to_s932];
[L6314]               __ret_0_ := true;
[L6536]   RET         call __var_17 := mint~address~uint256_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__unsale_owner_wallet_DEAPCoin[this], __tmp__INITIAL_UNSALE_SUPPLY_DEAPCoin[this]);
[L6537]   COND FALSE  !(revert)
[L6543]   COND TRUE   __tmp__DType[this] == DEAPCoin
[L6544]   CALL        call __var_18 := finishMinting_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6350]   CALL        call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9389]   COND FALSE  !(!(msgsender_MSG == __tmp__owner_Ownable[this]))
[L6350]   RET         call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6351]   COND FALSE  !(revert)
[L6354]   CALL        call canMint_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9405]   COND FALSE  !(!!__tmp__mintingFinished_MintableToken[this])
[L6354]   RET         call canMint_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6355]   COND FALSE  !(revert)
[L6358]               __tmp__mintingFinished_MintableToken[this] := true;
[L6359]               __ret_0_ := true;
[L6544]   RET         call __var_18 := finishMinting_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6638]   RET         call DEAPCoin_DEAPCoin_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6639]   COND FALSE  !(revert)
[L2894]   RET         call DEAPCoin_DEAPCoin__fail(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L2895]               assume revert || gas < 0;
[L10891]  RET         call DEAPCoin_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L10892]              assume !revert && gas >= 0;
[L10895]  CALL        call CorralChoice_DEAPCoin(this);
[L10640]              havoc msgsender_MSG;
[L10641]              havoc msgvalue_MSG;
[L10642]              havoc choice;
[L10643]              havoc __ret_0_owner;
[L10644]              havoc newOwner_s54;
[L10645]              havoc __ret_0_totalSupply;
[L10646]              havoc _owner_s578;
[L10647]              havoc __ret_0_balanceOf;
[L10648]              havoc _to_s1284;
[L10649]              havoc _value_s1284;
[L10650]              havoc __ret_0_transfer;
[L10651]              havoc _owner_s759;
[L10652]              havoc _spender_s759;
[L10653]              havoc __ret_0_allowance;
[L10654]              havoc _from_s715;
[L10655]              havoc _to_s715;
[L10656]              havoc _value_s715;
[L10657]              havoc __ret_0_transferFrom;
[L10658]              havoc _spender_s743;
[L10659]              havoc _value_s743;
[L10660]              havoc __ret_0_approve;
[L10661]              havoc _spender_s800;
[L10662]              havoc _addedValue_s800;
[L10663]              havoc __ret_0_increaseApproval;
[L10664]              havoc _spender_s860;
[L10665]              havoc _subtractedValue_s860;
[L10666]              havoc __ret_0_decreaseApproval;
[L10667]              havoc __ret_0_mintingFinished;
[L10668]              havoc _to_s932;
[L10669]              havoc _amount_s932;
[L10670]              havoc __ret_0_mint;
[L10671]              havoc __ret_0_finishMinting;
[L10672]              havoc _to_s1413;
[L10673]              havoc _value_s1413;
[L10674]              havoc _data_s1413;
[L10675]              havoc __ret_0_transfer_ERC223;
[L10676]              havoc __ret_0_name;
[L10677]              havoc __ret_0_symbol;
[L10678]              havoc __ret_0_decimals;
[L10679]              havoc __ret_0_INITIAL_SUPPLY;
[L10680]              havoc __ret_0_INITIAL_SALE_SUPPLY;
[L10681]              havoc __ret_0_INITIAL_UNSALE_SUPPLY;
[L10682]              havoc __ret_0_owner_wallet;
[L10683]              havoc __ret_0_unsale_owner_wallet;
[L10684]              havoc __ret_0_group_lockup;
[L10685]              havoc _sale_owner_wallet_s1076;
[L10686]              havoc _unsale_owner_wallet_s1076;
[L10687]              havoc _group_lockup_s1076;
[L10688]              havoc _to_s1162;
[L10689]              havoc _value_s1162;
[L10690]              havoc __ret_0_sendTokens;
[L10691]              havoc _from_s1567;
[L10692]              havoc _users_s1567;
[L10693]              havoc _values_s1567;
[L10694]              havoc __ret_0_batchTransfer;
[L10695]              havoc tmpNow;
[L10696]              havoc gas;
[L10697]              assume gas > 4000000 && gas <= 8000000;
[L10698]              tmpNow := now;
[L10699]              havoc now;
[L10700]              assume now > tmpNow;
[L10701]              assume msgsender_MSG != null;
[L10702]              assume DType[msgsender_MSG] != Ownable;
[L10703]              assume DType[msgsender_MSG] != SafeMath;
[L10704]              assume DType[msgsender_MSG] != GroupLockup;
[L10705]              assume DType[msgsender_MSG] != ERC20Basic;
[L10706]              assume DType[msgsender_MSG] != BasicToken;
[L10707]              assume DType[msgsender_MSG] != ERC20;
[L10708]              assume DType[msgsender_MSG] != StandardToken;
[L10709]              assume DType[msgsender_MSG] != MintableToken;
[L10710]              assume DType[msgsender_MSG] != ERC223Token;
[L10711]              assume DType[msgsender_MSG] != ERC223ContractInterface;
[L10712]              assume DType[msgsender_MSG] != DEAPCoin;
[L10713]              Alloc[msgsender_MSG] := true;
[L10714]  COND FALSE  !(choice == 25)
[L10720]  COND FALSE  !(choice == 24)
[L10726]  COND FALSE  !(choice == 23)
[L10732]  COND FALSE  !(choice == 22)
[L10738]  COND TRUE   choice == 21
[L10739]              gas := gas - 21000;
[L10740]  COND TRUE   gas >= 0
[L10741]              assume _value_s1284 >= 0 && _value_s1284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10742]              assume msgvalue_MSG == 0;
[L10743]  CALL        call __ret_0_transfer := transfer~address~uint256_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1284 && _value_s1284 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1284 >= 0) && _value_s1284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1284] >= 0) && balances_BasicToken[this][_to_s1284] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_DEAPCoin0 := true;
[L2]                  call_transfer_DEAPCoin0 := false;
[L2]                  revert := revert_hold;
[L3029]               havoc __exception;
[L3030]               revert := false;
[L3031]   COND TRUE   __exception
[L3032]               __tmp__Balance := Balance;
[L3033]               __tmp__DType := DType;
[L3034]               __tmp__Alloc := Alloc;
[L3035]               __tmp__balance_ADDR := balance_ADDR;
[L3036]               __tmp__M_Ref_int := M_Ref_int;
[L3037]               __tmp__sum_lockup_list0 := sum_lockup_list0;
[L3038]               __tmp__M_int_bool := M_int_bool;
[L3039]               __tmp__sum_lockup_list_flag1 := sum_lockup_list_flag1;
[L3040]               __tmp__sum_balances2 := sum_balances2;
[L3041]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L3042]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3043]               __tmp__sum_allowed3 := sum_allowed3;
[L3044]               __tmp__M_int_Ref := M_int_Ref;
[L3045]               __tmp__sum := sum;
[L3046]               __tmp__M_int_int := M_int_int;
[L3047]               __tmp__Length := Length;
[L3048]               __tmp__now := now;
[L3049]               __tmp__owner_Ownable := owner_Ownable;
[L3050]               __tmp__lockup_list_GroupLockup := lockup_list_GroupLockup;
[L3051]               __tmp__lockup_list_flag_GroupLockup := lockup_list_flag_GroupLockup;
[L3052]               __tmp__user_list_GroupLockup := user_list_GroupLockup;
[L3053]               __tmp__balances_BasicToken := balances_BasicToken;
[L3054]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L3055]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L3056]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L3057]               __tmp__name_DEAPCoin := name_DEAPCoin;
[L3058]               __tmp__symbol_DEAPCoin := symbol_DEAPCoin;
[L3059]               __tmp__decimals_DEAPCoin := decimals_DEAPCoin;
[L3060]               __tmp__INITIAL_SUPPLY_DEAPCoin := INITIAL_SUPPLY_DEAPCoin;
[L3061]               __tmp__INITIAL_SALE_SUPPLY_DEAPCoin := INITIAL_SALE_SUPPLY_DEAPCoin;
[L3062]               __tmp__INITIAL_UNSALE_SUPPLY_DEAPCoin := INITIAL_UNSALE_SUPPLY_DEAPCoin;
[L3063]               __tmp__owner_wallet_DEAPCoin := owner_wallet_DEAPCoin;
[L3064]               __tmp__unsale_owner_wallet_DEAPCoin := unsale_owner_wallet_DEAPCoin;
[L3065]               __tmp__group_lockup_DEAPCoin := group_lockup_DEAPCoin;
[L3066]   CALL        call __ret_0_ := transfer~address~uint256_DEAPCoin__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L6799]               __var_25 := null;
[L6800]   COND TRUE   !(_to_s1284 != null)
[L6801]               revert := true;
[L3066]   RET         call __ret_0_ := transfer~address~uint256_DEAPCoin__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L3067]               assume revert || gas < 0;
[L10743]  RET         call __ret_0_transfer := transfer~address~uint256_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L10895]  RET         call CorralChoice_DEAPCoin(this);

Loop:
[L10895]  CALL        call CorralChoice_DEAPCoin(this);
[L10640]              havoc msgsender_MSG;
[L10641]              havoc msgvalue_MSG;
[L10642]              havoc choice;
[L10643]              havoc __ret_0_owner;
[L10644]              havoc newOwner_s54;
[L10645]              havoc __ret_0_totalSupply;
[L10646]              havoc _owner_s578;
[L10647]              havoc __ret_0_balanceOf;
[L10648]              havoc _to_s1284;
[L10649]              havoc _value_s1284;
[L10650]              havoc __ret_0_transfer;
[L10651]              havoc _owner_s759;
[L10652]              havoc _spender_s759;
[L10653]              havoc __ret_0_allowance;
[L10654]              havoc _from_s715;
[L10655]              havoc _to_s715;
[L10656]              havoc _value_s715;
[L10657]              havoc __ret_0_transferFrom;
[L10658]              havoc _spender_s743;
[L10659]              havoc _value_s743;
[L10660]              havoc __ret_0_approve;
[L10661]              havoc _spender_s800;
[L10662]              havoc _addedValue_s800;
[L10663]              havoc __ret_0_increaseApproval;
[L10664]              havoc _spender_s860;
[L10665]              havoc _subtractedValue_s860;
[L10666]              havoc __ret_0_decreaseApproval;
[L10667]              havoc __ret_0_mintingFinished;
[L10668]              havoc _to_s932;
[L10669]              havoc _amount_s932;
[L10670]              havoc __ret_0_mint;
[L10671]              havoc __ret_0_finishMinting;
[L10672]              havoc _to_s1413;
[L10673]              havoc _value_s1413;
[L10674]              havoc _data_s1413;
[L10675]              havoc __ret_0_transfer_ERC223;
[L10676]              havoc __ret_0_name;
[L10677]              havoc __ret_0_symbol;
[L10678]              havoc __ret_0_decimals;
[L10679]              havoc __ret_0_INITIAL_SUPPLY;
[L10680]              havoc __ret_0_INITIAL_SALE_SUPPLY;
[L10681]              havoc __ret_0_INITIAL_UNSALE_SUPPLY;
[L10682]              havoc __ret_0_owner_wallet;
[L10683]              havoc __ret_0_unsale_owner_wallet;
[L10684]              havoc __ret_0_group_lockup;
[L10685]              havoc _sale_owner_wallet_s1076;
[L10686]              havoc _unsale_owner_wallet_s1076;
[L10687]              havoc _group_lockup_s1076;
[L10688]              havoc _to_s1162;
[L10689]              havoc _value_s1162;
[L10690]              havoc __ret_0_sendTokens;
[L10691]              havoc _from_s1567;
[L10692]              havoc _users_s1567;
[L10693]              havoc _values_s1567;
[L10694]              havoc __ret_0_batchTransfer;
[L10695]              havoc tmpNow;
[L10696]              havoc gas;
[L10697]              assume gas > 4000000 && gas <= 8000000;
[L10698]              tmpNow := now;
[L10699]              havoc now;
[L10700]              assume now > tmpNow;
[L10701]              assume msgsender_MSG != null;
[L10702]              assume DType[msgsender_MSG] != Ownable;
[L10703]              assume DType[msgsender_MSG] != SafeMath;
[L10704]              assume DType[msgsender_MSG] != GroupLockup;
[L10705]              assume DType[msgsender_MSG] != ERC20Basic;
[L10706]              assume DType[msgsender_MSG] != BasicToken;
[L10707]              assume DType[msgsender_MSG] != ERC20;
[L10708]              assume DType[msgsender_MSG] != StandardToken;
[L10709]              assume DType[msgsender_MSG] != MintableToken;
[L10710]              assume DType[msgsender_MSG] != ERC223Token;
[L10711]              assume DType[msgsender_MSG] != ERC223ContractInterface;
[L10712]              assume DType[msgsender_MSG] != DEAPCoin;
[L10713]              Alloc[msgsender_MSG] := true;
[L10714]  COND FALSE  !(choice == 25)
[L10720]  COND FALSE  !(choice == 24)
[L10726]  COND FALSE  !(choice == 23)
[L10732]  COND FALSE  !(choice == 22)
[L10738]  COND TRUE   choice == 21
[L10739]              gas := gas - 21000;
[L10740]  COND TRUE   gas >= 0
[L10741]              assume _value_s1284 >= 0 && _value_s1284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10742]              assume msgvalue_MSG == 0;
[L10743]  CALL        call __ret_0_transfer := transfer~address~uint256_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1284 && _value_s1284 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1284 >= 0) && _value_s1284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1284] >= 0) && balances_BasicToken[this][_to_s1284] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_DEAPCoin0 := true;
[L2]                  call_transfer_DEAPCoin0 := false;
[L2]                  revert := revert_hold;
[L3029]               havoc __exception;
[L3030]               revert := false;
[L3031]   COND TRUE   __exception
[L3032]               __tmp__Balance := Balance;
[L3033]               __tmp__DType := DType;
[L3034]               __tmp__Alloc := Alloc;
[L3035]               __tmp__balance_ADDR := balance_ADDR;
[L3036]               __tmp__M_Ref_int := M_Ref_int;
[L3037]               __tmp__sum_lockup_list0 := sum_lockup_list0;
[L3038]               __tmp__M_int_bool := M_int_bool;
[L3039]               __tmp__sum_lockup_list_flag1 := sum_lockup_list_flag1;
[L3040]               __tmp__sum_balances2 := sum_balances2;
[L3041]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L3042]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3043]               __tmp__sum_allowed3 := sum_allowed3;
[L3044]               __tmp__M_int_Ref := M_int_Ref;
[L3045]               __tmp__sum := sum;
[L3046]               __tmp__M_int_int := M_int_int;
[L3047]               __tmp__Length := Length;
[L3048]               __tmp__now := now;
[L3049]               __tmp__owner_Ownable := owner_Ownable;
[L3050]               __tmp__lockup_list_GroupLockup := lockup_list_GroupLockup;
[L3051]               __tmp__lockup_list_flag_GroupLockup := lockup_list_flag_GroupLockup;
[L3052]               __tmp__user_list_GroupLockup := user_list_GroupLockup;
[L3053]               __tmp__balances_BasicToken := balances_BasicToken;
[L3054]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L3055]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L3056]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L3057]               __tmp__name_DEAPCoin := name_DEAPCoin;
[L3058]               __tmp__symbol_DEAPCoin := symbol_DEAPCoin;
[L3059]               __tmp__decimals_DEAPCoin := decimals_DEAPCoin;
[L3060]               __tmp__INITIAL_SUPPLY_DEAPCoin := INITIAL_SUPPLY_DEAPCoin;
[L3061]               __tmp__INITIAL_SALE_SUPPLY_DEAPCoin := INITIAL_SALE_SUPPLY_DEAPCoin;
[L3062]               __tmp__INITIAL_UNSALE_SUPPLY_DEAPCoin := INITIAL_UNSALE_SUPPLY_DEAPCoin;
[L3063]               __tmp__owner_wallet_DEAPCoin := owner_wallet_DEAPCoin;
[L3064]               __tmp__unsale_owner_wallet_DEAPCoin := unsale_owner_wallet_DEAPCoin;
[L3065]               __tmp__group_lockup_DEAPCoin := group_lockup_DEAPCoin;
[L3066]   CALL        call __ret_0_ := transfer~address~uint256_DEAPCoin__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L6799]               __var_25 := null;
[L6800]   COND TRUE   !(_to_s1284 != null)
[L6801]               revert := true;
[L3066]   RET         call __ret_0_ := transfer~address~uint256_DEAPCoin__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L3067]               assume revert || gas < 0;
[L10743]  RET         call __ret_0_transfer := transfer~address~uint256_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L10895]  RET         call CorralChoice_DEAPCoin(this);

[2020-11-25 13:24:32,960 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:24:32,960 INFO  L82        PathProgramCache]: Analyzing trace with hash -1179358804, now seen corresponding path program 1 times
[2020-11-25 13:24:32,961 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:24:32,990 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:24:33,353 INFO  L134       CoverageAnalysis]: Checked inductivity of 3940 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 3940 trivial. 0 not checked.
[2020-11-25 13:24:33,353 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:24:33,353 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 13:24:33,354 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:24:33,354 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 13:24:33,354 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 13:24:33,354 INFO  L87              Difference]: Start difference. First operand 5006 states and 5440 transitions. cyclomatic complexity: 440 Second operand 6 states.
[2020-11-25 13:24:33,403 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:24:33,403 INFO  L93              Difference]: Finished difference Result 5122 states and 5563 transitions.
[2020-11-25 13:24:33,404 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 13:24:33,404 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5122 states and 5563 transitions.
[2020-11-25 13:24:33,413 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:24:33,424 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5122 states to 5114 states and 5555 transitions.
[2020-11-25 13:24:33,424 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1227
[2020-11-25 13:24:33,424 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1227
[2020-11-25 13:24:33,424 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5114 states and 5555 transitions.
[2020-11-25 13:24:33,428 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:24:33,428 INFO  L728         BuchiCegarLoop]: Abstraction has 5114 states and 5555 transitions.
[2020-11-25 13:24:33,432 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5114 states and 5555 transitions.
[2020-11-25 13:24:33,465 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5114 to 5099.
[2020-11-25 13:24:33,465 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5099 states.
[2020-11-25 13:24:33,470 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5099 states to 5099 states and 5538 transitions.
[2020-11-25 13:24:33,470 INFO  L751         BuchiCegarLoop]: Abstraction has 5099 states and 5538 transitions.
[2020-11-25 13:24:33,470 INFO  L631         BuchiCegarLoop]: Abstraction has 5099 states and 5538 transitions.
[2020-11-25 13:24:33,470 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 13:24:33,470 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5099 states and 5538 transitions.
[2020-11-25 13:24:33,475 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:24:33,476 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:24:33,476 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:24:33,478 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [24, 24, 24, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:24:33,478 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_DEAPCoin0 := false;
[L2]                  call_transfer_DEAPCoin0 := false;
[L2]      CALL        call main();
[L10885]              assume null == 0;
[L10886]  CALL        call this := FreshRefGenerator__success();
[L5225]               havoc newRef;
[L5226]               assume Alloc[newRef] == false;
[L5227]               Alloc[newRef] := true;
[L5228]               assume newRef != null;
[L10886]  RET         call this := FreshRefGenerator__success();
[L10887]              assume now >= 0;
[L10888]              assume DType[this] == DEAPCoin;
[L10889]              assume msgvalue_MSG == 0;
[L10890]              gas := gas - 53000;
[L10891]  CALL        call DEAPCoin_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L2857]               havoc __exception;
[L2858]               revert := false;
[L2859]   COND TRUE   __exception
[L2860]               __tmp__Balance := Balance;
[L2861]               __tmp__DType := DType;
[L2862]               __tmp__Alloc := Alloc;
[L2863]               __tmp__balance_ADDR := balance_ADDR;
[L2864]               __tmp__M_Ref_int := M_Ref_int;
[L2865]               __tmp__sum_lockup_list0 := sum_lockup_list0;
[L2866]               __tmp__M_int_bool := M_int_bool;
[L2867]               __tmp__sum_lockup_list_flag1 := sum_lockup_list_flag1;
[L2868]               __tmp__sum_balances2 := sum_balances2;
[L2869]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L2870]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2871]               __tmp__sum_allowed3 := sum_allowed3;
[L2872]               __tmp__M_int_Ref := M_int_Ref;
[L2873]               __tmp__sum := sum;
[L2874]               __tmp__M_int_int := M_int_int;
[L2875]               __tmp__Length := Length;
[L2876]               __tmp__now := now;
[L2877]               __tmp__owner_Ownable := owner_Ownable;
[L2878]               __tmp__lockup_list_GroupLockup := lockup_list_GroupLockup;
[L2879]               __tmp__lockup_list_flag_GroupLockup := lockup_list_flag_GroupLockup;
[L2880]               __tmp__user_list_GroupLockup := user_list_GroupLockup;
[L2881]               __tmp__balances_BasicToken := balances_BasicToken;
[L2882]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L2883]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L2884]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L2885]               __tmp__name_DEAPCoin := name_DEAPCoin;
[L2886]               __tmp__symbol_DEAPCoin := symbol_DEAPCoin;
[L2887]               __tmp__decimals_DEAPCoin := decimals_DEAPCoin;
[L2888]               __tmp__INITIAL_SUPPLY_DEAPCoin := INITIAL_SUPPLY_DEAPCoin;
[L2889]               __tmp__INITIAL_SALE_SUPPLY_DEAPCoin := INITIAL_SALE_SUPPLY_DEAPCoin;
[L2890]               __tmp__INITIAL_UNSALE_SUPPLY_DEAPCoin := INITIAL_UNSALE_SUPPLY_DEAPCoin;
[L2891]               __tmp__owner_wallet_DEAPCoin := owner_wallet_DEAPCoin;
[L2892]               __tmp__unsale_owner_wallet_DEAPCoin := unsale_owner_wallet_DEAPCoin;
[L2893]               __tmp__group_lockup_DEAPCoin := group_lockup_DEAPCoin;
[L2894]   CALL        call DEAPCoin_DEAPCoin__fail(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6610]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L6610]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6611]   COND FALSE  !(revert)
[L6614]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5940]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5940]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5941]   COND FALSE  !(revert)
[L5944]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5925]               assume msgsender_MSG != null;
[L5926]               __tmp__Balance[this] := 0;
[L5944]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5945]   COND FALSE  !(revert)
[L6614]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6615]   COND FALSE  !(revert)
[L6618]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5811]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5811]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5812]   COND FALSE  !(revert)
[L5815]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5790]               assume msgsender_MSG != null;
[L5791]               __tmp__Balance[this] := 0;
[L5792]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L5793]               __tmp__sum_balances2[this] := 0;
[L5794]               __tmp__totalSupply__BasicToken[this] := 0;
[L5815]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5816]   COND FALSE  !(revert)
[L6618]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6619]   COND FALSE  !(revert)
[L6622]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5984]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5984]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5985]   COND FALSE  !(revert)
[L5988]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5940]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5940]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5941]   COND FALSE  !(revert)
[L5944]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5925]               assume msgsender_MSG != null;
[L5926]               __tmp__Balance[this] := 0;
[L5944]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5945]   COND FALSE  !(revert)
[L5988]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5989]   COND FALSE  !(revert)
[L5992]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5811]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5811]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5812]   COND FALSE  !(revert)
[L5815]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5790]               assume msgsender_MSG != null;
[L5791]               __tmp__Balance[this] := 0;
[L5792]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L5793]               __tmp__sum_balances2[this] := 0;
[L5794]               __tmp__totalSupply__BasicToken[this] := 0;
[L5815]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5816]   COND FALSE  !(revert)
[L5992]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5993]   COND FALSE  !(revert)
[L5996]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5965]               assume msgsender_MSG != null;
[L5966]               __tmp__Balance[this] := 0;
[L5967]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L5968]               __tmp__sum_allowed3[this] := 0;
[L5996]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5997]   COND FALSE  !(revert)
[L6622]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6623]   COND FALSE  !(revert)
[L6626]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5253]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5234]               assume msgsender_MSG != null;
[L5235]               __tmp__Balance[this] := 0;
[L5236]               __tmp__owner_Ownable[this] := null;
[L5238]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5253]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5254]   COND FALSE  !(revert)
[L6626]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6627]   COND FALSE  !(revert)
[L6630]   CALL        call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6236]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L6236]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6237]   COND FALSE  !(revert)
[L6240]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5940]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5940]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5941]   COND FALSE  !(revert)
[L5944]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5925]               assume msgsender_MSG != null;
[L5926]               __tmp__Balance[this] := 0;
[L5944]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5945]   COND FALSE  !(revert)
[L6240]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6241]   COND FALSE  !(revert)
[L6244]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5811]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5811]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5812]   COND FALSE  !(revert)
[L5815]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5790]               assume msgsender_MSG != null;
[L5791]               __tmp__Balance[this] := 0;
[L5792]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L5793]               __tmp__sum_balances2[this] := 0;
[L5794]               __tmp__totalSupply__BasicToken[this] := 0;
[L5815]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5816]   COND FALSE  !(revert)
[L6244]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6245]   COND FALSE  !(revert)
[L6248]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5984]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5984]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5985]   COND FALSE  !(revert)
[L5988]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5940]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5940]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5941]   COND FALSE  !(revert)
[L5944]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5925]               assume msgsender_MSG != null;
[L5926]               __tmp__Balance[this] := 0;
[L5944]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5945]   COND FALSE  !(revert)
[L5988]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5989]   COND FALSE  !(revert)
[L5992]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5811]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5811]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5812]   COND FALSE  !(revert)
[L5815]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5790]               assume msgsender_MSG != null;
[L5791]               __tmp__Balance[this] := 0;
[L5792]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L5793]               __tmp__sum_balances2[this] := 0;
[L5794]               __tmp__totalSupply__BasicToken[this] := 0;
[L5815]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5816]   COND FALSE  !(revert)
[L5992]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5993]   COND FALSE  !(revert)
[L5996]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5965]               assume msgsender_MSG != null;
[L5966]               __tmp__Balance[this] := 0;
[L5967]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L5968]               __tmp__sum_allowed3[this] := 0;
[L5996]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5997]   COND FALSE  !(revert)
[L6248]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6249]   COND FALSE  !(revert)
[L6252]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5253]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5234]               assume msgsender_MSG != null;
[L5235]               __tmp__Balance[this] := 0;
[L5236]               __tmp__owner_Ownable[this] := null;
[L5238]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5253]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5254]   COND FALSE  !(revert)
[L6252]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6253]   COND FALSE  !(revert)
[L6256]   CALL        call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6219]               assume msgsender_MSG != null;
[L6220]               __tmp__Balance[this] := 0;
[L6221]               __tmp__mintingFinished_MintableToken[this] := false;
[L6256]   RET         call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6257]   COND FALSE  !(revert)
[L6630]   RET         call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6631]   COND FALSE  !(revert)
[L6634]   CALL        call ERC223Token_ERC223Token__fail(this, msgsender_MSG, msgvalue_MSG);
[L6409]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L6409]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6410]   COND FALSE  !(revert)
[L6413]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5940]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5940]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5941]   COND FALSE  !(revert)
[L5944]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5925]               assume msgsender_MSG != null;
[L5926]               __tmp__Balance[this] := 0;
[L5944]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5945]   COND FALSE  !(revert)
[L6413]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6414]   COND FALSE  !(revert)
[L6417]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5811]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5811]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5812]   COND FALSE  !(revert)
[L5815]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5790]               assume msgsender_MSG != null;
[L5791]               __tmp__Balance[this] := 0;
[L5792]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L5793]               __tmp__sum_balances2[this] := 0;
[L5794]               __tmp__totalSupply__BasicToken[this] := 0;
[L5815]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5816]   COND FALSE  !(revert)
[L6417]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6418]   COND FALSE  !(revert)
[L6421]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5984]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5984]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5985]   COND FALSE  !(revert)
[L5988]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5940]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5940]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5941]   COND FALSE  !(revert)
[L5944]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5925]               assume msgsender_MSG != null;
[L5926]               __tmp__Balance[this] := 0;
[L5944]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5945]   COND FALSE  !(revert)
[L5988]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5989]   COND FALSE  !(revert)
[L5992]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5811]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5811]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5812]   COND FALSE  !(revert)
[L5815]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5790]               assume msgsender_MSG != null;
[L5791]               __tmp__Balance[this] := 0;
[L5792]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L5793]               __tmp__sum_balances2[this] := 0;
[L5794]               __tmp__totalSupply__BasicToken[this] := 0;
[L5815]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5816]   COND FALSE  !(revert)
[L5992]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5993]   COND FALSE  !(revert)
[L5996]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5965]               assume msgsender_MSG != null;
[L5966]               __tmp__Balance[this] := 0;
[L5967]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L5968]               __tmp__sum_allowed3[this] := 0;
[L5996]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5997]   COND FALSE  !(revert)
[L6421]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L6425]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5253]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5234]               assume msgsender_MSG != null;
[L5235]               __tmp__Balance[this] := 0;
[L5236]               __tmp__owner_Ownable[this] := null;
[L5238]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5253]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5254]   COND FALSE  !(revert)
[L6425]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6426]   COND FALSE  !(revert)
[L6429]   CALL        call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6236]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L6236]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6237]   COND FALSE  !(revert)
[L6240]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5940]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5940]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5941]   COND FALSE  !(revert)
[L5944]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5925]               assume msgsender_MSG != null;
[L5926]               __tmp__Balance[this] := 0;
[L5944]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5945]   COND FALSE  !(revert)
[L6240]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6241]   COND FALSE  !(revert)
[L6244]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5811]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5811]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5812]   COND FALSE  !(revert)
[L5815]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5790]               assume msgsender_MSG != null;
[L5791]               __tmp__Balance[this] := 0;
[L5792]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L5793]               __tmp__sum_balances2[this] := 0;
[L5794]               __tmp__totalSupply__BasicToken[this] := 0;
[L5815]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5816]   COND FALSE  !(revert)
[L6244]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6245]   COND FALSE  !(revert)
[L6248]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5984]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5984]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5985]   COND FALSE  !(revert)
[L5988]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5940]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5940]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5941]   COND FALSE  !(revert)
[L5944]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5925]               assume msgsender_MSG != null;
[L5926]               __tmp__Balance[this] := 0;
[L5944]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5945]   COND FALSE  !(revert)
[L5988]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5989]   COND FALSE  !(revert)
[L5992]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5811]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5811]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5812]   COND FALSE  !(revert)
[L5815]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5790]               assume msgsender_MSG != null;
[L5791]               __tmp__Balance[this] := 0;
[L5792]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L5793]               __tmp__sum_balances2[this] := 0;
[L5794]               __tmp__totalSupply__BasicToken[this] := 0;
[L5815]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5816]   COND FALSE  !(revert)
[L5992]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5993]   COND FALSE  !(revert)
[L5996]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5965]               assume msgsender_MSG != null;
[L5966]               __tmp__Balance[this] := 0;
[L5967]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L5968]               __tmp__sum_allowed3[this] := 0;
[L5996]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5997]   COND FALSE  !(revert)
[L6248]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6249]   COND FALSE  !(revert)
[L6252]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5253]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5234]               assume msgsender_MSG != null;
[L5235]               __tmp__Balance[this] := 0;
[L5236]               __tmp__owner_Ownable[this] := null;
[L5238]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5253]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5254]   COND FALSE  !(revert)
[L6252]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6253]   COND FALSE  !(revert)
[L6256]   CALL        call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6219]               assume msgsender_MSG != null;
[L6220]               __tmp__Balance[this] := 0;
[L6221]               __tmp__mintingFinished_MintableToken[this] := false;
[L6256]   RET         call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6257]   COND FALSE  !(revert)
[L6429]   RET         call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6433]   CALL        call ERC223Token_ERC223Token_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6394]               assume msgsender_MSG != null;
[L6395]               __tmp__Balance[this] := 0;
[L6433]   RET         call ERC223Token_ERC223Token_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6434]   COND FALSE  !(revert)
[L6634]   RET         call ERC223Token_ERC223Token__fail(this, msgsender_MSG, msgvalue_MSG);
[L6635]   COND FALSE  !(revert)
[L6638]   CALL        call DEAPCoin_DEAPCoin_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6511]               assume msgsender_MSG != null;
[L6512]               __tmp__Balance[this] := 0;
[L6513]               __tmp__name_DEAPCoin[this] := -635866188;
[L6514]               __tmp__symbol_DEAPCoin[this] := -1031151507;
[L6515]               __tmp__decimals_DEAPCoin[this] := 18;
[L6516]               __var_19 := __tmp__decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6517]               __tmp__INITIAL_SUPPLY_DEAPCoin[this] := 30000000000 * (nonlinearPow(10, __tmp__decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6518]               __var_20 := __tmp__decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6519]               __tmp__INITIAL_SALE_SUPPLY_DEAPCoin[this] := 12000000000 * (nonlinearPow(10, __tmp__decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6520]               __tmp__INITIAL_UNSALE_SUPPLY_DEAPCoin[this] := (__tmp__INITIAL_SUPPLY_DEAPCoin[this] - __tmp__INITIAL_SALE_SUPPLY_DEAPCoin[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6521]               __tmp__owner_wallet_DEAPCoin[this] := null;
[L6522]               __tmp__unsale_owner_wallet_DEAPCoin[this] := null;
[L6524]               __tmp__group_lockup_DEAPCoin[this] := _group_lockup_s1076;
[L6525]               __tmp__owner_wallet_DEAPCoin[this] := _sale_owner_wallet_s1076;
[L6526]               __tmp__unsale_owner_wallet_DEAPCoin[this] := _unsale_owner_wallet_s1076;
[L6527]   COND TRUE   __tmp__DType[this] == DEAPCoin
[L6528]   CALL        call __var_16 := mint~address~uint256_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__owner_wallet_DEAPCoin[this], __tmp__INITIAL_SALE_SUPPLY_DEAPCoin[this]);
[L6294]   CALL        call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9389]   COND FALSE  !(!(msgsender_MSG == __tmp__owner_Ownable[this]))
[L6294]   RET         call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6295]   COND FALSE  !(revert)
[L6298]   CALL        call canMint_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9405]   COND FALSE  !(!!__tmp__mintingFinished_MintableToken[this])
[L6298]   RET         call canMint_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6299]   COND FALSE  !(revert)
[L6302]   CALL        call __var_14 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__totalSupply__BasicToken[this], _amount_s932);
[L5392]               c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5393]               c_s146 := c_s146;
[L6302]   RET         call __var_14 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__totalSupply__BasicToken[this], _amount_s932);
[L6303]   COND FALSE  !(revert)
[L6306]               __tmp__totalSupply__BasicToken[this] := __var_14;
[L6307]   CALL        call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][_to_s932], _amount_s932);
[L5392]               c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5393]               c_s146 := c_s146;
[L6307]   RET         call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][_to_s932], _amount_s932);
[L6308]   COND FALSE  !(revert)
[L6311]               __tmp__sum_balances2[this] := __tmp__sum_balances2[this] - __tmp__balances_BasicToken[this][_to_s932];
[L6312]               __tmp__balances_BasicToken[this][_to_s932] := __var_15;
[L6313]               __tmp__sum_balances2[this] := __tmp__sum_balances2[this] + __tmp__balances_BasicToken[this][_to_s932];
[L6314]               __ret_0_ := true;
[L6528]   RET         call __var_16 := mint~address~uint256_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__owner_wallet_DEAPCoin[this], __tmp__INITIAL_SALE_SUPPLY_DEAPCoin[this]);
[L6529]   COND FALSE  !(revert)
[L6535]   COND TRUE   __tmp__DType[this] == DEAPCoin
[L6536]   CALL        call __var_17 := mint~address~uint256_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__unsale_owner_wallet_DEAPCoin[this], __tmp__INITIAL_UNSALE_SUPPLY_DEAPCoin[this]);
[L6294]   CALL        call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9389]   COND FALSE  !(!(msgsender_MSG == __tmp__owner_Ownable[this]))
[L6294]   RET         call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6295]   COND FALSE  !(revert)
[L6298]   CALL        call canMint_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9405]   COND FALSE  !(!!__tmp__mintingFinished_MintableToken[this])
[L6298]   RET         call canMint_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6299]   COND FALSE  !(revert)
[L6302]   CALL        call __var_14 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__totalSupply__BasicToken[this], _amount_s932);
[L5392]               c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5393]               c_s146 := c_s146;
[L6302]   RET         call __var_14 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__totalSupply__BasicToken[this], _amount_s932);
[L6303]   COND FALSE  !(revert)
[L6306]               __tmp__totalSupply__BasicToken[this] := __var_14;
[L6307]   CALL        call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][_to_s932], _amount_s932);
[L5392]               c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5393]               c_s146 := c_s146;
[L6307]   RET         call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][_to_s932], _amount_s932);
[L6308]   COND FALSE  !(revert)
[L6311]               __tmp__sum_balances2[this] := __tmp__sum_balances2[this] - __tmp__balances_BasicToken[this][_to_s932];
[L6312]               __tmp__balances_BasicToken[this][_to_s932] := __var_15;
[L6313]               __tmp__sum_balances2[this] := __tmp__sum_balances2[this] + __tmp__balances_BasicToken[this][_to_s932];
[L6314]               __ret_0_ := true;
[L6536]   RET         call __var_17 := mint~address~uint256_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__unsale_owner_wallet_DEAPCoin[this], __tmp__INITIAL_UNSALE_SUPPLY_DEAPCoin[this]);
[L6537]   COND FALSE  !(revert)
[L6543]   COND TRUE   __tmp__DType[this] == DEAPCoin
[L6544]   CALL        call __var_18 := finishMinting_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6350]   CALL        call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9389]   COND FALSE  !(!(msgsender_MSG == __tmp__owner_Ownable[this]))
[L6350]   RET         call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6351]   COND FALSE  !(revert)
[L6354]   CALL        call canMint_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9405]   COND FALSE  !(!!__tmp__mintingFinished_MintableToken[this])
[L6354]   RET         call canMint_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6355]   COND FALSE  !(revert)
[L6358]               __tmp__mintingFinished_MintableToken[this] := true;
[L6359]               __ret_0_ := true;
[L6544]   RET         call __var_18 := finishMinting_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6638]   RET         call DEAPCoin_DEAPCoin_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6639]   COND FALSE  !(revert)
[L2894]   RET         call DEAPCoin_DEAPCoin__fail(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L2895]               assume revert || gas < 0;
[L10891]  RET         call DEAPCoin_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L10892]              assume !revert && gas >= 0;
[L10895]  CALL        call CorralChoice_DEAPCoin(this);
[L10640]              havoc msgsender_MSG;
[L10641]              havoc msgvalue_MSG;
[L10642]              havoc choice;
[L10643]              havoc __ret_0_owner;
[L10644]              havoc newOwner_s54;
[L10645]              havoc __ret_0_totalSupply;
[L10646]              havoc _owner_s578;
[L10647]              havoc __ret_0_balanceOf;
[L10648]              havoc _to_s1284;
[L10649]              havoc _value_s1284;
[L10650]              havoc __ret_0_transfer;
[L10651]              havoc _owner_s759;
[L10652]              havoc _spender_s759;
[L10653]              havoc __ret_0_allowance;
[L10654]              havoc _from_s715;
[L10655]              havoc _to_s715;
[L10656]              havoc _value_s715;
[L10657]              havoc __ret_0_transferFrom;
[L10658]              havoc _spender_s743;
[L10659]              havoc _value_s743;
[L10660]              havoc __ret_0_approve;
[L10661]              havoc _spender_s800;
[L10662]              havoc _addedValue_s800;
[L10663]              havoc __ret_0_increaseApproval;
[L10664]              havoc _spender_s860;
[L10665]              havoc _subtractedValue_s860;
[L10666]              havoc __ret_0_decreaseApproval;
[L10667]              havoc __ret_0_mintingFinished;
[L10668]              havoc _to_s932;
[L10669]              havoc _amount_s932;
[L10670]              havoc __ret_0_mint;
[L10671]              havoc __ret_0_finishMinting;
[L10672]              havoc _to_s1413;
[L10673]              havoc _value_s1413;
[L10674]              havoc _data_s1413;
[L10675]              havoc __ret_0_transfer_ERC223;
[L10676]              havoc __ret_0_name;
[L10677]              havoc __ret_0_symbol;
[L10678]              havoc __ret_0_decimals;
[L10679]              havoc __ret_0_INITIAL_SUPPLY;
[L10680]              havoc __ret_0_INITIAL_SALE_SUPPLY;
[L10681]              havoc __ret_0_INITIAL_UNSALE_SUPPLY;
[L10682]              havoc __ret_0_owner_wallet;
[L10683]              havoc __ret_0_unsale_owner_wallet;
[L10684]              havoc __ret_0_group_lockup;
[L10685]              havoc _sale_owner_wallet_s1076;
[L10686]              havoc _unsale_owner_wallet_s1076;
[L10687]              havoc _group_lockup_s1076;
[L10688]              havoc _to_s1162;
[L10689]              havoc _value_s1162;
[L10690]              havoc __ret_0_sendTokens;
[L10691]              havoc _from_s1567;
[L10692]              havoc _users_s1567;
[L10693]              havoc _values_s1567;
[L10694]              havoc __ret_0_batchTransfer;
[L10695]              havoc tmpNow;
[L10696]              havoc gas;
[L10697]              assume gas > 4000000 && gas <= 8000000;
[L10698]              tmpNow := now;
[L10699]              havoc now;
[L10700]              assume now > tmpNow;
[L10701]              assume msgsender_MSG != null;
[L10702]              assume DType[msgsender_MSG] != Ownable;
[L10703]              assume DType[msgsender_MSG] != SafeMath;
[L10704]              assume DType[msgsender_MSG] != GroupLockup;
[L10705]              assume DType[msgsender_MSG] != ERC20Basic;
[L10706]              assume DType[msgsender_MSG] != BasicToken;
[L10707]              assume DType[msgsender_MSG] != ERC20;
[L10708]              assume DType[msgsender_MSG] != StandardToken;
[L10709]              assume DType[msgsender_MSG] != MintableToken;
[L10710]              assume DType[msgsender_MSG] != ERC223Token;
[L10711]              assume DType[msgsender_MSG] != ERC223ContractInterface;
[L10712]              assume DType[msgsender_MSG] != DEAPCoin;
[L10713]              Alloc[msgsender_MSG] := true;
[L10714]  COND FALSE  !(choice == 25)
[L10720]  COND FALSE  !(choice == 24)
[L10726]  COND FALSE  !(choice == 23)
[L10732]  COND FALSE  !(choice == 22)
[L10738]  COND TRUE   choice == 21
[L10739]              gas := gas - 21000;
[L10740]  COND TRUE   gas >= 0
[L10741]              assume _value_s1284 >= 0 && _value_s1284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10742]              assume msgvalue_MSG == 0;
[L10743]  CALL        call __ret_0_transfer := transfer~address~uint256_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1284 && _value_s1284 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1284 >= 0) && _value_s1284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1284] >= 0) && balances_BasicToken[this][_to_s1284] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_DEAPCoin0 := true;
[L2]                  call_transfer_DEAPCoin0 := false;
[L2]                  revert := revert_hold;
[L3029]               havoc __exception;
[L3030]               revert := false;
[L3031]   COND TRUE   __exception
[L3032]               __tmp__Balance := Balance;
[L3033]               __tmp__DType := DType;
[L3034]               __tmp__Alloc := Alloc;
[L3035]               __tmp__balance_ADDR := balance_ADDR;
[L3036]               __tmp__M_Ref_int := M_Ref_int;
[L3037]               __tmp__sum_lockup_list0 := sum_lockup_list0;
[L3038]               __tmp__M_int_bool := M_int_bool;
[L3039]               __tmp__sum_lockup_list_flag1 := sum_lockup_list_flag1;
[L3040]               __tmp__sum_balances2 := sum_balances2;
[L3041]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L3042]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3043]               __tmp__sum_allowed3 := sum_allowed3;
[L3044]               __tmp__M_int_Ref := M_int_Ref;
[L3045]               __tmp__sum := sum;
[L3046]               __tmp__M_int_int := M_int_int;
[L3047]               __tmp__Length := Length;
[L3048]               __tmp__now := now;
[L3049]               __tmp__owner_Ownable := owner_Ownable;
[L3050]               __tmp__lockup_list_GroupLockup := lockup_list_GroupLockup;
[L3051]               __tmp__lockup_list_flag_GroupLockup := lockup_list_flag_GroupLockup;
[L3052]               __tmp__user_list_GroupLockup := user_list_GroupLockup;
[L3053]               __tmp__balances_BasicToken := balances_BasicToken;
[L3054]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L3055]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L3056]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L3057]               __tmp__name_DEAPCoin := name_DEAPCoin;
[L3058]               __tmp__symbol_DEAPCoin := symbol_DEAPCoin;
[L3059]               __tmp__decimals_DEAPCoin := decimals_DEAPCoin;
[L3060]               __tmp__INITIAL_SUPPLY_DEAPCoin := INITIAL_SUPPLY_DEAPCoin;
[L3061]               __tmp__INITIAL_SALE_SUPPLY_DEAPCoin := INITIAL_SALE_SUPPLY_DEAPCoin;
[L3062]               __tmp__INITIAL_UNSALE_SUPPLY_DEAPCoin := INITIAL_UNSALE_SUPPLY_DEAPCoin;
[L3063]               __tmp__owner_wallet_DEAPCoin := owner_wallet_DEAPCoin;
[L3064]               __tmp__unsale_owner_wallet_DEAPCoin := unsale_owner_wallet_DEAPCoin;
[L3065]               __tmp__group_lockup_DEAPCoin := group_lockup_DEAPCoin;
[L3066]   CALL        call __ret_0_ := transfer~address~uint256_DEAPCoin__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L6799]               __var_25 := null;
[L6800]   COND FALSE  !(!(_to_s1284 != null))
[L6804]   COND TRUE   !(_value_s1284 <= __tmp__balances_BasicToken[this][msgsender_MSG])
[L6805]               revert := true;
[L3066]   RET         call __ret_0_ := transfer~address~uint256_DEAPCoin__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L3067]               assume revert || gas < 0;
[L10743]  RET         call __ret_0_transfer := transfer~address~uint256_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L10895]  RET         call CorralChoice_DEAPCoin(this);

Loop:
[L10895]  CALL        call CorralChoice_DEAPCoin(this);
[L10640]              havoc msgsender_MSG;
[L10641]              havoc msgvalue_MSG;
[L10642]              havoc choice;
[L10643]              havoc __ret_0_owner;
[L10644]              havoc newOwner_s54;
[L10645]              havoc __ret_0_totalSupply;
[L10646]              havoc _owner_s578;
[L10647]              havoc __ret_0_balanceOf;
[L10648]              havoc _to_s1284;
[L10649]              havoc _value_s1284;
[L10650]              havoc __ret_0_transfer;
[L10651]              havoc _owner_s759;
[L10652]              havoc _spender_s759;
[L10653]              havoc __ret_0_allowance;
[L10654]              havoc _from_s715;
[L10655]              havoc _to_s715;
[L10656]              havoc _value_s715;
[L10657]              havoc __ret_0_transferFrom;
[L10658]              havoc _spender_s743;
[L10659]              havoc _value_s743;
[L10660]              havoc __ret_0_approve;
[L10661]              havoc _spender_s800;
[L10662]              havoc _addedValue_s800;
[L10663]              havoc __ret_0_increaseApproval;
[L10664]              havoc _spender_s860;
[L10665]              havoc _subtractedValue_s860;
[L10666]              havoc __ret_0_decreaseApproval;
[L10667]              havoc __ret_0_mintingFinished;
[L10668]              havoc _to_s932;
[L10669]              havoc _amount_s932;
[L10670]              havoc __ret_0_mint;
[L10671]              havoc __ret_0_finishMinting;
[L10672]              havoc _to_s1413;
[L10673]              havoc _value_s1413;
[L10674]              havoc _data_s1413;
[L10675]              havoc __ret_0_transfer_ERC223;
[L10676]              havoc __ret_0_name;
[L10677]              havoc __ret_0_symbol;
[L10678]              havoc __ret_0_decimals;
[L10679]              havoc __ret_0_INITIAL_SUPPLY;
[L10680]              havoc __ret_0_INITIAL_SALE_SUPPLY;
[L10681]              havoc __ret_0_INITIAL_UNSALE_SUPPLY;
[L10682]              havoc __ret_0_owner_wallet;
[L10683]              havoc __ret_0_unsale_owner_wallet;
[L10684]              havoc __ret_0_group_lockup;
[L10685]              havoc _sale_owner_wallet_s1076;
[L10686]              havoc _unsale_owner_wallet_s1076;
[L10687]              havoc _group_lockup_s1076;
[L10688]              havoc _to_s1162;
[L10689]              havoc _value_s1162;
[L10690]              havoc __ret_0_sendTokens;
[L10691]              havoc _from_s1567;
[L10692]              havoc _users_s1567;
[L10693]              havoc _values_s1567;
[L10694]              havoc __ret_0_batchTransfer;
[L10695]              havoc tmpNow;
[L10696]              havoc gas;
[L10697]              assume gas > 4000000 && gas <= 8000000;
[L10698]              tmpNow := now;
[L10699]              havoc now;
[L10700]              assume now > tmpNow;
[L10701]              assume msgsender_MSG != null;
[L10702]              assume DType[msgsender_MSG] != Ownable;
[L10703]              assume DType[msgsender_MSG] != SafeMath;
[L10704]              assume DType[msgsender_MSG] != GroupLockup;
[L10705]              assume DType[msgsender_MSG] != ERC20Basic;
[L10706]              assume DType[msgsender_MSG] != BasicToken;
[L10707]              assume DType[msgsender_MSG] != ERC20;
[L10708]              assume DType[msgsender_MSG] != StandardToken;
[L10709]              assume DType[msgsender_MSG] != MintableToken;
[L10710]              assume DType[msgsender_MSG] != ERC223Token;
[L10711]              assume DType[msgsender_MSG] != ERC223ContractInterface;
[L10712]              assume DType[msgsender_MSG] != DEAPCoin;
[L10713]              Alloc[msgsender_MSG] := true;
[L10714]  COND FALSE  !(choice == 25)
[L10720]  COND FALSE  !(choice == 24)
[L10726]  COND FALSE  !(choice == 23)
[L10732]  COND FALSE  !(choice == 22)
[L10738]  COND TRUE   choice == 21
[L10739]              gas := gas - 21000;
[L10740]  COND TRUE   gas >= 0
[L10741]              assume _value_s1284 >= 0 && _value_s1284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10742]              assume msgvalue_MSG == 0;
[L10743]  CALL        call __ret_0_transfer := transfer~address~uint256_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1284 && _value_s1284 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1284 >= 0) && _value_s1284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1284] >= 0) && balances_BasicToken[this][_to_s1284] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_DEAPCoin0 := true;
[L2]                  call_transfer_DEAPCoin0 := false;
[L2]                  revert := revert_hold;
[L3029]               havoc __exception;
[L3030]               revert := false;
[L3031]   COND TRUE   __exception
[L3032]               __tmp__Balance := Balance;
[L3033]               __tmp__DType := DType;
[L3034]               __tmp__Alloc := Alloc;
[L3035]               __tmp__balance_ADDR := balance_ADDR;
[L3036]               __tmp__M_Ref_int := M_Ref_int;
[L3037]               __tmp__sum_lockup_list0 := sum_lockup_list0;
[L3038]               __tmp__M_int_bool := M_int_bool;
[L3039]               __tmp__sum_lockup_list_flag1 := sum_lockup_list_flag1;
[L3040]               __tmp__sum_balances2 := sum_balances2;
[L3041]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L3042]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3043]               __tmp__sum_allowed3 := sum_allowed3;
[L3044]               __tmp__M_int_Ref := M_int_Ref;
[L3045]               __tmp__sum := sum;
[L3046]               __tmp__M_int_int := M_int_int;
[L3047]               __tmp__Length := Length;
[L3048]               __tmp__now := now;
[L3049]               __tmp__owner_Ownable := owner_Ownable;
[L3050]               __tmp__lockup_list_GroupLockup := lockup_list_GroupLockup;
[L3051]               __tmp__lockup_list_flag_GroupLockup := lockup_list_flag_GroupLockup;
[L3052]               __tmp__user_list_GroupLockup := user_list_GroupLockup;
[L3053]               __tmp__balances_BasicToken := balances_BasicToken;
[L3054]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L3055]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L3056]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L3057]               __tmp__name_DEAPCoin := name_DEAPCoin;
[L3058]               __tmp__symbol_DEAPCoin := symbol_DEAPCoin;
[L3059]               __tmp__decimals_DEAPCoin := decimals_DEAPCoin;
[L3060]               __tmp__INITIAL_SUPPLY_DEAPCoin := INITIAL_SUPPLY_DEAPCoin;
[L3061]               __tmp__INITIAL_SALE_SUPPLY_DEAPCoin := INITIAL_SALE_SUPPLY_DEAPCoin;
[L3062]               __tmp__INITIAL_UNSALE_SUPPLY_DEAPCoin := INITIAL_UNSALE_SUPPLY_DEAPCoin;
[L3063]               __tmp__owner_wallet_DEAPCoin := owner_wallet_DEAPCoin;
[L3064]               __tmp__unsale_owner_wallet_DEAPCoin := unsale_owner_wallet_DEAPCoin;
[L3065]               __tmp__group_lockup_DEAPCoin := group_lockup_DEAPCoin;
[L3066]   CALL        call __ret_0_ := transfer~address~uint256_DEAPCoin__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L6799]               __var_25 := null;
[L6800]   COND FALSE  !(!(_to_s1284 != null))
[L6804]   COND TRUE   !(_value_s1284 <= __tmp__balances_BasicToken[this][msgsender_MSG])
[L6805]               revert := true;
[L3066]   RET         call __ret_0_ := transfer~address~uint256_DEAPCoin__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L3067]               assume revert || gas < 0;
[L10743]  RET         call __ret_0_transfer := transfer~address~uint256_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L10895]  RET         call CorralChoice_DEAPCoin(this);

[2020-11-25 13:24:33,486 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:24:33,486 INFO  L82        PathProgramCache]: Analyzing trace with hash -619098311, now seen corresponding path program 1 times
[2020-11-25 13:24:33,487 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:24:33,513 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:24:33,804 INFO  L134       CoverageAnalysis]: Checked inductivity of 3940 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 3940 trivial. 0 not checked.
[2020-11-25 13:24:33,804 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:24:33,805 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 13:24:33,805 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:24:33,805 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 13:24:33,805 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 13:24:33,805 INFO  L87              Difference]: Start difference. First operand 5099 states and 5538 transitions. cyclomatic complexity: 445 Second operand 4 states.
[2020-11-25 13:24:34,024 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:24:34,024 INFO  L93              Difference]: Finished difference Result 6283 states and 6983 transitions.
[2020-11-25 13:24:34,024 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 13:24:34,024 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6283 states and 6983 transitions.
[2020-11-25 13:24:34,039 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 13:24:34,061 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6283 states to 6025 states and 6706 transitions.
[2020-11-25 13:24:34,061 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1489
[2020-11-25 13:24:34,062 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1489
[2020-11-25 13:24:34,062 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6025 states and 6706 transitions.
[2020-11-25 13:24:34,066 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:24:34,066 INFO  L728         BuchiCegarLoop]: Abstraction has 6025 states and 6706 transitions.
[2020-11-25 13:24:34,071 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6025 states and 6706 transitions.
[2020-11-25 13:24:34,114 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6025 to 5353.
[2020-11-25 13:24:34,115 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5353 states.
[2020-11-25 13:24:34,119 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5353 states to 5353 states and 5884 transitions.
[2020-11-25 13:24:34,120 INFO  L751         BuchiCegarLoop]: Abstraction has 5353 states and 5884 transitions.
[2020-11-25 13:24:34,120 INFO  L631         BuchiCegarLoop]: Abstraction has 5353 states and 5884 transitions.
[2020-11-25 13:24:34,120 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 13:24:34,120 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5353 states and 5884 transitions.
[2020-11-25 13:24:34,125 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 13:24:34,125 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:24:34,125 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:24:34,127 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [24, 24, 24, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:24:34,128 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_DEAPCoin0 := false;
[L2]                  call_transfer_DEAPCoin0 := false;
[L2]      CALL        call main();
[L10885]              assume null == 0;
[L10886]  CALL        call this := FreshRefGenerator__success();
[L5225]               havoc newRef;
[L5226]               assume Alloc[newRef] == false;
[L5227]               Alloc[newRef] := true;
[L5228]               assume newRef != null;
[L10886]  RET         call this := FreshRefGenerator__success();
[L10887]              assume now >= 0;
[L10888]              assume DType[this] == DEAPCoin;
[L10889]              assume msgvalue_MSG == 0;
[L10890]              gas := gas - 53000;
[L10891]  CALL        call DEAPCoin_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L2857]               havoc __exception;
[L2858]               revert := false;
[L2859]   COND FALSE  !(__exception)
[L2897]   CALL        call DEAPCoin_DEAPCoin__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6651]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6651]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6652]   COND FALSE  !(revert)
[L6655]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6655]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6656]   COND FALSE  !(revert)
[L6659]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6659]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6660]   COND FALSE  !(revert)
[L6663]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6004]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6004]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   COND FALSE  !(revert)
[L6008]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6008]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6009]   COND FALSE  !(revert)
[L6012]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6012]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]   COND FALSE  !(revert)
[L6016]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5975]               assume msgsender_MSG != null;
[L5976]               Balance[this] := 0;
[L5977]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5978]               sum_allowed3[this] := 0;
[L6016]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6017]   COND FALSE  !(revert)
[L6663]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6664]   COND FALSE  !(revert)
[L6667]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5261]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]               assume msgsender_MSG != null;
[L5245]               Balance[this] := 0;
[L5246]               owner_Ownable[this] := null;
[L5248]               owner_Ownable[this] := msgsender_MSG;
[L5261]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   COND FALSE  !(revert)
[L6667]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6668]   COND FALSE  !(revert)
[L6671]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6264]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6264]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6265]   COND FALSE  !(revert)
[L6268]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6268]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6269]   COND FALSE  !(revert)
[L6272]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6272]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6273]   COND FALSE  !(revert)
[L6276]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6004]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6004]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   COND FALSE  !(revert)
[L6008]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6008]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6009]   COND FALSE  !(revert)
[L6012]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6012]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]   COND FALSE  !(revert)
[L6016]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5975]               assume msgsender_MSG != null;
[L5976]               Balance[this] := 0;
[L5977]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5978]               sum_allowed3[this] := 0;
[L6016]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6017]   COND FALSE  !(revert)
[L6276]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6277]   COND FALSE  !(revert)
[L6280]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5261]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]               assume msgsender_MSG != null;
[L5245]               Balance[this] := 0;
[L5246]               owner_Ownable[this] := null;
[L5248]               owner_Ownable[this] := msgsender_MSG;
[L5261]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   COND FALSE  !(revert)
[L6280]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6281]   COND FALSE  !(revert)
[L6284]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6228]               assume msgsender_MSG != null;
[L6229]               Balance[this] := 0;
[L6230]               mintingFinished_MintableToken[this] := false;
[L6284]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6285]   COND FALSE  !(revert)
[L6671]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6672]   COND FALSE  !(revert)
[L6675]   CALL        call ERC223Token_ERC223Token__success(this, msgsender_MSG, msgvalue_MSG);
[L6441]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6441]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6445]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6449]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6449]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   COND FALSE  !(revert)
[L6453]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6004]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6004]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   COND FALSE  !(revert)
[L6008]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6008]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6009]   COND FALSE  !(revert)
[L6012]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6012]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]   COND FALSE  !(revert)
[L6016]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5975]               assume msgsender_MSG != null;
[L5976]               Balance[this] := 0;
[L5977]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5978]               sum_allowed3[this] := 0;
[L6016]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6017]   COND FALSE  !(revert)
[L6453]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6454]   COND FALSE  !(revert)
[L6457]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5261]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]               assume msgsender_MSG != null;
[L5245]               Balance[this] := 0;
[L5246]               owner_Ownable[this] := null;
[L5248]               owner_Ownable[this] := msgsender_MSG;
[L5261]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   COND FALSE  !(revert)
[L6457]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6458]   COND FALSE  !(revert)
[L6461]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6264]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6264]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6265]   COND FALSE  !(revert)
[L6268]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6268]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6269]   COND FALSE  !(revert)
[L6272]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6272]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6273]   COND FALSE  !(revert)
[L6276]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6004]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6004]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   COND FALSE  !(revert)
[L6008]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6008]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6009]   COND FALSE  !(revert)
[L6012]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6012]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]   COND FALSE  !(revert)
[L6016]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5975]               assume msgsender_MSG != null;
[L5976]               Balance[this] := 0;
[L5977]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5978]               sum_allowed3[this] := 0;
[L6016]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6017]   COND FALSE  !(revert)
[L6276]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6277]   COND FALSE  !(revert)
[L6280]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5261]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]               assume msgsender_MSG != null;
[L5245]               Balance[this] := 0;
[L5246]               owner_Ownable[this] := null;
[L5248]               owner_Ownable[this] := msgsender_MSG;
[L5261]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   COND FALSE  !(revert)
[L6280]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6281]   COND FALSE  !(revert)
[L6284]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6228]               assume msgsender_MSG != null;
[L6229]               Balance[this] := 0;
[L6230]               mintingFinished_MintableToken[this] := false;
[L6284]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6285]   COND FALSE  !(revert)
[L6461]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6462]   COND FALSE  !(revert)
[L6465]   CALL        call ERC223Token_ERC223Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6402]               assume msgsender_MSG != null;
[L6403]               Balance[this] := 0;
[L6465]   RET         call ERC223Token_ERC223Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]   COND FALSE  !(revert)
[L6675]   RET         call ERC223Token_ERC223Token__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]   COND FALSE  !(revert)
[L6679]   CALL        call DEAPCoin_DEAPCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6561]               assume msgsender_MSG != null;
[L6562]               Balance[this] := 0;
[L6563]               name_DEAPCoin[this] := -635866188;
[L6564]               symbol_DEAPCoin[this] := -1031151507;
[L6565]               decimals_DEAPCoin[this] := 18;
[L6566]               __var_19 := decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6567]               INITIAL_SUPPLY_DEAPCoin[this] := 30000000000 * (nonlinearPow(10, decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6568]               __var_20 := decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6569]               INITIAL_SALE_SUPPLY_DEAPCoin[this] := 12000000000 * (nonlinearPow(10, decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6570]               INITIAL_UNSALE_SUPPLY_DEAPCoin[this] := (INITIAL_SUPPLY_DEAPCoin[this] - INITIAL_SALE_SUPPLY_DEAPCoin[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6571]               owner_wallet_DEAPCoin[this] := null;
[L6572]               unsale_owner_wallet_DEAPCoin[this] := null;
[L6574]               group_lockup_DEAPCoin[this] := _group_lockup_s1076;
[L6575]               owner_wallet_DEAPCoin[this] := _sale_owner_wallet_s1076;
[L6576]               unsale_owner_wallet_DEAPCoin[this] := _unsale_owner_wallet_s1076;
[L6577]   COND TRUE   DType[this] == DEAPCoin
[L6578]   CALL        call __var_16 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, owner_wallet_DEAPCoin[this], INITIAL_SALE_SUPPLY_DEAPCoin[this]);
[L6322]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9397]   COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L6322]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6323]   COND FALSE  !(revert)
[L6326]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9413]   COND FALSE  !(!!mintingFinished_MintableToken[this])
[L6326]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6327]   COND FALSE  !(revert)
[L6330]   CALL        call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s932);
[L5399]               c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5400]               assert c_s146 >= a_s146;
[L5401]               c_s146 := c_s146;
[L6330]   RET         call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s932);
[L6331]   COND FALSE  !(revert)
[L6334]               totalSupply__BasicToken[this] := __var_14;
[L6335]   CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s932], _amount_s932);
[L5399]               c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5400]               assert c_s146 >= a_s146;
[L5401]               c_s146 := c_s146;
[L6335]   RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s932], _amount_s932);
[L6336]   COND FALSE  !(revert)
[L6339]               sum_balances2[this] := sum_balances2[this] - balances_BasicToken[this][_to_s932];
[L6340]               balances_BasicToken[this][_to_s932] := __var_15;
[L6341]               sum_balances2[this] := sum_balances2[this] + balances_BasicToken[this][_to_s932];
[L6342]               assert { :EventEmitted "Mint_MintableToken" } true;
[L6343]               assert { :EventEmitted "Transfer_MintableToken" } true;
[L6344]               __ret_0_ := true;
[L6578]   RET         call __var_16 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, owner_wallet_DEAPCoin[this], INITIAL_SALE_SUPPLY_DEAPCoin[this]);
[L6579]   COND FALSE  !(revert)
[L6585]   COND TRUE   DType[this] == DEAPCoin
[L6586]   CALL        call __var_17 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, unsale_owner_wallet_DEAPCoin[this], INITIAL_UNSALE_SUPPLY_DEAPCoin[this]);
[L6322]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9397]   COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L6322]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6323]   COND FALSE  !(revert)
[L6326]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9413]   COND FALSE  !(!!mintingFinished_MintableToken[this])
[L6326]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6327]   COND FALSE  !(revert)
[L6330]   CALL        call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s932);
[L5399]               c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5400]               assert c_s146 >= a_s146;
[L5401]               c_s146 := c_s146;
[L6330]   RET         call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s932);
[L6331]   COND FALSE  !(revert)
[L6334]               totalSupply__BasicToken[this] := __var_14;
[L6335]   CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s932], _amount_s932);
[L5399]               c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5400]               assert c_s146 >= a_s146;
[L5401]               c_s146 := c_s146;
[L6335]   RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s932], _amount_s932);
[L6336]   COND FALSE  !(revert)
[L6339]               sum_balances2[this] := sum_balances2[this] - balances_BasicToken[this][_to_s932];
[L6340]               balances_BasicToken[this][_to_s932] := __var_15;
[L6341]               sum_balances2[this] := sum_balances2[this] + balances_BasicToken[this][_to_s932];
[L6342]               assert { :EventEmitted "Mint_MintableToken" } true;
[L6343]               assert { :EventEmitted "Transfer_MintableToken" } true;
[L6344]               __ret_0_ := true;
[L6586]   RET         call __var_17 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, unsale_owner_wallet_DEAPCoin[this], INITIAL_UNSALE_SUPPLY_DEAPCoin[this]);
[L6587]   COND FALSE  !(revert)
[L6593]   COND TRUE   DType[this] == DEAPCoin
[L6594]   CALL        call __var_18 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6365]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9397]   COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L6365]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6366]   COND FALSE  !(revert)
[L6369]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9413]   COND FALSE  !(!!mintingFinished_MintableToken[this])
[L6369]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6370]   COND FALSE  !(revert)
[L6373]               mintingFinished_MintableToken[this] := true;
[L6374]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L6375]               __ret_0_ := true;
[L6594]   RET         call __var_18 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L6679]   RET         call DEAPCoin_DEAPCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6680]   COND FALSE  !(revert)
[L2897]   RET         call DEAPCoin_DEAPCoin__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L2898]               assume !revert && gas >= 0;
[L10891]  RET         call DEAPCoin_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L10892]              assume !revert && gas >= 0;
[L10895]  CALL        call CorralChoice_DEAPCoin(this);
[L10640]              havoc msgsender_MSG;
[L10641]              havoc msgvalue_MSG;
[L10642]              havoc choice;
[L10643]              havoc __ret_0_owner;
[L10644]              havoc newOwner_s54;
[L10645]              havoc __ret_0_totalSupply;
[L10646]              havoc _owner_s578;
[L10647]              havoc __ret_0_balanceOf;
[L10648]              havoc _to_s1284;
[L10649]              havoc _value_s1284;
[L10650]              havoc __ret_0_transfer;
[L10651]              havoc _owner_s759;
[L10652]              havoc _spender_s759;
[L10653]              havoc __ret_0_allowance;
[L10654]              havoc _from_s715;
[L10655]              havoc _to_s715;
[L10656]              havoc _value_s715;
[L10657]              havoc __ret_0_transferFrom;
[L10658]              havoc _spender_s743;
[L10659]              havoc _value_s743;
[L10660]              havoc __ret_0_approve;
[L10661]              havoc _spender_s800;
[L10662]              havoc _addedValue_s800;
[L10663]              havoc __ret_0_increaseApproval;
[L10664]              havoc _spender_s860;
[L10665]              havoc _subtractedValue_s860;
[L10666]              havoc __ret_0_decreaseApproval;
[L10667]              havoc __ret_0_mintingFinished;
[L10668]              havoc _to_s932;
[L10669]              havoc _amount_s932;
[L10670]              havoc __ret_0_mint;
[L10671]              havoc __ret_0_finishMinting;
[L10672]              havoc _to_s1413;
[L10673]              havoc _value_s1413;
[L10674]              havoc _data_s1413;
[L10675]              havoc __ret_0_transfer_ERC223;
[L10676]              havoc __ret_0_name;
[L10677]              havoc __ret_0_symbol;
[L10678]              havoc __ret_0_decimals;
[L10679]              havoc __ret_0_INITIAL_SUPPLY;
[L10680]              havoc __ret_0_INITIAL_SALE_SUPPLY;
[L10681]              havoc __ret_0_INITIAL_UNSALE_SUPPLY;
[L10682]              havoc __ret_0_owner_wallet;
[L10683]              havoc __ret_0_unsale_owner_wallet;
[L10684]              havoc __ret_0_group_lockup;
[L10685]              havoc _sale_owner_wallet_s1076;
[L10686]              havoc _unsale_owner_wallet_s1076;
[L10687]              havoc _group_lockup_s1076;
[L10688]              havoc _to_s1162;
[L10689]              havoc _value_s1162;
[L10690]              havoc __ret_0_sendTokens;
[L10691]              havoc _from_s1567;
[L10692]              havoc _users_s1567;
[L10693]              havoc _values_s1567;
[L10694]              havoc __ret_0_batchTransfer;
[L10695]              havoc tmpNow;
[L10696]              havoc gas;
[L10697]              assume gas > 4000000 && gas <= 8000000;
[L10698]              tmpNow := now;
[L10699]              havoc now;
[L10700]              assume now > tmpNow;
[L10701]              assume msgsender_MSG != null;
[L10702]              assume DType[msgsender_MSG] != Ownable;
[L10703]              assume DType[msgsender_MSG] != SafeMath;
[L10704]              assume DType[msgsender_MSG] != GroupLockup;
[L10705]              assume DType[msgsender_MSG] != ERC20Basic;
[L10706]              assume DType[msgsender_MSG] != BasicToken;
[L10707]              assume DType[msgsender_MSG] != ERC20;
[L10708]              assume DType[msgsender_MSG] != StandardToken;
[L10709]              assume DType[msgsender_MSG] != MintableToken;
[L10710]              assume DType[msgsender_MSG] != ERC223Token;
[L10711]              assume DType[msgsender_MSG] != ERC223ContractInterface;
[L10712]              assume DType[msgsender_MSG] != DEAPCoin;
[L10713]              Alloc[msgsender_MSG] := true;
[L10714]  COND FALSE  !(choice == 25)
[L10720]  COND FALSE  !(choice == 24)
[L10726]  COND FALSE  !(choice == 23)
[L10732]  COND FALSE  !(choice == 22)
[L10738]  COND TRUE   choice == 21
[L10739]              gas := gas - 21000;
[L10740]  COND TRUE   gas >= 0
[L10741]              assume _value_s1284 >= 0 && _value_s1284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10742]              assume msgvalue_MSG == 0;
[L10743]  CALL        call __ret_0_transfer := transfer~address~uint256_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1284 && _value_s1284 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1284 >= 0) && _value_s1284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1284] >= 0) && balances_BasicToken[this][_to_s1284] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_DEAPCoin0 := true;
[L2]                  call_transfer_DEAPCoin0 := false;
[L2]                  revert := revert_hold;
[L3029]               havoc __exception;
[L3030]               revert := false;
[L3031]   COND TRUE   __exception
[L3032]               __tmp__Balance := Balance;
[L3033]               __tmp__DType := DType;
[L3034]               __tmp__Alloc := Alloc;
[L3035]               __tmp__balance_ADDR := balance_ADDR;
[L3036]               __tmp__M_Ref_int := M_Ref_int;
[L3037]               __tmp__sum_lockup_list0 := sum_lockup_list0;
[L3038]               __tmp__M_int_bool := M_int_bool;
[L3039]               __tmp__sum_lockup_list_flag1 := sum_lockup_list_flag1;
[L3040]               __tmp__sum_balances2 := sum_balances2;
[L3041]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L3042]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3043]               __tmp__sum_allowed3 := sum_allowed3;
[L3044]               __tmp__M_int_Ref := M_int_Ref;
[L3045]               __tmp__sum := sum;
[L3046]               __tmp__M_int_int := M_int_int;
[L3047]               __tmp__Length := Length;
[L3048]               __tmp__now := now;
[L3049]               __tmp__owner_Ownable := owner_Ownable;
[L3050]               __tmp__lockup_list_GroupLockup := lockup_list_GroupLockup;
[L3051]               __tmp__lockup_list_flag_GroupLockup := lockup_list_flag_GroupLockup;
[L3052]               __tmp__user_list_GroupLockup := user_list_GroupLockup;
[L3053]               __tmp__balances_BasicToken := balances_BasicToken;
[L3054]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L3055]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L3056]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L3057]               __tmp__name_DEAPCoin := name_DEAPCoin;
[L3058]               __tmp__symbol_DEAPCoin := symbol_DEAPCoin;
[L3059]               __tmp__decimals_DEAPCoin := decimals_DEAPCoin;
[L3060]               __tmp__INITIAL_SUPPLY_DEAPCoin := INITIAL_SUPPLY_DEAPCoin;
[L3061]               __tmp__INITIAL_SALE_SUPPLY_DEAPCoin := INITIAL_SALE_SUPPLY_DEAPCoin;
[L3062]               __tmp__INITIAL_UNSALE_SUPPLY_DEAPCoin := INITIAL_UNSALE_SUPPLY_DEAPCoin;
[L3063]               __tmp__owner_wallet_DEAPCoin := owner_wallet_DEAPCoin;
[L3064]               __tmp__unsale_owner_wallet_DEAPCoin := unsale_owner_wallet_DEAPCoin;
[L3065]               __tmp__group_lockup_DEAPCoin := group_lockup_DEAPCoin;
[L3066]   CALL        call __ret_0_ := transfer~address~uint256_DEAPCoin__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L6799]               __var_25 := null;
[L6800]   COND FALSE  !(!(_to_s1284 != null))
[L6804]   COND TRUE   !(_value_s1284 <= __tmp__balances_BasicToken[this][msgsender_MSG])
[L6805]               revert := true;
[L3066]   RET         call __ret_0_ := transfer~address~uint256_DEAPCoin__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L3067]               assume revert || gas < 0;
[L10743]  RET         call __ret_0_transfer := transfer~address~uint256_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L10895]  RET         call CorralChoice_DEAPCoin(this);

Loop:
[L10895]  CALL        call CorralChoice_DEAPCoin(this);
[L10640]              havoc msgsender_MSG;
[L10641]              havoc msgvalue_MSG;
[L10642]              havoc choice;
[L10643]              havoc __ret_0_owner;
[L10644]              havoc newOwner_s54;
[L10645]              havoc __ret_0_totalSupply;
[L10646]              havoc _owner_s578;
[L10647]              havoc __ret_0_balanceOf;
[L10648]              havoc _to_s1284;
[L10649]              havoc _value_s1284;
[L10650]              havoc __ret_0_transfer;
[L10651]              havoc _owner_s759;
[L10652]              havoc _spender_s759;
[L10653]              havoc __ret_0_allowance;
[L10654]              havoc _from_s715;
[L10655]              havoc _to_s715;
[L10656]              havoc _value_s715;
[L10657]              havoc __ret_0_transferFrom;
[L10658]              havoc _spender_s743;
[L10659]              havoc _value_s743;
[L10660]              havoc __ret_0_approve;
[L10661]              havoc _spender_s800;
[L10662]              havoc _addedValue_s800;
[L10663]              havoc __ret_0_increaseApproval;
[L10664]              havoc _spender_s860;
[L10665]              havoc _subtractedValue_s860;
[L10666]              havoc __ret_0_decreaseApproval;
[L10667]              havoc __ret_0_mintingFinished;
[L10668]              havoc _to_s932;
[L10669]              havoc _amount_s932;
[L10670]              havoc __ret_0_mint;
[L10671]              havoc __ret_0_finishMinting;
[L10672]              havoc _to_s1413;
[L10673]              havoc _value_s1413;
[L10674]              havoc _data_s1413;
[L10675]              havoc __ret_0_transfer_ERC223;
[L10676]              havoc __ret_0_name;
[L10677]              havoc __ret_0_symbol;
[L10678]              havoc __ret_0_decimals;
[L10679]              havoc __ret_0_INITIAL_SUPPLY;
[L10680]              havoc __ret_0_INITIAL_SALE_SUPPLY;
[L10681]              havoc __ret_0_INITIAL_UNSALE_SUPPLY;
[L10682]              havoc __ret_0_owner_wallet;
[L10683]              havoc __ret_0_unsale_owner_wallet;
[L10684]              havoc __ret_0_group_lockup;
[L10685]              havoc _sale_owner_wallet_s1076;
[L10686]              havoc _unsale_owner_wallet_s1076;
[L10687]              havoc _group_lockup_s1076;
[L10688]              havoc _to_s1162;
[L10689]              havoc _value_s1162;
[L10690]              havoc __ret_0_sendTokens;
[L10691]              havoc _from_s1567;
[L10692]              havoc _users_s1567;
[L10693]              havoc _values_s1567;
[L10694]              havoc __ret_0_batchTransfer;
[L10695]              havoc tmpNow;
[L10696]              havoc gas;
[L10697]              assume gas > 4000000 && gas <= 8000000;
[L10698]              tmpNow := now;
[L10699]              havoc now;
[L10700]              assume now > tmpNow;
[L10701]              assume msgsender_MSG != null;
[L10702]              assume DType[msgsender_MSG] != Ownable;
[L10703]              assume DType[msgsender_MSG] != SafeMath;
[L10704]              assume DType[msgsender_MSG] != GroupLockup;
[L10705]              assume DType[msgsender_MSG] != ERC20Basic;
[L10706]              assume DType[msgsender_MSG] != BasicToken;
[L10707]              assume DType[msgsender_MSG] != ERC20;
[L10708]              assume DType[msgsender_MSG] != StandardToken;
[L10709]              assume DType[msgsender_MSG] != MintableToken;
[L10710]              assume DType[msgsender_MSG] != ERC223Token;
[L10711]              assume DType[msgsender_MSG] != ERC223ContractInterface;
[L10712]              assume DType[msgsender_MSG] != DEAPCoin;
[L10713]              Alloc[msgsender_MSG] := true;
[L10714]  COND FALSE  !(choice == 25)
[L10720]  COND FALSE  !(choice == 24)
[L10726]  COND FALSE  !(choice == 23)
[L10732]  COND FALSE  !(choice == 22)
[L10738]  COND TRUE   choice == 21
[L10739]              gas := gas - 21000;
[L10740]  COND TRUE   gas >= 0
[L10741]              assume _value_s1284 >= 0 && _value_s1284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10742]              assume msgvalue_MSG == 0;
[L10743]  CALL        call __ret_0_transfer := transfer~address~uint256_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1284 && _value_s1284 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1284 >= 0) && _value_s1284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1284] >= 0) && balances_BasicToken[this][_to_s1284] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_DEAPCoin0 := true;
[L2]                  call_transfer_DEAPCoin0 := false;
[L2]                  revert := revert_hold;
[L3029]               havoc __exception;
[L3030]               revert := false;
[L3031]   COND TRUE   __exception
[L3032]               __tmp__Balance := Balance;
[L3033]               __tmp__DType := DType;
[L3034]               __tmp__Alloc := Alloc;
[L3035]               __tmp__balance_ADDR := balance_ADDR;
[L3036]               __tmp__M_Ref_int := M_Ref_int;
[L3037]               __tmp__sum_lockup_list0 := sum_lockup_list0;
[L3038]               __tmp__M_int_bool := M_int_bool;
[L3039]               __tmp__sum_lockup_list_flag1 := sum_lockup_list_flag1;
[L3040]               __tmp__sum_balances2 := sum_balances2;
[L3041]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L3042]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3043]               __tmp__sum_allowed3 := sum_allowed3;
[L3044]               __tmp__M_int_Ref := M_int_Ref;
[L3045]               __tmp__sum := sum;
[L3046]               __tmp__M_int_int := M_int_int;
[L3047]               __tmp__Length := Length;
[L3048]               __tmp__now := now;
[L3049]               __tmp__owner_Ownable := owner_Ownable;
[L3050]               __tmp__lockup_list_GroupLockup := lockup_list_GroupLockup;
[L3051]               __tmp__lockup_list_flag_GroupLockup := lockup_list_flag_GroupLockup;
[L3052]               __tmp__user_list_GroupLockup := user_list_GroupLockup;
[L3053]               __tmp__balances_BasicToken := balances_BasicToken;
[L3054]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L3055]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L3056]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L3057]               __tmp__name_DEAPCoin := name_DEAPCoin;
[L3058]               __tmp__symbol_DEAPCoin := symbol_DEAPCoin;
[L3059]               __tmp__decimals_DEAPCoin := decimals_DEAPCoin;
[L3060]               __tmp__INITIAL_SUPPLY_DEAPCoin := INITIAL_SUPPLY_DEAPCoin;
[L3061]               __tmp__INITIAL_SALE_SUPPLY_DEAPCoin := INITIAL_SALE_SUPPLY_DEAPCoin;
[L3062]               __tmp__INITIAL_UNSALE_SUPPLY_DEAPCoin := INITIAL_UNSALE_SUPPLY_DEAPCoin;
[L3063]               __tmp__owner_wallet_DEAPCoin := owner_wallet_DEAPCoin;
[L3064]               __tmp__unsale_owner_wallet_DEAPCoin := unsale_owner_wallet_DEAPCoin;
[L3065]               __tmp__group_lockup_DEAPCoin := group_lockup_DEAPCoin;
[L3066]   CALL        call __ret_0_ := transfer~address~uint256_DEAPCoin__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L6799]               __var_25 := null;
[L6800]   COND FALSE  !(!(_to_s1284 != null))
[L6804]   COND TRUE   !(_value_s1284 <= __tmp__balances_BasicToken[this][msgsender_MSG])
[L6805]               revert := true;
[L3066]   RET         call __ret_0_ := transfer~address~uint256_DEAPCoin__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L3067]               assume revert || gas < 0;
[L10743]  RET         call __ret_0_transfer := transfer~address~uint256_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L10895]  RET         call CorralChoice_DEAPCoin(this);

[2020-11-25 13:24:34,134 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:24:34,134 INFO  L82        PathProgramCache]: Analyzing trace with hash 1204411063, now seen corresponding path program 1 times
[2020-11-25 13:24:34,135 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:24:34,160 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:24:34,581 INFO  L134       CoverageAnalysis]: Checked inductivity of 3948 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 3948 trivial. 0 not checked.
[2020-11-25 13:24:34,582 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:24:34,582 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 13:24:34,582 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:24:34,582 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 13:24:34,583 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 13:24:34,583 INFO  L87              Difference]: Start difference. First operand 5353 states and 5884 transitions. cyclomatic complexity: 537 Second operand 6 states.
[2020-11-25 13:24:35,507 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:24:35,507 INFO  L93              Difference]: Finished difference Result 5515 states and 6095 transitions.
[2020-11-25 13:24:35,508 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 13:24:35,508 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5515 states and 6095 transitions.
[2020-11-25 13:24:35,526 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 13:24:35,546 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5515 states to 5515 states and 6095 transitions.
[2020-11-25 13:24:35,546 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1417
[2020-11-25 13:24:35,547 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1417
[2020-11-25 13:24:35,547 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5515 states and 6095 transitions.
[2020-11-25 13:24:35,552 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:24:35,552 INFO  L728         BuchiCegarLoop]: Abstraction has 5515 states and 6095 transitions.
[2020-11-25 13:24:35,558 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5515 states and 6095 transitions.
[2020-11-25 13:24:35,600 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5515 to 5355.
[2020-11-25 13:24:35,600 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5355 states.
[2020-11-25 13:24:35,609 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5355 states to 5355 states and 5886 transitions.
[2020-11-25 13:24:35,609 INFO  L751         BuchiCegarLoop]: Abstraction has 5355 states and 5886 transitions.
[2020-11-25 13:24:35,609 INFO  L631         BuchiCegarLoop]: Abstraction has 5355 states and 5886 transitions.
[2020-11-25 13:24:35,609 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 13:24:35,609 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5355 states and 5886 transitions.
[2020-11-25 13:24:35,619 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 13:24:35,619 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:24:35,619 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:24:35,622 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [24, 24, 24, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:24:35,622 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_DEAPCoin0 := false;
[L2]                  call_transfer_DEAPCoin0 := false;
[L2]      CALL        call main();
[L10885]              assume null == 0;
[L10886]  CALL        call this := FreshRefGenerator__success();
[L5225]               havoc newRef;
[L5226]               assume Alloc[newRef] == false;
[L5227]               Alloc[newRef] := true;
[L5228]               assume newRef != null;
[L10886]  RET         call this := FreshRefGenerator__success();
[L10887]              assume now >= 0;
[L10888]              assume DType[this] == DEAPCoin;
[L10889]              assume msgvalue_MSG == 0;
[L10890]              gas := gas - 53000;
[L10891]  CALL        call DEAPCoin_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L2857]               havoc __exception;
[L2858]               revert := false;
[L2859]   COND FALSE  !(__exception)
[L2897]   CALL        call DEAPCoin_DEAPCoin__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6651]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6651]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6652]   COND FALSE  !(revert)
[L6655]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6655]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6656]   COND FALSE  !(revert)
[L6659]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6659]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6660]   COND FALSE  !(revert)
[L6663]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6004]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6004]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   COND FALSE  !(revert)
[L6008]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6008]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6009]   COND FALSE  !(revert)
[L6012]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6012]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]   COND FALSE  !(revert)
[L6016]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5975]               assume msgsender_MSG != null;
[L5976]               Balance[this] := 0;
[L5977]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5978]               sum_allowed3[this] := 0;
[L6016]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6017]   COND FALSE  !(revert)
[L6663]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6664]   COND FALSE  !(revert)
[L6667]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5261]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]               assume msgsender_MSG != null;
[L5245]               Balance[this] := 0;
[L5246]               owner_Ownable[this] := null;
[L5248]               owner_Ownable[this] := msgsender_MSG;
[L5261]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   COND FALSE  !(revert)
[L6667]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6668]   COND FALSE  !(revert)
[L6671]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6264]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6264]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6265]   COND FALSE  !(revert)
[L6268]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6268]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6269]   COND FALSE  !(revert)
[L6272]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6272]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6273]   COND FALSE  !(revert)
[L6276]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6004]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6004]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   COND FALSE  !(revert)
[L6008]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6008]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6009]   COND FALSE  !(revert)
[L6012]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6012]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]   COND FALSE  !(revert)
[L6016]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5975]               assume msgsender_MSG != null;
[L5976]               Balance[this] := 0;
[L5977]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5978]               sum_allowed3[this] := 0;
[L6016]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6017]   COND FALSE  !(revert)
[L6276]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6277]   COND FALSE  !(revert)
[L6280]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5261]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]               assume msgsender_MSG != null;
[L5245]               Balance[this] := 0;
[L5246]               owner_Ownable[this] := null;
[L5248]               owner_Ownable[this] := msgsender_MSG;
[L5261]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   COND FALSE  !(revert)
[L6280]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6281]   COND FALSE  !(revert)
[L6284]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6228]               assume msgsender_MSG != null;
[L6229]               Balance[this] := 0;
[L6230]               mintingFinished_MintableToken[this] := false;
[L6284]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6285]   COND FALSE  !(revert)
[L6671]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6672]   COND FALSE  !(revert)
[L6675]   CALL        call ERC223Token_ERC223Token__success(this, msgsender_MSG, msgvalue_MSG);
[L6441]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6441]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6445]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6449]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6449]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   COND FALSE  !(revert)
[L6453]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6004]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6004]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   COND FALSE  !(revert)
[L6008]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6008]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6009]   COND FALSE  !(revert)
[L6012]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6012]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]   COND FALSE  !(revert)
[L6016]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5975]               assume msgsender_MSG != null;
[L5976]               Balance[this] := 0;
[L5977]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5978]               sum_allowed3[this] := 0;
[L6016]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6017]   COND FALSE  !(revert)
[L6453]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6454]   COND FALSE  !(revert)
[L6457]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5261]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]               assume msgsender_MSG != null;
[L5245]               Balance[this] := 0;
[L5246]               owner_Ownable[this] := null;
[L5248]               owner_Ownable[this] := msgsender_MSG;
[L5261]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   COND FALSE  !(revert)
[L6457]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6458]   COND FALSE  !(revert)
[L6461]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6264]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6264]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6265]   COND FALSE  !(revert)
[L6268]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6268]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6269]   COND FALSE  !(revert)
[L6272]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6272]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6273]   COND FALSE  !(revert)
[L6276]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6004]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6004]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   COND FALSE  !(revert)
[L6008]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6008]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6009]   COND FALSE  !(revert)
[L6012]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6012]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]   COND FALSE  !(revert)
[L6016]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5975]               assume msgsender_MSG != null;
[L5976]               Balance[this] := 0;
[L5977]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5978]               sum_allowed3[this] := 0;
[L6016]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6017]   COND FALSE  !(revert)
[L6276]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6277]   COND FALSE  !(revert)
[L6280]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5261]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]               assume msgsender_MSG != null;
[L5245]               Balance[this] := 0;
[L5246]               owner_Ownable[this] := null;
[L5248]               owner_Ownable[this] := msgsender_MSG;
[L5261]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   COND FALSE  !(revert)
[L6280]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6281]   COND FALSE  !(revert)
[L6284]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6228]               assume msgsender_MSG != null;
[L6229]               Balance[this] := 0;
[L6230]               mintingFinished_MintableToken[this] := false;
[L6284]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6285]   COND FALSE  !(revert)
[L6461]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6462]   COND FALSE  !(revert)
[L6465]   CALL        call ERC223Token_ERC223Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6402]               assume msgsender_MSG != null;
[L6403]               Balance[this] := 0;
[L6465]   RET         call ERC223Token_ERC223Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]   COND FALSE  !(revert)
[L6675]   RET         call ERC223Token_ERC223Token__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]   COND FALSE  !(revert)
[L6679]   CALL        call DEAPCoin_DEAPCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6561]               assume msgsender_MSG != null;
[L6562]               Balance[this] := 0;
[L6563]               name_DEAPCoin[this] := -635866188;
[L6564]               symbol_DEAPCoin[this] := -1031151507;
[L6565]               decimals_DEAPCoin[this] := 18;
[L6566]               __var_19 := decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6567]               INITIAL_SUPPLY_DEAPCoin[this] := 30000000000 * (nonlinearPow(10, decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6568]               __var_20 := decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6569]               INITIAL_SALE_SUPPLY_DEAPCoin[this] := 12000000000 * (nonlinearPow(10, decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6570]               INITIAL_UNSALE_SUPPLY_DEAPCoin[this] := (INITIAL_SUPPLY_DEAPCoin[this] - INITIAL_SALE_SUPPLY_DEAPCoin[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6571]               owner_wallet_DEAPCoin[this] := null;
[L6572]               unsale_owner_wallet_DEAPCoin[this] := null;
[L6574]               group_lockup_DEAPCoin[this] := _group_lockup_s1076;
[L6575]               owner_wallet_DEAPCoin[this] := _sale_owner_wallet_s1076;
[L6576]               unsale_owner_wallet_DEAPCoin[this] := _unsale_owner_wallet_s1076;
[L6577]   COND TRUE   DType[this] == DEAPCoin
[L6578]   CALL        call __var_16 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, owner_wallet_DEAPCoin[this], INITIAL_SALE_SUPPLY_DEAPCoin[this]);
[L6322]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9397]   COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L6322]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6323]   COND FALSE  !(revert)
[L6326]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9413]   COND FALSE  !(!!mintingFinished_MintableToken[this])
[L6326]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6327]   COND FALSE  !(revert)
[L6330]   CALL        call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s932);
[L5399]               c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5400]               assert c_s146 >= a_s146;
[L5401]               c_s146 := c_s146;
[L6330]   RET         call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s932);
[L6331]   COND FALSE  !(revert)
[L6334]               totalSupply__BasicToken[this] := __var_14;
[L6335]   CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s932], _amount_s932);
[L5399]               c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5400]               assert c_s146 >= a_s146;
[L5401]               c_s146 := c_s146;
[L6335]   RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s932], _amount_s932);
[L6336]   COND FALSE  !(revert)
[L6339]               sum_balances2[this] := sum_balances2[this] - balances_BasicToken[this][_to_s932];
[L6340]               balances_BasicToken[this][_to_s932] := __var_15;
[L6341]               sum_balances2[this] := sum_balances2[this] + balances_BasicToken[this][_to_s932];
[L6342]               assert { :EventEmitted "Mint_MintableToken" } true;
[L6343]               assert { :EventEmitted "Transfer_MintableToken" } true;
[L6344]               __ret_0_ := true;
[L6578]   RET         call __var_16 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, owner_wallet_DEAPCoin[this], INITIAL_SALE_SUPPLY_DEAPCoin[this]);
[L6579]   COND FALSE  !(revert)
[L6585]   COND TRUE   DType[this] == DEAPCoin
[L6586]   CALL        call __var_17 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, unsale_owner_wallet_DEAPCoin[this], INITIAL_UNSALE_SUPPLY_DEAPCoin[this]);
[L6322]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9397]   COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L6322]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6323]   COND FALSE  !(revert)
[L6326]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9413]   COND FALSE  !(!!mintingFinished_MintableToken[this])
[L6326]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6327]   COND FALSE  !(revert)
[L6330]   CALL        call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s932);
[L5399]               c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5400]               assert c_s146 >= a_s146;
[L5401]               c_s146 := c_s146;
[L6330]   RET         call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s932);
[L6331]   COND FALSE  !(revert)
[L6334]               totalSupply__BasicToken[this] := __var_14;
[L6335]   CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s932], _amount_s932);
[L5399]               c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5400]               assert c_s146 >= a_s146;
[L5401]               c_s146 := c_s146;
[L6335]   RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s932], _amount_s932);
[L6336]   COND FALSE  !(revert)
[L6339]               sum_balances2[this] := sum_balances2[this] - balances_BasicToken[this][_to_s932];
[L6340]               balances_BasicToken[this][_to_s932] := __var_15;
[L6341]               sum_balances2[this] := sum_balances2[this] + balances_BasicToken[this][_to_s932];
[L6342]               assert { :EventEmitted "Mint_MintableToken" } true;
[L6343]               assert { :EventEmitted "Transfer_MintableToken" } true;
[L6344]               __ret_0_ := true;
[L6586]   RET         call __var_17 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, unsale_owner_wallet_DEAPCoin[this], INITIAL_UNSALE_SUPPLY_DEAPCoin[this]);
[L6587]   COND FALSE  !(revert)
[L6593]   COND TRUE   DType[this] == DEAPCoin
[L6594]   CALL        call __var_18 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6365]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9397]   COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L6365]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6366]   COND FALSE  !(revert)
[L6369]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9413]   COND FALSE  !(!!mintingFinished_MintableToken[this])
[L6369]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6370]   COND FALSE  !(revert)
[L6373]               mintingFinished_MintableToken[this] := true;
[L6374]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L6375]               __ret_0_ := true;
[L6594]   RET         call __var_18 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L6679]   RET         call DEAPCoin_DEAPCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6680]   COND FALSE  !(revert)
[L2897]   RET         call DEAPCoin_DEAPCoin__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L2898]               assume !revert && gas >= 0;
[L10891]  RET         call DEAPCoin_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L10892]              assume !revert && gas >= 0;
[L10895]  CALL        call CorralChoice_DEAPCoin(this);
[L10640]              havoc msgsender_MSG;
[L10641]              havoc msgvalue_MSG;
[L10642]              havoc choice;
[L10643]              havoc __ret_0_owner;
[L10644]              havoc newOwner_s54;
[L10645]              havoc __ret_0_totalSupply;
[L10646]              havoc _owner_s578;
[L10647]              havoc __ret_0_balanceOf;
[L10648]              havoc _to_s1284;
[L10649]              havoc _value_s1284;
[L10650]              havoc __ret_0_transfer;
[L10651]              havoc _owner_s759;
[L10652]              havoc _spender_s759;
[L10653]              havoc __ret_0_allowance;
[L10654]              havoc _from_s715;
[L10655]              havoc _to_s715;
[L10656]              havoc _value_s715;
[L10657]              havoc __ret_0_transferFrom;
[L10658]              havoc _spender_s743;
[L10659]              havoc _value_s743;
[L10660]              havoc __ret_0_approve;
[L10661]              havoc _spender_s800;
[L10662]              havoc _addedValue_s800;
[L10663]              havoc __ret_0_increaseApproval;
[L10664]              havoc _spender_s860;
[L10665]              havoc _subtractedValue_s860;
[L10666]              havoc __ret_0_decreaseApproval;
[L10667]              havoc __ret_0_mintingFinished;
[L10668]              havoc _to_s932;
[L10669]              havoc _amount_s932;
[L10670]              havoc __ret_0_mint;
[L10671]              havoc __ret_0_finishMinting;
[L10672]              havoc _to_s1413;
[L10673]              havoc _value_s1413;
[L10674]              havoc _data_s1413;
[L10675]              havoc __ret_0_transfer_ERC223;
[L10676]              havoc __ret_0_name;
[L10677]              havoc __ret_0_symbol;
[L10678]              havoc __ret_0_decimals;
[L10679]              havoc __ret_0_INITIAL_SUPPLY;
[L10680]              havoc __ret_0_INITIAL_SALE_SUPPLY;
[L10681]              havoc __ret_0_INITIAL_UNSALE_SUPPLY;
[L10682]              havoc __ret_0_owner_wallet;
[L10683]              havoc __ret_0_unsale_owner_wallet;
[L10684]              havoc __ret_0_group_lockup;
[L10685]              havoc _sale_owner_wallet_s1076;
[L10686]              havoc _unsale_owner_wallet_s1076;
[L10687]              havoc _group_lockup_s1076;
[L10688]              havoc _to_s1162;
[L10689]              havoc _value_s1162;
[L10690]              havoc __ret_0_sendTokens;
[L10691]              havoc _from_s1567;
[L10692]              havoc _users_s1567;
[L10693]              havoc _values_s1567;
[L10694]              havoc __ret_0_batchTransfer;
[L10695]              havoc tmpNow;
[L10696]              havoc gas;
[L10697]              assume gas > 4000000 && gas <= 8000000;
[L10698]              tmpNow := now;
[L10699]              havoc now;
[L10700]              assume now > tmpNow;
[L10701]              assume msgsender_MSG != null;
[L10702]              assume DType[msgsender_MSG] != Ownable;
[L10703]              assume DType[msgsender_MSG] != SafeMath;
[L10704]              assume DType[msgsender_MSG] != GroupLockup;
[L10705]              assume DType[msgsender_MSG] != ERC20Basic;
[L10706]              assume DType[msgsender_MSG] != BasicToken;
[L10707]              assume DType[msgsender_MSG] != ERC20;
[L10708]              assume DType[msgsender_MSG] != StandardToken;
[L10709]              assume DType[msgsender_MSG] != MintableToken;
[L10710]              assume DType[msgsender_MSG] != ERC223Token;
[L10711]              assume DType[msgsender_MSG] != ERC223ContractInterface;
[L10712]              assume DType[msgsender_MSG] != DEAPCoin;
[L10713]              Alloc[msgsender_MSG] := true;
[L10714]  COND FALSE  !(choice == 25)
[L10720]  COND FALSE  !(choice == 24)
[L10726]  COND FALSE  !(choice == 23)
[L10732]  COND FALSE  !(choice == 22)
[L10738]  COND TRUE   choice == 21
[L10739]              gas := gas - 21000;
[L10740]  COND TRUE   gas >= 0
[L10741]              assume _value_s1284 >= 0 && _value_s1284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10742]              assume msgvalue_MSG == 0;
[L10743]  CALL        call __ret_0_transfer := transfer~address~uint256_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1284 && _value_s1284 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1284 >= 0) && _value_s1284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1284] >= 0) && balances_BasicToken[this][_to_s1284] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_DEAPCoin0 := true;
[L2]                  call_transfer_DEAPCoin0 := false;
[L2]                  revert := revert_hold;
[L3029]               havoc __exception;
[L3030]               revert := false;
[L3031]   COND TRUE   __exception
[L3032]               __tmp__Balance := Balance;
[L3033]               __tmp__DType := DType;
[L3034]               __tmp__Alloc := Alloc;
[L3035]               __tmp__balance_ADDR := balance_ADDR;
[L3036]               __tmp__M_Ref_int := M_Ref_int;
[L3037]               __tmp__sum_lockup_list0 := sum_lockup_list0;
[L3038]               __tmp__M_int_bool := M_int_bool;
[L3039]               __tmp__sum_lockup_list_flag1 := sum_lockup_list_flag1;
[L3040]               __tmp__sum_balances2 := sum_balances2;
[L3041]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L3042]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3043]               __tmp__sum_allowed3 := sum_allowed3;
[L3044]               __tmp__M_int_Ref := M_int_Ref;
[L3045]               __tmp__sum := sum;
[L3046]               __tmp__M_int_int := M_int_int;
[L3047]               __tmp__Length := Length;
[L3048]               __tmp__now := now;
[L3049]               __tmp__owner_Ownable := owner_Ownable;
[L3050]               __tmp__lockup_list_GroupLockup := lockup_list_GroupLockup;
[L3051]               __tmp__lockup_list_flag_GroupLockup := lockup_list_flag_GroupLockup;
[L3052]               __tmp__user_list_GroupLockup := user_list_GroupLockup;
[L3053]               __tmp__balances_BasicToken := balances_BasicToken;
[L3054]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L3055]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L3056]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L3057]               __tmp__name_DEAPCoin := name_DEAPCoin;
[L3058]               __tmp__symbol_DEAPCoin := symbol_DEAPCoin;
[L3059]               __tmp__decimals_DEAPCoin := decimals_DEAPCoin;
[L3060]               __tmp__INITIAL_SUPPLY_DEAPCoin := INITIAL_SUPPLY_DEAPCoin;
[L3061]               __tmp__INITIAL_SALE_SUPPLY_DEAPCoin := INITIAL_SALE_SUPPLY_DEAPCoin;
[L3062]               __tmp__INITIAL_UNSALE_SUPPLY_DEAPCoin := INITIAL_UNSALE_SUPPLY_DEAPCoin;
[L3063]               __tmp__owner_wallet_DEAPCoin := owner_wallet_DEAPCoin;
[L3064]               __tmp__unsale_owner_wallet_DEAPCoin := unsale_owner_wallet_DEAPCoin;
[L3065]               __tmp__group_lockup_DEAPCoin := group_lockup_DEAPCoin;
[L3066]   CALL        call __ret_0_ := transfer~address~uint256_DEAPCoin__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L6799]               __var_25 := null;
[L6800]   COND FALSE  !(!(_to_s1284 != null))
[L6804]   COND FALSE  !(!(_value_s1284 <= __tmp__balances_BasicToken[this][msgsender_MSG]))
[L6808]   COND TRUE   !(_value_s1284 > 0)
[L6809]               revert := true;
[L3066]   RET         call __ret_0_ := transfer~address~uint256_DEAPCoin__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L3067]               assume revert || gas < 0;
[L10743]  RET         call __ret_0_transfer := transfer~address~uint256_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L10895]  RET         call CorralChoice_DEAPCoin(this);

Loop:
[L10895]  CALL        call CorralChoice_DEAPCoin(this);
[L10640]              havoc msgsender_MSG;
[L10641]              havoc msgvalue_MSG;
[L10642]              havoc choice;
[L10643]              havoc __ret_0_owner;
[L10644]              havoc newOwner_s54;
[L10645]              havoc __ret_0_totalSupply;
[L10646]              havoc _owner_s578;
[L10647]              havoc __ret_0_balanceOf;
[L10648]              havoc _to_s1284;
[L10649]              havoc _value_s1284;
[L10650]              havoc __ret_0_transfer;
[L10651]              havoc _owner_s759;
[L10652]              havoc _spender_s759;
[L10653]              havoc __ret_0_allowance;
[L10654]              havoc _from_s715;
[L10655]              havoc _to_s715;
[L10656]              havoc _value_s715;
[L10657]              havoc __ret_0_transferFrom;
[L10658]              havoc _spender_s743;
[L10659]              havoc _value_s743;
[L10660]              havoc __ret_0_approve;
[L10661]              havoc _spender_s800;
[L10662]              havoc _addedValue_s800;
[L10663]              havoc __ret_0_increaseApproval;
[L10664]              havoc _spender_s860;
[L10665]              havoc _subtractedValue_s860;
[L10666]              havoc __ret_0_decreaseApproval;
[L10667]              havoc __ret_0_mintingFinished;
[L10668]              havoc _to_s932;
[L10669]              havoc _amount_s932;
[L10670]              havoc __ret_0_mint;
[L10671]              havoc __ret_0_finishMinting;
[L10672]              havoc _to_s1413;
[L10673]              havoc _value_s1413;
[L10674]              havoc _data_s1413;
[L10675]              havoc __ret_0_transfer_ERC223;
[L10676]              havoc __ret_0_name;
[L10677]              havoc __ret_0_symbol;
[L10678]              havoc __ret_0_decimals;
[L10679]              havoc __ret_0_INITIAL_SUPPLY;
[L10680]              havoc __ret_0_INITIAL_SALE_SUPPLY;
[L10681]              havoc __ret_0_INITIAL_UNSALE_SUPPLY;
[L10682]              havoc __ret_0_owner_wallet;
[L10683]              havoc __ret_0_unsale_owner_wallet;
[L10684]              havoc __ret_0_group_lockup;
[L10685]              havoc _sale_owner_wallet_s1076;
[L10686]              havoc _unsale_owner_wallet_s1076;
[L10687]              havoc _group_lockup_s1076;
[L10688]              havoc _to_s1162;
[L10689]              havoc _value_s1162;
[L10690]              havoc __ret_0_sendTokens;
[L10691]              havoc _from_s1567;
[L10692]              havoc _users_s1567;
[L10693]              havoc _values_s1567;
[L10694]              havoc __ret_0_batchTransfer;
[L10695]              havoc tmpNow;
[L10696]              havoc gas;
[L10697]              assume gas > 4000000 && gas <= 8000000;
[L10698]              tmpNow := now;
[L10699]              havoc now;
[L10700]              assume now > tmpNow;
[L10701]              assume msgsender_MSG != null;
[L10702]              assume DType[msgsender_MSG] != Ownable;
[L10703]              assume DType[msgsender_MSG] != SafeMath;
[L10704]              assume DType[msgsender_MSG] != GroupLockup;
[L10705]              assume DType[msgsender_MSG] != ERC20Basic;
[L10706]              assume DType[msgsender_MSG] != BasicToken;
[L10707]              assume DType[msgsender_MSG] != ERC20;
[L10708]              assume DType[msgsender_MSG] != StandardToken;
[L10709]              assume DType[msgsender_MSG] != MintableToken;
[L10710]              assume DType[msgsender_MSG] != ERC223Token;
[L10711]              assume DType[msgsender_MSG] != ERC223ContractInterface;
[L10712]              assume DType[msgsender_MSG] != DEAPCoin;
[L10713]              Alloc[msgsender_MSG] := true;
[L10714]  COND FALSE  !(choice == 25)
[L10720]  COND FALSE  !(choice == 24)
[L10726]  COND FALSE  !(choice == 23)
[L10732]  COND FALSE  !(choice == 22)
[L10738]  COND TRUE   choice == 21
[L10739]              gas := gas - 21000;
[L10740]  COND TRUE   gas >= 0
[L10741]              assume _value_s1284 >= 0 && _value_s1284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L10742]              assume msgvalue_MSG == 0;
[L10743]  CALL        call __ret_0_transfer := transfer~address~uint256_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1284 && _value_s1284 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1284 >= 0) && _value_s1284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1284] >= 0) && balances_BasicToken[this][_to_s1284] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_DEAPCoin0 := true;
[L2]                  call_transfer_DEAPCoin0 := false;
[L2]                  revert := revert_hold;
[L3029]               havoc __exception;
[L3030]               revert := false;
[L3031]   COND TRUE   __exception
[L3032]               __tmp__Balance := Balance;
[L3033]               __tmp__DType := DType;
[L3034]               __tmp__Alloc := Alloc;
[L3035]               __tmp__balance_ADDR := balance_ADDR;
[L3036]               __tmp__M_Ref_int := M_Ref_int;
[L3037]               __tmp__sum_lockup_list0 := sum_lockup_list0;
[L3038]               __tmp__M_int_bool := M_int_bool;
[L3039]               __tmp__sum_lockup_list_flag1 := sum_lockup_list_flag1;
[L3040]               __tmp__sum_balances2 := sum_balances2;
[L3041]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L3042]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3043]               __tmp__sum_allowed3 := sum_allowed3;
[L3044]               __tmp__M_int_Ref := M_int_Ref;
[L3045]               __tmp__sum := sum;
[L3046]               __tmp__M_int_int := M_int_int;
[L3047]               __tmp__Length := Length;
[L3048]               __tmp__now := now;
[L3049]               __tmp__owner_Ownable := owner_Ownable;
[L3050]               __tmp__lockup_list_GroupLockup := lockup_list_GroupLockup;
[L3051]               __tmp__lockup_list_flag_GroupLockup := lockup_list_flag_GroupLockup;
[L3052]               __tmp__user_list_GroupLockup := user_list_GroupLockup;
[L3053]               __tmp__balances_BasicToken := balances_BasicToken;
[L3054]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L3055]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L3056]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L3057]               __tmp__name_DEAPCoin := name_DEAPCoin;
[L3058]               __tmp__symbol_DEAPCoin := symbol_DEAPCoin;
[L3059]               __tmp__decimals_DEAPCoin := decimals_DEAPCoin;
[L3060]               __tmp__INITIAL_SUPPLY_DEAPCoin := INITIAL_SUPPLY_DEAPCoin;
[L3061]               __tmp__INITIAL_SALE_SUPPLY_DEAPCoin := INITIAL_SALE_SUPPLY_DEAPCoin;
[L3062]               __tmp__INITIAL_UNSALE_SUPPLY_DEAPCoin := INITIAL_UNSALE_SUPPLY_DEAPCoin;
[L3063]               __tmp__owner_wallet_DEAPCoin := owner_wallet_DEAPCoin;
[L3064]               __tmp__unsale_owner_wallet_DEAPCoin := unsale_owner_wallet_DEAPCoin;
[L3065]               __tmp__group_lockup_DEAPCoin := group_lockup_DEAPCoin;
[L3066]   CALL        call __ret_0_ := transfer~address~uint256_DEAPCoin__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L6799]               __var_25 := null;
[L6800]   COND FALSE  !(!(_to_s1284 != null))
[L6804]   COND FALSE  !(!(_value_s1284 <= __tmp__balances_BasicToken[this][msgsender_MSG]))
[L6808]   COND TRUE   !(_value_s1284 > 0)
[L6809]               revert := true;
[L3066]   RET         call __ret_0_ := transfer~address~uint256_DEAPCoin__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L3067]               assume revert || gas < 0;
[L10743]  RET         call __ret_0_transfer := transfer~address~uint256_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L10895]  RET         call CorralChoice_DEAPCoin(this);

[2020-11-25 13:24:35,638 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:24:35,638 INFO  L82        PathProgramCache]: Analyzing trace with hash 1947520088, now seen corresponding path program 1 times
[2020-11-25 13:24:35,639 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:24:35,919 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 13:24:36,085 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 13:24:36,334 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:24:36,334 INFO  L82        PathProgramCache]: Analyzing trace with hash 1723369796, now seen corresponding path program 1 times
[2020-11-25 13:24:36,335 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:24:36,340 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 13:24:36,344 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 13:24:36,354 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:24:36,355 INFO  L82        PathProgramCache]: Analyzing trace with hash -880113779, now seen corresponding path program 1 times
[2020-11-25 13:24:36,355 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:24:36,457 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 13:24:36,519 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
[2020-11-25 13:24:36,844 WARN  L188               SmtUtils]: Spent 148.00 ms on a formula simplification. DAG size of input: 184 DAG size of output: 173
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2017 to 4027
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #7: 3517 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3517 to 7027
[2020-11-25 13:24:37,118 WARN  L188               SmtUtils]: Spent 160.00 ms on a formula simplification that was a NOOP. DAG size: 346
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 4273 to 8543
[2020-11-25 13:24:37,340 WARN  L188               SmtUtils]: Spent 207.00 ms on a formula simplification that was a NOOP. DAG size: 270
[2020-11-25 13:24:37,808 WARN  L188               SmtUtils]: Spent 465.00 ms on a formula simplification. DAG size of input: 344 DAG size of output: 326
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.001s / 0.004s total
Resizing node table from 7933 to 15859
Garbage collection #8: 15859 nodes / 0 free / 0.004s / 0.008s total
Resizing node table from 15859 to 31699
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #7: 4357 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4357 to 8713
[2020-11-25 13:24:37,971 WARN  L188               SmtUtils]: Spent 135.00 ms on a formula simplification. DAG size of input: 192 DAG size of output: 188
[2020-11-25 13:24:38,129 WARN  L188               SmtUtils]: Spent 156.00 ms on a formula simplification that was a NOOP. DAG size: 420
Garbage collection #1: 167 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 167 to 331
Garbage collection #2: 331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 331 to 661
Garbage collection #3: 661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 661 to 1321
Garbage collection #4: 1321 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1321 to 2633
Garbage collection #5: 2633 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2633 to 5261
Garbage collection #6: 5261 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 5261 to 10513
Garbage collection #7: 10513 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 10513 to 21023
[2020-11-25 13:24:38,310 WARN  L188               SmtUtils]: Spent 171.00 ms on a formula simplification that was a NOOP. DAG size: 333
[2020-11-25 13:24:38,497 WARN  L188               SmtUtils]: Spent 185.00 ms on a formula simplification that was a NOOP. DAG size: 333
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
[2020-11-25 13:24:38,601 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
[2020-11-25 13:24:39,427 WARN  L188               SmtUtils]: Spent 100.00 ms on a formula simplification. DAG size of input: 190 DAG size of output: 178
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 5 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5 to 7
Garbage collection #2: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #1: 5 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5 to 7
Garbage collection #2: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 5 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5 to 7
Garbage collection #2: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #1: 5 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5 to 7
Garbage collection #2: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
[2020-11-25 13:24:40,200 WARN  L188               SmtUtils]: Spent 463.00 ms on a formula simplification. DAG size of input: 229 DAG size of output: 220
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
[2020-11-25 13:24:40,513 WARN  L188               SmtUtils]: Spent 219.00 ms on a formula simplification that was a NOOP. DAG size: 209
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
[2020-11-25 13:24:40,697 WARN  L188               SmtUtils]: Spent 180.00 ms on a formula simplification that was a NOOP. DAG size: 179
[2020-11-25 13:24:43,564 WARN  L188               SmtUtils]: Spent 2.87 s on a formula simplification. DAG size of input: 391 DAG size of output: 370
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8053 to 16103
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
[2020-11-25 13:24:44,340 WARN  L188               SmtUtils]: Spent 767.00 ms on a formula simplification that was a NOOP. DAG size: 132
[2020-11-25 13:24:44,736 WARN  L188               SmtUtils]: Spent 394.00 ms on a formula simplification that was a NOOP. DAG size: 217
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
[2020-11-25 13:24:45,123 WARN  L188               SmtUtils]: Spent 386.00 ms on a formula simplification that was a NOOP. DAG size: 181
[2020-11-25 13:24:46,110 WARN  L188               SmtUtils]: Spent 986.00 ms on a formula simplification. DAG size of input: 186 DAG size of output: 185
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
[2020-11-25 13:24:46,665 WARN  L188               SmtUtils]: Spent 551.00 ms on a formula simplification that was a NOOP. DAG size: 134
[2020-11-25 13:24:47,504 WARN  L188               SmtUtils]: Spent 838.00 ms on a formula simplification that was a NOOP. DAG size: 390
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 4273 to 8543
Garbage collection #7: 8543 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 8543 to 17077
[2020-11-25 13:24:49,727 WARN  L188               SmtUtils]: Spent 2.22 s on a formula simplification that was a NOOP. DAG size: 354
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1759 to 3517
Garbage collection #7: 3517 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 3517 to 7027
[2020-11-25 13:24:50,052 WARN  L188               SmtUtils]: Spent 167.00 ms on a formula simplification that was a NOOP. DAG size: 348
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4273 to 8543
[2020-11-25 13:24:50,241 WARN  L188               SmtUtils]: Spent 182.00 ms on a formula simplification that was a NOOP. DAG size: 272
[2020-11-25 13:24:50,754 WARN  L188               SmtUtils]: Spent 510.00 ms on a formula simplification. DAG size of input: 345 DAG size of output: 328
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
Garbage collection #8: 15859 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 15859 to 31699
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #7: 4357 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4357 to 8713
[2020-11-25 13:24:50,895 WARN  L188               SmtUtils]: Spent 128.00 ms on a formula simplification. DAG size of input: 194 DAG size of output: 190
[2020-11-25 13:24:51,066 WARN  L188               SmtUtils]: Spent 169.00 ms on a formula simplification that was a NOOP. DAG size: 422
Garbage collection #1: 167 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 167 to 331
Garbage collection #2: 331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 331 to 661
Garbage collection #3: 661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 661 to 1321
Garbage collection #4: 1321 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1321 to 2633
Garbage collection #5: 2633 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2633 to 5261
Garbage collection #6: 5261 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5261 to 10513
Garbage collection #7: 10513 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 10513 to 21023
[2020-11-25 13:24:51,247 WARN  L188               SmtUtils]: Spent 175.00 ms on a formula simplification that was a NOOP. DAG size: 335
[2020-11-25 13:24:56,197 WARN  L188               SmtUtils]: Spent 4.95 s on a formula simplification. DAG size of input: 649 DAG size of output: 638
Garbage collection #1: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #2: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #3: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #4: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #5: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #6: 7933 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 7933 to 15859
Garbage collection #7: 15859 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 15859 to 31699
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
[2020-11-25 13:24:57,021 WARN  L188               SmtUtils]: Spent 808.00 ms on a formula simplification that was a NOOP. DAG size: 278
[2020-11-25 13:24:57,435 WARN  L188               SmtUtils]: Spent 384.00 ms on a formula simplification that was a NOOP. DAG size: 431
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
[2020-11-25 13:24:58,809 WARN  L188               SmtUtils]: Spent 1.37 s on a formula simplification that was a NOOP. DAG size: 278
[2020-11-25 13:24:59,523 WARN  L188               SmtUtils]: Spent 712.00 ms on a formula simplification. DAG size of input: 433 DAG size of output: 432
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 9181 to 18353
[2020-11-25 13:24:59,880 WARN  L188               SmtUtils]: Spent 352.00 ms on a formula simplification that was a NOOP. DAG size: 428
[2020-11-25 13:24:59,915 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 13:24:59,976 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 13:24:59,994 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 01:24:59 BasicIcfg
[2020-11-25 13:24:59,994 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 13:24:59,995 INFO  L168              Benchmark]: Toolchain (without parser) took 34537.34 ms. Allocated memory was 1.0 GB in the beginning and 3.5 GB in the end (delta: 2.4 GB). Free memory was 924.5 MB in the beginning and 1.8 GB in the end (delta: -851.5 MB). Peak memory consumption was 2.5 GB. Max. memory is 15.3 GB.
[2020-11-25 13:24:59,995 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.14 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 13:24:59,995 INFO  L168              Benchmark]: Boogie Preprocessor took 150.95 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 903.0 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
[2020-11-25 13:24:59,996 INFO  L168              Benchmark]: UtopiaSpecLang took 86.11 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 886.9 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-25 13:24:59,996 INFO  L168              Benchmark]: Boogie Printer took 25.10 ms. Allocated memory is still 1.0 GB. Free memory was 886.9 MB in the beginning and 881.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 13:24:59,996 INFO  L168              Benchmark]: RCFGBuilder took 1286.36 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 57.7 MB). Free memory was 881.5 MB in the beginning and 822.5 MB in the end (delta: 59.0 MB). Peak memory consumption was 171.6 MB. Max. memory is 15.3 GB.
[2020-11-25 13:24:59,997 INFO  L168              Benchmark]: UtopiaLTL2Aut took 38.49 ms. Allocated memory is still 1.1 GB. Free memory was 822.5 MB in the beginning and 819.1 MB in the end (delta: 3.4 MB). Peak memory consumption was 3.4 MB. Max. memory is 15.3 GB.
[2020-11-25 13:24:59,997 INFO  L168              Benchmark]: BÃ¼chi Program Product took 3051.82 ms. Allocated memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: 451.9 MB). Free memory was 819.1 MB in the beginning and 1.2 GB in the end (delta: -341.2 MB). Peak memory consumption was 415.8 MB. Max. memory is 15.3 GB.
[2020-11-25 13:24:59,997 INFO  L168              Benchmark]: BlockEncodingV2 took 248.70 ms. Allocated memory is still 1.5 GB. Free memory was 1.2 GB in the beginning and 1.0 GB in the end (delta: 127.4 MB). Peak memory consumption was 127.4 MB. Max. memory is 15.3 GB.
[2020-11-25 13:24:59,997 INFO  L168              Benchmark]: BuchiAutomizer took 29646.91 ms. Allocated memory was 1.5 GB in the beginning and 3.5 GB in the end (delta: 1.9 GB). Free memory was 1.0 GB in the beginning and 1.8 GB in the end (delta: -743.1 MB). Peak memory consumption was 2.1 GB. Max. memory is 15.3 GB.
[2020-11-25 13:25:00,000 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    9590 locations, 16974 edges
  - StatisticsResult: Encoded RCFG
    9488 locations, 16706 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.14 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 150.95 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 903.0 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 86.11 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 886.9 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 25.10 ms. Allocated memory is still 1.0 GB. Free memory was 886.9 MB in the beginning and 881.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1286.36 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 57.7 MB). Free memory was 881.5 MB in the beginning and 822.5 MB in the end (delta: 59.0 MB). Peak memory consumption was 171.6 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 38.49 ms. Allocated memory is still 1.1 GB. Free memory was 822.5 MB in the beginning and 819.1 MB in the end (delta: 3.4 MB). Peak memory consumption was 3.4 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 3051.82 ms. Allocated memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: 451.9 MB). Free memory was 819.1 MB in the beginning and 1.2 GB in the end (delta: -341.2 MB). Peak memory consumption was 415.8 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 248.70 ms. Allocated memory is still 1.5 GB. Free memory was 1.2 GB in the beginning and 1.0 GB in the end (delta: 127.4 MB). Peak memory consumption was 127.4 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 29646.91 ms. Allocated memory was 1.5 GB in the beginning and 3.5 GB in the end (delta: 1.9 GB). Free memory was 1.0 GB in the beginning and 1.8 GB in the end (delta: -743.1 MB). Peak memory consumption was 2.1 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    3981 locations, 5225 edges
  - StatisticsResult: BuchiProgram size
    9590 locations, 16974 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 7 terminating modules (7 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.7 modules have a trivial ranking function, the largest among these consists of 10 locations. The remainder module has 5355 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 29.5s and 8 iterations.  TraceHistogramMax:24. Analysis of lassos took 26.6s. Construction of modules took 1.1s. BÃ¼chi inclusion checks took 0.7s. Highest rank in rank-based complementation 0. Minimization of det autom 7. Minimization of nondet autom 0. Automata minimization 0.4s AutomataMinimizationTime, 7 MinimizatonAttempts, 2141 StatesRemovedByMinimization, 6 NontrivialMinimizations. Non-live state removal took 0.2s Buchi closure took 0.0s. Biggest automaton had 5355 states and ocurred in iteration 7.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 37595 SDtfs, 21064 SDslu, 84638 SDs, 0 SdLazy, 8516 SolverSat, 3563 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 1.1s Time	LassoAnalysisResults: nont1 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU7 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(57896044618658097711785492504343953926634992332820282019728792003983740720138) = (new DEAPCoin)({from : 57896044618658097711785492504343953926634992332820282019728792003983740720131, _sale_owner_wallet : 57896044618658097711785492504343953926634992332820282019728792003983740720130, _unsale_owner_wallet : 57896044618658097711785492504343953926634992332820282019728792003983740720133, _group_lockup : 57896044618658097711785492504343953926634992332820282019728792003983740720132});
[L2857]               havoc __exception;
[L2858]               revert := false;
[L2859]   COND FALSE  !(__exception)
[L2897]   CALL        call DEAPCoin_DEAPCoin__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6651]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6651]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6652]   COND FALSE  !(revert)
[L6655]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6655]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6656]   COND FALSE  !(revert)
[L6659]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6659]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6660]   COND FALSE  !(revert)
[L6663]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6004]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6004]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   COND FALSE  !(revert)
[L6008]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6008]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6009]   COND FALSE  !(revert)
[L6012]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6012]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]   COND FALSE  !(revert)
[L6016]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5975]               assume msgsender_MSG != null;
[L5976]               Balance[this] := 0;
[L5977]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5978]               sum_allowed3[this] := 0;
[L6016]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6017]   COND FALSE  !(revert)
[L6663]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6664]   COND FALSE  !(revert)
[L6667]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5261]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]               assume msgsender_MSG != null;
[L5245]               Balance[this] := 0;
[L5246]               owner_Ownable[this] := null;
[L5248]               owner_Ownable[this] := msgsender_MSG;
[L5261]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   COND FALSE  !(revert)
[L6667]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6668]   COND FALSE  !(revert)
[L6671]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6264]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6264]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6265]   COND FALSE  !(revert)
[L6268]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6268]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6269]   COND FALSE  !(revert)
[L6272]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6272]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6273]   COND FALSE  !(revert)
[L6276]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6004]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6004]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   COND FALSE  !(revert)
[L6008]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6008]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6009]   COND FALSE  !(revert)
[L6012]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6012]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]   COND FALSE  !(revert)
[L6016]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5975]               assume msgsender_MSG != null;
[L5976]               Balance[this] := 0;
[L5977]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5978]               sum_allowed3[this] := 0;
[L6016]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6017]   COND FALSE  !(revert)
[L6276]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6277]   COND FALSE  !(revert)
[L6280]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5261]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]               assume msgsender_MSG != null;
[L5245]               Balance[this] := 0;
[L5246]               owner_Ownable[this] := null;
[L5248]               owner_Ownable[this] := msgsender_MSG;
[L5261]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   COND FALSE  !(revert)
[L6280]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6281]   COND FALSE  !(revert)
[L6284]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6228]               assume msgsender_MSG != null;
[L6229]               Balance[this] := 0;
[L6230]               mintingFinished_MintableToken[this] := false;
[L6284]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6285]   COND FALSE  !(revert)
[L6671]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6672]   COND FALSE  !(revert)
[L6675]   CALL        call ERC223Token_ERC223Token__success(this, msgsender_MSG, msgvalue_MSG);
[L6441]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6441]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6445]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6449]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6449]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   COND FALSE  !(revert)
[L6453]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6004]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6004]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   COND FALSE  !(revert)
[L6008]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6008]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6009]   COND FALSE  !(revert)
[L6012]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6012]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]   COND FALSE  !(revert)
[L6016]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5975]               assume msgsender_MSG != null;
[L5976]               Balance[this] := 0;
[L5977]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5978]               sum_allowed3[this] := 0;
[L6016]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6017]   COND FALSE  !(revert)
[L6453]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6454]   COND FALSE  !(revert)
[L6457]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5261]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]               assume msgsender_MSG != null;
[L5245]               Balance[this] := 0;
[L5246]               owner_Ownable[this] := null;
[L5248]               owner_Ownable[this] := msgsender_MSG;
[L5261]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   COND FALSE  !(revert)
[L6457]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6458]   COND FALSE  !(revert)
[L6461]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6264]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6264]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6265]   COND FALSE  !(revert)
[L6268]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6268]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6269]   COND FALSE  !(revert)
[L6272]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6272]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6273]   COND FALSE  !(revert)
[L6276]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6004]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6004]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   COND FALSE  !(revert)
[L6008]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6008]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6009]   COND FALSE  !(revert)
[L6012]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6012]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]   COND FALSE  !(revert)
[L6016]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5975]               assume msgsender_MSG != null;
[L5976]               Balance[this] := 0;
[L5977]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5978]               sum_allowed3[this] := 0;
[L6016]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6017]   COND FALSE  !(revert)
[L6276]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6277]   COND FALSE  !(revert)
[L6280]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5261]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]               assume msgsender_MSG != null;
[L5245]               Balance[this] := 0;
[L5246]               owner_Ownable[this] := null;
[L5248]               owner_Ownable[this] := msgsender_MSG;
[L5261]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   COND FALSE  !(revert)
[L6280]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6281]   COND FALSE  !(revert)
[L6284]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6228]               assume msgsender_MSG != null;
[L6229]               Balance[this] := 0;
[L6230]               mintingFinished_MintableToken[this] := false;
[L6284]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6285]   COND FALSE  !(revert)
[L6461]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6462]   COND FALSE  !(revert)
[L6465]   CALL        call ERC223Token_ERC223Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6402]               assume msgsender_MSG != null;
[L6403]               Balance[this] := 0;
[L6465]   RET         call ERC223Token_ERC223Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]   COND FALSE  !(revert)
[L6675]   RET         call ERC223Token_ERC223Token__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]   COND FALSE  !(revert)
[L6679]   CALL        call DEAPCoin_DEAPCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6561]               assume msgsender_MSG != null;
[L6562]               Balance[this] := 0;
[L6563]               name_DEAPCoin[this] := -635866188;
[L6564]               symbol_DEAPCoin[this] := -1031151507;
[L6565]               decimals_DEAPCoin[this] := 18;
[L6566]               __var_19 := decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6567]               INITIAL_SUPPLY_DEAPCoin[this] := 30000000000 * (nonlinearPow(10, decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6568]               __var_20 := decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6569]               INITIAL_SALE_SUPPLY_DEAPCoin[this] := 12000000000 * (nonlinearPow(10, decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6570]               INITIAL_UNSALE_SUPPLY_DEAPCoin[this] := (INITIAL_SUPPLY_DEAPCoin[this] - INITIAL_SALE_SUPPLY_DEAPCoin[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6571]               owner_wallet_DEAPCoin[this] := null;
[L6572]               unsale_owner_wallet_DEAPCoin[this] := null;
[L6574]               group_lockup_DEAPCoin[this] := _group_lockup_s1076;
[L6575]               owner_wallet_DEAPCoin[this] := _sale_owner_wallet_s1076;
[L6576]               unsale_owner_wallet_DEAPCoin[this] := _unsale_owner_wallet_s1076;
[L6577]   COND TRUE   DType[this] == DEAPCoin
[L6578]   CALL        call __var_16 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, owner_wallet_DEAPCoin[this], INITIAL_SALE_SUPPLY_DEAPCoin[this]);
[L6322]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9397]   COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L6322]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6323]   COND FALSE  !(revert)
[L6326]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9413]   COND FALSE  !(!!mintingFinished_MintableToken[this])
[L6326]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6327]   COND FALSE  !(revert)
[L6330]   CALL        call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s932);
[L5399]               c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5400]               assert c_s146 >= a_s146;
[L5401]               c_s146 := c_s146;
[L6330]   RET         call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s932);
[L6331]   COND FALSE  !(revert)
[L6334]               totalSupply__BasicToken[this] := __var_14;
[L6335]   CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s932], _amount_s932);
[L5399]               c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5400]               assert c_s146 >= a_s146;
[L5401]               c_s146 := c_s146;
[L6335]   RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s932], _amount_s932);
[L6336]   COND FALSE  !(revert)
[L6339]               sum_balances2[this] := sum_balances2[this] - balances_BasicToken[this][_to_s932];
[L6340]               balances_BasicToken[this][_to_s932] := __var_15;
[L6341]               sum_balances2[this] := sum_balances2[this] + balances_BasicToken[this][_to_s932];
[L6342]               assert { :EventEmitted "Mint_MintableToken" } true;
[L6343]               assert { :EventEmitted "Transfer_MintableToken" } true;
[L6344]               __ret_0_ := true;
[L6578]   RET         call __var_16 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, owner_wallet_DEAPCoin[this], INITIAL_SALE_SUPPLY_DEAPCoin[this]);
[L6579]   COND FALSE  !(revert)
[L6585]   COND TRUE   DType[this] == DEAPCoin
[L6586]   CALL        call __var_17 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, unsale_owner_wallet_DEAPCoin[this], INITIAL_UNSALE_SUPPLY_DEAPCoin[this]);
[L6322]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9397]   COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L6322]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6323]   COND FALSE  !(revert)
[L6326]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9413]   COND FALSE  !(!!mintingFinished_MintableToken[this])
[L6326]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6327]   COND FALSE  !(revert)
[L6330]   CALL        call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s932);
[L5399]               c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5400]               assert c_s146 >= a_s146;
[L5401]               c_s146 := c_s146;
[L6330]   RET         call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s932);
[L6331]   COND FALSE  !(revert)
[L6334]               totalSupply__BasicToken[this] := __var_14;
[L6335]   CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s932], _amount_s932);
[L5399]               c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5400]               assert c_s146 >= a_s146;
[L5401]               c_s146 := c_s146;
[L6335]   RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s932], _amount_s932);
[L6336]   COND FALSE  !(revert)
[L6339]               sum_balances2[this] := sum_balances2[this] - balances_BasicToken[this][_to_s932];
[L6340]               balances_BasicToken[this][_to_s932] := __var_15;
[L6341]               sum_balances2[this] := sum_balances2[this] + balances_BasicToken[this][_to_s932];
[L6342]               assert { :EventEmitted "Mint_MintableToken" } true;
[L6343]               assert { :EventEmitted "Transfer_MintableToken" } true;
[L6344]               __ret_0_ := true;
[L6586]   RET         call __var_17 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, unsale_owner_wallet_DEAPCoin[this], INITIAL_UNSALE_SUPPLY_DEAPCoin[this]);
[L6587]   COND FALSE  !(revert)
[L6593]   COND TRUE   DType[this] == DEAPCoin
[L6594]   CALL        call __var_18 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6365]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9397]   COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L6365]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6366]   COND FALSE  !(revert)
[L6369]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9413]   COND FALSE  !(!!mintingFinished_MintableToken[this])
[L6369]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6370]   COND FALSE  !(revert)
[L6373]               mintingFinished_MintableToken[this] := true;
[L6374]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L6375]               __ret_0_ := true;
[L6594]   RET         call __var_18 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L6679]   RET         call DEAPCoin_DEAPCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6680]   COND FALSE  !(revert)
[L2897]   RET         call DEAPCoin_DEAPCoin__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L2898]               assume !revert && gas >= 0;
[L10891]  RET         call DEAPCoin_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
DEAPCoin(57896044618658097711785492504343953926634992332820282019728792003983740720138).transfer~address~uint256.gas(3979002)({from : 57896044618658097711785492504343953926634992332820282019728792003983740720130, _to : 57896044618658097711785492504343953926634992332820282019728792003983740720130, _value : 0});
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1284 && _value_s1284 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1284 >= 0) && _value_s1284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1284] >= 0) && balances_BasicToken[this][_to_s1284] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_DEAPCoin0 := true;
[L2]                  call_transfer_DEAPCoin0 := false;
[L2]                  revert := revert_hold;
[L3029]               havoc __exception;
[L3030]               revert := false;
[L3031]   COND TRUE   __exception
[L3032]               __tmp__Balance := Balance;
[L3033]               __tmp__DType := DType;
[L3034]               __tmp__Alloc := Alloc;
[L3035]               __tmp__balance_ADDR := balance_ADDR;
[L3036]               __tmp__M_Ref_int := M_Ref_int;
[L3037]               __tmp__sum_lockup_list0 := sum_lockup_list0;
[L3038]               __tmp__M_int_bool := M_int_bool;
[L3039]               __tmp__sum_lockup_list_flag1 := sum_lockup_list_flag1;
[L3040]               __tmp__sum_balances2 := sum_balances2;
[L3041]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L3042]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3043]               __tmp__sum_allowed3 := sum_allowed3;
[L3044]               __tmp__M_int_Ref := M_int_Ref;
[L3045]               __tmp__sum := sum;
[L3046]               __tmp__M_int_int := M_int_int;
[L3047]               __tmp__Length := Length;
[L3048]               __tmp__now := now;
[L3049]               __tmp__owner_Ownable := owner_Ownable;
[L3050]               __tmp__lockup_list_GroupLockup := lockup_list_GroupLockup;
[L3051]               __tmp__lockup_list_flag_GroupLockup := lockup_list_flag_GroupLockup;
[L3052]               __tmp__user_list_GroupLockup := user_list_GroupLockup;
[L3053]               __tmp__balances_BasicToken := balances_BasicToken;
[L3054]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L3055]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L3056]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L3057]               __tmp__name_DEAPCoin := name_DEAPCoin;
[L3058]               __tmp__symbol_DEAPCoin := symbol_DEAPCoin;
[L3059]               __tmp__decimals_DEAPCoin := decimals_DEAPCoin;
[L3060]               __tmp__INITIAL_SUPPLY_DEAPCoin := INITIAL_SUPPLY_DEAPCoin;
[L3061]               __tmp__INITIAL_SALE_SUPPLY_DEAPCoin := INITIAL_SALE_SUPPLY_DEAPCoin;
[L3062]               __tmp__INITIAL_UNSALE_SUPPLY_DEAPCoin := INITIAL_UNSALE_SUPPLY_DEAPCoin;
[L3063]               __tmp__owner_wallet_DEAPCoin := owner_wallet_DEAPCoin;
[L3064]               __tmp__unsale_owner_wallet_DEAPCoin := unsale_owner_wallet_DEAPCoin;
[L3065]               __tmp__group_lockup_DEAPCoin := group_lockup_DEAPCoin;
[L3066]   CALL        call __ret_0_ := transfer~address~uint256_DEAPCoin__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L6799]               __var_25 := null;
[L6800]   COND FALSE  !(!(_to_s1284 != null))
[L6804]   COND FALSE  !(!(_value_s1284 <= __tmp__balances_BasicToken[this][msgsender_MSG]))
[L6808]   COND TRUE   !(_value_s1284 > 0)
[L6809]               revert := true;
[L3066]   RET         call __ret_0_ := transfer~address~uint256_DEAPCoin__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L3067]               assume revert || gas < 0;
[L10743]  RET         call __ret_0_transfer := transfer~address~uint256_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);

Loop:
DEAPCoin(57896044618658097711785492504343953926634992332820282019728792003983740720138).transfer~address~uint256.gas(3979001)({from : 57896044618658097711785492504343953926634992332820282019728792003983740720133, _to : 57896044618658097711785492504343953926634992332820282019728792003983740720133, _value : 0});
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1284 && _value_s1284 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1284 >= 0) && _value_s1284 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1284] >= 0) && balances_BasicToken[this][_to_s1284] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_DEAPCoin0 := true;
[L2]                  call_transfer_DEAPCoin0 := false;
[L2]                  revert := revert_hold;
[L3029]               havoc __exception;
[L3030]               revert := false;
[L3031]   COND TRUE   __exception
[L3032]               __tmp__Balance := Balance;
[L3033]               __tmp__DType := DType;
[L3034]               __tmp__Alloc := Alloc;
[L3035]               __tmp__balance_ADDR := balance_ADDR;
[L3036]               __tmp__M_Ref_int := M_Ref_int;
[L3037]               __tmp__sum_lockup_list0 := sum_lockup_list0;
[L3038]               __tmp__M_int_bool := M_int_bool;
[L3039]               __tmp__sum_lockup_list_flag1 := sum_lockup_list_flag1;
[L3040]               __tmp__sum_balances2 := sum_balances2;
[L3041]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L3042]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3043]               __tmp__sum_allowed3 := sum_allowed3;
[L3044]               __tmp__M_int_Ref := M_int_Ref;
[L3045]               __tmp__sum := sum;
[L3046]               __tmp__M_int_int := M_int_int;
[L3047]               __tmp__Length := Length;
[L3048]               __tmp__now := now;
[L3049]               __tmp__owner_Ownable := owner_Ownable;
[L3050]               __tmp__lockup_list_GroupLockup := lockup_list_GroupLockup;
[L3051]               __tmp__lockup_list_flag_GroupLockup := lockup_list_flag_GroupLockup;
[L3052]               __tmp__user_list_GroupLockup := user_list_GroupLockup;
[L3053]               __tmp__balances_BasicToken := balances_BasicToken;
[L3054]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L3055]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L3056]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L3057]               __tmp__name_DEAPCoin := name_DEAPCoin;
[L3058]               __tmp__symbol_DEAPCoin := symbol_DEAPCoin;
[L3059]               __tmp__decimals_DEAPCoin := decimals_DEAPCoin;
[L3060]               __tmp__INITIAL_SUPPLY_DEAPCoin := INITIAL_SUPPLY_DEAPCoin;
[L3061]               __tmp__INITIAL_SALE_SUPPLY_DEAPCoin := INITIAL_SALE_SUPPLY_DEAPCoin;
[L3062]               __tmp__INITIAL_UNSALE_SUPPLY_DEAPCoin := INITIAL_UNSALE_SUPPLY_DEAPCoin;
[L3063]               __tmp__owner_wallet_DEAPCoin := owner_wallet_DEAPCoin;
[L3064]               __tmp__unsale_owner_wallet_DEAPCoin := unsale_owner_wallet_DEAPCoin;
[L3065]               __tmp__group_lockup_DEAPCoin := group_lockup_DEAPCoin;
[L3066]   CALL        call __ret_0_ := transfer~address~uint256_DEAPCoin__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L6799]               __var_25 := null;
[L6800]   COND FALSE  !(!(_to_s1284 != null))
[L6804]   COND FALSE  !(!(_value_s1284 <= __tmp__balances_BasicToken[this][msgsender_MSG]))
[L6808]   COND TRUE   !(_value_s1284 > 0)
[L6809]               revert := true;
[L3066]   RET         call __ret_0_ := transfer~address~uint256_DEAPCoin__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);
[L3067]               assume revert || gas < 0;
[L10743]  RET         call __ret_0_transfer := transfer~address~uint256_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _to_s1284, _value_s1284);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
