This is Ultimate 0.1.24-f1553f5-m
[2020-11-24 22:28:12,712 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-24 22:28:12,713 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-24 22:28:12,725 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-24 22:28:12,726 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-24 22:28:12,726 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-24 22:28:12,727 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-24 22:28:12,729 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-24 22:28:12,730 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-24 22:28:12,731 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-24 22:28:12,732 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-24 22:28:12,732 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-24 22:28:12,733 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-24 22:28:12,734 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-24 22:28:12,735 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-24 22:28:12,735 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-24 22:28:12,736 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-24 22:28:12,737 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-24 22:28:12,739 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-24 22:28:12,741 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-24 22:28:12,742 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-24 22:28:12,743 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-24 22:28:12,746 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-24 22:28:12,746 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-24 22:28:12,746 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-24 22:28:12,747 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-24 22:28:12,747 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-24 22:28:12,748 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-24 22:28:12,749 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-24 22:28:12,749 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-24 22:28:12,750 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-24 22:28:12,751 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-24 22:28:12,751 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-24 22:28:12,752 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-24 22:28:12,753 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-24 22:28:12,753 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-24 22:28:12,754 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-24 22:28:12,754 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-24 22:28:12,755 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-24 22:28:12,756 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-24 22:28:12,756 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-24 22:28:12,756 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-24 22:28:12,764 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-24 22:28:12,764 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-24 22:28:12,765 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-24 22:28:12,765 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-24 22:28:12,765 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-24 22:28:12,766 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-24 22:28:12,766 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-24 22:28:12,766 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-24 22:28:12,766 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-24 22:28:12,766 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-24 22:28:12,766 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-24 22:28:12,766 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-24 22:28:12,766 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-24 22:28:12,767 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-24 22:28:12,767 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-24 22:28:12,767 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-24 22:28:12,767 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-24 22:28:12,767 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-24 22:28:12,767 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-24 22:28:12,767 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-24 22:28:12,767 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-24 22:28:12,768 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-24 22:28:12,768 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-24 22:28:12,768 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-24 22:28:12,768 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-24 22:28:12,768 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-24 22:28:12,798 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-24 22:28:12,813 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-24 22:28:12,816 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-24 22:28:12,817 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-24 22:28:12,817 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-24 22:28:12,818 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transfer-fail.bpl
[2020-11-24 22:28:12,818 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transfer-fail.bpl'
[2020-11-24 22:28:12,921 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-24 22:28:12,923 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-24 22:28:12,923 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-24 22:28:12,923 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-24 22:28:12,923 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-24 22:28:12,940 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 10:28:12" (1/1) ...
[2020-11-24 22:28:12,942 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 10:28:12" (1/1) ...
[2020-11-24 22:28:12,983 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 10:28:12" (1/1) ...
[2020-11-24 22:28:12,984 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 10:28:12" (1/1) ...
[2020-11-24 22:28:13,016 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 10:28:12" (1/1) ...
[2020-11-24 22:28:13,029 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 10:28:12" (1/1) ...
[2020-11-24 22:28:13,042 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 10:28:12" (1/1) ...
[2020-11-24 22:28:13,057 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-24 22:28:13,058 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-24 22:28:13,058 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-24 22:28:13,060 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-24 22:28:13,064 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 10:28:12" (1/1) ...
[2020-11-24 22:28:13,095 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC777.transfer(to, value), msg.sender != to && (value > _balances_ERC777[this][msg.sender] || _balances_ERC777[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC777[this][to] >= 0 && _balances_ERC777[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC777[this][msg.sender] >= 0 &&  _balances_ERC777[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC777.transfer)))
[2020-11-24 22:28:13,102 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC777.transfer(to, value), msg.sender != to && (value > _balances_ERC777[this][msg.sender] || _balances_ERC777[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC777[this][to] >= 0 && _balances_ERC777[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC777[this][msg.sender] >= 0 &&  _balances_ERC777[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC777.transfer)))
[2020-11-24 22:28:13,109 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC777.transfer(to, value), msg.sender != to && (value > _balances_ERC777[this][msg.sender] || _balances_ERC777[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC777[this][to] >= 0 && _balances_ERC777[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC777[this][msg.sender] >= 0 &&  _balances_ERC777[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC777.transfer)))
[2020-11-24 22:28:13,120 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender!=recipient_s739 && ( amount_s739>_balances_ERC777[this][msg.sender] || ( _balances_ERC777[this][recipient_s739] + amount_s739 )>=115792089237316195423570985008687907853269984665640564039457584007913129639936 ) ) && amount_s739>=0 ) && amount_s739<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC777[this][recipient_s739]>=0 ) && _balances_ERC777[this][recipient_s739]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC777[this][msg.sender]>=0 ) && _balances_ERC777[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC777>],IdentifierExpression[recipient_s739,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC777>]],BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[amount_s739,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC777>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC777,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC777>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC777>]]]],BinaryExpression[COMPGEQ,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC777,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC777>]]],[IdentifierExpression[recipient_s739,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC777>]]],IdentifierExpression[amount_s739,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC777>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]],BinaryExpression[COMPGEQ,IdentifierExpression[amount_s739,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC777>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[amount_s739,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC777>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC777,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC777>]]],[IdentifierExpression[recipient_s739,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC777>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC777,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC777>]]],[IdentifierExpression[recipient_s739,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC777>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC777,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC777>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC777>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC777,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC777>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC777>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-24 22:28:13,127 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC777.transfer(to, value), msg.sender != to && (value > _balances_ERC777[this][msg.sender] || _balances_ERC777[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC777[this][to] >= 0 && _balances_ERC777[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC777[this][msg.sender] >= 0 &&  _balances_ERC777[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC777.transfer)))
[2020-11-24 22:28:13,127 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_ERC7770) ==> ( <>AP(fail_transfer_ERC7770) ) ) )
Executed UtopiaSpecLang
[2020-11-24 22:28:13,148 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 10:28:13 PropertyContainer
[2020-11-24 22:28:13,148 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-24 22:28:13,148 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-24 22:28:13,148 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-24 22:28:13,148 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-24 22:28:13,149 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 10:28:12" (1/2) ...
[2020-11-24 22:28:13,150 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-24 22:28:13,150 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-24 22:28:13,169 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 10:28:13" (2/2) ...
[2020-11-24 22:28:13,169 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-24 22:28:13,170 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-24 22:28:13,170 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-24 22:28:13,170 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-24 22:28:13,171 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 10:28:12" (1/2) ...
[2020-11-24 22:28:13,225 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-24 22:28:13,225 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC777_IERC777_NoBaseCtor__success
[2020-11-24 22:28:13,225 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC777_IERC777
[2020-11-24 22:28:13,225 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC777_IERC777
[2020-11-24 22:28:13,225 INFO  L130     BoogieDeclarations]: Found specification of procedure name_IERC777
[2020-11-24 22:28:13,226 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_IERC777
[2020-11-24 22:28:13,226 INFO  L130     BoogieDeclarations]: Found specification of procedure granularity_IERC777
[2020-11-24 22:28:13,226 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC777
[2020-11-24 22:28:13,226 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC777
[2020-11-24 22:28:13,226 INFO  L130     BoogieDeclarations]: Found specification of procedure send~address~uint256~bytes_IERC777
[2020-11-24 22:28:13,226 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256~bytes_IERC777
[2020-11-24 22:28:13,226 INFO  L130     BoogieDeclarations]: Found specification of procedure isOperatorFor~address~address_IERC777
[2020-11-24 22:28:13,226 INFO  L130     BoogieDeclarations]: Found specification of procedure authorizeOperator~address_IERC777
[2020-11-24 22:28:13,226 INFO  L130     BoogieDeclarations]: Found specification of procedure revokeOperator~address_IERC777
[2020-11-24 22:28:13,227 INFO  L130     BoogieDeclarations]: Found specification of procedure defaultOperators_IERC777
[2020-11-24 22:28:13,227 INFO  L130     BoogieDeclarations]: Found specification of procedure operatorSend~address~address~uint256~bytes~bytes_IERC777
[2020-11-24 22:28:13,227 INFO  L130     BoogieDeclarations]: Found specification of procedure operatorBurn~address~uint256~bytes~bytes_IERC777
[2020-11-24 22:28:13,227 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC777Recipient_IERC777Recipient_NoBaseCtor__success
[2020-11-24 22:28:13,228 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC777Recipient_IERC777Recipient
[2020-11-24 22:28:13,228 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC777Recipient_IERC777Recipient
[2020-11-24 22:28:13,228 INFO  L130     BoogieDeclarations]: Found specification of procedure tokensReceived~address~address~address~uint256~bytes~bytes_IERC777Recipient
[2020-11-24 22:28:13,228 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC777Sender_IERC777Sender_NoBaseCtor__success
[2020-11-24 22:28:13,228 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC777Sender_IERC777Sender
[2020-11-24 22:28:13,228 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC777Sender_IERC777Sender
[2020-11-24 22:28:13,228 INFO  L130     BoogieDeclarations]: Found specification of procedure tokensToSend~address~address~address~uint256~bytes~bytes_IERC777Sender
[2020-11-24 22:28:13,228 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-24 22:28:13,228 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-24 22:28:13,228 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-24 22:28:13,229 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-24 22:28:13,229 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-24 22:28:13,229 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-24 22:28:13,229 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-24 22:28:13,229 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-24 22:28:13,229 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-24 22:28:13,229 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 22:28:13,229 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-24 22:28:13,229 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-24 22:28:13,229 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 22:28:13,230 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 22:28:13,230 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 22:28:13,230 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 22:28:13,230 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-24 22:28:13,230 INFO  L130     BoogieDeclarations]: Found specification of procedure Address_Address_NoBaseCtor__success
[2020-11-24 22:28:13,230 INFO  L130     BoogieDeclarations]: Found specification of procedure Address_Address
[2020-11-24 22:28:13,230 INFO  L138     BoogieDeclarations]: Found implementation of procedure Address_Address
[2020-11-24 22:28:13,230 INFO  L130     BoogieDeclarations]: Found specification of procedure isContract~address_Address__success
[2020-11-24 22:28:13,230 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC1820Registry_IERC1820Registry_NoBaseCtor__success
[2020-11-24 22:28:13,230 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC1820Registry_IERC1820Registry
[2020-11-24 22:28:13,231 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC1820Registry_IERC1820Registry
[2020-11-24 22:28:13,231 INFO  L130     BoogieDeclarations]: Found specification of procedure setManager~address~address_IERC1820Registry
[2020-11-24 22:28:13,231 INFO  L130     BoogieDeclarations]: Found specification of procedure getManager~address_IERC1820Registry
[2020-11-24 22:28:13,231 INFO  L130     BoogieDeclarations]: Found specification of procedure setInterfaceImplementer~address~bytes32~address_IERC1820Registry
[2020-11-24 22:28:13,231 INFO  L130     BoogieDeclarations]: Found specification of procedure getInterfaceImplementer~address~bytes32_IERC1820Registry
[2020-11-24 22:28:13,231 INFO  L130     BoogieDeclarations]: Found specification of procedure interfaceHash~string_IERC1820Registry
[2020-11-24 22:28:13,231 INFO  L130     BoogieDeclarations]: Found specification of procedure updateERC165Cache~address~bytes4_IERC1820Registry
[2020-11-24 22:28:13,231 INFO  L130     BoogieDeclarations]: Found specification of procedure implementsERC165Interface~address~bytes4_IERC1820Registry
[2020-11-24 22:28:13,231 INFO  L130     BoogieDeclarations]: Found specification of procedure implementsERC165InterfaceNoCache~address~bytes4_IERC1820Registry
[2020-11-24 22:28:13,231 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC777_ERC777_NoBaseCtor__success
[2020-11-24 22:28:13,232 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC777_ERC777
[2020-11-24 22:28:13,232 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC777_ERC777
[2020-11-24 22:28:13,232 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC777
[2020-11-24 22:28:13,232 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC777
[2020-11-24 22:28:13,232 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC777
[2020-11-24 22:28:13,232 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC777
[2020-11-24 22:28:13,232 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC777
[2020-11-24 22:28:13,232 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC777
[2020-11-24 22:28:13,233 INFO  L130     BoogieDeclarations]: Found specification of procedure granularity_ERC777
[2020-11-24 22:28:13,233 INFO  L138     BoogieDeclarations]: Found implementation of procedure granularity_ERC777
[2020-11-24 22:28:13,233 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC777
[2020-11-24 22:28:13,233 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC777
[2020-11-24 22:28:13,233 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC777
[2020-11-24 22:28:13,233 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC777
[2020-11-24 22:28:13,233 INFO  L130     BoogieDeclarations]: Found specification of procedure send~address~uint256~bytes_ERC777
[2020-11-24 22:28:13,233 INFO  L138     BoogieDeclarations]: Found implementation of procedure send~address~uint256~bytes_ERC777
[2020-11-24 22:28:13,233 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC777
[2020-11-24 22:28:13,233 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC777
[2020-11-24 22:28:13,234 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256~bytes_ERC777
[2020-11-24 22:28:13,234 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256~bytes_ERC777
[2020-11-24 22:28:13,234 INFO  L130     BoogieDeclarations]: Found specification of procedure isOperatorFor~address~address_ERC777
[2020-11-24 22:28:13,234 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOperatorFor~address~address_ERC777
[2020-11-24 22:28:13,234 INFO  L130     BoogieDeclarations]: Found specification of procedure authorizeOperator~address_ERC777
[2020-11-24 22:28:13,234 INFO  L138     BoogieDeclarations]: Found implementation of procedure authorizeOperator~address_ERC777
[2020-11-24 22:28:13,234 INFO  L130     BoogieDeclarations]: Found specification of procedure revokeOperator~address_ERC777
[2020-11-24 22:28:13,234 INFO  L138     BoogieDeclarations]: Found implementation of procedure revokeOperator~address_ERC777
[2020-11-24 22:28:13,234 INFO  L130     BoogieDeclarations]: Found specification of procedure defaultOperators_ERC777
[2020-11-24 22:28:13,234 INFO  L138     BoogieDeclarations]: Found implementation of procedure defaultOperators_ERC777
[2020-11-24 22:28:13,235 INFO  L130     BoogieDeclarations]: Found specification of procedure operatorSend~address~address~uint256~bytes~bytes_ERC777
[2020-11-24 22:28:13,235 INFO  L138     BoogieDeclarations]: Found implementation of procedure operatorSend~address~address~uint256~bytes~bytes_ERC777
[2020-11-24 22:28:13,235 INFO  L130     BoogieDeclarations]: Found specification of procedure operatorBurn~address~uint256~bytes~bytes_ERC777
[2020-11-24 22:28:13,235 INFO  L138     BoogieDeclarations]: Found implementation of procedure operatorBurn~address~uint256~bytes~bytes_ERC777
[2020-11-24 22:28:13,235 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC777
[2020-11-24 22:28:13,235 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC777
[2020-11-24 22:28:13,235 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC777
[2020-11-24 22:28:13,235 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC777
[2020-11-24 22:28:13,235 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC777
[2020-11-24 22:28:13,235 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC777
[2020-11-24 22:28:13,236 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~address~uint256~bytes~bytes_ERC777__success
[2020-11-24 22:28:13,236 INFO  L130     BoogieDeclarations]: Found specification of procedure _send~address~address~address~uint256~bytes~bytes~bool_ERC777__success
[2020-11-24 22:28:13,236 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~address~uint256~bytes~bytes_ERC777__success
[2020-11-24 22:28:13,236 INFO  L130     BoogieDeclarations]: Found specification of procedure _move~address~address~address~uint256~bytes~bytes_ERC777__success
[2020-11-24 22:28:13,236 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC777__success
[2020-11-24 22:28:13,236 INFO  L130     BoogieDeclarations]: Found specification of procedure _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success
[2020-11-24 22:28:13,236 INFO  L130     BoogieDeclarations]: Found specification of procedure _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success
[2020-11-24 22:28:13,236 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 22:28:13,236 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-24 22:28:13,236 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-24 22:28:13,237 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-24 22:28:13,237 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-24 22:28:13,237 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable
[2020-11-24 22:28:13,237 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable
[2020-11-24 22:28:13,237 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable
[2020-11-24 22:28:13,237 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable
[2020-11-24 22:28:13,237 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-24 22:28:13,237 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-24 22:28:13,237 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__success
[2020-11-24 22:28:13,238 INFO  L130     BoogieDeclarations]: Found specification of procedure MMM_MMM_NoBaseCtor__success
[2020-11-24 22:28:13,238 INFO  L130     BoogieDeclarations]: Found specification of procedure MMM_MMM
[2020-11-24 22:28:13,238 INFO  L138     BoogieDeclarations]: Found implementation of procedure MMM_MMM
[2020-11-24 22:28:13,238 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MMM
[2020-11-24 22:28:13,238 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MMM
[2020-11-24 22:28:13,238 INFO  L130     BoogieDeclarations]: Found specification of procedure _maxSupply_MMM
[2020-11-24 22:28:13,238 INFO  L138     BoogieDeclarations]: Found implementation of procedure _maxSupply_MMM
[2020-11-24 22:28:13,239 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-24 22:28:13,239 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-24 22:28:13,239 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-24 22:28:13,239 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-24 22:28:13,239 INFO  L130     BoogieDeclarations]: Found specification of procedure noOverflow_pre__success
[2020-11-24 22:28:13,239 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC777
[2020-11-24 22:28:13,239 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC777
[2020-11-24 22:28:13,239 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC777Recipient
[2020-11-24 22:28:13,239 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC777Recipient
[2020-11-24 22:28:13,239 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC777Sender
[2020-11-24 22:28:13,240 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC777Sender
[2020-11-24 22:28:13,240 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-24 22:28:13,240 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-24 22:28:13,240 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-24 22:28:13,240 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-24 22:28:13,240 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Address
[2020-11-24 22:28:13,240 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Address
[2020-11-24 22:28:13,240 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC1820Registry
[2020-11-24 22:28:13,240 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC1820Registry
[2020-11-24 22:28:13,241 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC777
[2020-11-24 22:28:13,241 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC777
[2020-11-24 22:28:13,241 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-24 22:28:13,241 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-24 22:28:13,241 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MMM
[2020-11-24 22:28:13,241 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-24 22:28:13,241 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-24 22:28:13,241 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC777_IERC777_NoBaseCtor__fail
[2020-11-24 22:28:13,241 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC777_IERC777__success
[2020-11-24 22:28:13,242 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC777_IERC777__fail
[2020-11-24 22:28:13,242 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC777Recipient_IERC777Recipient_NoBaseCtor__fail
[2020-11-24 22:28:13,242 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC777Recipient_IERC777Recipient__success
[2020-11-24 22:28:13,242 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC777Recipient_IERC777Recipient__fail
[2020-11-24 22:28:13,242 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC777Sender_IERC777Sender_NoBaseCtor__fail
[2020-11-24 22:28:13,242 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC777Sender_IERC777Sender__success
[2020-11-24 22:28:13,242 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC777Sender_IERC777Sender__fail
[2020-11-24 22:28:13,242 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-24 22:28:13,242 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-24 22:28:13,242 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-24 22:28:13,243 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 22:28:13,243 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-24 22:28:13,243 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-24 22:28:13,243 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 22:28:13,243 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 22:28:13,243 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 22:28:13,243 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 22:28:13,243 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-24 22:28:13,243 INFO  L130     BoogieDeclarations]: Found specification of procedure Address_Address_NoBaseCtor__fail
[2020-11-24 22:28:13,243 INFO  L130     BoogieDeclarations]: Found specification of procedure Address_Address__success
[2020-11-24 22:28:13,244 INFO  L130     BoogieDeclarations]: Found specification of procedure Address_Address__fail
[2020-11-24 22:28:13,244 INFO  L130     BoogieDeclarations]: Found specification of procedure isContract~address_Address__fail
[2020-11-24 22:28:13,244 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC1820Registry_IERC1820Registry_NoBaseCtor__fail
[2020-11-24 22:28:13,244 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC1820Registry_IERC1820Registry__success
[2020-11-24 22:28:13,244 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC1820Registry_IERC1820Registry__fail
[2020-11-24 22:28:13,244 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC777_ERC777_NoBaseCtor__fail
[2020-11-24 22:28:13,244 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC777_ERC777__success
[2020-11-24 22:28:13,244 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC777_ERC777__fail
[2020-11-24 22:28:13,244 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC777__success
[2020-11-24 22:28:13,244 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC777__fail
[2020-11-24 22:28:13,244 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC777__success
[2020-11-24 22:28:13,245 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC777__fail
[2020-11-24 22:28:13,245 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC777__success
[2020-11-24 22:28:13,245 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC777__fail
[2020-11-24 22:28:13,245 INFO  L130     BoogieDeclarations]: Found specification of procedure granularity_ERC777__success
[2020-11-24 22:28:13,245 INFO  L130     BoogieDeclarations]: Found specification of procedure granularity_ERC777__fail
[2020-11-24 22:28:13,245 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC777__success
[2020-11-24 22:28:13,245 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC777__fail
[2020-11-24 22:28:13,245 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC777__success
[2020-11-24 22:28:13,245 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC777__fail
[2020-11-24 22:28:13,245 INFO  L130     BoogieDeclarations]: Found specification of procedure send~address~uint256~bytes_ERC777__success
[2020-11-24 22:28:13,245 INFO  L130     BoogieDeclarations]: Found specification of procedure send~address~uint256~bytes_ERC777__fail
[2020-11-24 22:28:13,245 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC777__success
[2020-11-24 22:28:13,246 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC777__fail
[2020-11-24 22:28:13,246 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256~bytes_ERC777__success
[2020-11-24 22:28:13,246 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256~bytes_ERC777__fail
[2020-11-24 22:28:13,246 INFO  L130     BoogieDeclarations]: Found specification of procedure isOperatorFor~address~address_ERC777__success
[2020-11-24 22:28:13,246 INFO  L130     BoogieDeclarations]: Found specification of procedure isOperatorFor~address~address_ERC777__fail
[2020-11-24 22:28:13,246 INFO  L130     BoogieDeclarations]: Found specification of procedure authorizeOperator~address_ERC777__success
[2020-11-24 22:28:13,246 INFO  L130     BoogieDeclarations]: Found specification of procedure authorizeOperator~address_ERC777__fail
[2020-11-24 22:28:13,246 INFO  L130     BoogieDeclarations]: Found specification of procedure revokeOperator~address_ERC777__success
[2020-11-24 22:28:13,246 INFO  L130     BoogieDeclarations]: Found specification of procedure revokeOperator~address_ERC777__fail
[2020-11-24 22:28:13,246 INFO  L130     BoogieDeclarations]: Found specification of procedure defaultOperators_ERC777__success
[2020-11-24 22:28:13,246 INFO  L130     BoogieDeclarations]: Found specification of procedure defaultOperators_ERC777__fail
[2020-11-24 22:28:13,247 INFO  L130     BoogieDeclarations]: Found specification of procedure operatorSend~address~address~uint256~bytes~bytes_ERC777__success
[2020-11-24 22:28:13,247 INFO  L130     BoogieDeclarations]: Found specification of procedure operatorSend~address~address~uint256~bytes~bytes_ERC777__fail
[2020-11-24 22:28:13,247 INFO  L130     BoogieDeclarations]: Found specification of procedure operatorBurn~address~uint256~bytes~bytes_ERC777__success
[2020-11-24 22:28:13,247 INFO  L130     BoogieDeclarations]: Found specification of procedure operatorBurn~address~uint256~bytes~bytes_ERC777__fail
[2020-11-24 22:28:13,247 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC777__success
[2020-11-24 22:28:13,247 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC777__fail
[2020-11-24 22:28:13,247 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC777__success
[2020-11-24 22:28:13,247 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC777__fail
[2020-11-24 22:28:13,247 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC777__success
[2020-11-24 22:28:13,247 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC777__fail
[2020-11-24 22:28:13,247 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~address~uint256~bytes~bytes_ERC777__fail
[2020-11-24 22:28:13,247 INFO  L130     BoogieDeclarations]: Found specification of procedure _send~address~address~address~uint256~bytes~bytes~bool_ERC777__fail
[2020-11-24 22:28:13,248 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~address~uint256~bytes~bytes_ERC777__fail
[2020-11-24 22:28:13,248 INFO  L130     BoogieDeclarations]: Found specification of procedure _move~address~address~address~uint256~bytes~bytes_ERC777__fail
[2020-11-24 22:28:13,248 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC777__fail
[2020-11-24 22:28:13,248 INFO  L130     BoogieDeclarations]: Found specification of procedure _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__fail
[2020-11-24 22:28:13,248 INFO  L130     BoogieDeclarations]: Found specification of procedure _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__fail
[2020-11-24 22:28:13,248 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 22:28:13,248 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-24 22:28:13,248 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-24 22:28:13,248 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-24 22:28:13,248 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-24 22:28:13,248 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable__success
[2020-11-24 22:28:13,249 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable__fail
[2020-11-24 22:28:13,249 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__success
[2020-11-24 22:28:13,249 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__fail
[2020-11-24 22:28:13,249 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-24 22:28:13,249 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-24 22:28:13,249 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__fail
[2020-11-24 22:28:13,249 INFO  L130     BoogieDeclarations]: Found specification of procedure MMM_MMM_NoBaseCtor__fail
[2020-11-24 22:28:13,249 INFO  L130     BoogieDeclarations]: Found specification of procedure MMM_MMM__success
[2020-11-24 22:28:13,249 INFO  L130     BoogieDeclarations]: Found specification of procedure MMM_MMM__fail
[2020-11-24 22:28:13,249 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MMM__success
[2020-11-24 22:28:13,249 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MMM__fail
[2020-11-24 22:28:13,249 INFO  L130     BoogieDeclarations]: Found specification of procedure _maxSupply_MMM__success
[2020-11-24 22:28:13,250 INFO  L130     BoogieDeclarations]: Found specification of procedure _maxSupply_MMM__fail
[2020-11-24 22:28:13,250 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-24 22:28:13,250 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-24 22:28:13,250 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-24 22:28:13,250 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-24 22:28:13,250 INFO  L130     BoogieDeclarations]: Found specification of procedure noOverflow_pre__fail
[2020-11-24 22:28:13,250 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-24 22:28:13,250 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-24 22:28:13,250 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC777_IERC777_NoBaseCtor__fail
[2020-11-24 22:28:13,250 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC777_IERC777_NoBaseCtor__success
[2020-11-24 22:28:13,250 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC777_IERC777__fail
[2020-11-24 22:28:13,250 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC777_IERC777__success
[2020-11-24 22:28:13,251 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC777Recipient_IERC777Recipient_NoBaseCtor__fail
[2020-11-24 22:28:13,251 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC777Recipient_IERC777Recipient_NoBaseCtor__success
[2020-11-24 22:28:13,251 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC777Recipient_IERC777Recipient__fail
[2020-11-24 22:28:13,251 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC777Recipient_IERC777Recipient__success
[2020-11-24 22:28:13,251 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC777Sender_IERC777Sender_NoBaseCtor__fail
[2020-11-24 22:28:13,251 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC777Sender_IERC777Sender_NoBaseCtor__success
[2020-11-24 22:28:13,251 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC777Sender_IERC777Sender__fail
[2020-11-24 22:28:13,251 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC777Sender_IERC777Sender__success
[2020-11-24 22:28:13,251 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-24 22:28:13,251 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-24 22:28:13,251 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-24 22:28:13,252 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-24 22:28:13,252 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 22:28:13,252 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 22:28:13,252 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-24 22:28:13,252 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-24 22:28:13,252 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 22:28:13,252 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 22:28:13,252 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 22:28:13,252 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 22:28:13,252 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 22:28:13,252 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 22:28:13,253 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 22:28:13,253 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 22:28:13,253 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-24 22:28:13,253 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-24 22:28:13,253 INFO  L138     BoogieDeclarations]: Found implementation of procedure Address_Address_NoBaseCtor__fail
[2020-11-24 22:28:13,253 INFO  L138     BoogieDeclarations]: Found implementation of procedure Address_Address_NoBaseCtor__success
[2020-11-24 22:28:13,253 INFO  L138     BoogieDeclarations]: Found implementation of procedure Address_Address__fail
[2020-11-24 22:28:13,253 INFO  L138     BoogieDeclarations]: Found implementation of procedure Address_Address__success
[2020-11-24 22:28:13,253 INFO  L138     BoogieDeclarations]: Found implementation of procedure isContract~address_Address__fail
[2020-11-24 22:28:13,253 INFO  L138     BoogieDeclarations]: Found implementation of procedure isContract~address_Address__success
[2020-11-24 22:28:13,254 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC1820Registry_IERC1820Registry_NoBaseCtor__fail
[2020-11-24 22:28:13,254 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC1820Registry_IERC1820Registry_NoBaseCtor__success
[2020-11-24 22:28:13,254 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC1820Registry_IERC1820Registry__fail
[2020-11-24 22:28:13,254 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC1820Registry_IERC1820Registry__success
[2020-11-24 22:28:13,254 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC777_ERC777_NoBaseCtor__fail
[2020-11-24 22:28:13,254 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC777_ERC777_NoBaseCtor__success
[2020-11-24 22:28:13,254 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC777_ERC777__fail
[2020-11-24 22:28:13,254 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC777_ERC777__success
[2020-11-24 22:28:13,254 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC777__fail
[2020-11-24 22:28:13,254 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC777__success
[2020-11-24 22:28:13,254 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC777__fail
[2020-11-24 22:28:13,255 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC777__success
[2020-11-24 22:28:13,255 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC777__fail
[2020-11-24 22:28:13,255 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC777__success
[2020-11-24 22:28:13,255 INFO  L138     BoogieDeclarations]: Found implementation of procedure granularity_ERC777__fail
[2020-11-24 22:28:13,255 INFO  L138     BoogieDeclarations]: Found implementation of procedure granularity_ERC777__success
[2020-11-24 22:28:13,255 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC777__fail
[2020-11-24 22:28:13,255 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC777__success
[2020-11-24 22:28:13,255 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC777__fail
[2020-11-24 22:28:13,255 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC777__success
[2020-11-24 22:28:13,255 INFO  L138     BoogieDeclarations]: Found implementation of procedure send~address~uint256~bytes_ERC777__fail
[2020-11-24 22:28:13,256 INFO  L138     BoogieDeclarations]: Found implementation of procedure send~address~uint256~bytes_ERC777__success
[2020-11-24 22:28:13,256 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC777__fail
[2020-11-24 22:28:13,256 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC777__success
[2020-11-24 22:28:13,256 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256~bytes_ERC777__fail
[2020-11-24 22:28:13,256 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256~bytes_ERC777__success
[2020-11-24 22:28:13,256 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOperatorFor~address~address_ERC777__fail
[2020-11-24 22:28:13,256 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOperatorFor~address~address_ERC777__success
[2020-11-24 22:28:13,256 INFO  L138     BoogieDeclarations]: Found implementation of procedure authorizeOperator~address_ERC777__fail
[2020-11-24 22:28:13,256 INFO  L138     BoogieDeclarations]: Found implementation of procedure authorizeOperator~address_ERC777__success
[2020-11-24 22:28:13,256 INFO  L138     BoogieDeclarations]: Found implementation of procedure revokeOperator~address_ERC777__fail
[2020-11-24 22:28:13,256 INFO  L138     BoogieDeclarations]: Found implementation of procedure revokeOperator~address_ERC777__success
[2020-11-24 22:28:13,256 INFO  L138     BoogieDeclarations]: Found implementation of procedure defaultOperators_ERC777__fail
[2020-11-24 22:28:13,257 INFO  L138     BoogieDeclarations]: Found implementation of procedure defaultOperators_ERC777__success
[2020-11-24 22:28:13,257 INFO  L138     BoogieDeclarations]: Found implementation of procedure operatorSend~address~address~uint256~bytes~bytes_ERC777__fail
[2020-11-24 22:28:13,257 INFO  L138     BoogieDeclarations]: Found implementation of procedure operatorSend~address~address~uint256~bytes~bytes_ERC777__success
[2020-11-24 22:28:13,257 INFO  L138     BoogieDeclarations]: Found implementation of procedure operatorBurn~address~uint256~bytes~bytes_ERC777__fail
[2020-11-24 22:28:13,257 INFO  L138     BoogieDeclarations]: Found implementation of procedure operatorBurn~address~uint256~bytes~bytes_ERC777__success
[2020-11-24 22:28:13,257 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC777__fail
[2020-11-24 22:28:13,257 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC777__success
[2020-11-24 22:28:13,257 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC777__fail
[2020-11-24 22:28:13,257 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC777__success
[2020-11-24 22:28:13,257 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC777__fail
[2020-11-24 22:28:13,257 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC777__success
[2020-11-24 22:28:13,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~address~uint256~bytes~bytes_ERC777__fail
[2020-11-24 22:28:13,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~address~uint256~bytes~bytes_ERC777__success
[2020-11-24 22:28:13,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure _send~address~address~address~uint256~bytes~bytes~bool_ERC777__fail
[2020-11-24 22:28:13,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure _send~address~address~address~uint256~bytes~bytes~bool_ERC777__success
[2020-11-24 22:28:13,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~address~uint256~bytes~bytes_ERC777__fail
[2020-11-24 22:28:13,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~address~uint256~bytes~bytes_ERC777__success
[2020-11-24 22:28:13,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure _move~address~address~address~uint256~bytes~bytes_ERC777__fail
[2020-11-24 22:28:13,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure _move~address~address~address~uint256~bytes~bytes_ERC777__success
[2020-11-24 22:28:13,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC777__fail
[2020-11-24 22:28:13,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC777__success
[2020-11-24 22:28:13,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__fail
[2020-11-24 22:28:13,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success
[2020-11-24 22:28:13,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__fail
[2020-11-24 22:28:13,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success
[2020-11-24 22:28:13,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 22:28:13,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 22:28:13,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-24 22:28:13,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-24 22:28:13,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-24 22:28:13,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-24 22:28:13,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable__fail
[2020-11-24 22:28:13,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable__success
[2020-11-24 22:28:13,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__fail
[2020-11-24 22:28:13,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__success
[2020-11-24 22:28:13,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-24 22:28:13,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-24 22:28:13,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__fail
[2020-11-24 22:28:13,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__success
[2020-11-24 22:28:13,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure MMM_MMM_NoBaseCtor__fail
[2020-11-24 22:28:13,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure MMM_MMM_NoBaseCtor__success
[2020-11-24 22:28:13,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure MMM_MMM__fail
[2020-11-24 22:28:13,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure MMM_MMM__success
[2020-11-24 22:28:13,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MMM__fail
[2020-11-24 22:28:13,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MMM__success
[2020-11-24 22:28:13,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure _maxSupply_MMM__fail
[2020-11-24 22:28:13,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure _maxSupply_MMM__success
[2020-11-24 22:28:13,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-24 22:28:13,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-24 22:28:13,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-24 22:28:13,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-24 22:28:13,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-24 22:28:13,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-24 22:28:13,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-24 22:28:13,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-24 22:28:13,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure noOverflow_pre__fail
[2020-11-24 22:28:13,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure noOverflow_pre__success
[2020-11-24 22:28:13,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC777
[2020-11-24 22:28:13,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC777
[2020-11-24 22:28:13,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC777Recipient
[2020-11-24 22:28:13,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC777Recipient
[2020-11-24 22:28:13,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC777Sender
[2020-11-24 22:28:13,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC777Sender
[2020-11-24 22:28:13,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-24 22:28:13,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-24 22:28:13,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-24 22:28:13,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-24 22:28:13,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Address
[2020-11-24 22:28:13,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Address
[2020-11-24 22:28:13,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC1820Registry
[2020-11-24 22:28:13,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC1820Registry
[2020-11-24 22:28:13,263 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC777
[2020-11-24 22:28:13,263 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC777
[2020-11-24 22:28:13,263 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-24 22:28:13,263 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-24 22:28:13,263 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MMM
[2020-11-24 22:28:13,263 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-24 22:28:13,263 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-24 22:28:13,263 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-24 22:28:13,733 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 22:28:13,733 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 22:28:14,295 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-24 22:28:14,296 INFO  L286             CfgBuilder]: Removed 10 assue(true) statements.
[2020-11-24 22:28:14,299 INFO  L202        PluginConnector]: Adding new model MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 10:28:14 BoogieIcfgContainer
[2020-11-24 22:28:14,299 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 10:28:13" (2/2) ...
[2020-11-24 22:28:14,299 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-24 22:28:14,299 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@564da68e and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 10:28:14, skipping insertion in model container
[2020-11-24 22:28:14,299 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-24 22:28:14,300 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-24 22:28:14,300 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-24 22:28:14,301 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-24 22:28:14,301 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 10:28:12" (1/3) ...
[2020-11-24 22:28:14,301 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@6d06ff38 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 10:28:14, skipping insertion in model container
[2020-11-24 22:28:14,302 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 10:28:13" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-24 22:28:14,337 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 10:28:14 NWAContainer
[2020-11-24 22:28:14,337 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-24 22:28:14,337 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-24 22:28:14,337 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-24 22:28:14,338 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-24 22:28:14,339 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 10:28:14" (3/4) ...
[2020-11-24 22:28:14,339 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@dfd1313 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 10:28:14, skipping insertion in model container
[2020-11-24 22:28:14,339 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 10:28:14" (4/4) ...
[2020-11-24 22:28:14,343 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-24 22:28:14,347 INFO  L110   BuchiProductObserver]: Initial RCFG 2828 locations, 3650 edges
[2020-11-24 22:28:14,348 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-24 22:28:14,360 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-24 22:28:16,578 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-24 22:28:16,587 INFO  L110   BuchiProductObserver]: BuchiProgram size 6814 locations, 11842 edges
[2020-11-24 22:28:16,831 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 10:28:16 BoogieIcfgContainer
[2020-11-24 22:28:16,831 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-24 22:28:16,831 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-24 22:28:16,832 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-24 22:28:16,833 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-24 22:28:16,833 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 10:28:16" (1/1) ...
[2020-11-24 22:28:17,003 INFO  L313           BlockEncoder]: Initial Icfg 6814 locations, 11842 edges
[2020-11-24 22:28:17,004 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-24 22:28:17,004 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-24 22:28:17,005 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-24 22:28:17,005 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-24 22:28:17,024 INFO  L70    emoveInfeasibleEdges]: Removed 141 edges and 24 locations because of local infeasibility
[2020-11-24 22:28:17,042 INFO  L70        RemoveSinkStates]: Removed 180 edges and 96 locations by removing sink states
[2020-11-24 22:28:17,062 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-24 22:28:17,068 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-24 22:28:17,075 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-24 22:28:17,076 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-24 22:28:17,081 INFO  L313           BlockEncoder]: Encoded RCFG 6650 locations, 11456 edges
[2020-11-24 22:28:17,082 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 10:28:17 BasicIcfg
[2020-11-24 22:28:17,082 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-24 22:28:17,083 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-24 22:28:17,083 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-24 22:28:17,085 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-24 22:28:17,085 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 22:28:17,085 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 10:28:12" (1/6) ...
[2020-11-24 22:28:17,087 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@e4b48a4 and model type MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 10:28:17, skipping insertion in model container
[2020-11-24 22:28:17,087 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 22:28:17,087 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 10:28:13" (2/6) ...
[2020-11-24 22:28:17,087 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@e4b48a4 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 10:28:17, skipping insertion in model container
[2020-11-24 22:28:17,087 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 22:28:17,088 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 10:28:14" (3/6) ...
[2020-11-24 22:28:17,088 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@e4b48a4 and model type MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 10:28:17, skipping insertion in model container
[2020-11-24 22:28:17,088 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 22:28:17,088 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 10:28:14" (4/6) ...
[2020-11-24 22:28:17,088 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@e4b48a4 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 10:28:17, skipping insertion in model container
[2020-11-24 22:28:17,088 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 22:28:17,088 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 10:28:16" (5/6) ...
[2020-11-24 22:28:17,089 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@e4b48a4 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 24.11 10:28:17, skipping insertion in model container
[2020-11-24 22:28:17,089 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 22:28:17,089 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 10:28:17" (6/6) ...
[2020-11-24 22:28:17,090 INFO  L404   chiAutomizerObserver]: Analyzing ICFG MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transfer-fail.bpl_BEv2
[2020-11-24 22:28:17,131 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-24 22:28:17,131 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-24 22:28:17,131 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-24 22:28:17,131 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-24 22:28:17,132 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-24 22:28:17,132 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-24 22:28:17,132 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-24 22:28:17,132 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-24 22:28:17,132 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-24 22:28:17,197 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6650 states.
[2020-11-24 22:28:17,308 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 22:28:17,308 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 22:28:17,308 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 22:28:17,321 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 22:28:17,321 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 22:28:17,321 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-24 22:28:17,321 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6650 states.
[2020-11-24 22:28:17,353 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 22:28:17,353 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 22:28:17,353 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 22:28:17,356 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 22:28:17,356 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC7770 := false;
[L2]                 call_transfer_ERC7770 := false;
[L2]     CALL        call main();
[L7785]              assume null == 0;
[L7786]  CALL        call this := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L7786]  RET         call this := FreshRefGenerator__success();
[L7787]              assume now >= 0;
[L7788]              assume DType[this] == MMM;
[L7789]              assume msgvalue_MSG == 0;
[L7790]              gas := gas - 53000;
[L7791]  CALL        call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L2821]              havoc __exception;
[L2822]              revert := false;
[L2823]  COND FALSE  !(__exception)
[L2860]  CALL        call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L5421]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L5421]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND TRUE   revert
[L2860]  RET         call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L7791]  RET         call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L7792]              assume !revert && gas >= 0;

Loop:
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND TRUE   choice == 24
[L7626]              gas := gas - 21000;
[L7627]  COND FALSE  !(gas >= 0)
[L7795]  RET         call CorralChoice_MMM(this);

[2020-11-24 22:28:17,375 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 22:28:17,375 INFO  L82        PathProgramCache]: Analyzing trace with hash 436742753, now seen corresponding path program 1 times
[2020-11-24 22:28:17,381 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 22:28:17,403 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 22:28:17,445 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 22:28:17,447 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 22:28:17,448 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 22:28:17,824 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 22:28:17,837 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 22:28:17,837 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 22:28:17,839 INFO  L87              Difference]: Start difference. First operand 6650 states. Second operand 3 states.
[2020-11-24 22:28:18,222 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 22:28:18,222 INFO  L93              Difference]: Finished difference Result 4389 states and 4931 transitions.
[2020-11-24 22:28:18,222 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 22:28:18,223 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4389 states and 4931 transitions.
[2020-11-24 22:28:18,247 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 22:28:18,277 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4389 states to 4389 states and 4931 transitions.
[2020-11-24 22:28:18,278 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-24 22:28:18,281 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1076
[2020-11-24 22:28:18,281 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4389 states and 4931 transitions.
[2020-11-24 22:28:18,292 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 22:28:18,292 INFO  L728         BuchiCegarLoop]: Abstraction has 4389 states and 4931 transitions.
[2020-11-24 22:28:18,311 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4389 states and 4931 transitions.
[2020-11-24 22:28:18,373 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4389 to 4389.
[2020-11-24 22:28:18,374 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4389 states.
[2020-11-24 22:28:18,383 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4389 states to 4389 states and 4931 transitions.
[2020-11-24 22:28:18,384 INFO  L751         BuchiCegarLoop]: Abstraction has 4389 states and 4931 transitions.
[2020-11-24 22:28:18,384 INFO  L631         BuchiCegarLoop]: Abstraction has 4389 states and 4931 transitions.
[2020-11-24 22:28:18,384 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-24 22:28:18,384 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4389 states and 4931 transitions.
[2020-11-24 22:28:18,394 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 22:28:18,394 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 22:28:18,395 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 22:28:18,397 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 22:28:18,397 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC7770 := false;
[L2]                 call_transfer_ERC7770 := false;
[L2]     CALL        call main();
[L7785]              assume null == 0;
[L7786]  CALL        call this := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L7786]  RET         call this := FreshRefGenerator__success();
[L7787]              assume now >= 0;
[L7788]              assume DType[this] == MMM;
[L7789]              assume msgvalue_MSG == 0;
[L7790]              gas := gas - 53000;
[L7791]  CALL        call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L2821]              havoc __exception;
[L2822]              revert := false;
[L2823]  COND FALSE  !(__exception)
[L2860]  CALL        call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L5421]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L5421]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND TRUE   revert
[L2860]  RET         call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L7791]  RET         call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L7792]              assume !revert && gas >= 0;
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND FALSE  !(choice == 13)
[L7700]  COND FALSE  !(choice == 12)
[L7707]  COND TRUE   choice == 11
[L7708]              gas := gas - 21000;
[L7709]  COND TRUE   gas >= 0
[L7710]              assume amount_s739 >= 0 && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7711]              assume msgvalue_MSG == 0;
[L7712]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s739 && (amount_s739 > _balances_ERC777[this][msgsender_MSG] || _balances_ERC777[this][recipient_s739] + amount_s739 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s739 >= 0) && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][recipient_s739] >= 0) && _balances_ERC777[this][recipient_s739] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][msgsender_MSG] >= 0) && _balances_ERC777[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC7770 := true;
[L2]                 call_transfer_ERC7770 := false;
[L2]                 revert := revert_hold;
[L1433]              havoc __exception;
[L1434]              revert := false;
[L1435]  COND FALSE  !(__exception)
[L1472]  CALL        call __ret_0_ := transfer~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L4528]              __var_10 := null;
[L4529]  COND TRUE   !(recipient_s739 != null)
[L4530]              revert := true;
[L1472]  RET         call __ret_0_ := transfer~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L1473]              assume !revert && gas >= 0;
[L7712]  RET         call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L7795]  RET         call CorralChoice_MMM(this);

Loop:
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND FALSE  !(choice == 13)
[L7700]  COND FALSE  !(choice == 12)
[L7707]  COND TRUE   choice == 11
[L7708]              gas := gas - 21000;
[L7709]  COND TRUE   gas >= 0
[L7710]              assume amount_s739 >= 0 && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7711]              assume msgvalue_MSG == 0;
[L7712]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s739 && (amount_s739 > _balances_ERC777[this][msgsender_MSG] || _balances_ERC777[this][recipient_s739] + amount_s739 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s739 >= 0) && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][recipient_s739] >= 0) && _balances_ERC777[this][recipient_s739] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][msgsender_MSG] >= 0) && _balances_ERC777[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC7770 := true;
[L2]                 call_transfer_ERC7770 := false;
[L2]                 revert := revert_hold;
[L1433]              havoc __exception;
[L1434]              revert := false;
[L1435]  COND FALSE  !(__exception)
[L1472]  CALL        call __ret_0_ := transfer~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L4528]              __var_10 := null;
[L4529]  COND TRUE   !(recipient_s739 != null)
[L4530]              revert := true;
[L1472]  RET         call __ret_0_ := transfer~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L1473]              assume !revert && gas >= 0;
[L7712]  RET         call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L7795]  RET         call CorralChoice_MMM(this);

[2020-11-24 22:28:18,402 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 22:28:18,403 INFO  L82        PathProgramCache]: Analyzing trace with hash -698032759, now seen corresponding path program 1 times
[2020-11-24 22:28:18,404 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 22:28:18,421 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 22:28:18,447 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 22:28:18,448 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 22:28:18,448 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 22:28:18,449 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 22:28:18,449 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 22:28:18,449 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-24 22:28:18,449 INFO  L87              Difference]: Start difference. First operand 4389 states and 4931 transitions. cyclomatic complexity: 546 Second operand 4 states.
[2020-11-24 22:28:19,184 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 22:28:19,184 INFO  L93              Difference]: Finished difference Result 5504 states and 6079 transitions.
[2020-11-24 22:28:19,184 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 22:28:19,185 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5504 states and 6079 transitions.
[2020-11-24 22:28:19,202 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 22:28:19,222 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5504 states to 5216 states and 5745 transitions.
[2020-11-24 22:28:19,222 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1275
[2020-11-24 22:28:19,223 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1299
[2020-11-24 22:28:19,223 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5216 states and 5745 transitions.
[2020-11-24 22:28:19,230 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 22:28:19,230 INFO  L728         BuchiCegarLoop]: Abstraction has 5216 states and 5745 transitions.
[2020-11-24 22:28:19,235 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5216 states and 5745 transitions.
[2020-11-24 22:28:19,280 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5216 to 4729.
[2020-11-24 22:28:19,280 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4729 states.
[2020-11-24 22:28:19,285 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4729 states to 4729 states and 5136 transitions.
[2020-11-24 22:28:19,286 INFO  L751         BuchiCegarLoop]: Abstraction has 4729 states and 5136 transitions.
[2020-11-24 22:28:19,286 INFO  L631         BuchiCegarLoop]: Abstraction has 4729 states and 5136 transitions.
[2020-11-24 22:28:19,286 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-24 22:28:19,286 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4729 states and 5136 transitions.
[2020-11-24 22:28:19,293 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 22:28:19,293 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 22:28:19,293 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 22:28:19,296 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 22:28:19,296 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC7770 := false;
[L2]                 call_transfer_ERC7770 := false;
[L2]     CALL        call main();
[L7785]              assume null == 0;
[L7786]  CALL        call this := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L7786]  RET         call this := FreshRefGenerator__success();
[L7787]              assume now >= 0;
[L7788]              assume DType[this] == MMM;
[L7789]              assume msgvalue_MSG == 0;
[L7790]              gas := gas - 53000;
[L7791]  CALL        call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L2821]              havoc __exception;
[L2822]              revert := false;
[L2823]  COND FALSE  !(__exception)
[L2860]  CALL        call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L5421]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L5421]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3987]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3972]              assume msgsender_MSG != null;
[L3973]              Balance[this] := 0;
[L3987]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3988]  COND FALSE  !(revert)
[L5425]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND FALSE  !(revert)
[L5429]  CALL        call __var_44 := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L5429]  RET         call __var_44 := FreshRefGenerator__success();
[L5430]  COND FALSE  !(revert)
[L5433]              Length[__var_44] := 0;
[L5434]              __var_43 := __var_44;
[L5435]  CALL        call ERC777_ERC777__success(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L4389]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L4389]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L4390]  COND FALSE  !(revert)
[L4393]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3987]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3972]              assume msgsender_MSG != null;
[L3973]              Balance[this] := 0;
[L3987]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3988]  COND FALSE  !(revert)
[L4393]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4394]  COND FALSE  !(revert)
[L4397]  CALL        call ERC777_ERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4305]              assume msgsender_MSG != null;
[L4306]              Balance[this] := 0;
[L4307]              _balances_ERC777[this] := zeroRefintArr();
[L4308]              sum__balances0[this] := 0;
[L4309]              _totalSupply_ERC777[this] := 0;
[L4310]              _name_ERC777[this] := -1488944962;
[L4311]              _symbol_ERC777[this] := -1488944962;
[L4312]              TOKENS_SENDER_INTERFACE_HASH_ERC777[this] := 18936552921575092301472466748482491067159488139731697543124572343800628504725;
[L4313]              TOKENS_RECIPIENT_INTERFACE_HASH_ERC777[this] := -35050735901709401846926806449422499789573591386021029871886258173058026781381;
[L4315]  CALL        call __var_9 := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L4315]  RET         call __var_9 := FreshRefGenerator__success();
[L4316]  COND FALSE  !(revert)
[L4319]              _defaultOperatorsArray_ERC777[this] := __var_9;
[L4320]              assume Length[_defaultOperatorsArray_ERC777[this]] == 0;
[L4321]              _defaultOperators_ERC777[this] := zeroRefboolArr();
[L4322]              _operators_ERC777[this] := zeroRefRefboolArr();
[L4323]              _revokedDefaultOperators_ERC777[this] := zeroRefRefboolArr();
[L4324]              _allowances_ERC777[this] := zeroRefRefintArr();
[L4325]              sum__allowances4[this] := 0;
[L4327]              _name_ERC777[this] := name_s605;
[L4328]              _symbol_ERC777[this] := symbol_s605;
[L4329]              _defaultOperatorsArray_ERC777[this] := defaultOperators_s605;
[L4330]              i_s605 := 0;
[L4331]  COND TRUE   i_s605 < Length[_defaultOperatorsArray_ERC777[this]]
[L4333]              _defaultOperators_ERC777[this][M_int_Ref[_defaultOperatorsArray_ERC777[this]][i_s605]] := true;
[L4334]              i_s605 := (i_s605 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4335]  COND TRUE   gas < 0
[L4397]  RET         call ERC777_ERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4398]  COND FALSE  !(revert)
[L5435]  RET         call ERC777_ERC777__success(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L5436]  COND FALSE  !(revert)
[L5439]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5243]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5225]              assume msgsender_MSG != null;
[L5226]              Balance[this] := 0;
[L5227]              _owner_Ownable[this] := null;
[L5229]              _owner_Ownable[this] := msgsender_MSG;
[L5230]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L5243]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]  COND FALSE  !(revert)
[L5439]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5440]  COND FALSE  !(revert)
[L5443]  CALL        call MMM_MMM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5378]              assume msgsender_MSG != null;
[L5379]              Balance[this] := 0;
[L5380]              _maxSupply_MMM[this] := nonlinearMul(5 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5443]  RET         call MMM_MMM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5444]  COND FALSE  !(revert)
[L2860]  RET         call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L7791]  RET         call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L7792]              assume !revert && gas >= 0;
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND FALSE  !(choice == 13)
[L7700]  COND FALSE  !(choice == 12)
[L7707]  COND TRUE   choice == 11
[L7708]              gas := gas - 21000;
[L7709]  COND TRUE   gas >= 0
[L7710]              assume amount_s739 >= 0 && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7711]              assume msgvalue_MSG == 0;
[L7712]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s739 && (amount_s739 > _balances_ERC777[this][msgsender_MSG] || _balances_ERC777[this][recipient_s739] + amount_s739 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s739 >= 0) && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][recipient_s739] >= 0) && _balances_ERC777[this][recipient_s739] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][msgsender_MSG] >= 0) && _balances_ERC777[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC7770 := true;
[L2]                 call_transfer_ERC7770 := false;
[L2]                 revert := revert_hold;
[L1433]              havoc __exception;
[L1434]              revert := false;
[L1435]  COND FALSE  !(__exception)
[L1472]  CALL        call __ret_0_ := transfer~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L4528]              __var_10 := null;
[L4529]  COND FALSE  !(!(recipient_s739 != null))
[L4533]              havoc empty_s739;
[L4534]              from_s739 := msgsender_MSG;
[L4535]  CALL        call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5149]              implementer_s1401 := implementer_s1401;
[L5150]              __var_30 := null;
[L5151]  COND FALSE  !(implementer_s1401 != null)
[L4535]  RET         call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4536]  COND FALSE  !(revert)
[L4539]  CALL        call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5079]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L4064]  COND FALSE  !(!(b_s297 <= a_s297))
[L4068]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4069]              __ret_0_ := c_s297;
[L5079]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L5080]  COND FALSE  !(revert)
[L5083]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][from_s1325];
[L5084]              _balances_ERC777[this][from_s1325] := __var_26;
[L5085]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][from_s1325];
[L5086]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L4040]              c_s272 := (a_s272 + b_s272) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4041]  COND FALSE  !(!(c_s272 >= a_s272))
[L4045]              __ret_0_ := c_s272;
[L5086]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L5087]  COND FALSE  !(revert)
[L5090]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][to_s1325];
[L5091]              _balances_ERC777[this][to_s1325] := __var_27;
[L5092]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][to_s1325];
[L5093]              assert { :EventEmitted "Sent_ERC777" } true;
[L5094]              assert { :EventEmitted "Transfer_ERC777" } true;
[L4539]  RET         call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4540]  COND FALSE  !(revert)
[L4543]  CALL        call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739, false);
[L5194]              implementer_s1457 := implementer_s1457;
[L5195]              __var_34 := null;
[L5196]  COND FALSE  !(implementer_s1457 != null)
[L5200]  COND FALSE  !(requireReceptionAck_s1457)
[L4543]  RET         call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739, false);
[L4544]  COND FALSE  !(revert)
[L4547]              __ret_0_ := true;
[L1472]  RET         call __ret_0_ := transfer~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L1473]              assume !revert && gas >= 0;
[L7712]  RET         call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L7795]  RET         call CorralChoice_MMM(this);

Loop:
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND FALSE  !(choice == 13)
[L7700]  COND FALSE  !(choice == 12)
[L7707]  COND TRUE   choice == 11
[L7708]              gas := gas - 21000;
[L7709]  COND TRUE   gas >= 0
[L7710]              assume amount_s739 >= 0 && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7711]              assume msgvalue_MSG == 0;
[L7712]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s739 && (amount_s739 > _balances_ERC777[this][msgsender_MSG] || _balances_ERC777[this][recipient_s739] + amount_s739 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s739 >= 0) && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][recipient_s739] >= 0) && _balances_ERC777[this][recipient_s739] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][msgsender_MSG] >= 0) && _balances_ERC777[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC7770 := true;
[L2]                 call_transfer_ERC7770 := false;
[L2]                 revert := revert_hold;
[L1433]              havoc __exception;
[L1434]              revert := false;
[L1435]  COND FALSE  !(__exception)
[L1472]  CALL        call __ret_0_ := transfer~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L4528]              __var_10 := null;
[L4529]  COND FALSE  !(!(recipient_s739 != null))
[L4533]              havoc empty_s739;
[L4534]              from_s739 := msgsender_MSG;
[L4535]  CALL        call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5149]              implementer_s1401 := implementer_s1401;
[L5150]              __var_30 := null;
[L5151]  COND FALSE  !(implementer_s1401 != null)
[L4535]  RET         call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4536]  COND FALSE  !(revert)
[L4539]  CALL        call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5079]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L4064]  COND FALSE  !(!(b_s297 <= a_s297))
[L4068]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4069]              __ret_0_ := c_s297;
[L5079]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L5080]  COND FALSE  !(revert)
[L5083]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][from_s1325];
[L5084]              _balances_ERC777[this][from_s1325] := __var_26;
[L5085]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][from_s1325];
[L5086]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L4040]              c_s272 := (a_s272 + b_s272) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4041]  COND FALSE  !(!(c_s272 >= a_s272))
[L4045]              __ret_0_ := c_s272;
[L5086]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L5087]  COND FALSE  !(revert)
[L5090]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][to_s1325];
[L5091]              _balances_ERC777[this][to_s1325] := __var_27;
[L5092]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][to_s1325];
[L5093]              assert { :EventEmitted "Sent_ERC777" } true;
[L5094]              assert { :EventEmitted "Transfer_ERC777" } true;
[L4539]  RET         call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4540]  COND FALSE  !(revert)
[L4543]  CALL        call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739, false);
[L5194]              implementer_s1457 := implementer_s1457;
[L5195]              __var_34 := null;
[L5196]  COND FALSE  !(implementer_s1457 != null)
[L5200]  COND FALSE  !(requireReceptionAck_s1457)
[L4543]  RET         call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739, false);
[L4544]  COND FALSE  !(revert)
[L4547]              __ret_0_ := true;
[L1472]  RET         call __ret_0_ := transfer~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L1473]              assume !revert && gas >= 0;
[L7712]  RET         call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L7795]  RET         call CorralChoice_MMM(this);

[2020-11-24 22:28:19,302 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 22:28:19,302 INFO  L82        PathProgramCache]: Analyzing trace with hash 1460250902, now seen corresponding path program 1 times
[2020-11-24 22:28:19,303 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 22:28:19,320 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 22:28:19,386 INFO  L134       CoverageAnalysis]: Checked inductivity of 38 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 38 trivial. 0 not checked.
[2020-11-24 22:28:19,386 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 22:28:19,386 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 22:28:19,387 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 22:28:19,387 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 22:28:19,387 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 22:28:19,387 INFO  L87              Difference]: Start difference. First operand 4729 states and 5136 transitions. cyclomatic complexity: 411 Second operand 3 states.
[2020-11-24 22:28:19,439 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 22:28:19,440 INFO  L93              Difference]: Finished difference Result 4985 states and 5399 transitions.
[2020-11-24 22:28:19,440 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 22:28:19,440 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4985 states and 5399 transitions.
[2020-11-24 22:28:19,451 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-24 22:28:19,464 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4985 states to 4906 states and 5320 transitions.
[2020-11-24 22:28:19,464 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1240
[2020-11-24 22:28:19,465 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1240
[2020-11-24 22:28:19,465 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4906 states and 5320 transitions.
[2020-11-24 22:28:19,468 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 22:28:19,468 INFO  L728         BuchiCegarLoop]: Abstraction has 4906 states and 5320 transitions.
[2020-11-24 22:28:19,472 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4906 states and 5320 transitions.
[2020-11-24 22:28:19,508 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4906 to 4733.
[2020-11-24 22:28:19,508 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4733 states.
[2020-11-24 22:28:19,514 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4733 states to 4733 states and 5138 transitions.
[2020-11-24 22:28:19,514 INFO  L751         BuchiCegarLoop]: Abstraction has 4733 states and 5138 transitions.
[2020-11-24 22:28:19,514 INFO  L631         BuchiCegarLoop]: Abstraction has 4733 states and 5138 transitions.
[2020-11-24 22:28:19,514 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-24 22:28:19,514 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4733 states and 5138 transitions.
[2020-11-24 22:28:19,522 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 22:28:19,522 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 22:28:19,522 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 22:28:19,538 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 22:28:19,538 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC7770 := false;
[L2]                 call_transfer_ERC7770 := false;
[L2]     CALL        call main();
[L7785]              assume null == 0;
[L7786]  CALL        call this := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L7786]  RET         call this := FreshRefGenerator__success();
[L7787]              assume now >= 0;
[L7788]              assume DType[this] == MMM;
[L7789]              assume msgvalue_MSG == 0;
[L7790]              gas := gas - 53000;
[L7791]  CALL        call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L2821]              havoc __exception;
[L2822]              revert := false;
[L2823]  COND FALSE  !(__exception)
[L2860]  CALL        call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L5421]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L5421]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3987]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3972]              assume msgsender_MSG != null;
[L3973]              Balance[this] := 0;
[L3987]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3988]  COND FALSE  !(revert)
[L5425]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND FALSE  !(revert)
[L5429]  CALL        call __var_44 := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L5429]  RET         call __var_44 := FreshRefGenerator__success();
[L5430]  COND FALSE  !(revert)
[L5433]              Length[__var_44] := 0;
[L5434]              __var_43 := __var_44;
[L5435]  CALL        call ERC777_ERC777__success(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L4389]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L4389]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L4390]  COND FALSE  !(revert)
[L4393]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3987]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3972]              assume msgsender_MSG != null;
[L3973]              Balance[this] := 0;
[L3987]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3988]  COND FALSE  !(revert)
[L4393]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4394]  COND FALSE  !(revert)
[L4397]  CALL        call ERC777_ERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4305]              assume msgsender_MSG != null;
[L4306]              Balance[this] := 0;
[L4307]              _balances_ERC777[this] := zeroRefintArr();
[L4308]              sum__balances0[this] := 0;
[L4309]              _totalSupply_ERC777[this] := 0;
[L4310]              _name_ERC777[this] := -1488944962;
[L4311]              _symbol_ERC777[this] := -1488944962;
[L4312]              TOKENS_SENDER_INTERFACE_HASH_ERC777[this] := 18936552921575092301472466748482491067159488139731697543124572343800628504725;
[L4313]              TOKENS_RECIPIENT_INTERFACE_HASH_ERC777[this] := -35050735901709401846926806449422499789573591386021029871886258173058026781381;
[L4315]  CALL        call __var_9 := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L4315]  RET         call __var_9 := FreshRefGenerator__success();
[L4316]  COND FALSE  !(revert)
[L4319]              _defaultOperatorsArray_ERC777[this] := __var_9;
[L4320]              assume Length[_defaultOperatorsArray_ERC777[this]] == 0;
[L4321]              _defaultOperators_ERC777[this] := zeroRefboolArr();
[L4322]              _operators_ERC777[this] := zeroRefRefboolArr();
[L4323]              _revokedDefaultOperators_ERC777[this] := zeroRefRefboolArr();
[L4324]              _allowances_ERC777[this] := zeroRefRefintArr();
[L4325]              sum__allowances4[this] := 0;
[L4327]              _name_ERC777[this] := name_s605;
[L4328]              _symbol_ERC777[this] := symbol_s605;
[L4329]              _defaultOperatorsArray_ERC777[this] := defaultOperators_s605;
[L4330]              i_s605 := 0;
[L4331]  COND FALSE  !(i_s605 < Length[_defaultOperatorsArray_ERC777[this]])
[L4339]              __var_2 := this;
[L4340]              __var_3 := keccak256(874679271);
[L4341]              assume __var_3 != 0;
[L4342]              __var_4 := this;
[L4344]              __var_6 := this;
[L4345]              __var_7 := keccak256(-2132820306);
[L4346]              assume __var_7 != 0;
[L4347]              __var_8 := this;
[L4397]  RET         call ERC777_ERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4398]  COND FALSE  !(revert)
[L5435]  RET         call ERC777_ERC777__success(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L5436]  COND FALSE  !(revert)
[L5439]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5243]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5225]              assume msgsender_MSG != null;
[L5226]              Balance[this] := 0;
[L5227]              _owner_Ownable[this] := null;
[L5229]              _owner_Ownable[this] := msgsender_MSG;
[L5230]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L5243]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]  COND FALSE  !(revert)
[L5439]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5440]  COND FALSE  !(revert)
[L5443]  CALL        call MMM_MMM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5378]              assume msgsender_MSG != null;
[L5379]              Balance[this] := 0;
[L5380]              _maxSupply_MMM[this] := nonlinearMul(5 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5443]  RET         call MMM_MMM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5444]  COND FALSE  !(revert)
[L2860]  RET         call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L7791]  RET         call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L7792]              assume !revert && gas >= 0;
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND FALSE  !(choice == 13)
[L7700]  COND FALSE  !(choice == 12)
[L7707]  COND TRUE   choice == 11
[L7708]              gas := gas - 21000;
[L7709]  COND TRUE   gas >= 0
[L7710]              assume amount_s739 >= 0 && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7711]              assume msgvalue_MSG == 0;
[L7712]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s739 && (amount_s739 > _balances_ERC777[this][msgsender_MSG] || _balances_ERC777[this][recipient_s739] + amount_s739 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s739 >= 0) && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][recipient_s739] >= 0) && _balances_ERC777[this][recipient_s739] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][msgsender_MSG] >= 0) && _balances_ERC777[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC7770 := true;
[L2]                 call_transfer_ERC7770 := false;
[L2]                 revert := revert_hold;
[L1433]              havoc __exception;
[L1434]              revert := false;
[L1435]  COND FALSE  !(__exception)
[L1472]  CALL        call __ret_0_ := transfer~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L4528]              __var_10 := null;
[L4529]  COND FALSE  !(!(recipient_s739 != null))
[L4533]              havoc empty_s739;
[L4534]              from_s739 := msgsender_MSG;
[L4535]  CALL        call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5149]              implementer_s1401 := implementer_s1401;
[L5150]              __var_30 := null;
[L5151]  COND FALSE  !(implementer_s1401 != null)
[L4535]  RET         call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4536]  COND FALSE  !(revert)
[L4539]  CALL        call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5079]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L4064]  COND FALSE  !(!(b_s297 <= a_s297))
[L4068]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4069]              __ret_0_ := c_s297;
[L5079]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L5080]  COND FALSE  !(revert)
[L5083]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][from_s1325];
[L5084]              _balances_ERC777[this][from_s1325] := __var_26;
[L5085]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][from_s1325];
[L5086]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L4040]              c_s272 := (a_s272 + b_s272) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4041]  COND FALSE  !(!(c_s272 >= a_s272))
[L4045]              __ret_0_ := c_s272;
[L5086]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L5087]  COND FALSE  !(revert)
[L5090]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][to_s1325];
[L5091]              _balances_ERC777[this][to_s1325] := __var_27;
[L5092]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][to_s1325];
[L5093]              assert { :EventEmitted "Sent_ERC777" } true;
[L5094]              assert { :EventEmitted "Transfer_ERC777" } true;
[L4539]  RET         call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4540]  COND FALSE  !(revert)
[L4543]  CALL        call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739, false);
[L5194]              implementer_s1457 := implementer_s1457;
[L5195]              __var_34 := null;
[L5196]  COND FALSE  !(implementer_s1457 != null)
[L5200]  COND FALSE  !(requireReceptionAck_s1457)
[L4543]  RET         call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739, false);
[L4544]  COND FALSE  !(revert)
[L4547]              __ret_0_ := true;
[L1472]  RET         call __ret_0_ := transfer~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L1473]              assume !revert && gas >= 0;
[L7712]  RET         call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L7795]  RET         call CorralChoice_MMM(this);

Loop:
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND TRUE   choice == 24
[L7626]              gas := gas - 21000;
[L7627]  COND FALSE  !(gas >= 0)
[L7795]  RET         call CorralChoice_MMM(this);

[2020-11-24 22:28:19,557 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 22:28:19,557 INFO  L82        PathProgramCache]: Analyzing trace with hash 1724790641, now seen corresponding path program 1 times
[2020-11-24 22:28:19,558 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 22:28:19,572 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 22:28:19,743 INFO  L134       CoverageAnalysis]: Checked inductivity of 38 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 38 trivial. 0 not checked.
[2020-11-24 22:28:19,744 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 22:28:19,744 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [15] imperfect sequences [] total 15
[2020-11-24 22:28:19,744 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 22:28:19,744 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-24 22:28:19,744 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=32, Invalid=208, Unknown=0, NotChecked=0, Total=240
[2020-11-24 22:28:19,744 INFO  L87              Difference]: Start difference. First operand 4733 states and 5138 transitions. cyclomatic complexity: 409 Second operand 16 states.
[2020-11-24 22:28:22,713 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 22:28:22,714 INFO  L93              Difference]: Finished difference Result 4848 states and 5265 transitions.
[2020-11-24 22:28:22,714 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-11-24 22:28:22,714 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4848 states and 5265 transitions.
[2020-11-24 22:28:22,722 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 22:28:22,736 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4848 states to 4848 states and 5265 transitions.
[2020-11-24 22:28:22,736 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1261
[2020-11-24 22:28:22,736 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1261
[2020-11-24 22:28:22,736 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4848 states and 5265 transitions.
[2020-11-24 22:28:22,740 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 22:28:22,740 INFO  L728         BuchiCegarLoop]: Abstraction has 4848 states and 5265 transitions.
[2020-11-24 22:28:22,744 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4848 states and 5265 transitions.
[2020-11-24 22:28:22,771 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4848 to 4565.
[2020-11-24 22:28:22,771 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4565 states.
[2020-11-24 22:28:22,776 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4565 states to 4565 states and 4925 transitions.
[2020-11-24 22:28:22,776 INFO  L751         BuchiCegarLoop]: Abstraction has 4565 states and 4925 transitions.
[2020-11-24 22:28:22,776 INFO  L631         BuchiCegarLoop]: Abstraction has 4565 states and 4925 transitions.
[2020-11-24 22:28:22,776 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-24 22:28:22,776 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4565 states and 4925 transitions.
[2020-11-24 22:28:22,781 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 22:28:22,781 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 22:28:22,781 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 22:28:22,783 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 22:28:22,783 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC7770 := false;
[L2]                 call_transfer_ERC7770 := false;
[L2]     CALL        call main();
[L7785]              assume null == 0;
[L7786]  CALL        call this := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L7786]  RET         call this := FreshRefGenerator__success();
[L7787]              assume now >= 0;
[L7788]              assume DType[this] == MMM;
[L7789]              assume msgvalue_MSG == 0;
[L7790]              gas := gas - 53000;
[L7791]  CALL        call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L2821]              havoc __exception;
[L2822]              revert := false;
[L2823]  COND TRUE   __exception
[L2824]              __tmp__Balance := Balance;
[L2825]              __tmp__DType := DType;
[L2826]              __tmp__Alloc := Alloc;
[L2827]              __tmp__balance_ADDR := balance_ADDR;
[L2828]              __tmp__M_Ref_int := M_Ref_int;
[L2829]              __tmp__sum__balances0 := sum__balances0;
[L2830]              __tmp__M_Ref_bool := M_Ref_bool;
[L2831]              __tmp__sum__defaultOperators1 := sum__defaultOperators1;
[L2832]              __tmp__alloc__operators_ERC777_lvl0 := alloc__operators_ERC777_lvl0;
[L2833]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2834]              __tmp__sum__operators2 := sum__operators2;
[L2835]              __tmp__alloc__revokedDefaultOperators_ERC777_lvl0 := alloc__revokedDefaultOperators_ERC777_lvl0;
[L2836]              __tmp__sum__revokedDefaultOperators3 := sum__revokedDefaultOperators3;
[L2837]              __tmp__alloc__allowances_ERC777_lvl0 := alloc__allowances_ERC777_lvl0;
[L2838]              __tmp__sum__allowances4 := sum__allowances4;
[L2839]              __tmp__M_int_Ref := M_int_Ref;
[L2840]              __tmp__sum := sum;
[L2841]              __tmp__Length := Length;
[L2842]              __tmp__now := now;
[L2843]              __tmp___erc1820_ERC777 := _erc1820_ERC777;
[L2844]              __tmp___balances_ERC777 := _balances_ERC777;
[L2845]              __tmp___totalSupply_ERC777 := _totalSupply_ERC777;
[L2846]              __tmp___name_ERC777 := _name_ERC777;
[L2847]              __tmp___symbol_ERC777 := _symbol_ERC777;
[L2848]              __tmp__TOKENS_SENDER_INTERFACE_HASH_ERC777 := TOKENS_SENDER_INTERFACE_HASH_ERC777;
[L2849]              __tmp__TOKENS_RECIPIENT_INTERFACE_HASH_ERC777 := TOKENS_RECIPIENT_INTERFACE_HASH_ERC777;
[L2850]              __tmp___defaultOperatorsArray_ERC777 := _defaultOperatorsArray_ERC777;
[L2851]              __tmp___defaultOperators_ERC777 := _defaultOperators_ERC777;
[L2852]              __tmp___operators_ERC777 := _operators_ERC777;
[L2853]              __tmp___revokedDefaultOperators_ERC777 := _revokedDefaultOperators_ERC777;
[L2854]              __tmp___allowances_ERC777 := _allowances_ERC777;
[L2855]              __tmp___owner_Ownable := _owner_Ownable;
[L2856]              __tmp___maxSupply_MMM := _maxSupply_MMM;
[L2857]  CALL        call MMM_MMM__fail(this, msgsender_MSG, msgvalue_MSG);
[L5389]  CALL        call IERC777_IERC777__fail(this, msgsender_MSG, msgvalue_MSG);
[L3883]  CALL        call IERC777_IERC777_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3868]              assume msgsender_MSG != null;
[L3869]              __tmp__Balance[this] := 0;
[L3883]  RET         call IERC777_IERC777_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3884]  COND FALSE  !(revert)
[L5389]  RET         call IERC777_IERC777__fail(this, msgsender_MSG, msgvalue_MSG);
[L5390]  COND FALSE  !(revert)
[L5393]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3979]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3964]              assume msgsender_MSG != null;
[L3965]              __tmp__Balance[this] := 0;
[L3979]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3980]  COND FALSE  !(revert)
[L5393]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5394]  COND FALSE  !(revert)
[L5397]  CALL        call __var_44 := FreshRefGenerator__fail();
[L3851]              havoc newRef;
[L3852]              assume __tmp__Alloc[newRef] == false;
[L3853]              __tmp__Alloc[newRef] := true;
[L3854]              assume newRef != null;
[L5397]  RET         call __var_44 := FreshRefGenerator__fail();
[L5398]  COND FALSE  !(revert)
[L5401]              __tmp__Length[__var_44] := 0;
[L5402]              __var_43 := __var_44;
[L5403]  CALL        call ERC777_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L4363]  CALL        call IERC777_IERC777__fail(this, msgsender_MSG, msgvalue_MSG);
[L3883]  CALL        call IERC777_IERC777_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3868]              assume msgsender_MSG != null;
[L3869]              __tmp__Balance[this] := 0;
[L3883]  RET         call IERC777_IERC777_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3884]  COND FALSE  !(revert)
[L4363]  RET         call IERC777_IERC777__fail(this, msgsender_MSG, msgvalue_MSG);
[L4364]  COND FALSE  !(revert)
[L4367]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3979]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3964]              assume msgsender_MSG != null;
[L3965]              __tmp__Balance[this] := 0;
[L3979]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3980]  COND FALSE  !(revert)
[L4367]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4368]  COND FALSE  !(revert)
[L4371]  CALL        call ERC777_ERC777_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4246]              assume msgsender_MSG != null;
[L4247]              __tmp__Balance[this] := 0;
[L4248]              __tmp___balances_ERC777[this] := zeroRefintArr();
[L4249]              __tmp__sum__balances0[this] := 0;
[L4250]              __tmp___totalSupply_ERC777[this] := 0;
[L4251]              __tmp___name_ERC777[this] := -1488944962;
[L4252]              __tmp___symbol_ERC777[this] := -1488944962;
[L4253]              __tmp__TOKENS_SENDER_INTERFACE_HASH_ERC777[this] := 18936552921575092301472466748482491067159488139731697543124572343800628504725;
[L4254]              __tmp__TOKENS_RECIPIENT_INTERFACE_HASH_ERC777[this] := -35050735901709401846926806449422499789573591386021029871886258173058026781381;
[L4256]  CALL        call __var_9 := FreshRefGenerator__fail();
[L3851]              havoc newRef;
[L3852]              assume __tmp__Alloc[newRef] == false;
[L3853]              __tmp__Alloc[newRef] := true;
[L3854]              assume newRef != null;
[L4256]  RET         call __var_9 := FreshRefGenerator__fail();
[L4257]  COND FALSE  !(revert)
[L4260]              __tmp___defaultOperatorsArray_ERC777[this] := __var_9;
[L4261]              assume __tmp__Length[__tmp___defaultOperatorsArray_ERC777[this]] == 0;
[L4262]              __tmp___defaultOperators_ERC777[this] := zeroRefboolArr();
[L4263]              __tmp___operators_ERC777[this] := zeroRefRefboolArr();
[L4264]              __tmp___revokedDefaultOperators_ERC777[this] := zeroRefRefboolArr();
[L4265]              __tmp___allowances_ERC777[this] := zeroRefRefintArr();
[L4266]              __tmp__sum__allowances4[this] := 0;
[L4268]              __tmp___name_ERC777[this] := name_s605;
[L4269]              __tmp___symbol_ERC777[this] := symbol_s605;
[L4270]              __tmp___defaultOperatorsArray_ERC777[this] := defaultOperators_s605;
[L4271]              i_s605 := 0;
[L4272]  COND FALSE  !(i_s605 < __tmp__Length[__tmp___defaultOperatorsArray_ERC777[this]])
[L4280]              __var_2 := this;
[L4281]              __var_3 := keccak256(874679271);
[L4282]              assume __var_3 != 0;
[L4283]              __var_4 := this;
[L4285]              __var_6 := this;
[L4286]              __var_7 := keccak256(-2132820306);
[L4287]              assume __var_7 != 0;
[L4288]              __var_8 := this;
[L4371]  RET         call ERC777_ERC777_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4372]  COND FALSE  !(revert)
[L5403]  RET         call ERC777_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L5404]  COND FALSE  !(revert)
[L5407]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5235]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5215]              assume msgsender_MSG != null;
[L5216]              __tmp__Balance[this] := 0;
[L5217]              __tmp___owner_Ownable[this] := null;
[L5219]              __tmp___owner_Ownable[this] := msgsender_MSG;
[L5235]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5236]  COND FALSE  !(revert)
[L5407]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5408]  COND FALSE  !(revert)
[L5411]  CALL        call MMM_MMM_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5366]              assume msgsender_MSG != null;
[L5367]              __tmp__Balance[this] := 0;
[L5368]              __tmp___maxSupply_MMM[this] := nonlinearMul(5 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5411]  RET         call MMM_MMM_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5412]  COND FALSE  !(revert)
[L2857]  RET         call MMM_MMM__fail(this, msgsender_MSG, msgvalue_MSG);
[L2858]              assume revert || gas < 0;
[L7791]  RET         call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L7792]              assume !revert && gas >= 0;
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND FALSE  !(choice == 13)
[L7700]  COND FALSE  !(choice == 12)
[L7707]  COND TRUE   choice == 11
[L7708]              gas := gas - 21000;
[L7709]  COND TRUE   gas >= 0
[L7710]              assume amount_s739 >= 0 && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7711]              assume msgvalue_MSG == 0;
[L7712]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s739 && (amount_s739 > _balances_ERC777[this][msgsender_MSG] || _balances_ERC777[this][recipient_s739] + amount_s739 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s739 >= 0) && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][recipient_s739] >= 0) && _balances_ERC777[this][recipient_s739] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][msgsender_MSG] >= 0) && _balances_ERC777[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC7770 := true;
[L2]                 call_transfer_ERC7770 := false;
[L2]                 revert := revert_hold;
[L1433]              havoc __exception;
[L1434]              revert := false;
[L1435]  COND FALSE  !(__exception)
[L1472]  CALL        call __ret_0_ := transfer~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L4528]              __var_10 := null;
[L4529]  COND FALSE  !(!(recipient_s739 != null))
[L4533]              havoc empty_s739;
[L4534]              from_s739 := msgsender_MSG;
[L4535]  CALL        call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5149]              implementer_s1401 := implementer_s1401;
[L5150]              __var_30 := null;
[L5151]  COND FALSE  !(implementer_s1401 != null)
[L4535]  RET         call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4536]  COND FALSE  !(revert)
[L4539]  CALL        call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5079]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L4064]  COND FALSE  !(!(b_s297 <= a_s297))
[L4068]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4069]              __ret_0_ := c_s297;
[L5079]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L5080]  COND FALSE  !(revert)
[L5083]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][from_s1325];
[L5084]              _balances_ERC777[this][from_s1325] := __var_26;
[L5085]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][from_s1325];
[L5086]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L4040]              c_s272 := (a_s272 + b_s272) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4041]  COND FALSE  !(!(c_s272 >= a_s272))
[L4045]              __ret_0_ := c_s272;
[L5086]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L5087]  COND FALSE  !(revert)
[L5090]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][to_s1325];
[L5091]              _balances_ERC777[this][to_s1325] := __var_27;
[L5092]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][to_s1325];
[L5093]              assert { :EventEmitted "Sent_ERC777" } true;
[L5094]              assert { :EventEmitted "Transfer_ERC777" } true;
[L4539]  RET         call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4540]  COND FALSE  !(revert)
[L4543]  CALL        call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739, false);
[L5194]              implementer_s1457 := implementer_s1457;
[L5195]              __var_34 := null;
[L5196]  COND FALSE  !(implementer_s1457 != null)
[L5200]  COND FALSE  !(requireReceptionAck_s1457)
[L4543]  RET         call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739, false);
[L4544]  COND FALSE  !(revert)
[L4547]              __ret_0_ := true;
[L1472]  RET         call __ret_0_ := transfer~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L1473]              assume !revert && gas >= 0;
[L7712]  RET         call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L7795]  RET         call CorralChoice_MMM(this);

Loop:
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND TRUE   choice == 24
[L7626]              gas := gas - 21000;
[L7627]  COND FALSE  !(gas >= 0)
[L7795]  RET         call CorralChoice_MMM(this);

[2020-11-24 22:28:22,787 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 22:28:22,787 INFO  L82        PathProgramCache]: Analyzing trace with hash 1587929188, now seen corresponding path program 1 times
[2020-11-24 22:28:22,788 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 22:28:22,799 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 22:28:22,847 INFO  L134       CoverageAnalysis]: Checked inductivity of 26 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 26 trivial. 0 not checked.
[2020-11-24 22:28:22,847 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 22:28:22,847 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 22:28:22,847 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 22:28:22,847 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 22:28:22,847 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-24 22:28:22,848 INFO  L87              Difference]: Start difference. First operand 4565 states and 4925 transitions. cyclomatic complexity: 365 Second operand 4 states.
[2020-11-24 22:28:23,277 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 22:28:23,277 INFO  L93              Difference]: Finished difference Result 5508 states and 6112 transitions.
[2020-11-24 22:28:23,277 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 22:28:23,277 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5508 states and 6112 transitions.
[2020-11-24 22:28:23,289 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-24 22:28:23,304 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5508 states to 5342 states and 5942 transitions.
[2020-11-24 22:28:23,304 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1377
[2020-11-24 22:28:23,305 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1377
[2020-11-24 22:28:23,305 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5342 states and 5942 transitions.
[2020-11-24 22:28:23,309 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 22:28:23,310 INFO  L728         BuchiCegarLoop]: Abstraction has 5342 states and 5942 transitions.
[2020-11-24 22:28:23,313 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5342 states and 5942 transitions.
[2020-11-24 22:28:23,342 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5342 to 4399.
[2020-11-24 22:28:23,342 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4399 states.
[2020-11-24 22:28:23,347 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4399 states to 4399 states and 4754 transitions.
[2020-11-24 22:28:23,347 INFO  L751         BuchiCegarLoop]: Abstraction has 4399 states and 4754 transitions.
[2020-11-24 22:28:23,347 INFO  L631         BuchiCegarLoop]: Abstraction has 4399 states and 4754 transitions.
[2020-11-24 22:28:23,347 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-24 22:28:23,347 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4399 states and 4754 transitions.
[2020-11-24 22:28:23,353 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 22:28:23,353 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 22:28:23,353 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 22:28:23,356 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 22:28:23,356 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC7770 := false;
[L2]                 call_transfer_ERC7770 := false;
[L2]     CALL        call main();
[L7785]              assume null == 0;
[L7786]  CALL        call this := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L7786]  RET         call this := FreshRefGenerator__success();
[L7787]              assume now >= 0;
[L7788]              assume DType[this] == MMM;
[L7789]              assume msgvalue_MSG == 0;
[L7790]              gas := gas - 53000;
[L7791]  CALL        call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L2821]              havoc __exception;
[L2822]              revert := false;
[L2823]  COND FALSE  !(__exception)
[L2860]  CALL        call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L5421]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L5421]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3987]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3972]              assume msgsender_MSG != null;
[L3973]              Balance[this] := 0;
[L3987]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3988]  COND FALSE  !(revert)
[L5425]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND FALSE  !(revert)
[L5429]  CALL        call __var_44 := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L5429]  RET         call __var_44 := FreshRefGenerator__success();
[L5430]  COND FALSE  !(revert)
[L5433]              Length[__var_44] := 0;
[L5434]              __var_43 := __var_44;
[L5435]  CALL        call ERC777_ERC777__success(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L4389]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L4389]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L4390]  COND FALSE  !(revert)
[L4393]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3987]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3972]              assume msgsender_MSG != null;
[L3973]              Balance[this] := 0;
[L3987]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3988]  COND FALSE  !(revert)
[L4393]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4394]  COND FALSE  !(revert)
[L4397]  CALL        call ERC777_ERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4305]              assume msgsender_MSG != null;
[L4306]              Balance[this] := 0;
[L4307]              _balances_ERC777[this] := zeroRefintArr();
[L4308]              sum__balances0[this] := 0;
[L4309]              _totalSupply_ERC777[this] := 0;
[L4310]              _name_ERC777[this] := -1488944962;
[L4311]              _symbol_ERC777[this] := -1488944962;
[L4312]              TOKENS_SENDER_INTERFACE_HASH_ERC777[this] := 18936552921575092301472466748482491067159488139731697543124572343800628504725;
[L4313]              TOKENS_RECIPIENT_INTERFACE_HASH_ERC777[this] := -35050735901709401846926806449422499789573591386021029871886258173058026781381;
[L4315]  CALL        call __var_9 := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L4315]  RET         call __var_9 := FreshRefGenerator__success();
[L4316]  COND FALSE  !(revert)
[L4319]              _defaultOperatorsArray_ERC777[this] := __var_9;
[L4320]              assume Length[_defaultOperatorsArray_ERC777[this]] == 0;
[L4321]              _defaultOperators_ERC777[this] := zeroRefboolArr();
[L4322]              _operators_ERC777[this] := zeroRefRefboolArr();
[L4323]              _revokedDefaultOperators_ERC777[this] := zeroRefRefboolArr();
[L4324]              _allowances_ERC777[this] := zeroRefRefintArr();
[L4325]              sum__allowances4[this] := 0;
[L4327]              _name_ERC777[this] := name_s605;
[L4328]              _symbol_ERC777[this] := symbol_s605;
[L4329]              _defaultOperatorsArray_ERC777[this] := defaultOperators_s605;
[L4330]              i_s605 := 0;
[L4331]  COND FALSE  !(i_s605 < Length[_defaultOperatorsArray_ERC777[this]])
[L4339]              __var_2 := this;
[L4340]              __var_3 := keccak256(874679271);
[L4341]              assume __var_3 != 0;
[L4342]              __var_4 := this;
[L4344]              __var_6 := this;
[L4345]              __var_7 := keccak256(-2132820306);
[L4346]              assume __var_7 != 0;
[L4347]              __var_8 := this;
[L4397]  RET         call ERC777_ERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4398]  COND FALSE  !(revert)
[L5435]  RET         call ERC777_ERC777__success(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L5436]  COND FALSE  !(revert)
[L5439]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5243]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5225]              assume msgsender_MSG != null;
[L5226]              Balance[this] := 0;
[L5227]              _owner_Ownable[this] := null;
[L5229]              _owner_Ownable[this] := msgsender_MSG;
[L5230]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L5243]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]  COND FALSE  !(revert)
[L5439]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5440]  COND FALSE  !(revert)
[L5443]  CALL        call MMM_MMM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5378]              assume msgsender_MSG != null;
[L5379]              Balance[this] := 0;
[L5380]              _maxSupply_MMM[this] := nonlinearMul(5 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5443]  RET         call MMM_MMM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5444]  COND FALSE  !(revert)
[L2860]  RET         call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L7791]  RET         call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L7792]              assume !revert && gas >= 0;
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND TRUE   choice == 18
[L7663]              gas := gas - 21000;
[L7664]  COND TRUE   gas >= 0
[L7665]              assume amount_s760 >= 0 && amount_s760 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7666]              assume msgvalue_MSG == 0;
[L7667]  CALL        call burn~uint256~bytes_ERC777(this, msgsender_MSG, msgvalue_MSG, amount_s760, data_s760);
[L1518]              havoc __exception;
[L1519]              revert := false;
[L1520]  COND FALSE  !(__exception)
[L1557]  CALL        call burn~uint256~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, amount_s760, data_s760);
[L4564]              havoc empty_s760;
[L4565]  CALL        call _burn~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, msgsender_MSG, amount_s760, data_s760, empty_s760);
[L5029]              __var_22 := null;
[L5030]  COND FALSE  !(!(from_s1272 != null))
[L5034]              __var_23 := null;
[L5035]  CALL        call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1272, from_s1272, null, amount_s1272, data_s1272, operatorData_s1272);
[L5149]              implementer_s1401 := implementer_s1401;
[L5150]              __var_30 := null;
[L5151]  COND FALSE  !(implementer_s1401 != null)
[L5035]  RET         call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1272, from_s1272, null, amount_s1272, data_s1272, operatorData_s1272);
[L5036]  COND FALSE  !(revert)
[L5039]  CALL        call __var_24 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC777[this], amount_s1272);
[L4064]  COND FALSE  !(!(b_s297 <= a_s297))
[L4068]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4069]              __ret_0_ := c_s297;
[L5039]  RET         call __var_24 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC777[this], amount_s1272);
[L5040]  COND FALSE  !(revert)
[L5043]              _totalSupply_ERC777[this] := __var_24;
[L5044]  CALL        call __var_25 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1272], amount_s1272);
[L4064]  COND FALSE  !(!(b_s297 <= a_s297))
[L4068]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4069]              __ret_0_ := c_s297;
[L5044]  RET         call __var_25 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1272], amount_s1272);
[L5045]  COND FALSE  !(revert)
[L5048]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][from_s1272];
[L5049]              _balances_ERC777[this][from_s1272] := __var_25;
[L5050]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][from_s1272];
[L5051]              assert { :EventEmitted "Burned_ERC777" } true;
[L5052]              assert { :EventEmitted "Transfer_ERC777" } true;
[L4565]  RET         call _burn~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, msgsender_MSG, amount_s760, data_s760, empty_s760);
[L4566]  COND FALSE  !(revert)
[L1557]  RET         call burn~uint256~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, amount_s760, data_s760);
[L1558]              assume !revert && gas >= 0;
[L7667]  RET         call burn~uint256~bytes_ERC777(this, msgsender_MSG, msgvalue_MSG, amount_s760, data_s760);
[L7795]  RET         call CorralChoice_MMM(this);
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND FALSE  !(choice == 13)
[L7700]  COND FALSE  !(choice == 12)
[L7707]  COND TRUE   choice == 11
[L7708]              gas := gas - 21000;
[L7709]  COND TRUE   gas >= 0
[L7710]              assume amount_s739 >= 0 && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7711]              assume msgvalue_MSG == 0;
[L7712]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s739 && (amount_s739 > _balances_ERC777[this][msgsender_MSG] || _balances_ERC777[this][recipient_s739] + amount_s739 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s739 >= 0) && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][recipient_s739] >= 0) && _balances_ERC777[this][recipient_s739] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][msgsender_MSG] >= 0) && _balances_ERC777[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC7770 := true;
[L2]                 call_transfer_ERC7770 := false;
[L2]                 revert := revert_hold;
[L1433]              havoc __exception;
[L1434]              revert := false;
[L1435]  COND FALSE  !(__exception)
[L1472]  CALL        call __ret_0_ := transfer~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L4528]              __var_10 := null;
[L4529]  COND FALSE  !(!(recipient_s739 != null))
[L4533]              havoc empty_s739;
[L4534]              from_s739 := msgsender_MSG;
[L4535]  CALL        call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5149]              implementer_s1401 := implementer_s1401;
[L5150]              __var_30 := null;
[L5151]  COND FALSE  !(implementer_s1401 != null)
[L4535]  RET         call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4536]  COND FALSE  !(revert)
[L4539]  CALL        call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5079]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L4064]  COND FALSE  !(!(b_s297 <= a_s297))
[L4068]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4069]              __ret_0_ := c_s297;
[L5079]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L5080]  COND FALSE  !(revert)
[L5083]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][from_s1325];
[L5084]              _balances_ERC777[this][from_s1325] := __var_26;
[L5085]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][from_s1325];
[L5086]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L4040]              c_s272 := (a_s272 + b_s272) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4041]  COND FALSE  !(!(c_s272 >= a_s272))
[L4045]              __ret_0_ := c_s272;
[L5086]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L5087]  COND FALSE  !(revert)
[L5090]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][to_s1325];
[L5091]              _balances_ERC777[this][to_s1325] := __var_27;
[L5092]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][to_s1325];
[L5093]              assert { :EventEmitted "Sent_ERC777" } true;
[L5094]              assert { :EventEmitted "Transfer_ERC777" } true;
[L4539]  RET         call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4540]  COND FALSE  !(revert)
[L4543]  CALL        call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739, false);
[L5194]              implementer_s1457 := implementer_s1457;
[L5195]              __var_34 := null;
[L5196]  COND FALSE  !(implementer_s1457 != null)
[L5200]  COND FALSE  !(requireReceptionAck_s1457)
[L4543]  RET         call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739, false);
[L4544]  COND FALSE  !(revert)
[L4547]              __ret_0_ := true;
[L1472]  RET         call __ret_0_ := transfer~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L1473]              assume !revert && gas >= 0;
[L7712]  RET         call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L7795]  RET         call CorralChoice_MMM(this);

Loop:
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND FALSE  !(choice == 13)
[L7700]  COND FALSE  !(choice == 12)
[L7707]  COND TRUE   choice == 11
[L7708]              gas := gas - 21000;
[L7709]  COND TRUE   gas >= 0
[L7710]              assume amount_s739 >= 0 && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7711]              assume msgvalue_MSG == 0;
[L7712]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s739 && (amount_s739 > _balances_ERC777[this][msgsender_MSG] || _balances_ERC777[this][recipient_s739] + amount_s739 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s739 >= 0) && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][recipient_s739] >= 0) && _balances_ERC777[this][recipient_s739] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][msgsender_MSG] >= 0) && _balances_ERC777[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC7770 := true;
[L2]                 call_transfer_ERC7770 := false;
[L2]                 revert := revert_hold;
[L1433]              havoc __exception;
[L1434]              revert := false;
[L1435]  COND FALSE  !(__exception)
[L1472]  CALL        call __ret_0_ := transfer~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L4528]              __var_10 := null;
[L4529]  COND FALSE  !(!(recipient_s739 != null))
[L4533]              havoc empty_s739;
[L4534]              from_s739 := msgsender_MSG;
[L4535]  CALL        call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5149]              implementer_s1401 := implementer_s1401;
[L5150]              __var_30 := null;
[L5151]  COND FALSE  !(implementer_s1401 != null)
[L4535]  RET         call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4536]  COND FALSE  !(revert)
[L4539]  CALL        call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5079]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L4064]  COND FALSE  !(!(b_s297 <= a_s297))
[L4068]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4069]              __ret_0_ := c_s297;
[L5079]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L5080]  COND FALSE  !(revert)
[L5083]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][from_s1325];
[L5084]              _balances_ERC777[this][from_s1325] := __var_26;
[L5085]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][from_s1325];
[L5086]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L4040]              c_s272 := (a_s272 + b_s272) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4041]  COND FALSE  !(!(c_s272 >= a_s272))
[L4045]              __ret_0_ := c_s272;
[L5086]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L5087]  COND FALSE  !(revert)
[L5090]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][to_s1325];
[L5091]              _balances_ERC777[this][to_s1325] := __var_27;
[L5092]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][to_s1325];
[L5093]              assert { :EventEmitted "Sent_ERC777" } true;
[L5094]              assert { :EventEmitted "Transfer_ERC777" } true;
[L4539]  RET         call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4540]  COND FALSE  !(revert)
[L4543]  CALL        call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739, false);
[L5194]              implementer_s1457 := implementer_s1457;
[L5195]              __var_34 := null;
[L5196]  COND FALSE  !(implementer_s1457 != null)
[L5200]  COND FALSE  !(requireReceptionAck_s1457)
[L4543]  RET         call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739, false);
[L4544]  COND FALSE  !(revert)
[L4547]              __ret_0_ := true;
[L1472]  RET         call __ret_0_ := transfer~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L1473]              assume !revert && gas >= 0;
[L7712]  RET         call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L7795]  RET         call CorralChoice_MMM(this);

[2020-11-24 22:28:23,361 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 22:28:23,361 INFO  L82        PathProgramCache]: Analyzing trace with hash 1680936483, now seen corresponding path program 1 times
[2020-11-24 22:28:23,362 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 22:28:23,379 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 22:28:23,641 INFO  L134       CoverageAnalysis]: Checked inductivity of 122 backedges. 0 proven. 1 refuted. 0 times theorem prover too weak. 121 trivial. 0 not checked.
[2020-11-24 22:28:23,641 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 22:28:23,641 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [20] total 20
[2020-11-24 22:28:23,642 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 22:28:23,642 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 21 interpolants.
[2020-11-24 22:28:23,642 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=55, Invalid=365, Unknown=0, NotChecked=0, Total=420
[2020-11-24 22:28:23,642 INFO  L87              Difference]: Start difference. First operand 4399 states and 4754 transitions. cyclomatic complexity: 359 Second operand 21 states.
[2020-11-24 22:28:27,018 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 22:28:27,018 INFO  L93              Difference]: Finished difference Result 4465 states and 4825 transitions.
[2020-11-24 22:28:27,018 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 23 states. 
[2020-11-24 22:28:27,019 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4465 states and 4825 transitions.
[2020-11-24 22:28:27,029 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 22:28:27,044 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4465 states to 4465 states and 4825 transitions.
[2020-11-24 22:28:27,044 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1159
[2020-11-24 22:28:27,044 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1159
[2020-11-24 22:28:27,045 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4465 states and 4825 transitions.
[2020-11-24 22:28:27,048 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 22:28:27,048 INFO  L728         BuchiCegarLoop]: Abstraction has 4465 states and 4825 transitions.
[2020-11-24 22:28:27,054 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4465 states and 4825 transitions.
[2020-11-24 22:28:27,085 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4465 to 4403.
[2020-11-24 22:28:27,085 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4403 states.
[2020-11-24 22:28:27,091 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4403 states to 4403 states and 4762 transitions.
[2020-11-24 22:28:27,091 INFO  L751         BuchiCegarLoop]: Abstraction has 4403 states and 4762 transitions.
[2020-11-24 22:28:27,091 INFO  L631         BuchiCegarLoop]: Abstraction has 4403 states and 4762 transitions.
[2020-11-24 22:28:27,091 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-24 22:28:27,091 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4403 states and 4762 transitions.
[2020-11-24 22:28:27,098 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 22:28:27,098 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 22:28:27,098 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 22:28:27,099 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 22:28:27,099 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC7770 := false;
[L2]                 call_transfer_ERC7770 := false;
[L2]     CALL        call main();
[L7785]              assume null == 0;
[L7786]  CALL        call this := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L7786]  RET         call this := FreshRefGenerator__success();
[L7787]              assume now >= 0;
[L7788]              assume DType[this] == MMM;
[L7789]              assume msgvalue_MSG == 0;
[L7790]              gas := gas - 53000;
[L7791]  CALL        call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L2821]              havoc __exception;
[L2822]              revert := false;
[L2823]  COND FALSE  !(__exception)
[L2860]  CALL        call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L5421]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L5421]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3987]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3972]              assume msgsender_MSG != null;
[L3973]              Balance[this] := 0;
[L3987]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3988]  COND FALSE  !(revert)
[L5425]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND FALSE  !(revert)
[L5429]  CALL        call __var_44 := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L5429]  RET         call __var_44 := FreshRefGenerator__success();
[L5430]  COND FALSE  !(revert)
[L5433]              Length[__var_44] := 0;
[L5434]              __var_43 := __var_44;
[L5435]  CALL        call ERC777_ERC777__success(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L4389]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L4389]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L4390]  COND FALSE  !(revert)
[L4393]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3987]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3972]              assume msgsender_MSG != null;
[L3973]              Balance[this] := 0;
[L3987]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3988]  COND FALSE  !(revert)
[L4393]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4394]  COND FALSE  !(revert)
[L4397]  CALL        call ERC777_ERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4305]              assume msgsender_MSG != null;
[L4306]              Balance[this] := 0;
[L4307]              _balances_ERC777[this] := zeroRefintArr();
[L4308]              sum__balances0[this] := 0;
[L4309]              _totalSupply_ERC777[this] := 0;
[L4310]              _name_ERC777[this] := -1488944962;
[L4311]              _symbol_ERC777[this] := -1488944962;
[L4312]              TOKENS_SENDER_INTERFACE_HASH_ERC777[this] := 18936552921575092301472466748482491067159488139731697543124572343800628504725;
[L4313]              TOKENS_RECIPIENT_INTERFACE_HASH_ERC777[this] := -35050735901709401846926806449422499789573591386021029871886258173058026781381;
[L4315]  CALL        call __var_9 := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L4315]  RET         call __var_9 := FreshRefGenerator__success();
[L4316]  COND FALSE  !(revert)
[L4319]              _defaultOperatorsArray_ERC777[this] := __var_9;
[L4320]              assume Length[_defaultOperatorsArray_ERC777[this]] == 0;
[L4321]              _defaultOperators_ERC777[this] := zeroRefboolArr();
[L4322]              _operators_ERC777[this] := zeroRefRefboolArr();
[L4323]              _revokedDefaultOperators_ERC777[this] := zeroRefRefboolArr();
[L4324]              _allowances_ERC777[this] := zeroRefRefintArr();
[L4325]              sum__allowances4[this] := 0;
[L4327]              _name_ERC777[this] := name_s605;
[L4328]              _symbol_ERC777[this] := symbol_s605;
[L4329]              _defaultOperatorsArray_ERC777[this] := defaultOperators_s605;
[L4330]              i_s605 := 0;
[L4331]  COND FALSE  !(i_s605 < Length[_defaultOperatorsArray_ERC777[this]])
[L4339]              __var_2 := this;
[L4340]              __var_3 := keccak256(874679271);
[L4341]              assume __var_3 != 0;
[L4342]              __var_4 := this;
[L4344]              __var_6 := this;
[L4345]              __var_7 := keccak256(-2132820306);
[L4346]              assume __var_7 != 0;
[L4347]              __var_8 := this;
[L4397]  RET         call ERC777_ERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4398]  COND FALSE  !(revert)
[L5435]  RET         call ERC777_ERC777__success(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L5436]  COND FALSE  !(revert)
[L5439]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5243]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5225]              assume msgsender_MSG != null;
[L5226]              Balance[this] := 0;
[L5227]              _owner_Ownable[this] := null;
[L5229]              _owner_Ownable[this] := msgsender_MSG;
[L5230]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L5243]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]  COND FALSE  !(revert)
[L5439]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5440]  COND FALSE  !(revert)
[L5443]  CALL        call MMM_MMM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5378]              assume msgsender_MSG != null;
[L5379]              Balance[this] := 0;
[L5380]              _maxSupply_MMM[this] := nonlinearMul(5 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5443]  RET         call MMM_MMM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5444]  COND FALSE  !(revert)
[L2860]  RET         call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L7791]  RET         call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L7792]              assume !revert && gas >= 0;
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND TRUE   choice == 13
[L7694]              gas := gas - 21000;
[L7695]  COND TRUE   gas >= 0
[L7696]              assume amount_s921 >= 0 && amount_s921 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7697]              assume msgvalue_MSG == 0;
[L7698]  CALL        call operatorSend~address~address~uint256~bytes~bytes_ERC777(this, msgsender_MSG, msgvalue_MSG, sender_s921, recipient_s921, amount_s921, data_s921, operatorData_s921);
[L1934]              havoc __exception;
[L1935]              revert := false;
[L1936]  COND FALSE  !(__exception)
[L1973]  CALL        call operatorSend~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, sender_s921, recipient_s921, amount_s921, data_s921, operatorData_s921);
[L4678]  COND TRUE   DType[this] == MMM
[L4679]  CALL        call __var_11 := isOperatorFor~address~address_ERC777__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, sender_s921);
[L4579]              __ret_0_ := (operator_s792 == tokenHolder_s792 || (_defaultOperators_ERC777[this][operator_s792] && !_revokedDefaultOperators_ERC777[this][tokenHolder_s792][operator_s792])) || _operators_ERC777[this][tokenHolder_s792][operator_s792];
[L4679]  RET         call __var_11 := isOperatorFor~address~address_ERC777__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, sender_s921);
[L4680]  COND FALSE  !(revert)
[L4691]  COND FALSE  !(!__var_11)
[L4695]  CALL        call _send~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, sender_s921, recipient_s921, amount_s921, data_s921, operatorData_s921, true);
[L4969]              __var_20 := null;
[L4970]  COND FALSE  !(!(from_s1204 != null))
[L4974]              __var_21 := null;
[L4975]  COND FALSE  !(!(to_s1204 != null))
[L4979]  CALL        call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1204, from_s1204, to_s1204, amount_s1204, userData_s1204, operatorData_s1204);
[L5149]              implementer_s1401 := implementer_s1401;
[L5150]              __var_30 := null;
[L5151]  COND FALSE  !(implementer_s1401 != null)
[L4979]  RET         call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1204, from_s1204, to_s1204, amount_s1204, userData_s1204, operatorData_s1204);
[L4980]  COND FALSE  !(revert)
[L4983]  CALL        call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1204, from_s1204, to_s1204, amount_s1204, userData_s1204, operatorData_s1204);
[L5079]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L4064]  COND FALSE  !(!(b_s297 <= a_s297))
[L4068]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4069]              __ret_0_ := c_s297;
[L5079]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L5080]  COND FALSE  !(revert)
[L5083]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][from_s1325];
[L5084]              _balances_ERC777[this][from_s1325] := __var_26;
[L5085]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][from_s1325];
[L5086]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L4040]              c_s272 := (a_s272 + b_s272) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4041]  COND FALSE  !(!(c_s272 >= a_s272))
[L4045]              __ret_0_ := c_s272;
[L5086]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L5087]  COND FALSE  !(revert)
[L5090]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][to_s1325];
[L5091]              _balances_ERC777[this][to_s1325] := __var_27;
[L5092]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][to_s1325];
[L5093]              assert { :EventEmitted "Sent_ERC777" } true;
[L5094]              assert { :EventEmitted "Transfer_ERC777" } true;
[L4983]  RET         call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1204, from_s1204, to_s1204, amount_s1204, userData_s1204, operatorData_s1204);
[L4984]  COND FALSE  !(revert)
[L4987]  CALL        call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1204, from_s1204, to_s1204, amount_s1204, userData_s1204, operatorData_s1204, requireReceptionAck_s1204);
[L5194]              implementer_s1457 := implementer_s1457;
[L5195]              __var_34 := null;
[L5196]  COND FALSE  !(implementer_s1457 != null)
[L5200]  COND FALSE  !(requireReceptionAck_s1457)
[L4987]  RET         call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1204, from_s1204, to_s1204, amount_s1204, userData_s1204, operatorData_s1204, requireReceptionAck_s1204);
[L4988]  COND FALSE  !(revert)
[L4695]  RET         call _send~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, sender_s921, recipient_s921, amount_s921, data_s921, operatorData_s921, true);
[L4696]  COND FALSE  !(revert)
[L1973]  RET         call operatorSend~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, sender_s921, recipient_s921, amount_s921, data_s921, operatorData_s921);
[L1974]              assume !revert && gas >= 0;
[L7698]  RET         call operatorSend~address~address~uint256~bytes~bytes_ERC777(this, msgsender_MSG, msgvalue_MSG, sender_s921, recipient_s921, amount_s921, data_s921, operatorData_s921);
[L7795]  RET         call CorralChoice_MMM(this);
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND FALSE  !(choice == 13)
[L7700]  COND FALSE  !(choice == 12)
[L7707]  COND TRUE   choice == 11
[L7708]              gas := gas - 21000;
[L7709]  COND TRUE   gas >= 0
[L7710]              assume amount_s739 >= 0 && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7711]              assume msgvalue_MSG == 0;
[L7712]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s739 && (amount_s739 > _balances_ERC777[this][msgsender_MSG] || _balances_ERC777[this][recipient_s739] + amount_s739 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s739 >= 0) && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][recipient_s739] >= 0) && _balances_ERC777[this][recipient_s739] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][msgsender_MSG] >= 0) && _balances_ERC777[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC7770 := true;
[L2]                 call_transfer_ERC7770 := false;
[L2]                 revert := revert_hold;
[L1433]              havoc __exception;
[L1434]              revert := false;
[L1435]  COND FALSE  !(__exception)
[L1472]  CALL        call __ret_0_ := transfer~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L4528]              __var_10 := null;
[L4529]  COND FALSE  !(!(recipient_s739 != null))
[L4533]              havoc empty_s739;
[L4534]              from_s739 := msgsender_MSG;
[L4535]  CALL        call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5149]              implementer_s1401 := implementer_s1401;
[L5150]              __var_30 := null;
[L5151]  COND FALSE  !(implementer_s1401 != null)
[L4535]  RET         call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4536]  COND FALSE  !(revert)
[L4539]  CALL        call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5079]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L4064]  COND FALSE  !(!(b_s297 <= a_s297))
[L4068]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4069]              __ret_0_ := c_s297;
[L5079]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L5080]  COND FALSE  !(revert)
[L5083]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][from_s1325];
[L5084]              _balances_ERC777[this][from_s1325] := __var_26;
[L5085]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][from_s1325];
[L5086]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L4040]              c_s272 := (a_s272 + b_s272) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4041]  COND FALSE  !(!(c_s272 >= a_s272))
[L4045]              __ret_0_ := c_s272;
[L5086]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L5087]  COND FALSE  !(revert)
[L5090]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][to_s1325];
[L5091]              _balances_ERC777[this][to_s1325] := __var_27;
[L5092]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][to_s1325];
[L5093]              assert { :EventEmitted "Sent_ERC777" } true;
[L5094]              assert { :EventEmitted "Transfer_ERC777" } true;
[L4539]  RET         call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4540]  COND FALSE  !(revert)
[L4543]  CALL        call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739, false);
[L5194]              implementer_s1457 := implementer_s1457;
[L5195]              __var_34 := null;
[L5196]  COND FALSE  !(implementer_s1457 != null)
[L5200]  COND FALSE  !(requireReceptionAck_s1457)
[L4543]  RET         call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739, false);
[L4544]  COND FALSE  !(revert)
[L4547]              __ret_0_ := true;
[L1472]  RET         call __ret_0_ := transfer~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L1473]              assume !revert && gas >= 0;
[L7712]  RET         call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L7795]  RET         call CorralChoice_MMM(this);

Loop:
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND TRUE   choice == 24
[L7626]              gas := gas - 21000;
[L7627]  COND FALSE  !(gas >= 0)
[L7795]  RET         call CorralChoice_MMM(this);

[2020-11-24 22:28:27,104 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 22:28:27,104 INFO  L82        PathProgramCache]: Analyzing trace with hash -745269982, now seen corresponding path program 1 times
[2020-11-24 22:28:27,105 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 22:28:27,120 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 22:28:27,196 INFO  L134       CoverageAnalysis]: Checked inductivity of 122 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 121 trivial. 0 not checked.
[2020-11-24 22:28:27,196 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 22:28:27,196 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 22:28:27,197 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 22:28:27,197 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 22:28:27,197 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-24 22:28:27,197 INFO  L87              Difference]: Start difference. First operand 4403 states and 4762 transitions. cyclomatic complexity: 364 Second operand 4 states.
[2020-11-24 22:28:27,221 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 22:28:27,221 INFO  L93              Difference]: Finished difference Result 4431 states and 4790 transitions.
[2020-11-24 22:28:27,221 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 22:28:27,221 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4431 states and 4790 transitions.
[2020-11-24 22:28:27,228 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 22:28:27,236 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4431 states to 4423 states and 4782 transitions.
[2020-11-24 22:28:27,236 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1150
[2020-11-24 22:28:27,236 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1150
[2020-11-24 22:28:27,236 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4423 states and 4782 transitions.
[2020-11-24 22:28:27,239 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 22:28:27,240 INFO  L728         BuchiCegarLoop]: Abstraction has 4423 states and 4782 transitions.
[2020-11-24 22:28:27,243 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4423 states and 4782 transitions.
[2020-11-24 22:28:27,265 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4423 to 4423.
[2020-11-24 22:28:27,265 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4423 states.
[2020-11-24 22:28:27,269 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4423 states to 4423 states and 4782 transitions.
[2020-11-24 22:28:27,269 INFO  L751         BuchiCegarLoop]: Abstraction has 4423 states and 4782 transitions.
[2020-11-24 22:28:27,269 INFO  L631         BuchiCegarLoop]: Abstraction has 4423 states and 4782 transitions.
[2020-11-24 22:28:27,269 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-24 22:28:27,269 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4423 states and 4782 transitions.
[2020-11-24 22:28:27,274 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 22:28:27,274 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 22:28:27,274 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 22:28:27,275 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 22:28:27,275 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC7770 := false;
[L2]                 call_transfer_ERC7770 := false;
[L2]     CALL        call main();
[L7785]              assume null == 0;
[L7786]  CALL        call this := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L7786]  RET         call this := FreshRefGenerator__success();
[L7787]              assume now >= 0;
[L7788]              assume DType[this] == MMM;
[L7789]              assume msgvalue_MSG == 0;
[L7790]              gas := gas - 53000;
[L7791]  CALL        call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L2821]              havoc __exception;
[L2822]              revert := false;
[L2823]  COND FALSE  !(__exception)
[L2860]  CALL        call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L5421]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L5421]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3987]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3972]              assume msgsender_MSG != null;
[L3973]              Balance[this] := 0;
[L3987]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3988]  COND FALSE  !(revert)
[L5425]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND FALSE  !(revert)
[L5429]  CALL        call __var_44 := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L5429]  RET         call __var_44 := FreshRefGenerator__success();
[L5430]  COND FALSE  !(revert)
[L5433]              Length[__var_44] := 0;
[L5434]              __var_43 := __var_44;
[L5435]  CALL        call ERC777_ERC777__success(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L4389]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L4389]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L4390]  COND FALSE  !(revert)
[L4393]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3987]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3972]              assume msgsender_MSG != null;
[L3973]              Balance[this] := 0;
[L3987]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3988]  COND FALSE  !(revert)
[L4393]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4394]  COND FALSE  !(revert)
[L4397]  CALL        call ERC777_ERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4305]              assume msgsender_MSG != null;
[L4306]              Balance[this] := 0;
[L4307]              _balances_ERC777[this] := zeroRefintArr();
[L4308]              sum__balances0[this] := 0;
[L4309]              _totalSupply_ERC777[this] := 0;
[L4310]              _name_ERC777[this] := -1488944962;
[L4311]              _symbol_ERC777[this] := -1488944962;
[L4312]              TOKENS_SENDER_INTERFACE_HASH_ERC777[this] := 18936552921575092301472466748482491067159488139731697543124572343800628504725;
[L4313]              TOKENS_RECIPIENT_INTERFACE_HASH_ERC777[this] := -35050735901709401846926806449422499789573591386021029871886258173058026781381;
[L4315]  CALL        call __var_9 := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L4315]  RET         call __var_9 := FreshRefGenerator__success();
[L4316]  COND FALSE  !(revert)
[L4319]              _defaultOperatorsArray_ERC777[this] := __var_9;
[L4320]              assume Length[_defaultOperatorsArray_ERC777[this]] == 0;
[L4321]              _defaultOperators_ERC777[this] := zeroRefboolArr();
[L4322]              _operators_ERC777[this] := zeroRefRefboolArr();
[L4323]              _revokedDefaultOperators_ERC777[this] := zeroRefRefboolArr();
[L4324]              _allowances_ERC777[this] := zeroRefRefintArr();
[L4325]              sum__allowances4[this] := 0;
[L4327]              _name_ERC777[this] := name_s605;
[L4328]              _symbol_ERC777[this] := symbol_s605;
[L4329]              _defaultOperatorsArray_ERC777[this] := defaultOperators_s605;
[L4330]              i_s605 := 0;
[L4331]  COND FALSE  !(i_s605 < Length[_defaultOperatorsArray_ERC777[this]])
[L4339]              __var_2 := this;
[L4340]              __var_3 := keccak256(874679271);
[L4341]              assume __var_3 != 0;
[L4342]              __var_4 := this;
[L4344]              __var_6 := this;
[L4345]              __var_7 := keccak256(-2132820306);
[L4346]              assume __var_7 != 0;
[L4347]              __var_8 := this;
[L4397]  RET         call ERC777_ERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4398]  COND FALSE  !(revert)
[L5435]  RET         call ERC777_ERC777__success(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L5436]  COND FALSE  !(revert)
[L5439]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5243]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5225]              assume msgsender_MSG != null;
[L5226]              Balance[this] := 0;
[L5227]              _owner_Ownable[this] := null;
[L5229]              _owner_Ownable[this] := msgsender_MSG;
[L5230]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L5243]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]  COND FALSE  !(revert)
[L5439]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5440]  COND FALSE  !(revert)
[L5443]  CALL        call MMM_MMM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5378]              assume msgsender_MSG != null;
[L5379]              Balance[this] := 0;
[L5380]              _maxSupply_MMM[this] := nonlinearMul(5 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5443]  RET         call MMM_MMM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5444]  COND FALSE  !(revert)
[L2860]  RET         call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L7791]  RET         call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L7792]              assume !revert && gas >= 0;
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND TRUE   choice == 13
[L7694]              gas := gas - 21000;
[L7695]  COND TRUE   gas >= 0
[L7696]              assume amount_s921 >= 0 && amount_s921 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7697]              assume msgvalue_MSG == 0;
[L7698]  CALL        call operatorSend~address~address~uint256~bytes~bytes_ERC777(this, msgsender_MSG, msgvalue_MSG, sender_s921, recipient_s921, amount_s921, data_s921, operatorData_s921);
[L1934]              havoc __exception;
[L1935]              revert := false;
[L1936]  COND FALSE  !(__exception)
[L1973]  CALL        call operatorSend~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, sender_s921, recipient_s921, amount_s921, data_s921, operatorData_s921);
[L4678]  COND FALSE  !(DType[this] == MMM)
[L4683]  COND TRUE   DType[this] == ERC777
[L4684]  CALL        call __var_11 := isOperatorFor~address~address_ERC777__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, sender_s921);
[L4579]              __ret_0_ := (operator_s792 == tokenHolder_s792 || (_defaultOperators_ERC777[this][operator_s792] && !_revokedDefaultOperators_ERC777[this][tokenHolder_s792][operator_s792])) || _operators_ERC777[this][tokenHolder_s792][operator_s792];
[L4684]  RET         call __var_11 := isOperatorFor~address~address_ERC777__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, sender_s921);
[L4685]  COND FALSE  !(revert)
[L4691]  COND FALSE  !(!__var_11)
[L4695]  CALL        call _send~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, sender_s921, recipient_s921, amount_s921, data_s921, operatorData_s921, true);
[L4969]              __var_20 := null;
[L4970]  COND FALSE  !(!(from_s1204 != null))
[L4974]              __var_21 := null;
[L4975]  COND FALSE  !(!(to_s1204 != null))
[L4979]  CALL        call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1204, from_s1204, to_s1204, amount_s1204, userData_s1204, operatorData_s1204);
[L5149]              implementer_s1401 := implementer_s1401;
[L5150]              __var_30 := null;
[L5151]  COND FALSE  !(implementer_s1401 != null)
[L4979]  RET         call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1204, from_s1204, to_s1204, amount_s1204, userData_s1204, operatorData_s1204);
[L4980]  COND FALSE  !(revert)
[L4983]  CALL        call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1204, from_s1204, to_s1204, amount_s1204, userData_s1204, operatorData_s1204);
[L5079]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L4064]  COND FALSE  !(!(b_s297 <= a_s297))
[L4068]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4069]              __ret_0_ := c_s297;
[L5079]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L5080]  COND FALSE  !(revert)
[L5083]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][from_s1325];
[L5084]              _balances_ERC777[this][from_s1325] := __var_26;
[L5085]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][from_s1325];
[L5086]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L4040]              c_s272 := (a_s272 + b_s272) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4041]  COND FALSE  !(!(c_s272 >= a_s272))
[L4045]              __ret_0_ := c_s272;
[L5086]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L5087]  COND FALSE  !(revert)
[L5090]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][to_s1325];
[L5091]              _balances_ERC777[this][to_s1325] := __var_27;
[L5092]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][to_s1325];
[L5093]              assert { :EventEmitted "Sent_ERC777" } true;
[L5094]              assert { :EventEmitted "Transfer_ERC777" } true;
[L4983]  RET         call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1204, from_s1204, to_s1204, amount_s1204, userData_s1204, operatorData_s1204);
[L4984]  COND FALSE  !(revert)
[L4987]  CALL        call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1204, from_s1204, to_s1204, amount_s1204, userData_s1204, operatorData_s1204, requireReceptionAck_s1204);
[L5194]              implementer_s1457 := implementer_s1457;
[L5195]              __var_34 := null;
[L5196]  COND TRUE   implementer_s1457 != null
[L5197]              assume DType[implementer_s1457] == IERC777Recipient;
[L5198]              __var_35 := implementer_s1457;
[L4987]  RET         call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1204, from_s1204, to_s1204, amount_s1204, userData_s1204, operatorData_s1204, requireReceptionAck_s1204);
[L4988]  COND FALSE  !(revert)
[L4695]  RET         call _send~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, sender_s921, recipient_s921, amount_s921, data_s921, operatorData_s921, true);
[L4696]  COND FALSE  !(revert)
[L1973]  RET         call operatorSend~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, sender_s921, recipient_s921, amount_s921, data_s921, operatorData_s921);
[L1974]              assume !revert && gas >= 0;
[L7698]  RET         call operatorSend~address~address~uint256~bytes~bytes_ERC777(this, msgsender_MSG, msgvalue_MSG, sender_s921, recipient_s921, amount_s921, data_s921, operatorData_s921);
[L7795]  RET         call CorralChoice_MMM(this);
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND FALSE  !(choice == 13)
[L7700]  COND FALSE  !(choice == 12)
[L7707]  COND TRUE   choice == 11
[L7708]              gas := gas - 21000;
[L7709]  COND TRUE   gas >= 0
[L7710]              assume amount_s739 >= 0 && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7711]              assume msgvalue_MSG == 0;
[L7712]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s739 && (amount_s739 > _balances_ERC777[this][msgsender_MSG] || _balances_ERC777[this][recipient_s739] + amount_s739 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s739 >= 0) && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][recipient_s739] >= 0) && _balances_ERC777[this][recipient_s739] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][msgsender_MSG] >= 0) && _balances_ERC777[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC7770 := true;
[L2]                 call_transfer_ERC7770 := false;
[L2]                 revert := revert_hold;
[L1433]              havoc __exception;
[L1434]              revert := false;
[L1435]  COND FALSE  !(__exception)
[L1472]  CALL        call __ret_0_ := transfer~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L4528]              __var_10 := null;
[L4529]  COND FALSE  !(!(recipient_s739 != null))
[L4533]              havoc empty_s739;
[L4534]              from_s739 := msgsender_MSG;
[L4535]  CALL        call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5149]              implementer_s1401 := implementer_s1401;
[L5150]              __var_30 := null;
[L5151]  COND FALSE  !(implementer_s1401 != null)
[L4535]  RET         call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4536]  COND FALSE  !(revert)
[L4539]  CALL        call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5079]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L4064]  COND FALSE  !(!(b_s297 <= a_s297))
[L4068]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4069]              __ret_0_ := c_s297;
[L5079]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L5080]  COND FALSE  !(revert)
[L5083]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][from_s1325];
[L5084]              _balances_ERC777[this][from_s1325] := __var_26;
[L5085]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][from_s1325];
[L5086]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L4040]              c_s272 := (a_s272 + b_s272) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4041]  COND FALSE  !(!(c_s272 >= a_s272))
[L4045]              __ret_0_ := c_s272;
[L5086]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L5087]  COND FALSE  !(revert)
[L5090]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][to_s1325];
[L5091]              _balances_ERC777[this][to_s1325] := __var_27;
[L5092]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][to_s1325];
[L5093]              assert { :EventEmitted "Sent_ERC777" } true;
[L5094]              assert { :EventEmitted "Transfer_ERC777" } true;
[L4539]  RET         call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4540]  COND FALSE  !(revert)
[L4543]  CALL        call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739, false);
[L5194]              implementer_s1457 := implementer_s1457;
[L5195]              __var_34 := null;
[L5196]  COND FALSE  !(implementer_s1457 != null)
[L5200]  COND FALSE  !(requireReceptionAck_s1457)
[L4543]  RET         call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739, false);
[L4544]  COND FALSE  !(revert)
[L4547]              __ret_0_ := true;
[L1472]  RET         call __ret_0_ := transfer~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L1473]              assume !revert && gas >= 0;
[L7712]  RET         call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L7795]  RET         call CorralChoice_MMM(this);

Loop:
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND TRUE   choice == 24
[L7626]              gas := gas - 21000;
[L7627]  COND FALSE  !(gas >= 0)
[L7795]  RET         call CorralChoice_MMM(this);

[2020-11-24 22:28:27,280 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 22:28:27,280 INFO  L82        PathProgramCache]: Analyzing trace with hash 1774663179, now seen corresponding path program 1 times
[2020-11-24 22:28:27,280 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 22:28:27,294 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 22:28:27,380 INFO  L134       CoverageAnalysis]: Checked inductivity of 122 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 121 trivial. 0 not checked.
[2020-11-24 22:28:27,380 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 22:28:27,380 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-24 22:28:27,380 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 22:28:27,380 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-24 22:28:27,380 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-24 22:28:27,381 INFO  L87              Difference]: Start difference. First operand 4423 states and 4782 transitions. cyclomatic complexity: 364 Second operand 6 states.
[2020-11-24 22:28:27,436 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 22:28:27,436 INFO  L93              Difference]: Finished difference Result 4449 states and 4808 transitions.
[2020-11-24 22:28:27,437 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-24 22:28:27,437 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4449 states and 4808 transitions.
[2020-11-24 22:28:27,444 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 22:28:27,451 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4449 states to 4413 states and 4768 transitions.
[2020-11-24 22:28:27,451 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1150
[2020-11-24 22:28:27,451 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1150
[2020-11-24 22:28:27,452 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4413 states and 4768 transitions.
[2020-11-24 22:28:27,454 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 22:28:27,454 INFO  L728         BuchiCegarLoop]: Abstraction has 4413 states and 4768 transitions.
[2020-11-24 22:28:27,457 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4413 states and 4768 transitions.
[2020-11-24 22:28:27,475 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4413 to 4413.
[2020-11-24 22:28:27,476 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4413 states.
[2020-11-24 22:28:27,479 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4413 states to 4413 states and 4768 transitions.
[2020-11-24 22:28:27,479 INFO  L751         BuchiCegarLoop]: Abstraction has 4413 states and 4768 transitions.
[2020-11-24 22:28:27,479 INFO  L631         BuchiCegarLoop]: Abstraction has 4413 states and 4768 transitions.
[2020-11-24 22:28:27,479 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-24 22:28:27,479 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4413 states and 4768 transitions.
[2020-11-24 22:28:27,484 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 22:28:27,484 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 22:28:27,484 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 22:28:27,486 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 22:28:27,486 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC7770 := false;
[L2]                 call_transfer_ERC7770 := false;
[L2]     CALL        call main();
[L7785]              assume null == 0;
[L7786]  CALL        call this := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L7786]  RET         call this := FreshRefGenerator__success();
[L7787]              assume now >= 0;
[L7788]              assume DType[this] == MMM;
[L7789]              assume msgvalue_MSG == 0;
[L7790]              gas := gas - 53000;
[L7791]  CALL        call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L2821]              havoc __exception;
[L2822]              revert := false;
[L2823]  COND FALSE  !(__exception)
[L2860]  CALL        call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L5421]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L5421]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3987]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3972]              assume msgsender_MSG != null;
[L3973]              Balance[this] := 0;
[L3987]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3988]  COND FALSE  !(revert)
[L5425]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND FALSE  !(revert)
[L5429]  CALL        call __var_44 := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L5429]  RET         call __var_44 := FreshRefGenerator__success();
[L5430]  COND FALSE  !(revert)
[L5433]              Length[__var_44] := 0;
[L5434]              __var_43 := __var_44;
[L5435]  CALL        call ERC777_ERC777__success(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L4389]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L4389]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L4390]  COND FALSE  !(revert)
[L4393]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3987]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3972]              assume msgsender_MSG != null;
[L3973]              Balance[this] := 0;
[L3987]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3988]  COND FALSE  !(revert)
[L4393]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4394]  COND FALSE  !(revert)
[L4397]  CALL        call ERC777_ERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4305]              assume msgsender_MSG != null;
[L4306]              Balance[this] := 0;
[L4307]              _balances_ERC777[this] := zeroRefintArr();
[L4308]              sum__balances0[this] := 0;
[L4309]              _totalSupply_ERC777[this] := 0;
[L4310]              _name_ERC777[this] := -1488944962;
[L4311]              _symbol_ERC777[this] := -1488944962;
[L4312]              TOKENS_SENDER_INTERFACE_HASH_ERC777[this] := 18936552921575092301472466748482491067159488139731697543124572343800628504725;
[L4313]              TOKENS_RECIPIENT_INTERFACE_HASH_ERC777[this] := -35050735901709401846926806449422499789573591386021029871886258173058026781381;
[L4315]  CALL        call __var_9 := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L4315]  RET         call __var_9 := FreshRefGenerator__success();
[L4316]  COND FALSE  !(revert)
[L4319]              _defaultOperatorsArray_ERC777[this] := __var_9;
[L4320]              assume Length[_defaultOperatorsArray_ERC777[this]] == 0;
[L4321]              _defaultOperators_ERC777[this] := zeroRefboolArr();
[L4322]              _operators_ERC777[this] := zeroRefRefboolArr();
[L4323]              _revokedDefaultOperators_ERC777[this] := zeroRefRefboolArr();
[L4324]              _allowances_ERC777[this] := zeroRefRefintArr();
[L4325]              sum__allowances4[this] := 0;
[L4327]              _name_ERC777[this] := name_s605;
[L4328]              _symbol_ERC777[this] := symbol_s605;
[L4329]              _defaultOperatorsArray_ERC777[this] := defaultOperators_s605;
[L4330]              i_s605 := 0;
[L4331]  COND FALSE  !(i_s605 < Length[_defaultOperatorsArray_ERC777[this]])
[L4339]              __var_2 := this;
[L4340]              __var_3 := keccak256(874679271);
[L4341]              assume __var_3 != 0;
[L4342]              __var_4 := this;
[L4344]              __var_6 := this;
[L4345]              __var_7 := keccak256(-2132820306);
[L4346]              assume __var_7 != 0;
[L4347]              __var_8 := this;
[L4397]  RET         call ERC777_ERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4398]  COND FALSE  !(revert)
[L5435]  RET         call ERC777_ERC777__success(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L5436]  COND FALSE  !(revert)
[L5439]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5243]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5225]              assume msgsender_MSG != null;
[L5226]              Balance[this] := 0;
[L5227]              _owner_Ownable[this] := null;
[L5229]              _owner_Ownable[this] := msgsender_MSG;
[L5230]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L5243]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]  COND FALSE  !(revert)
[L5439]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5440]  COND FALSE  !(revert)
[L5443]  CALL        call MMM_MMM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5378]              assume msgsender_MSG != null;
[L5379]              Balance[this] := 0;
[L5380]              _maxSupply_MMM[this] := nonlinearMul(5 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5443]  RET         call MMM_MMM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5444]  COND FALSE  !(revert)
[L2860]  RET         call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L7791]  RET         call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L7792]              assume !revert && gas >= 0;
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND TRUE   choice == 13
[L7694]              gas := gas - 21000;
[L7695]  COND TRUE   gas >= 0
[L7696]              assume amount_s921 >= 0 && amount_s921 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7697]              assume msgvalue_MSG == 0;
[L7698]  CALL        call operatorSend~address~address~uint256~bytes~bytes_ERC777(this, msgsender_MSG, msgvalue_MSG, sender_s921, recipient_s921, amount_s921, data_s921, operatorData_s921);
[L1934]              havoc __exception;
[L1935]              revert := false;
[L1936]  COND FALSE  !(__exception)
[L1973]  CALL        call operatorSend~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, sender_s921, recipient_s921, amount_s921, data_s921, operatorData_s921);
[L4678]  COND TRUE   DType[this] == MMM
[L4679]  CALL        call __var_11 := isOperatorFor~address~address_ERC777__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, sender_s921);
[L4579]              __ret_0_ := (operator_s792 == tokenHolder_s792 || (_defaultOperators_ERC777[this][operator_s792] && !_revokedDefaultOperators_ERC777[this][tokenHolder_s792][operator_s792])) || _operators_ERC777[this][tokenHolder_s792][operator_s792];
[L4679]  RET         call __var_11 := isOperatorFor~address~address_ERC777__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, sender_s921);
[L4680]  COND FALSE  !(revert)
[L4691]  COND FALSE  !(!__var_11)
[L4695]  CALL        call _send~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, sender_s921, recipient_s921, amount_s921, data_s921, operatorData_s921, true);
[L4969]              __var_20 := null;
[L4970]  COND FALSE  !(!(from_s1204 != null))
[L4974]              __var_21 := null;
[L4975]  COND FALSE  !(!(to_s1204 != null))
[L4979]  CALL        call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1204, from_s1204, to_s1204, amount_s1204, userData_s1204, operatorData_s1204);
[L5149]              implementer_s1401 := implementer_s1401;
[L5150]              __var_30 := null;
[L5151]  COND FALSE  !(implementer_s1401 != null)
[L4979]  RET         call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1204, from_s1204, to_s1204, amount_s1204, userData_s1204, operatorData_s1204);
[L4980]  COND FALSE  !(revert)
[L4983]  CALL        call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1204, from_s1204, to_s1204, amount_s1204, userData_s1204, operatorData_s1204);
[L5079]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L4064]  COND FALSE  !(!(b_s297 <= a_s297))
[L4068]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4069]              __ret_0_ := c_s297;
[L5079]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L5080]  COND FALSE  !(revert)
[L5083]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][from_s1325];
[L5084]              _balances_ERC777[this][from_s1325] := __var_26;
[L5085]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][from_s1325];
[L5086]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L4040]              c_s272 := (a_s272 + b_s272) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4041]  COND FALSE  !(!(c_s272 >= a_s272))
[L4045]              __ret_0_ := c_s272;
[L5086]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L5087]  COND FALSE  !(revert)
[L5090]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][to_s1325];
[L5091]              _balances_ERC777[this][to_s1325] := __var_27;
[L5092]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][to_s1325];
[L5093]              assert { :EventEmitted "Sent_ERC777" } true;
[L5094]              assert { :EventEmitted "Transfer_ERC777" } true;
[L4983]  RET         call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1204, from_s1204, to_s1204, amount_s1204, userData_s1204, operatorData_s1204);
[L4984]  COND FALSE  !(revert)
[L4987]  CALL        call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1204, from_s1204, to_s1204, amount_s1204, userData_s1204, operatorData_s1204, requireReceptionAck_s1204);
[L5194]              implementer_s1457 := implementer_s1457;
[L5195]              __var_34 := null;
[L5196]  COND TRUE   implementer_s1457 != null
[L5197]              assume DType[implementer_s1457] == IERC777Recipient;
[L5198]              __var_35 := implementer_s1457;
[L4987]  RET         call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1204, from_s1204, to_s1204, amount_s1204, userData_s1204, operatorData_s1204, requireReceptionAck_s1204);
[L4988]  COND FALSE  !(revert)
[L4695]  RET         call _send~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, sender_s921, recipient_s921, amount_s921, data_s921, operatorData_s921, true);
[L4696]  COND FALSE  !(revert)
[L1973]  RET         call operatorSend~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, sender_s921, recipient_s921, amount_s921, data_s921, operatorData_s921);
[L1974]              assume !revert && gas >= 0;
[L7698]  RET         call operatorSend~address~address~uint256~bytes~bytes_ERC777(this, msgsender_MSG, msgvalue_MSG, sender_s921, recipient_s921, amount_s921, data_s921, operatorData_s921);
[L7795]  RET         call CorralChoice_MMM(this);
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND FALSE  !(choice == 13)
[L7700]  COND FALSE  !(choice == 12)
[L7707]  COND TRUE   choice == 11
[L7708]              gas := gas - 21000;
[L7709]  COND TRUE   gas >= 0
[L7710]              assume amount_s739 >= 0 && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7711]              assume msgvalue_MSG == 0;
[L7712]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s739 && (amount_s739 > _balances_ERC777[this][msgsender_MSG] || _balances_ERC777[this][recipient_s739] + amount_s739 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s739 >= 0) && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][recipient_s739] >= 0) && _balances_ERC777[this][recipient_s739] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][msgsender_MSG] >= 0) && _balances_ERC777[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC7770 := true;
[L2]                 call_transfer_ERC7770 := false;
[L2]                 revert := revert_hold;
[L1433]              havoc __exception;
[L1434]              revert := false;
[L1435]  COND FALSE  !(__exception)
[L1472]  CALL        call __ret_0_ := transfer~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L4528]              __var_10 := null;
[L4529]  COND FALSE  !(!(recipient_s739 != null))
[L4533]              havoc empty_s739;
[L4534]              from_s739 := msgsender_MSG;
[L4535]  CALL        call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5149]              implementer_s1401 := implementer_s1401;
[L5150]              __var_30 := null;
[L5151]  COND FALSE  !(implementer_s1401 != null)
[L4535]  RET         call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4536]  COND FALSE  !(revert)
[L4539]  CALL        call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5079]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L4064]  COND FALSE  !(!(b_s297 <= a_s297))
[L4068]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4069]              __ret_0_ := c_s297;
[L5079]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L5080]  COND FALSE  !(revert)
[L5083]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][from_s1325];
[L5084]              _balances_ERC777[this][from_s1325] := __var_26;
[L5085]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][from_s1325];
[L5086]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L4040]              c_s272 := (a_s272 + b_s272) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4041]  COND FALSE  !(!(c_s272 >= a_s272))
[L4045]              __ret_0_ := c_s272;
[L5086]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L5087]  COND FALSE  !(revert)
[L5090]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][to_s1325];
[L5091]              _balances_ERC777[this][to_s1325] := __var_27;
[L5092]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][to_s1325];
[L5093]              assert { :EventEmitted "Sent_ERC777" } true;
[L5094]              assert { :EventEmitted "Transfer_ERC777" } true;
[L4539]  RET         call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4540]  COND FALSE  !(revert)
[L4543]  CALL        call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739, false);
[L5194]              implementer_s1457 := implementer_s1457;
[L5195]              __var_34 := null;
[L5196]  COND FALSE  !(implementer_s1457 != null)
[L5200]  COND FALSE  !(requireReceptionAck_s1457)
[L4543]  RET         call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739, false);
[L4544]  COND FALSE  !(revert)
[L4547]              __ret_0_ := true;
[L1472]  RET         call __ret_0_ := transfer~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L1473]              assume !revert && gas >= 0;
[L7712]  RET         call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L7795]  RET         call CorralChoice_MMM(this);

Loop:
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND TRUE   choice == 24
[L7626]              gas := gas - 21000;
[L7627]  COND FALSE  !(gas >= 0)
[L7795]  RET         call CorralChoice_MMM(this);

[2020-11-24 22:28:27,490 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 22:28:27,490 INFO  L82        PathProgramCache]: Analyzing trace with hash 633921892, now seen corresponding path program 1 times
[2020-11-24 22:28:27,490 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 22:28:27,518 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 22:28:28,249 INFO  L134       CoverageAnalysis]: Checked inductivity of 122 backedges. 0 proven. 1 refuted. 0 times theorem prover too weak. 121 trivial. 0 not checked.
[2020-11-24 22:28:28,250 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 22:28:28,251 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [28] total 28
[2020-11-24 22:28:28,252 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 22:28:28,252 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 29 interpolants.
[2020-11-24 22:28:28,253 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=98, Invalid=714, Unknown=0, NotChecked=0, Total=812
[2020-11-24 22:28:28,253 INFO  L87              Difference]: Start difference. First operand 4413 states and 4768 transitions. cyclomatic complexity: 360 Second operand 29 states.
[2020-11-24 22:28:35,805 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 22:28:35,805 INFO  L93              Difference]: Finished difference Result 4483 states and 4848 transitions.
[2020-11-24 22:28:35,805 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 26 states. 
[2020-11-24 22:28:35,805 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4483 states and 4848 transitions.
[2020-11-24 22:28:35,812 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 22:28:35,818 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4483 states to 4483 states and 4848 transitions.
[2020-11-24 22:28:35,819 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1171
[2020-11-24 22:28:35,819 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1171
[2020-11-24 22:28:35,819 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4483 states and 4848 transitions.
[2020-11-24 22:28:35,822 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 22:28:35,822 INFO  L728         BuchiCegarLoop]: Abstraction has 4483 states and 4848 transitions.
[2020-11-24 22:28:35,825 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4483 states and 4848 transitions.
[2020-11-24 22:28:35,842 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4483 to 4413.
[2020-11-24 22:28:35,842 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4413 states.
[2020-11-24 22:28:35,846 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4413 states to 4413 states and 4768 transitions.
[2020-11-24 22:28:35,846 INFO  L751         BuchiCegarLoop]: Abstraction has 4413 states and 4768 transitions.
[2020-11-24 22:28:35,846 INFO  L631         BuchiCegarLoop]: Abstraction has 4413 states and 4768 transitions.
[2020-11-24 22:28:35,846 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-24 22:28:35,846 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4413 states and 4768 transitions.
[2020-11-24 22:28:35,850 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 22:28:35,850 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 22:28:35,850 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 22:28:35,852 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 22:28:35,852 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC7770 := false;
[L2]                 call_transfer_ERC7770 := false;
[L2]     CALL        call main();
[L7785]              assume null == 0;
[L7786]  CALL        call this := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L7786]  RET         call this := FreshRefGenerator__success();
[L7787]              assume now >= 0;
[L7788]              assume DType[this] == MMM;
[L7789]              assume msgvalue_MSG == 0;
[L7790]              gas := gas - 53000;
[L7791]  CALL        call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L2821]              havoc __exception;
[L2822]              revert := false;
[L2823]  COND FALSE  !(__exception)
[L2860]  CALL        call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L5421]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L5421]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3987]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3972]              assume msgsender_MSG != null;
[L3973]              Balance[this] := 0;
[L3987]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3988]  COND FALSE  !(revert)
[L5425]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND FALSE  !(revert)
[L5429]  CALL        call __var_44 := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L5429]  RET         call __var_44 := FreshRefGenerator__success();
[L5430]  COND FALSE  !(revert)
[L5433]              Length[__var_44] := 0;
[L5434]              __var_43 := __var_44;
[L5435]  CALL        call ERC777_ERC777__success(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L4389]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L4389]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L4390]  COND FALSE  !(revert)
[L4393]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3987]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3972]              assume msgsender_MSG != null;
[L3973]              Balance[this] := 0;
[L3987]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3988]  COND FALSE  !(revert)
[L4393]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4394]  COND FALSE  !(revert)
[L4397]  CALL        call ERC777_ERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4305]              assume msgsender_MSG != null;
[L4306]              Balance[this] := 0;
[L4307]              _balances_ERC777[this] := zeroRefintArr();
[L4308]              sum__balances0[this] := 0;
[L4309]              _totalSupply_ERC777[this] := 0;
[L4310]              _name_ERC777[this] := -1488944962;
[L4311]              _symbol_ERC777[this] := -1488944962;
[L4312]              TOKENS_SENDER_INTERFACE_HASH_ERC777[this] := 18936552921575092301472466748482491067159488139731697543124572343800628504725;
[L4313]              TOKENS_RECIPIENT_INTERFACE_HASH_ERC777[this] := -35050735901709401846926806449422499789573591386021029871886258173058026781381;
[L4315]  CALL        call __var_9 := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L4315]  RET         call __var_9 := FreshRefGenerator__success();
[L4316]  COND FALSE  !(revert)
[L4319]              _defaultOperatorsArray_ERC777[this] := __var_9;
[L4320]              assume Length[_defaultOperatorsArray_ERC777[this]] == 0;
[L4321]              _defaultOperators_ERC777[this] := zeroRefboolArr();
[L4322]              _operators_ERC777[this] := zeroRefRefboolArr();
[L4323]              _revokedDefaultOperators_ERC777[this] := zeroRefRefboolArr();
[L4324]              _allowances_ERC777[this] := zeroRefRefintArr();
[L4325]              sum__allowances4[this] := 0;
[L4327]              _name_ERC777[this] := name_s605;
[L4328]              _symbol_ERC777[this] := symbol_s605;
[L4329]              _defaultOperatorsArray_ERC777[this] := defaultOperators_s605;
[L4330]              i_s605 := 0;
[L4331]  COND FALSE  !(i_s605 < Length[_defaultOperatorsArray_ERC777[this]])
[L4339]              __var_2 := this;
[L4340]              __var_3 := keccak256(874679271);
[L4341]              assume __var_3 != 0;
[L4342]              __var_4 := this;
[L4344]              __var_6 := this;
[L4345]              __var_7 := keccak256(-2132820306);
[L4346]              assume __var_7 != 0;
[L4347]              __var_8 := this;
[L4397]  RET         call ERC777_ERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4398]  COND FALSE  !(revert)
[L5435]  RET         call ERC777_ERC777__success(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L5436]  COND FALSE  !(revert)
[L5439]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5243]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5225]              assume msgsender_MSG != null;
[L5226]              Balance[this] := 0;
[L5227]              _owner_Ownable[this] := null;
[L5229]              _owner_Ownable[this] := msgsender_MSG;
[L5230]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L5243]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]  COND FALSE  !(revert)
[L5439]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5440]  COND FALSE  !(revert)
[L5443]  CALL        call MMM_MMM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5378]              assume msgsender_MSG != null;
[L5379]              Balance[this] := 0;
[L5380]              _maxSupply_MMM[this] := nonlinearMul(5 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5443]  RET         call MMM_MMM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5444]  COND FALSE  !(revert)
[L2860]  RET         call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L7791]  RET         call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L7792]              assume !revert && gas >= 0;
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND TRUE   choice == 19
[L7656]              gas := gas - 21000;
[L7657]  COND TRUE   gas >= 0
[L7658]              assume amount_s682 >= 0 && amount_s682 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7659]              assume msgvalue_MSG == 0;
[L7660]  CALL        call send~address~uint256~bytes_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s682, amount_s682, data_s682);
[L1349]              havoc __exception;
[L1350]              revert := false;
[L1351]  COND FALSE  !(__exception)
[L1388]  CALL        call send~address~uint256~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, recipient_s682, amount_s682, data_s682);
[L4488]              havoc empty_s682;
[L4489]  CALL        call _send~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, msgsender_MSG, recipient_s682, amount_s682, data_s682, empty_s682, true);
[L4969]              __var_20 := null;
[L4970]  COND FALSE  !(!(from_s1204 != null))
[L4974]              __var_21 := null;
[L4975]  COND FALSE  !(!(to_s1204 != null))
[L4979]  CALL        call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1204, from_s1204, to_s1204, amount_s1204, userData_s1204, operatorData_s1204);
[L5149]              implementer_s1401 := implementer_s1401;
[L5150]              __var_30 := null;
[L5151]  COND FALSE  !(implementer_s1401 != null)
[L4979]  RET         call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1204, from_s1204, to_s1204, amount_s1204, userData_s1204, operatorData_s1204);
[L4980]  COND FALSE  !(revert)
[L4983]  CALL        call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1204, from_s1204, to_s1204, amount_s1204, userData_s1204, operatorData_s1204);
[L5079]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L4064]  COND FALSE  !(!(b_s297 <= a_s297))
[L4068]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4069]              __ret_0_ := c_s297;
[L5079]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L5080]  COND FALSE  !(revert)
[L5083]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][from_s1325];
[L5084]              _balances_ERC777[this][from_s1325] := __var_26;
[L5085]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][from_s1325];
[L5086]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L4040]              c_s272 := (a_s272 + b_s272) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4041]  COND FALSE  !(!(c_s272 >= a_s272))
[L4045]              __ret_0_ := c_s272;
[L5086]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L5087]  COND FALSE  !(revert)
[L5090]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][to_s1325];
[L5091]              _balances_ERC777[this][to_s1325] := __var_27;
[L5092]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][to_s1325];
[L5093]              assert { :EventEmitted "Sent_ERC777" } true;
[L5094]              assert { :EventEmitted "Transfer_ERC777" } true;
[L4983]  RET         call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1204, from_s1204, to_s1204, amount_s1204, userData_s1204, operatorData_s1204);
[L4984]  COND FALSE  !(revert)
[L4987]  CALL        call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1204, from_s1204, to_s1204, amount_s1204, userData_s1204, operatorData_s1204, requireReceptionAck_s1204);
[L5194]              implementer_s1457 := implementer_s1457;
[L5195]              __var_34 := null;
[L5196]  COND TRUE   implementer_s1457 != null
[L5197]              assume DType[implementer_s1457] == IERC777Recipient;
[L5198]              __var_35 := implementer_s1457;
[L4987]  RET         call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1204, from_s1204, to_s1204, amount_s1204, userData_s1204, operatorData_s1204, requireReceptionAck_s1204);
[L4988]  COND FALSE  !(revert)
[L4489]  RET         call _send~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, msgsender_MSG, recipient_s682, amount_s682, data_s682, empty_s682, true);
[L4490]  COND FALSE  !(revert)
[L1388]  RET         call send~address~uint256~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, recipient_s682, amount_s682, data_s682);
[L1389]              assume !revert && gas >= 0;
[L7660]  RET         call send~address~uint256~bytes_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s682, amount_s682, data_s682);
[L7795]  RET         call CorralChoice_MMM(this);
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND FALSE  !(choice == 13)
[L7700]  COND FALSE  !(choice == 12)
[L7707]  COND TRUE   choice == 11
[L7708]              gas := gas - 21000;
[L7709]  COND TRUE   gas >= 0
[L7710]              assume amount_s739 >= 0 && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7711]              assume msgvalue_MSG == 0;
[L7712]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s739 && (amount_s739 > _balances_ERC777[this][msgsender_MSG] || _balances_ERC777[this][recipient_s739] + amount_s739 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s739 >= 0) && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][recipient_s739] >= 0) && _balances_ERC777[this][recipient_s739] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][msgsender_MSG] >= 0) && _balances_ERC777[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC7770 := true;
[L2]                 call_transfer_ERC7770 := false;
[L2]                 revert := revert_hold;
[L1433]              havoc __exception;
[L1434]              revert := false;
[L1435]  COND FALSE  !(__exception)
[L1472]  CALL        call __ret_0_ := transfer~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L4528]              __var_10 := null;
[L4529]  COND FALSE  !(!(recipient_s739 != null))
[L4533]              havoc empty_s739;
[L4534]              from_s739 := msgsender_MSG;
[L4535]  CALL        call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5149]              implementer_s1401 := implementer_s1401;
[L5150]              __var_30 := null;
[L5151]  COND FALSE  !(implementer_s1401 != null)
[L4535]  RET         call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4536]  COND FALSE  !(revert)
[L4539]  CALL        call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5079]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L4064]  COND FALSE  !(!(b_s297 <= a_s297))
[L4068]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4069]              __ret_0_ := c_s297;
[L5079]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L5080]  COND FALSE  !(revert)
[L5083]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][from_s1325];
[L5084]              _balances_ERC777[this][from_s1325] := __var_26;
[L5085]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][from_s1325];
[L5086]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L4040]              c_s272 := (a_s272 + b_s272) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4041]  COND FALSE  !(!(c_s272 >= a_s272))
[L4045]              __ret_0_ := c_s272;
[L5086]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L5087]  COND FALSE  !(revert)
[L5090]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][to_s1325];
[L5091]              _balances_ERC777[this][to_s1325] := __var_27;
[L5092]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][to_s1325];
[L5093]              assert { :EventEmitted "Sent_ERC777" } true;
[L5094]              assert { :EventEmitted "Transfer_ERC777" } true;
[L4539]  RET         call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4540]  COND FALSE  !(revert)
[L4543]  CALL        call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739, false);
[L5194]              implementer_s1457 := implementer_s1457;
[L5195]              __var_34 := null;
[L5196]  COND FALSE  !(implementer_s1457 != null)
[L5200]  COND FALSE  !(requireReceptionAck_s1457)
[L4543]  RET         call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739, false);
[L4544]  COND FALSE  !(revert)
[L4547]              __ret_0_ := true;
[L1472]  RET         call __ret_0_ := transfer~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L1473]              assume !revert && gas >= 0;
[L7712]  RET         call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L7795]  RET         call CorralChoice_MMM(this);

Loop:
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND FALSE  !(choice == 13)
[L7700]  COND FALSE  !(choice == 12)
[L7707]  COND TRUE   choice == 11
[L7708]              gas := gas - 21000;
[L7709]  COND TRUE   gas >= 0
[L7710]              assume amount_s739 >= 0 && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7711]              assume msgvalue_MSG == 0;
[L7712]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s739 && (amount_s739 > _balances_ERC777[this][msgsender_MSG] || _balances_ERC777[this][recipient_s739] + amount_s739 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s739 >= 0) && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][recipient_s739] >= 0) && _balances_ERC777[this][recipient_s739] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][msgsender_MSG] >= 0) && _balances_ERC777[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC7770 := true;
[L2]                 call_transfer_ERC7770 := false;
[L2]                 revert := revert_hold;
[L1433]              havoc __exception;
[L1434]              revert := false;
[L1435]  COND FALSE  !(__exception)
[L1472]  CALL        call __ret_0_ := transfer~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L4528]              __var_10 := null;
[L4529]  COND FALSE  !(!(recipient_s739 != null))
[L4533]              havoc empty_s739;
[L4534]              from_s739 := msgsender_MSG;
[L4535]  CALL        call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5149]              implementer_s1401 := implementer_s1401;
[L5150]              __var_30 := null;
[L5151]  COND FALSE  !(implementer_s1401 != null)
[L4535]  RET         call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4536]  COND FALSE  !(revert)
[L4539]  CALL        call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5079]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L4064]  COND FALSE  !(!(b_s297 <= a_s297))
[L4068]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4069]              __ret_0_ := c_s297;
[L5079]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L5080]  COND FALSE  !(revert)
[L5083]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][from_s1325];
[L5084]              _balances_ERC777[this][from_s1325] := __var_26;
[L5085]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][from_s1325];
[L5086]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L4040]              c_s272 := (a_s272 + b_s272) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4041]  COND FALSE  !(!(c_s272 >= a_s272))
[L4045]              __ret_0_ := c_s272;
[L5086]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L5087]  COND FALSE  !(revert)
[L5090]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][to_s1325];
[L5091]              _balances_ERC777[this][to_s1325] := __var_27;
[L5092]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][to_s1325];
[L5093]              assert { :EventEmitted "Sent_ERC777" } true;
[L5094]              assert { :EventEmitted "Transfer_ERC777" } true;
[L4539]  RET         call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4540]  COND FALSE  !(revert)
[L4543]  CALL        call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739, false);
[L5194]              implementer_s1457 := implementer_s1457;
[L5195]              __var_34 := null;
[L5196]  COND FALSE  !(implementer_s1457 != null)
[L5200]  COND FALSE  !(requireReceptionAck_s1457)
[L4543]  RET         call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739, false);
[L4544]  COND FALSE  !(revert)
[L4547]              __ret_0_ := true;
[L1472]  RET         call __ret_0_ := transfer~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L1473]              assume !revert && gas >= 0;
[L7712]  RET         call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L7795]  RET         call CorralChoice_MMM(this);

[2020-11-24 22:28:35,856 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 22:28:35,856 INFO  L82        PathProgramCache]: Analyzing trace with hash 266743327, now seen corresponding path program 1 times
[2020-11-24 22:28:35,857 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 22:28:35,875 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 22:28:36,020 INFO  L134       CoverageAnalysis]: Checked inductivity of 116 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 116 trivial. 0 not checked.
[2020-11-24 22:28:36,021 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 22:28:36,021 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-24 22:28:36,021 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 22:28:36,021 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-11-24 22:28:36,021 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=129, Unknown=0, NotChecked=0, Total=156
[2020-11-24 22:28:36,022 INFO  L87              Difference]: Start difference. First operand 4413 states and 4768 transitions. cyclomatic complexity: 360 Second operand 13 states.
[2020-11-24 22:28:37,820 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 22:28:37,820 INFO  L93              Difference]: Finished difference Result 2486 states and 2680 transitions.
[2020-11-24 22:28:37,820 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-11-24 22:28:37,820 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2486 states and 2680 transitions.
[2020-11-24 22:28:37,824 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-24 22:28:37,824 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2486 states to 0 states and 0 transitions.
[2020-11-24 22:28:37,824 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-24 22:28:37,824 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-24 22:28:37,824 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-24 22:28:37,824 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 22:28:37,824 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 22:28:37,824 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 22:28:37,824 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 22:28:37,824 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-24 22:28:37,824 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-24 22:28:37,824 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-24 22:28:37,824 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-24 22:28:37,827 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 10:28:37 BasicIcfg
[2020-11-24 22:28:37,827 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-24 22:28:37,827 INFO  L168              Benchmark]: Toolchain (without parser) took 24905.34 ms. Allocated memory was 1.0 GB in the beginning and 2.7 GB in the end (delta: 1.7 GB). Free memory was 929.8 MB in the beginning and 2.4 GB in the end (delta: -1.5 GB). Peak memory consumption was 184.7 MB. Max. memory is 15.3 GB.
[2020-11-24 22:28:37,828 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 22:28:37,828 INFO  L168              Benchmark]: Boogie Preprocessor took 134.31 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.7 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-24 22:28:37,828 INFO  L168              Benchmark]: UtopiaSpecLang took 90.30 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 903.0 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-24 22:28:37,829 INFO  L168              Benchmark]: Boogie Printer took 21.26 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-24 22:28:37,829 INFO  L168              Benchmark]: RCFGBuilder took 1129.60 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 62.4 MB). Free memory was 897.6 MB in the beginning and 975.2 MB in the end (delta: -77.6 MB). Peak memory consumption was 185.6 MB. Max. memory is 15.3 GB.
[2020-11-24 22:28:37,829 INFO  L168              Benchmark]: UtopiaLTL2Aut took 37.66 ms. Allocated memory is still 1.1 GB. Free memory was 975.2 MB in the beginning and 968.3 MB in the end (delta: 6.9 MB). Peak memory consumption was 6.9 MB. Max. memory is 15.3 GB.
[2020-11-24 22:28:37,830 INFO  L168              Benchmark]: BÃ¼chi Program Product took 2493.82 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 162.0 MB). Free memory was 968.3 MB in the beginning and 765.7 MB in the end (delta: 202.6 MB). Peak memory consumption was 463.9 MB. Max. memory is 15.3 GB.
[2020-11-24 22:28:37,830 INFO  L168              Benchmark]: BlockEncodingV2 took 250.72 ms. Allocated memory is still 1.3 GB. Free memory was 765.7 MB in the beginning and 668.3 MB in the end (delta: 97.4 MB). Peak memory consumption was 97.4 MB. Max. memory is 15.3 GB.
[2020-11-24 22:28:37,830 INFO  L168              Benchmark]: BuchiAutomizer took 20744.43 ms. Allocated memory was 1.3 GB in the beginning and 2.7 GB in the end (delta: 1.4 GB). Free memory was 668.3 MB in the beginning and 2.4 GB in the end (delta: -1.8 GB). There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 22:28:37,833 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    6814 locations, 11842 edges
  - StatisticsResult: Encoded RCFG
    6650 locations, 11456 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 134.31 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.7 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 90.30 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 903.0 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 21.26 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1129.60 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 62.4 MB). Free memory was 897.6 MB in the beginning and 975.2 MB in the end (delta: -77.6 MB). Peak memory consumption was 185.6 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 37.66 ms. Allocated memory is still 1.1 GB. Free memory was 975.2 MB in the beginning and 968.3 MB in the end (delta: 6.9 MB). Peak memory consumption was 6.9 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 2493.82 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 162.0 MB). Free memory was 968.3 MB in the beginning and 765.7 MB in the end (delta: 202.6 MB). Peak memory consumption was 463.9 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 250.72 ms. Allocated memory is still 1.3 GB. Free memory was 765.7 MB in the beginning and 668.3 MB in the end (delta: 97.4 MB). Peak memory consumption was 97.4 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 20744.43 ms. Allocated memory was 1.3 GB in the beginning and 2.7 GB in the end (delta: 1.4 GB). Free memory was 668.3 MB in the beginning and 2.4 GB in the end (delta: -1.8 GB). There was no memory consumed. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2828 locations, 3650 edges
  - StatisticsResult: BuchiProgram size
    6814 locations, 11842 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 10 terminating modules (10 trivial, 0 deterministic, 0 nondeterministic). 10 modules have a trivial ranking function, the largest among these consists of 29 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 20.7s and 11 iterations.  TraceHistogramMax:3. Analysis of lassos took 2.3s. Construction of modules took 13.0s. BÃ¼chi inclusion checks took 4.3s. Highest rank in rank-based complementation 0. Minimization of det autom 10. Minimization of nondet autom 0. Automata minimization 0.3s AutomataMinimizationTime, 9 MinimizatonAttempts, 2018 StatesRemovedByMinimization, 6 NontrivialMinimizations. Non-live state removal took 0.2s Buchi closure took 0.0s. Biggest automaton had 4733 states and ocurred in iteration 3.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 44787 SDtfs, 38033 SDslu, 112548 SDs, 0 SdLazy, 161021 SolverSat, 5399 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 13.0s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU10 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transfer_ERC7770) ==> ( <>(fail_transfer_ERC7770) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
