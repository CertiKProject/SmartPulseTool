This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 08:35:52,005 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 08:35:52,006 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 08:35:52,017 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 08:35:52,017 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 08:35:52,017 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 08:35:52,018 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 08:35:52,020 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 08:35:52,021 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 08:35:52,022 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 08:35:52,022 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 08:35:52,023 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 08:35:52,023 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 08:35:52,024 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 08:35:52,025 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 08:35:52,025 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 08:35:52,026 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 08:35:52,027 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 08:35:52,028 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 08:35:52,029 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 08:35:52,030 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 08:35:52,031 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 08:35:52,032 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 08:35:52,033 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 08:35:52,033 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 08:35:52,033 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 08:35:52,034 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 08:35:52,034 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 08:35:52,034 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 08:35:52,034 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 08:35:52,035 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 08:35:52,035 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 08:35:52,036 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 08:35:52,036 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 08:35:52,037 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 08:35:52,037 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 08:35:52,038 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 08:35:52,038 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 08:35:52,038 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 08:35:52,039 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 08:35:52,039 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 08:35:52,039 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 08:35:52,047 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 08:35:52,047 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 08:35:52,048 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 08:35:52,048 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 08:35:52,048 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 08:35:52,048 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 08:35:52,048 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 08:35:52,048 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 08:35:52,048 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 08:35:52,048 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 08:35:52,048 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 08:35:52,049 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 08:35:52,049 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 08:35:52,049 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 08:35:52,049 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 08:35:52,049 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 08:35:52,049 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 08:35:52,049 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 08:35:52,049 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 08:35:52,049 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 08:35:52,049 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 08:35:52,050 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 08:35:52,050 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 08:35:52,050 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 08:35:52,050 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 08:35:52,050 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 08:35:52,069 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 08:35:52,078 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 08:35:52,080 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 08:35:52,082 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 08:35:52,082 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 08:35:52,082 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_allowance.bpl
[2020-11-25 08:35:52,083 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_allowance.bpl'
[2020-11-25 08:35:52,189 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 08:35:52,191 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 08:35:52,191 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 08:35:52,191 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 08:35:52,191 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 08:35:52,209 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:35:52" (1/1) ...
[2020-11-25 08:35:52,211 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:35:52" (1/1) ...
[2020-11-25 08:35:52,253 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:35:52" (1/1) ...
[2020-11-25 08:35:52,254 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:35:52" (1/1) ...
[2020-11-25 08:35:52,282 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:35:52" (1/1) ...
[2020-11-25 08:35:52,297 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:35:52" (1/1) ...
[2020-11-25 08:35:52,310 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:35:52" (1/1) ...
[2020-11-25 08:35:52,326 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 08:35:52,327 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 08:35:52,327 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 08:35:52,329 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 08:35:52,333 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:35:52" (1/1) ...
[2020-11-25 08:35:52,364 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20.allowance(owner, spender), _allowances_ERC20[this][owner][spender] >= 0 && _allowances_ERC20[this][owner][spender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.allowance(owner, spender), return == _allowances_ERC20[this][owner][spender] &&  _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 08:35:52,370 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20.allowance(owner, spender), _allowances_ERC20[this][owner][spender] >= 0 && _allowances_ERC20[this][owner][spender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.allowance(owner, spender), return == _allowances_ERC20[this][owner][spender] &&  _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 08:35:52,378 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20.allowance(owner, spender), _allowances_ERC20[this][owner][spender] >= 0 && _allowances_ERC20[this][owner][spender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.allowance(owner, spender), return == _allowances_ERC20[this][owner][spender] &&  _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 08:35:52,386 INFO  L636   opiaSpecLangObserver]: Parsed ( _allowances_ERC20[this][owner_s352][spender_s352]>=0 && _allowances_ERC20[this][owner_s352][spender_s352]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],[IdentifierExpression[owner_s352,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],[IdentifierExpression[spender_s352,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],IntegerLiteral[0]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],[IdentifierExpression[owner_s352,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],[IdentifierExpression[spender_s352,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 08:35:52,389 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( __ret_0_==_allowances_ERC20[this][owner_s352][spender_s352] && _totalSupply_ERC20[this]==( old(_totalSupply_ERC20[this]) ) ) && _balances_ERC20[this]==( old(_balances_ERC20[this]) ) ) && _allowances_ERC20[this]==( old(_allowances_ERC20[this]) ) ) && _cap_ERC20Capped[this]==( old(_cap_ERC20Capped[this]) ) ) && _minters_MinterRole[this]==( old(_minters_MinterRole[this]) ) ) && _name_ERC20Detailed[this]==( old(_name_ERC20Detailed[this]) ) ) && _symbol_ERC20Detailed[this]==( old(_symbol_ERC20Detailed[this]) ) ) && _decimals_ERC20Detailed[this]==( old(_decimals_ERC20Detailed[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,allowance~address~address_ERC20>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],[IdentifierExpression[owner_s352,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],[IdentifierExpression[spender_s352,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_cap_ERC20Capped,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_cap_ERC20Capped,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_minters_MinterRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_minters_MinterRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]]]]]
[2020-11-25 08:35:52,397 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20.allowance(owner, spender), _allowances_ERC20[this][owner][spender] >= 0 && _allowances_ERC20[this][owner][spender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.allowance(owner, spender), return == _allowances_ERC20[this][owner][spender] &&  _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 08:35:52,397 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_allowance_ERC200) ==> ( <>AP(success_allowance_ERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 08:35:52,413 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:35:52 PropertyContainer
[2020-11-25 08:35:52,413 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 08:35:52,414 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 08:35:52,414 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 08:35:52,414 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 08:35:52,415 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:35:52" (1/2) ...
[2020-11-25 08:35:52,415 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 08:35:52,415 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 08:35:52,437 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:35:52" (2/2) ...
[2020-11-25 08:35:52,437 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 08:35:52,438 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 08:35:52,438 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 08:35:52,438 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 08:35:52,439 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:35:52" (1/2) ...
[2020-11-25 08:35:52,494 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 08:35:52,495 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__success
[2020-11-25 08:35:52,495 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 08:35:52,495 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 08:35:52,495 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 08:35:52,495 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 08:35:52,495 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 08:35:52,495 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 08:35:52,496 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 08:35:52,496 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 08:35:52,496 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 08:35:52,496 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 08:35:52,496 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 08:35:52,496 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 08:35:52,496 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 08:35:52,497 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 08:35:52,497 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 08:35:52,497 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 08:35:52,497 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 08:35:52,497 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 08:35:52,498 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__success
[2020-11-25 08:35:52,498 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context
[2020-11-25 08:35:52,498 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context
[2020-11-25 08:35:52,498 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__success
[2020-11-25 08:35:52,498 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 08:35:52,498 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 08:35:52,498 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 08:35:52,498 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 08:35:52,498 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 08:35:52,498 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 08:35:52,499 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 08:35:52,499 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256~string_SafeMath__success
[2020-11-25 08:35:52,499 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 08:35:52,499 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 08:35:52,499 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 08:35:52,499 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 08:35:52,499 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 08:35:52,499 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 08:35:52,499 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 08:35:52,500 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 08:35:52,500 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 08:35:52,500 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 08:35:52,500 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 08:35:52,500 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 08:35:52,500 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 08:35:52,500 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 08:35:52,500 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 08:35:52,500 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 08:35:52,500 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 08:35:52,500 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 08:35:52,501 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 08:35:52,501 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 08:35:52,501 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 08:35:52,501 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 08:35:52,501 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 08:35:52,501 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 08:35:52,501 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 08:35:52,501 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles
[2020-11-25 08:35:52,501 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles
[2020-11-25 08:35:52,502 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__success
[2020-11-25 08:35:52,502 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__success
[2020-11-25 08:35:52,502 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__success
[2020-11-25 08:35:52,502 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 08:35:52,502 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole
[2020-11-25 08:35:52,502 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole
[2020-11-25 08:35:52,502 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole
[2020-11-25 08:35:52,502 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole
[2020-11-25 08:35:52,502 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole
[2020-11-25 08:35:52,502 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole
[2020-11-25 08:35:52,502 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole
[2020-11-25 08:35:52,503 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole
[2020-11-25 08:35:52,503 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__success
[2020-11-25 08:35:52,503 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__success
[2020-11-25 08:35:52,503 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 08:35:52,503 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 08:35:52,503 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 08:35:52,503 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 08:35:52,503 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 08:35:52,503 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped_NoBaseCtor__success
[2020-11-25 08:35:52,504 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped
[2020-11-25 08:35:52,504 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped
[2020-11-25 08:35:52,504 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_ERC20Capped
[2020-11-25 08:35:52,504 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_ERC20Capped
[2020-11-25 08:35:52,504 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20Capped__success
[2020-11-25 08:35:52,504 INFO  L130     BoogieDeclarations]: Found specification of procedure VIToken_VIToken_NoBaseCtor__success
[2020-11-25 08:35:52,504 INFO  L130     BoogieDeclarations]: Found specification of procedure VIToken_VIToken
[2020-11-25 08:35:52,504 INFO  L138     BoogieDeclarations]: Found implementation of procedure VIToken_VIToken
[2020-11-25 08:35:52,504 INFO  L130     BoogieDeclarations]: Found specification of procedure DECIMALS_VIToken
[2020-11-25 08:35:52,504 INFO  L138     BoogieDeclarations]: Found implementation of procedure DECIMALS_VIToken
[2020-11-25 08:35:52,505 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_VIToken
[2020-11-25 08:35:52,505 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_VIToken
[2020-11-25 08:35:52,505 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 08:35:52,505 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 08:35:52,505 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 08:35:52,505 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__success
[2020-11-25 08:35:52,505 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 08:35:52,505 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 08:35:52,505 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 08:35:52,505 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 08:35:52,505 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Context
[2020-11-25 08:35:52,506 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Context
[2020-11-25 08:35:52,506 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 08:35:52,506 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 08:35:52,506 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 08:35:52,506 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 08:35:52,506 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Roles
[2020-11-25 08:35:52,506 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Roles
[2020-11-25 08:35:52,506 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MinterRole
[2020-11-25 08:35:52,506 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MinterRole
[2020-11-25 08:35:52,506 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Mintable
[2020-11-25 08:35:52,507 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Mintable
[2020-11-25 08:35:52,507 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Capped
[2020-11-25 08:35:52,507 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Capped
[2020-11-25 08:35:52,507 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_VIToken
[2020-11-25 08:35:52,507 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 08:35:52,507 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 08:35:52,507 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__fail
[2020-11-25 08:35:52,507 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 08:35:52,507 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 08:35:52,507 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 08:35:52,508 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 08:35:52,508 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 08:35:52,508 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 08:35:52,508 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 08:35:52,508 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 08:35:52,508 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 08:35:52,508 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 08:35:52,508 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 08:35:52,508 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 08:35:52,508 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 08:35:52,509 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__success
[2020-11-25 08:35:52,509 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__fail
[2020-11-25 08:35:52,509 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__fail
[2020-11-25 08:35:52,509 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 08:35:52,509 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 08:35:52,509 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 08:35:52,509 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 08:35:52,509 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 08:35:52,509 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 08:35:52,509 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 08:35:52,510 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256~string_SafeMath__fail
[2020-11-25 08:35:52,510 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 08:35:52,510 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 08:35:52,510 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 08:35:52,510 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 08:35:52,510 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 08:35:52,510 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 08:35:52,510 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 08:35:52,510 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 08:35:52,511 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 08:35:52,511 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 08:35:52,511 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 08:35:52,511 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 08:35:52,511 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 08:35:52,511 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 08:35:52,511 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 08:35:52,511 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 08:35:52,511 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 08:35:52,511 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 08:35:52,512 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 08:35:52,512 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 08:35:52,512 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 08:35:52,512 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 08:35:52,512 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 08:35:52,512 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 08:35:52,512 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 08:35:52,512 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__success
[2020-11-25 08:35:52,512 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__fail
[2020-11-25 08:35:52,512 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__fail
[2020-11-25 08:35:52,512 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__fail
[2020-11-25 08:35:52,513 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__fail
[2020-11-25 08:35:52,513 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 08:35:52,513 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__success
[2020-11-25 08:35:52,513 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__fail
[2020-11-25 08:35:52,513 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__success
[2020-11-25 08:35:52,513 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__fail
[2020-11-25 08:35:52,513 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__success
[2020-11-25 08:35:52,513 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__fail
[2020-11-25 08:35:52,513 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__success
[2020-11-25 08:35:52,513 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__fail
[2020-11-25 08:35:52,513 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__fail
[2020-11-25 08:35:52,514 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 08:35:52,514 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 08:35:52,514 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 08:35:52,514 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 08:35:52,514 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 08:35:52,514 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 08:35:52,514 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped_NoBaseCtor__fail
[2020-11-25 08:35:52,514 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped__success
[2020-11-25 08:35:52,514 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped__fail
[2020-11-25 08:35:52,514 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_ERC20Capped__success
[2020-11-25 08:35:52,514 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_ERC20Capped__fail
[2020-11-25 08:35:52,515 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20Capped__fail
[2020-11-25 08:35:52,515 INFO  L130     BoogieDeclarations]: Found specification of procedure VIToken_VIToken_NoBaseCtor__fail
[2020-11-25 08:35:52,515 INFO  L130     BoogieDeclarations]: Found specification of procedure VIToken_VIToken__success
[2020-11-25 08:35:52,515 INFO  L130     BoogieDeclarations]: Found specification of procedure VIToken_VIToken__fail
[2020-11-25 08:35:52,515 INFO  L130     BoogieDeclarations]: Found specification of procedure DECIMALS_VIToken__success
[2020-11-25 08:35:52,515 INFO  L130     BoogieDeclarations]: Found specification of procedure DECIMALS_VIToken__fail
[2020-11-25 08:35:52,515 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_VIToken__success
[2020-11-25 08:35:52,515 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_VIToken__fail
[2020-11-25 08:35:52,515 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 08:35:52,515 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 08:35:52,515 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 08:35:52,516 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__fail
[2020-11-25 08:35:52,516 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 08:35:52,516 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 08:35:52,516 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__fail
[2020-11-25 08:35:52,516 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__success
[2020-11-25 08:35:52,516 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 08:35:52,516 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 08:35:52,516 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 08:35:52,516 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 08:35:52,516 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 08:35:52,516 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 08:35:52,516 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 08:35:52,517 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 08:35:52,517 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 08:35:52,517 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 08:35:52,517 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 08:35:52,517 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 08:35:52,517 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 08:35:52,517 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 08:35:52,517 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 08:35:52,517 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__success
[2020-11-25 08:35:52,517 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__fail
[2020-11-25 08:35:52,517 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__success
[2020-11-25 08:35:52,517 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__fail
[2020-11-25 08:35:52,518 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__success
[2020-11-25 08:35:52,518 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 08:35:52,518 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 08:35:52,518 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 08:35:52,518 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 08:35:52,518 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 08:35:52,518 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 08:35:52,518 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 08:35:52,518 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 08:35:52,518 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 08:35:52,518 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 08:35:52,518 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 08:35:52,519 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 08:35:52,519 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256~string_SafeMath__fail
[2020-11-25 08:35:52,519 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256~string_SafeMath__success
[2020-11-25 08:35:52,519 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 08:35:52,519 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 08:35:52,519 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 08:35:52,519 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 08:35:52,519 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 08:35:52,519 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 08:35:52,519 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 08:35:52,519 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 08:35:52,519 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 08:35:52,520 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 08:35:52,520 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 08:35:52,520 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 08:35:52,520 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 08:35:52,520 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 08:35:52,520 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 08:35:52,520 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 08:35:52,520 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 08:35:52,520 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 08:35:52,520 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 08:35:52,520 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 08:35:52,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 08:35:52,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 08:35:52,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 08:35:52,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 08:35:52,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 08:35:52,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 08:35:52,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 08:35:52,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 08:35:52,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 08:35:52,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 08:35:52,522 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 08:35:52,522 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 08:35:52,522 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__fail
[2020-11-25 08:35:52,522 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__success
[2020-11-25 08:35:52,522 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__fail
[2020-11-25 08:35:52,522 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__success
[2020-11-25 08:35:52,522 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__fail
[2020-11-25 08:35:52,522 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__success
[2020-11-25 08:35:52,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__fail
[2020-11-25 08:35:52,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__success
[2020-11-25 08:35:52,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 08:35:52,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 08:35:52,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__fail
[2020-11-25 08:35:52,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__success
[2020-11-25 08:35:52,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__fail
[2020-11-25 08:35:52,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__success
[2020-11-25 08:35:52,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__fail
[2020-11-25 08:35:52,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__success
[2020-11-25 08:35:52,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__fail
[2020-11-25 08:35:52,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__success
[2020-11-25 08:35:52,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__fail
[2020-11-25 08:35:52,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__success
[2020-11-25 08:35:52,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 08:35:52,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__success
[2020-11-25 08:35:52,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 08:35:52,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 08:35:52,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 08:35:52,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 08:35:52,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 08:35:52,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 08:35:52,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped_NoBaseCtor__fail
[2020-11-25 08:35:52,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped_NoBaseCtor__success
[2020-11-25 08:35:52,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped__fail
[2020-11-25 08:35:52,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped__success
[2020-11-25 08:35:52,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_ERC20Capped__fail
[2020-11-25 08:35:52,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_ERC20Capped__success
[2020-11-25 08:35:52,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20Capped__fail
[2020-11-25 08:35:52,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20Capped__success
[2020-11-25 08:35:52,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure VIToken_VIToken_NoBaseCtor__fail
[2020-11-25 08:35:52,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure VIToken_VIToken_NoBaseCtor__success
[2020-11-25 08:35:52,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure VIToken_VIToken__fail
[2020-11-25 08:35:52,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure VIToken_VIToken__success
[2020-11-25 08:35:52,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure DECIMALS_VIToken__fail
[2020-11-25 08:35:52,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure DECIMALS_VIToken__success
[2020-11-25 08:35:52,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_VIToken__fail
[2020-11-25 08:35:52,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_VIToken__success
[2020-11-25 08:35:52,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 08:35:52,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 08:35:52,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 08:35:52,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 08:35:52,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 08:35:52,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 08:35:52,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__fail
[2020-11-25 08:35:52,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__success
[2020-11-25 08:35:52,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 08:35:52,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 08:35:52,527 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 08:35:52,527 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 08:35:52,527 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Context
[2020-11-25 08:35:52,527 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Context
[2020-11-25 08:35:52,527 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 08:35:52,527 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 08:35:52,527 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 08:35:52,527 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 08:35:52,527 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Roles
[2020-11-25 08:35:52,527 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Roles
[2020-11-25 08:35:52,527 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MinterRole
[2020-11-25 08:35:52,527 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MinterRole
[2020-11-25 08:35:52,527 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Mintable
[2020-11-25 08:35:52,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Mintable
[2020-11-25 08:35:52,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Capped
[2020-11-25 08:35:52,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Capped
[2020-11-25 08:35:52,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_VIToken
[2020-11-25 08:35:52,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 08:35:52,528 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 08:35:52,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 08:35:53,323 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:35:53,323 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:35:53,323 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:35:53,727 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 08:35:53,727 INFO  L286             CfgBuilder]: Removed 10 assue(true) statements.
[2020-11-25 08:35:53,730 INFO  L202        PluginConnector]: Adding new model VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_allowance.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:35:53 BoogieIcfgContainer
[2020-11-25 08:35:53,730 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:35:52" (2/2) ...
[2020-11-25 08:35:53,730 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 08:35:53,731 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@7a0c60ff and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:35:53, skipping insertion in model container
[2020-11-25 08:35:53,731 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 08:35:53,731 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 08:35:53,731 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 08:35:53,732 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 08:35:53,732 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:35:52" (1/3) ...
[2020-11-25 08:35:53,733 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@61eb7d0c and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:35:53, skipping insertion in model container
[2020-11-25 08:35:53,733 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:35:52" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 08:35:53,768 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:35:53 NWAContainer
[2020-11-25 08:35:53,768 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 08:35:53,768 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 08:35:53,768 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 08:35:53,769 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 08:35:53,770 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_allowance.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:35:53" (3/4) ...
[2020-11-25 08:35:53,770 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@3a57fe11 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:35:53, skipping insertion in model container
[2020-11-25 08:35:53,770 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:35:53" (4/4) ...
[2020-11-25 08:35:53,773 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 08:35:53,779 INFO  L110   BuchiProductObserver]: Initial RCFG 3084 locations, 4749 edges
[2020-11-25 08:35:53,780 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 08:35:53,793 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 08:35:55,997 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 08:35:56,008 INFO  L110   BuchiProductObserver]: BuchiProgram size 8160 locations, 15600 edges
[2020-11-25 08:35:56,008 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:35:56 BoogieIcfgContainer
[2020-11-25 08:35:56,009 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 08:35:56,009 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 08:35:56,009 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 08:35:56,010 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 08:35:56,011 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:35:56" (1/1) ...
[2020-11-25 08:35:56,149 INFO  L313           BlockEncoder]: Initial Icfg 8160 locations, 15600 edges
[2020-11-25 08:35:56,149 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 08:35:56,150 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 08:35:56,150 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 08:35:56,151 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 08:35:56,167 INFO  L70    emoveInfeasibleEdges]: Removed 252 edges and 23 locations because of local infeasibility
[2020-11-25 08:35:56,185 INFO  L70        RemoveSinkStates]: Removed 170 edges and 113 locations by removing sink states
[2020-11-25 08:35:56,202 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 08:35:56,208 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 08:35:56,212 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 08:35:56,213 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 08:35:56,216 INFO  L313           BlockEncoder]: Encoded RCFG 7992 locations, 15131 edges
[2020-11-25 08:35:56,217 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 08:35:56 BasicIcfg
[2020-11-25 08:35:56,217 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 08:35:56,217 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 08:35:56,217 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 08:35:56,219 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 08:35:56,219 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:35:56,219 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:35:52" (1/6) ...
[2020-11-25 08:35:56,220 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3f246bff and model type VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_allowance.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 08:35:56, skipping insertion in model container
[2020-11-25 08:35:56,220 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:35:56,221 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:35:52" (2/6) ...
[2020-11-25 08:35:56,221 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3f246bff and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 08:35:56, skipping insertion in model container
[2020-11-25 08:35:56,221 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:35:56,221 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_allowance.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:35:53" (3/6) ...
[2020-11-25 08:35:56,221 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3f246bff and model type VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_allowance.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 08:35:56, skipping insertion in model container
[2020-11-25 08:35:56,221 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:35:56,221 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:35:53" (4/6) ...
[2020-11-25 08:35:56,221 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3f246bff and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 08:35:56, skipping insertion in model container
[2020-11-25 08:35:56,221 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:35:56,221 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:35:56" (5/6) ...
[2020-11-25 08:35:56,221 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3f246bff and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 08:35:56, skipping insertion in model container
[2020-11-25 08:35:56,222 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:35:56,222 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 08:35:56" (6/6) ...
[2020-11-25 08:35:56,223 INFO  L404   chiAutomizerObserver]: Analyzing ICFG VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_allowance.bpl_BEv2
[2020-11-25 08:35:56,254 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 08:35:56,254 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 08:35:56,254 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 08:35:56,254 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 08:35:56,254 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 08:35:56,254 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 08:35:56,254 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 08:35:56,255 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 08:35:56,255 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 08:35:56,307 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7992 states.
[2020-11-25 08:35:56,373 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:35:56,373 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:35:56,373 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:35:56,380 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:35:56,380 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:35:56,380 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 08:35:56,380 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7992 states.
[2020-11-25 08:35:56,409 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:35:56,409 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:35:56,409 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:35:56,410 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:35:56,411 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_allowance_ERC200 := false;
[L2]                 call_allowance_ERC200 := false;
[L2]     CALL        call main();
[L8249]              assume null == 0;
[L8250]  CALL        call this := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L8250]  RET         call this := FreshRefGenerator__success();
[L8251]              assume now >= 0;
[L8252]              assume DType[this] == VIToken;
[L8253]              assume msgvalue_MSG == 0;
[L8254]              gas := gas - 53000;
[L8255]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1862]              havoc __exception;
[L1863]              revert := false;
[L1864]  COND FALSE  !(__exception)
[L1892]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5409]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5409]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  COND TRUE   revert
[L1892]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1893]              assume !revert && gas >= 0;
[L8255]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8256]              assume !revert && gas >= 0;

Loop:
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND TRUE   choice == 18
[L8128]              gas := gas - 21000;
[L8129]  COND FALSE  !(gas >= 0)
[L8259]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:35:56,424 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:35:56,424 INFO  L82        PathProgramCache]: Analyzing trace with hash -242737061, now seen corresponding path program 1 times
[2020-11-25 08:35:56,428 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:35:56,449 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:35:56,488 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 08:35:56,490 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:35:56,490 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 08:35:56,820 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:35:56,829 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 08:35:56,829 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 08:35:56,830 INFO  L87              Difference]: Start difference. First operand 7992 states. Second operand 4 states.
[2020-11-25 08:35:57,635 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:35:57,636 INFO  L93              Difference]: Finished difference Result 4692 states and 5966 transitions.
[2020-11-25 08:35:57,636 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 08:35:57,637 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4692 states and 5966 transitions.
[2020-11-25 08:35:57,662 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:35:57,690 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4692 states to 4692 states and 5966 transitions.
[2020-11-25 08:35:57,691 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 08:35:57,693 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 871
[2020-11-25 08:35:57,694 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4692 states and 5966 transitions.
[2020-11-25 08:35:57,705 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:35:57,705 INFO  L728         BuchiCegarLoop]: Abstraction has 4692 states and 5966 transitions.
[2020-11-25 08:35:57,720 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4692 states and 5966 transitions.
[2020-11-25 08:35:57,779 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4692 to 4692.
[2020-11-25 08:35:57,779 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4692 states.
[2020-11-25 08:35:57,786 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4692 states to 4692 states and 5966 transitions.
[2020-11-25 08:35:57,787 INFO  L751         BuchiCegarLoop]: Abstraction has 4692 states and 5966 transitions.
[2020-11-25 08:35:57,787 INFO  L631         BuchiCegarLoop]: Abstraction has 4692 states and 5966 transitions.
[2020-11-25 08:35:57,787 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 08:35:57,787 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4692 states and 5966 transitions.
[2020-11-25 08:35:57,797 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:35:57,797 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:35:57,797 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:35:57,799 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:35:57,799 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_allowance_ERC200 := false;
[L2]                 call_allowance_ERC200 := false;
[L2]     CALL        call main();
[L8249]              assume null == 0;
[L8250]  CALL        call this := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L8250]  RET         call this := FreshRefGenerator__success();
[L8251]              assume now >= 0;
[L8252]              assume DType[this] == VIToken;
[L8253]              assume msgvalue_MSG == 0;
[L8254]              gas := gas - 53000;
[L8255]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1862]              havoc __exception;
[L1863]              revert := false;
[L1864]  COND FALSE  !(__exception)
[L1892]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5409]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND TRUE   revert
[L5409]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  COND TRUE   revert
[L1892]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1893]              assume !revert && gas >= 0;
[L8255]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8256]              assume !revert && gas >= 0;
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND FALSE  !(choice == 16)
[L8146]  COND TRUE   choice == 15
[L8147]              gas := gas - 21000;
[L8148]  COND TRUE   gas >= 0
[L8149]              assume msgvalue_MSG == 0;
[L8150]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s352, spender_s352);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _allowances_ERC20[this][owner_s352][spender_s352] >= 0 && _allowances_ERC20[this][owner_s352][spender_s352] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_ERC200 := true;
[L2]                 call_allowance_ERC200 := false;
[L2]                 revert := revert_hold;
[L841]               havoc __exception;
[L842]               revert := false;
[L843]   COND FALSE  !(__exception)
[L871]   CALL        call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s352, spender_s352);
[L3491]              __ret_0_ := _allowances_ERC20[this][owner_s352][spender_s352];
[L871]   RET         call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s352, spender_s352);
[L872]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _allowances_ERC20[this][owner_s352][spender_s352] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L8150]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s352, spender_s352);
[L8259]  RET         call CorralChoice_VIToken(this);

Loop:
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND FALSE  !(choice == 16)
[L8146]  COND TRUE   choice == 15
[L8147]              gas := gas - 21000;
[L8148]  COND TRUE   gas >= 0
[L8149]              assume msgvalue_MSG == 0;
[L8150]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s352, spender_s352);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _allowances_ERC20[this][owner_s352][spender_s352] >= 0 && _allowances_ERC20[this][owner_s352][spender_s352] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_ERC200 := true;
[L2]                 call_allowance_ERC200 := false;
[L2]                 revert := revert_hold;
[L841]               havoc __exception;
[L842]               revert := false;
[L843]   COND FALSE  !(__exception)
[L871]   CALL        call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s352, spender_s352);
[L3491]              __ret_0_ := _allowances_ERC20[this][owner_s352][spender_s352];
[L871]   RET         call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s352, spender_s352);
[L872]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _allowances_ERC20[this][owner_s352][spender_s352] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L8150]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s352, spender_s352);
[L8259]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:35:57,803 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:35:57,803 INFO  L82        PathProgramCache]: Analyzing trace with hash -626089542, now seen corresponding path program 1 times
[2020-11-25 08:35:57,804 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:35:57,815 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:35:57,835 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 08:35:57,835 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:35:57,835 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 08:35:57,837 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:35:57,837 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 08:35:57,837 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 08:35:57,837 INFO  L87              Difference]: Start difference. First operand 4692 states and 5966 transitions. cyclomatic complexity: 1276 Second operand 3 states.
[2020-11-25 08:35:58,002 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:35:58,003 INFO  L93              Difference]: Finished difference Result 6026 states and 7624 transitions.
[2020-11-25 08:35:58,003 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 08:35:58,003 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6026 states and 7624 transitions.
[2020-11-25 08:35:58,021 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:35:58,046 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6026 states to 5492 states and 6688 transitions.
[2020-11-25 08:35:58,046 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1085
[2020-11-25 08:35:58,047 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1133
[2020-11-25 08:35:58,047 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5492 states and 6688 transitions.
[2020-11-25 08:35:58,054 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:35:58,054 INFO  L728         BuchiCegarLoop]: Abstraction has 5492 states and 6688 transitions.
[2020-11-25 08:35:58,059 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5492 states and 6688 transitions.
[2020-11-25 08:35:58,109 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5492 to 5121.
[2020-11-25 08:35:58,109 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5121 states.
[2020-11-25 08:35:58,116 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5121 states to 5121 states and 6223 transitions.
[2020-11-25 08:35:58,116 INFO  L751         BuchiCegarLoop]: Abstraction has 5121 states and 6223 transitions.
[2020-11-25 08:35:58,116 INFO  L631         BuchiCegarLoop]: Abstraction has 5121 states and 6223 transitions.
[2020-11-25 08:35:58,116 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 08:35:58,116 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5121 states and 6223 transitions.
[2020-11-25 08:35:58,123 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:35:58,123 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:35:58,123 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:35:58,128 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:35:58,128 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_allowance_ERC200 := false;
[L2]                 call_allowance_ERC200 := false;
[L2]     CALL        call main();
[L8249]              assume null == 0;
[L8250]  CALL        call this := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L8250]  RET         call this := FreshRefGenerator__success();
[L8251]              assume now >= 0;
[L8252]              assume DType[this] == VIToken;
[L8253]              assume msgvalue_MSG == 0;
[L8254]              gas := gas - 53000;
[L8255]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1862]              havoc __exception;
[L1863]              revert := false;
[L1864]  COND TRUE   __exception
[L1865]              __tmp__Balance := Balance;
[L1866]              __tmp__DType := DType;
[L1867]              __tmp__Alloc := Alloc;
[L1868]              __tmp__balance_ADDR := balance_ADDR;
[L1869]              __tmp__M_Ref_int := M_Ref_int;
[L1870]              __tmp__sum__balances0 := sum__balances0;
[L1871]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1872]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1873]              __tmp__sum__allowances1 := sum__allowances1;
[L1874]              __tmp__M_Ref_bool := M_Ref_bool;
[L1875]              __tmp__sum := sum;
[L1876]              __tmp__Length := Length;
[L1877]              __tmp__now := now;
[L1878]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1879]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1880]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1881]              __tmp___balances_ERC20 := _balances_ERC20;
[L1882]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1883]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1884]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1885]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1886]              __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L1887]              __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L1888]              __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L1889]  CALL        call VIToken_VIToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5372]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L5372]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5373]  COND FALSE  !(revert)
[L5376]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2993]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2978]              assume msgsender_MSG != null;
[L2979]              __tmp__Balance[this] := 0;
[L2993]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  COND FALSE  !(revert)
[L5376]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5377]  COND FALSE  !(revert)
[L5380]  CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, __tmp__DECIMALS_VIToken[this]);
[L3037]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2993]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2978]              assume msgsender_MSG != null;
[L2979]              __tmp__Balance[this] := 0;
[L2993]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  COND FALSE  !(revert)
[L3037]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3038]  COND FALSE  !(revert)
[L3041]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3010]              assume msgsender_MSG != null;
[L3011]              __tmp__Balance[this] := 0;
[L3012]              __tmp___name_ERC20Detailed[this] := 890295274;
[L3013]              __tmp___symbol_ERC20Detailed[this] := 890295274;
[L3014]              __tmp___decimals_ERC20Detailed[this] := 0;
[L3016]              __tmp___name_ERC20Detailed[this] := name_s99;
[L3017]              __tmp___symbol_ERC20Detailed[this] := symbol_s99;
[L3018]              __tmp___decimals_ERC20Detailed[this] := decimals_s99;
[L3041]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3042]  COND FALSE  !(revert)
[L5380]  RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, __tmp__DECIMALS_VIToken[this]);
[L5381]  COND FALSE  !(revert)
[L5384]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3323]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L3323]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  COND FALSE  !(revert)
[L3327]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2993]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2978]              assume msgsender_MSG != null;
[L2979]              __tmp__Balance[this] := 0;
[L2993]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  COND FALSE  !(revert)
[L3327]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3328]  COND FALSE  !(revert)
[L3331]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3298]              assume msgsender_MSG != null;
[L3299]              __tmp__Balance[this] := 0;
[L3300]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3301]              __tmp__sum__balances0[this] := 0;
[L3302]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L3303]              __tmp__sum__allowances1[this] := 0;
[L3304]              __tmp___totalSupply_ERC20[this] := 0;
[L3331]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3332]  COND FALSE  !(revert)
[L5384]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5385]  COND FALSE  !(revert)
[L5388]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L4787]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4788]  COND FALSE  !(revert)
[L4791]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              __tmp__Balance[this] := 0;
[L4667]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2951]              havoc newRef;
[L2952]              assume __tmp__Alloc[newRef] == false;
[L2953]              __tmp__Alloc[newRef] := true;
[L2954]              assume newRef != null;
[L4667]  RET         call __var_31 := FreshRefGenerator__fail();
[L4668]  COND FALSE  !(revert)
[L4671]              __tmp___minters_MinterRole[this] := __var_31;
[L4673]  COND TRUE   __tmp__DType[this] == VIToken
[L4674]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3129]              __ret_0_ := msgsender_MSG;
[L4674]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4675]  COND FALSE  !(revert)
[L4696]  COND FALSE  !(__tmp__DType[this] == VIToken)
[L4701]  COND FALSE  !(__tmp__DType[this] == ERC20Capped)
[L4706]  COND TRUE   __tmp__DType[this] == ERC20Mintable
[L4707]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4999]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L4582]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4638]              __var_29 := null;
[L4639]  COND FALSE  !(!(account_s758 != null))
[L4643]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s758]][account_s758];
[L4582]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4583]  COND FALSE  !(revert)
[L4586]  COND FALSE  !(!!__var_27)
[L4590]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := true;
[L4999]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L5000]  COND FALSE  !(revert)
[L4707]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4708]  COND FALSE  !(revert)
[L4791]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4792]  COND FALSE  !(revert)
[L5388]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5389]  COND FALSE  !(revert)
[L5392]  CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5049]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L5049]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5050]  COND FALSE  !(revert)
[L5053]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2993]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2978]              assume msgsender_MSG != null;
[L2979]              __tmp__Balance[this] := 0;
[L2993]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  COND FALSE  !(revert)
[L5053]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5054]  COND FALSE  !(revert)
[L5057]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3323]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L3323]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  COND FALSE  !(revert)
[L3327]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2993]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2978]              assume msgsender_MSG != null;
[L2979]              __tmp__Balance[this] := 0;
[L2993]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  COND FALSE  !(revert)
[L3327]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3328]  COND FALSE  !(revert)
[L3331]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3298]              assume msgsender_MSG != null;
[L3299]              __tmp__Balance[this] := 0;
[L3300]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3301]              __tmp__sum__balances0[this] := 0;
[L3302]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L3303]              __tmp__sum__allowances1[this] := 0;
[L3304]              __tmp___totalSupply_ERC20[this] := 0;
[L3331]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3332]  COND FALSE  !(revert)
[L5057]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5058]  COND FALSE  !(revert)
[L5061]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L4787]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4788]  COND FALSE  !(revert)
[L4791]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              __tmp__Balance[this] := 0;
[L4667]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2951]              havoc newRef;
[L2952]              assume __tmp__Alloc[newRef] == false;
[L2953]              __tmp__Alloc[newRef] := true;
[L2954]              assume newRef != null;
[L4667]  RET         call __var_31 := FreshRefGenerator__fail();
[L4668]  COND FALSE  !(revert)
[L4671]              __tmp___minters_MinterRole[this] := __var_31;
[L4673]  COND TRUE   __tmp__DType[this] == VIToken
[L4674]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3129]              __ret_0_ := msgsender_MSG;
[L4674]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4675]  COND FALSE  !(revert)
[L4696]  COND FALSE  !(__tmp__DType[this] == VIToken)
[L4701]  COND FALSE  !(__tmp__DType[this] == ERC20Capped)
[L4706]  COND TRUE   __tmp__DType[this] == ERC20Mintable
[L4707]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4999]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L4582]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4638]              __var_29 := null;
[L4639]  COND FALSE  !(!(account_s758 != null))
[L4643]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s758]][account_s758];
[L4582]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4583]  COND FALSE  !(revert)
[L4586]  COND FALSE  !(!!__var_27)
[L4590]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := true;
[L4999]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L5000]  COND FALSE  !(revert)
[L4707]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4708]  COND FALSE  !(revert)
[L4791]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4792]  COND FALSE  !(revert)
[L5061]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5062]  COND FALSE  !(revert)
[L5065]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5034]              assume msgsender_MSG != null;
[L5035]              __tmp__Balance[this] := 0;
[L5065]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5066]  COND FALSE  !(revert)
[L5392]  RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5393]  COND FALSE  !(revert)
[L5396]  CALL        call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__INITIAL_SUPPLY_VIToken[this]);
[L5181]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L5181]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5182]  COND FALSE  !(revert)
[L5185]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2993]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2978]              assume msgsender_MSG != null;
[L2979]              __tmp__Balance[this] := 0;
[L2993]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  COND FALSE  !(revert)
[L5185]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5186]  COND FALSE  !(revert)
[L5189]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3323]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L3323]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  COND FALSE  !(revert)
[L3327]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2993]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2978]              assume msgsender_MSG != null;
[L2979]              __tmp__Balance[this] := 0;
[L2993]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  COND FALSE  !(revert)
[L3327]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3328]  COND FALSE  !(revert)
[L3331]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3298]              assume msgsender_MSG != null;
[L3299]              __tmp__Balance[this] := 0;
[L3300]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3301]              __tmp__sum__balances0[this] := 0;
[L3302]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L3303]              __tmp__sum__allowances1[this] := 0;
[L3304]              __tmp___totalSupply_ERC20[this] := 0;
[L3331]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3332]  COND FALSE  !(revert)
[L5189]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5190]  COND FALSE  !(revert)
[L5193]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L4787]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4788]  COND FALSE  !(revert)
[L4791]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              __tmp__Balance[this] := 0;
[L4667]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2951]              havoc newRef;
[L2952]              assume __tmp__Alloc[newRef] == false;
[L2953]              __tmp__Alloc[newRef] := true;
[L2954]              assume newRef != null;
[L4667]  RET         call __var_31 := FreshRefGenerator__fail();
[L4668]  COND FALSE  !(revert)
[L4671]              __tmp___minters_MinterRole[this] := __var_31;
[L4673]  COND TRUE   __tmp__DType[this] == VIToken
[L4674]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3129]              __ret_0_ := msgsender_MSG;
[L4674]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4675]  COND FALSE  !(revert)
[L4696]  COND FALSE  !(__tmp__DType[this] == VIToken)
[L4701]  COND FALSE  !(__tmp__DType[this] == ERC20Capped)
[L4706]  COND TRUE   __tmp__DType[this] == ERC20Mintable
[L4707]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4999]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L4582]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4638]              __var_29 := null;
[L4639]  COND FALSE  !(!(account_s758 != null))
[L4643]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s758]][account_s758];
[L4582]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4583]  COND FALSE  !(revert)
[L4586]  COND FALSE  !(!!__var_27)
[L4590]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := true;
[L4999]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L5000]  COND FALSE  !(revert)
[L4707]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4708]  COND FALSE  !(revert)
[L4791]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4792]  COND FALSE  !(revert)
[L5193]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5194]  COND FALSE  !(revert)
[L5197]  CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5049]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L5049]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5050]  COND FALSE  !(revert)
[L5053]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2993]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2978]              assume msgsender_MSG != null;
[L2979]              __tmp__Balance[this] := 0;
[L2993]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  COND FALSE  !(revert)
[L5053]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5054]  COND FALSE  !(revert)
[L5057]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3323]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L3323]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  COND FALSE  !(revert)
[L3327]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2993]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2978]              assume msgsender_MSG != null;
[L2979]              __tmp__Balance[this] := 0;
[L2993]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  COND FALSE  !(revert)
[L3327]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3328]  COND FALSE  !(revert)
[L3331]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3298]              assume msgsender_MSG != null;
[L3299]              __tmp__Balance[this] := 0;
[L3300]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3301]              __tmp__sum__balances0[this] := 0;
[L3302]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L3303]              __tmp__sum__allowances1[this] := 0;
[L3304]              __tmp___totalSupply_ERC20[this] := 0;
[L3331]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3332]  COND FALSE  !(revert)
[L5057]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5058]  COND FALSE  !(revert)
[L5061]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L4787]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4788]  COND FALSE  !(revert)
[L4791]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              __tmp__Balance[this] := 0;
[L4667]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2951]              havoc newRef;
[L2952]              assume __tmp__Alloc[newRef] == false;
[L2953]              __tmp__Alloc[newRef] := true;
[L2954]              assume newRef != null;
[L4667]  RET         call __var_31 := FreshRefGenerator__fail();
[L4668]  COND FALSE  !(revert)
[L4671]              __tmp___minters_MinterRole[this] := __var_31;
[L4673]  COND TRUE   __tmp__DType[this] == VIToken
[L4674]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3129]              __ret_0_ := msgsender_MSG;
[L4674]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4675]  COND FALSE  !(revert)
[L4696]  COND FALSE  !(__tmp__DType[this] == VIToken)
[L4701]  COND FALSE  !(__tmp__DType[this] == ERC20Capped)
[L4706]  COND TRUE   __tmp__DType[this] == ERC20Mintable
[L4707]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4999]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L4582]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4638]              __var_29 := null;
[L4639]  COND FALSE  !(!(account_s758 != null))
[L4643]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s758]][account_s758];
[L4582]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4583]  COND FALSE  !(revert)
[L4586]  COND FALSE  !(!!__var_27)
[L4590]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := true;
[L4999]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L5000]  COND FALSE  !(revert)
[L4707]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4708]  COND FALSE  !(revert)
[L4791]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4792]  COND FALSE  !(revert)
[L5061]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5062]  COND FALSE  !(revert)
[L5065]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5034]              assume msgsender_MSG != null;
[L5035]              __tmp__Balance[this] := 0;
[L5065]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5066]  COND FALSE  !(revert)
[L5197]  RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5198]  COND FALSE  !(revert)
[L5201]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5154]              assume msgsender_MSG != null;
[L5155]              __tmp__Balance[this] := 0;
[L5156]              __tmp___cap_ERC20Capped[this] := 0;
[L5158]  COND FALSE  !(!(cap_s910 > 0))
[L5162]              __tmp___cap_ERC20Capped[this] := cap_s910;
[L5201]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5202]  COND FALSE  !(revert)
[L5396]  RET         call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__INITIAL_SUPPLY_VIToken[this]);
[L5397]  COND FALSE  !(revert)
[L5400]  CALL        call VIToken_VIToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5333]              assume msgsender_MSG != null;
[L5334]              __tmp__Balance[this] := 0;
[L5335]              __tmp__DECIMALS_VIToken[this] := 18;
[L5336]              __var_39 := __tmp__DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5337]              __tmp__INITIAL_SUPPLY_VIToken[this] := 888888888 * (nonlinearPow(10, __tmp__DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5339]  COND TRUE   __tmp__DType[this] == VIToken
[L5340]  CALL        call _mint~address~uint256_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, __tmp__INITIAL_SUPPLY_VIToken[this]);
[L5252]  COND TRUE   __tmp__DType[this] == VIToken
[L5253]  CALL        call __var_37 := totalSupply_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3355]              __ret_0_ := __tmp___totalSupply_ERC20[this];
[L5253]  RET         call __var_37 := totalSupply_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5254]  COND FALSE  !(revert)
[L5265]  CALL        call __var_36 := add~uint256~uint256_SafeMath__fail(this, this, 0, __var_37, value_s944);
[L3174]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3175]  COND FALSE  !(!(c_s165 >= a_s165))
[L3179]              __ret_0_ := c_s165;
[L5265]  RET         call __var_36 := add~uint256~uint256_SafeMath__fail(this, this, 0, __var_37, value_s944);
[L5266]  COND FALSE  !(revert)
[L5269]  COND FALSE  !(!(__var_36 <= __tmp___cap_ERC20Capped[this]))
[L5273]  COND TRUE   __tmp__DType[this] == VIToken
[L5274]  CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L4209]              __var_16 := null;
[L4210]  COND FALSE  !(!(account_s562 != null))
[L4214]  CALL        call __var_17 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s562);
[L3174]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3175]  COND FALSE  !(!(c_s165 >= a_s165))
[L3179]              __ret_0_ := c_s165;
[L4214]  RET         call __var_17 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s562);
[L4215]  COND FALSE  !(revert)
[L4218]              __tmp___totalSupply_ERC20[this] := __var_17;
[L4219]  CALL        call __var_18 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s562], amount_s562);
[L3174]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3175]  COND FALSE  !(!(c_s165 >= a_s165))
[L3179]              __ret_0_ := c_s165;
[L4219]  RET         call __var_18 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s562], amount_s562);
[L4220]  COND FALSE  !(revert)
[L4223]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s562];
[L4224]              __tmp___balances_ERC20[this][account_s562] := __var_18;
[L4225]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s562];
[L5274]  RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L5275]  COND FALSE  !(revert)
[L5340]  RET         call _mint~address~uint256_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, __tmp__INITIAL_SUPPLY_VIToken[this]);
[L5341]  COND FALSE  !(revert)
[L5400]  RET         call VIToken_VIToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5401]  COND FALSE  !(revert)
[L1889]  RET         call VIToken_VIToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L1890]              assume revert || gas < 0;
[L8255]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8256]              assume !revert && gas >= 0;
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND FALSE  !(choice == 16)
[L8146]  COND TRUE   choice == 15
[L8147]              gas := gas - 21000;
[L8148]  COND TRUE   gas >= 0
[L8149]              assume msgvalue_MSG == 0;
[L8150]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s352, spender_s352);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _allowances_ERC20[this][owner_s352][spender_s352] >= 0 && _allowances_ERC20[this][owner_s352][spender_s352] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_ERC200 := true;
[L2]                 call_allowance_ERC200 := false;
[L2]                 revert := revert_hold;
[L841]               havoc __exception;
[L842]               revert := false;
[L843]   COND FALSE  !(__exception)
[L871]   CALL        call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s352, spender_s352);
[L3491]              __ret_0_ := _allowances_ERC20[this][owner_s352][spender_s352];
[L871]   RET         call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s352, spender_s352);
[L872]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _allowances_ERC20[this][owner_s352][spender_s352] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L8150]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s352, spender_s352);
[L8259]  RET         call CorralChoice_VIToken(this);

Loop:
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND FALSE  !(choice == 16)
[L8146]  COND TRUE   choice == 15
[L8147]              gas := gas - 21000;
[L8148]  COND TRUE   gas >= 0
[L8149]              assume msgvalue_MSG == 0;
[L8150]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s352, spender_s352);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _allowances_ERC20[this][owner_s352][spender_s352] >= 0 && _allowances_ERC20[this][owner_s352][spender_s352] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_ERC200 := true;
[L2]                 call_allowance_ERC200 := false;
[L2]                 revert := revert_hold;
[L841]               havoc __exception;
[L842]               revert := false;
[L843]   COND FALSE  !(__exception)
[L871]   CALL        call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s352, spender_s352);
[L3491]              __ret_0_ := _allowances_ERC20[this][owner_s352][spender_s352];
[L871]   RET         call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s352, spender_s352);
[L872]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _allowances_ERC20[this][owner_s352][spender_s352] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L8150]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s352, spender_s352);
[L8259]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:35:58,137 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:35:58,138 INFO  L82        PathProgramCache]: Analyzing trace with hash 607353043, now seen corresponding path program 1 times
[2020-11-25 08:35:58,138 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:35:58,156 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:35:58,415 INFO  L134       CoverageAnalysis]: Checked inductivity of 1553 backedges. 0 proven. 45 refuted. 0 times theorem prover too weak. 1508 trivial. 0 not checked.
[2020-11-25 08:35:58,415 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:35:58,416 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [3] total 3
[2020-11-25 08:35:58,417 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:35:58,417 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 08:35:58,417 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 08:35:58,417 INFO  L87              Difference]: Start difference. First operand 5121 states and 6223 transitions. cyclomatic complexity: 1104 Second operand 3 states.
[2020-11-25 08:35:58,502 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:35:58,502 INFO  L93              Difference]: Finished difference Result 5124 states and 6226 transitions.
[2020-11-25 08:35:58,502 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 08:35:58,502 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5124 states and 6226 transitions.
[2020-11-25 08:35:58,516 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:35:58,529 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5124 states to 5124 states and 6226 transitions.
[2020-11-25 08:35:58,530 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1093
[2020-11-25 08:35:58,530 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1093
[2020-11-25 08:35:58,530 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5124 states and 6226 transitions.
[2020-11-25 08:35:58,534 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:35:58,534 INFO  L728         BuchiCegarLoop]: Abstraction has 5124 states and 6226 transitions.
[2020-11-25 08:35:58,538 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5124 states and 6226 transitions.
[2020-11-25 08:35:58,574 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5124 to 5122.
[2020-11-25 08:35:58,574 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5122 states.
[2020-11-25 08:35:58,580 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5122 states to 5122 states and 6224 transitions.
[2020-11-25 08:35:58,580 INFO  L751         BuchiCegarLoop]: Abstraction has 5122 states and 6224 transitions.
[2020-11-25 08:35:58,580 INFO  L631         BuchiCegarLoop]: Abstraction has 5122 states and 6224 transitions.
[2020-11-25 08:35:58,581 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 08:35:58,581 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5122 states and 6224 transitions.
[2020-11-25 08:35:58,587 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:35:58,587 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:35:58,588 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:35:58,591 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:35:58,591 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_allowance_ERC200 := false;
[L2]                 call_allowance_ERC200 := false;
[L2]     CALL        call main();
[L8249]              assume null == 0;
[L8250]  CALL        call this := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L8250]  RET         call this := FreshRefGenerator__success();
[L8251]              assume now >= 0;
[L8252]              assume DType[this] == VIToken;
[L8253]              assume msgvalue_MSG == 0;
[L8254]              gas := gas - 53000;
[L8255]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1862]              havoc __exception;
[L1863]              revert := false;
[L1864]  COND TRUE   __exception
[L1865]              __tmp__Balance := Balance;
[L1866]              __tmp__DType := DType;
[L1867]              __tmp__Alloc := Alloc;
[L1868]              __tmp__balance_ADDR := balance_ADDR;
[L1869]              __tmp__M_Ref_int := M_Ref_int;
[L1870]              __tmp__sum__balances0 := sum__balances0;
[L1871]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1872]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1873]              __tmp__sum__allowances1 := sum__allowances1;
[L1874]              __tmp__M_Ref_bool := M_Ref_bool;
[L1875]              __tmp__sum := sum;
[L1876]              __tmp__Length := Length;
[L1877]              __tmp__now := now;
[L1878]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1879]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1880]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1881]              __tmp___balances_ERC20 := _balances_ERC20;
[L1882]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1883]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1884]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1885]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1886]              __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L1887]              __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L1888]              __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L1889]  CALL        call VIToken_VIToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5372]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L5372]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5373]  COND FALSE  !(revert)
[L5376]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2993]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2978]              assume msgsender_MSG != null;
[L2979]              __tmp__Balance[this] := 0;
[L2993]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  COND FALSE  !(revert)
[L5376]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5377]  COND FALSE  !(revert)
[L5380]  CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, __tmp__DECIMALS_VIToken[this]);
[L3037]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2993]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2978]              assume msgsender_MSG != null;
[L2979]              __tmp__Balance[this] := 0;
[L2993]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  COND FALSE  !(revert)
[L3037]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3038]  COND FALSE  !(revert)
[L3041]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3010]              assume msgsender_MSG != null;
[L3011]              __tmp__Balance[this] := 0;
[L3012]              __tmp___name_ERC20Detailed[this] := 890295274;
[L3013]              __tmp___symbol_ERC20Detailed[this] := 890295274;
[L3014]              __tmp___decimals_ERC20Detailed[this] := 0;
[L3016]              __tmp___name_ERC20Detailed[this] := name_s99;
[L3017]              __tmp___symbol_ERC20Detailed[this] := symbol_s99;
[L3018]              __tmp___decimals_ERC20Detailed[this] := decimals_s99;
[L3041]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3042]  COND FALSE  !(revert)
[L5380]  RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, __tmp__DECIMALS_VIToken[this]);
[L5381]  COND FALSE  !(revert)
[L5384]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3323]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L3323]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  COND FALSE  !(revert)
[L3327]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2993]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2978]              assume msgsender_MSG != null;
[L2979]              __tmp__Balance[this] := 0;
[L2993]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  COND FALSE  !(revert)
[L3327]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3328]  COND FALSE  !(revert)
[L3331]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3298]              assume msgsender_MSG != null;
[L3299]              __tmp__Balance[this] := 0;
[L3300]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3301]              __tmp__sum__balances0[this] := 0;
[L3302]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L3303]              __tmp__sum__allowances1[this] := 0;
[L3304]              __tmp___totalSupply_ERC20[this] := 0;
[L3331]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3332]  COND FALSE  !(revert)
[L5384]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5385]  COND FALSE  !(revert)
[L5388]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L4787]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4788]  COND FALSE  !(revert)
[L4791]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              __tmp__Balance[this] := 0;
[L4667]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2951]              havoc newRef;
[L2952]              assume __tmp__Alloc[newRef] == false;
[L2953]              __tmp__Alloc[newRef] := true;
[L2954]              assume newRef != null;
[L4667]  RET         call __var_31 := FreshRefGenerator__fail();
[L4668]  COND FALSE  !(revert)
[L4671]              __tmp___minters_MinterRole[this] := __var_31;
[L4673]  COND TRUE   __tmp__DType[this] == VIToken
[L4674]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3129]              __ret_0_ := msgsender_MSG;
[L4674]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4675]  COND FALSE  !(revert)
[L4696]  COND TRUE   __tmp__DType[this] == VIToken
[L4697]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4999]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L4582]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4638]              __var_29 := null;
[L4639]  COND FALSE  !(!(account_s758 != null))
[L4643]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s758]][account_s758];
[L4582]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4583]  COND FALSE  !(revert)
[L4586]  COND FALSE  !(!!__var_27)
[L4590]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := true;
[L4999]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L5000]  COND FALSE  !(revert)
[L4697]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4698]  COND FALSE  !(revert)
[L4791]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4792]  COND FALSE  !(revert)
[L5388]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5389]  COND FALSE  !(revert)
[L5392]  CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5049]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L5049]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5050]  COND FALSE  !(revert)
[L5053]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2993]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2978]              assume msgsender_MSG != null;
[L2979]              __tmp__Balance[this] := 0;
[L2993]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  COND FALSE  !(revert)
[L5053]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5054]  COND FALSE  !(revert)
[L5057]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3323]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L3323]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  COND FALSE  !(revert)
[L3327]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2993]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2978]              assume msgsender_MSG != null;
[L2979]              __tmp__Balance[this] := 0;
[L2993]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  COND FALSE  !(revert)
[L3327]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3328]  COND FALSE  !(revert)
[L3331]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3298]              assume msgsender_MSG != null;
[L3299]              __tmp__Balance[this] := 0;
[L3300]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3301]              __tmp__sum__balances0[this] := 0;
[L3302]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L3303]              __tmp__sum__allowances1[this] := 0;
[L3304]              __tmp___totalSupply_ERC20[this] := 0;
[L3331]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3332]  COND FALSE  !(revert)
[L5057]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5058]  COND FALSE  !(revert)
[L5061]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L4787]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4788]  COND FALSE  !(revert)
[L4791]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              __tmp__Balance[this] := 0;
[L4667]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2951]              havoc newRef;
[L2952]              assume __tmp__Alloc[newRef] == false;
[L2953]              __tmp__Alloc[newRef] := true;
[L2954]              assume newRef != null;
[L4667]  RET         call __var_31 := FreshRefGenerator__fail();
[L4668]  COND FALSE  !(revert)
[L4671]              __tmp___minters_MinterRole[this] := __var_31;
[L4673]  COND TRUE   __tmp__DType[this] == VIToken
[L4674]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3129]              __ret_0_ := msgsender_MSG;
[L4674]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4675]  COND FALSE  !(revert)
[L4696]  COND TRUE   __tmp__DType[this] == VIToken
[L4697]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4999]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L4582]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4638]              __var_29 := null;
[L4639]  COND FALSE  !(!(account_s758 != null))
[L4643]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s758]][account_s758];
[L4582]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4583]  COND FALSE  !(revert)
[L4586]  COND FALSE  !(!!__var_27)
[L4590]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := true;
[L4999]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L5000]  COND FALSE  !(revert)
[L4697]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4698]  COND FALSE  !(revert)
[L4791]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4792]  COND FALSE  !(revert)
[L5061]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5062]  COND FALSE  !(revert)
[L5065]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5034]              assume msgsender_MSG != null;
[L5035]              __tmp__Balance[this] := 0;
[L5065]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5066]  COND FALSE  !(revert)
[L5392]  RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5393]  COND FALSE  !(revert)
[L5396]  CALL        call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__INITIAL_SUPPLY_VIToken[this]);
[L5181]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L5181]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5182]  COND FALSE  !(revert)
[L5185]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2993]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2978]              assume msgsender_MSG != null;
[L2979]              __tmp__Balance[this] := 0;
[L2993]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  COND FALSE  !(revert)
[L5185]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5186]  COND FALSE  !(revert)
[L5189]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3323]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L3323]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  COND FALSE  !(revert)
[L3327]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2993]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2978]              assume msgsender_MSG != null;
[L2979]              __tmp__Balance[this] := 0;
[L2993]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  COND FALSE  !(revert)
[L3327]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3328]  COND FALSE  !(revert)
[L3331]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3298]              assume msgsender_MSG != null;
[L3299]              __tmp__Balance[this] := 0;
[L3300]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3301]              __tmp__sum__balances0[this] := 0;
[L3302]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L3303]              __tmp__sum__allowances1[this] := 0;
[L3304]              __tmp___totalSupply_ERC20[this] := 0;
[L3331]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3332]  COND FALSE  !(revert)
[L5189]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5190]  COND FALSE  !(revert)
[L5193]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L4787]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4788]  COND FALSE  !(revert)
[L4791]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              __tmp__Balance[this] := 0;
[L4667]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2951]              havoc newRef;
[L2952]              assume __tmp__Alloc[newRef] == false;
[L2953]              __tmp__Alloc[newRef] := true;
[L2954]              assume newRef != null;
[L4667]  RET         call __var_31 := FreshRefGenerator__fail();
[L4668]  COND FALSE  !(revert)
[L4671]              __tmp___minters_MinterRole[this] := __var_31;
[L4673]  COND TRUE   __tmp__DType[this] == VIToken
[L4674]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3129]              __ret_0_ := msgsender_MSG;
[L4674]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4675]  COND FALSE  !(revert)
[L4696]  COND TRUE   __tmp__DType[this] == VIToken
[L4697]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4999]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L4582]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4638]              __var_29 := null;
[L4639]  COND FALSE  !(!(account_s758 != null))
[L4643]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s758]][account_s758];
[L4582]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4583]  COND FALSE  !(revert)
[L4586]  COND FALSE  !(!!__var_27)
[L4590]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := true;
[L4999]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L5000]  COND FALSE  !(revert)
[L4697]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4698]  COND FALSE  !(revert)
[L4791]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4792]  COND FALSE  !(revert)
[L5193]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5194]  COND FALSE  !(revert)
[L5197]  CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5049]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L5049]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5050]  COND FALSE  !(revert)
[L5053]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2993]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2978]              assume msgsender_MSG != null;
[L2979]              __tmp__Balance[this] := 0;
[L2993]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  COND FALSE  !(revert)
[L5053]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5054]  COND FALSE  !(revert)
[L5057]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3323]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L3323]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  COND FALSE  !(revert)
[L3327]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2993]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2978]              assume msgsender_MSG != null;
[L2979]              __tmp__Balance[this] := 0;
[L2993]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  COND FALSE  !(revert)
[L3327]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3328]  COND FALSE  !(revert)
[L3331]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3298]              assume msgsender_MSG != null;
[L3299]              __tmp__Balance[this] := 0;
[L3300]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3301]              __tmp__sum__balances0[this] := 0;
[L3302]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L3303]              __tmp__sum__allowances1[this] := 0;
[L3304]              __tmp___totalSupply_ERC20[this] := 0;
[L3331]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3332]  COND FALSE  !(revert)
[L5057]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5058]  COND FALSE  !(revert)
[L5061]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3113]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3098]              assume msgsender_MSG != null;
[L3099]              __tmp__Balance[this] := 0;
[L3113]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  COND FALSE  !(revert)
[L4787]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4788]  COND FALSE  !(revert)
[L4791]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              __tmp__Balance[this] := 0;
[L4667]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2951]              havoc newRef;
[L2952]              assume __tmp__Alloc[newRef] == false;
[L2953]              __tmp__Alloc[newRef] := true;
[L2954]              assume newRef != null;
[L4667]  RET         call __var_31 := FreshRefGenerator__fail();
[L4668]  COND FALSE  !(revert)
[L4671]              __tmp___minters_MinterRole[this] := __var_31;
[L4673]  COND TRUE   __tmp__DType[this] == VIToken
[L4674]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3129]              __ret_0_ := msgsender_MSG;
[L4674]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4675]  COND FALSE  !(revert)
[L4696]  COND TRUE   __tmp__DType[this] == VIToken
[L4697]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4999]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L4582]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4638]              __var_29 := null;
[L4639]  COND FALSE  !(!(account_s758 != null))
[L4643]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s758]][account_s758];
[L4582]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4583]  COND FALSE  !(revert)
[L4586]  COND FALSE  !(!!__var_27)
[L4590]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := true;
[L4999]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L5000]  COND FALSE  !(revert)
[L4697]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4698]  COND FALSE  !(revert)
[L4791]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4792]  COND FALSE  !(revert)
[L5061]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5062]  COND FALSE  !(revert)
[L5065]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5034]              assume msgsender_MSG != null;
[L5035]              __tmp__Balance[this] := 0;
[L5065]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5066]  COND FALSE  !(revert)
[L5197]  RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5198]  COND FALSE  !(revert)
[L5201]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5154]              assume msgsender_MSG != null;
[L5155]              __tmp__Balance[this] := 0;
[L5156]              __tmp___cap_ERC20Capped[this] := 0;
[L5158]  COND FALSE  !(!(cap_s910 > 0))
[L5162]              __tmp___cap_ERC20Capped[this] := cap_s910;
[L5201]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5202]  COND FALSE  !(revert)
[L5396]  RET         call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__INITIAL_SUPPLY_VIToken[this]);
[L5397]  COND FALSE  !(revert)
[L5400]  CALL        call VIToken_VIToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5333]              assume msgsender_MSG != null;
[L5334]              __tmp__Balance[this] := 0;
[L5335]              __tmp__DECIMALS_VIToken[this] := 18;
[L5336]              __var_39 := __tmp__DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5337]              __tmp__INITIAL_SUPPLY_VIToken[this] := 888888888 * (nonlinearPow(10, __tmp__DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5339]  COND TRUE   __tmp__DType[this] == VIToken
[L5340]  CALL        call _mint~address~uint256_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, __tmp__INITIAL_SUPPLY_VIToken[this]);
[L5252]  COND TRUE   __tmp__DType[this] == VIToken
[L5253]  CALL        call __var_37 := totalSupply_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3355]              __ret_0_ := __tmp___totalSupply_ERC20[this];
[L5253]  RET         call __var_37 := totalSupply_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5254]  COND FALSE  !(revert)
[L5265]  CALL        call __var_36 := add~uint256~uint256_SafeMath__fail(this, this, 0, __var_37, value_s944);
[L3174]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3175]  COND FALSE  !(!(c_s165 >= a_s165))
[L3179]              __ret_0_ := c_s165;
[L5265]  RET         call __var_36 := add~uint256~uint256_SafeMath__fail(this, this, 0, __var_37, value_s944);
[L5266]  COND FALSE  !(revert)
[L5269]  COND FALSE  !(!(__var_36 <= __tmp___cap_ERC20Capped[this]))
[L5273]  COND TRUE   __tmp__DType[this] == VIToken
[L5274]  CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L4209]              __var_16 := null;
[L4210]  COND FALSE  !(!(account_s562 != null))
[L4214]  CALL        call __var_17 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s562);
[L3174]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3175]  COND FALSE  !(!(c_s165 >= a_s165))
[L3179]              __ret_0_ := c_s165;
[L4214]  RET         call __var_17 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s562);
[L4215]  COND FALSE  !(revert)
[L4218]              __tmp___totalSupply_ERC20[this] := __var_17;
[L4219]  CALL        call __var_18 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s562], amount_s562);
[L3174]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3175]  COND FALSE  !(!(c_s165 >= a_s165))
[L3179]              __ret_0_ := c_s165;
[L4219]  RET         call __var_18 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s562], amount_s562);
[L4220]  COND FALSE  !(revert)
[L4223]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s562];
[L4224]              __tmp___balances_ERC20[this][account_s562] := __var_18;
[L4225]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s562];
[L5274]  RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L5275]  COND FALSE  !(revert)
[L5340]  RET         call _mint~address~uint256_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, __tmp__INITIAL_SUPPLY_VIToken[this]);
[L5341]  COND FALSE  !(revert)
[L5400]  RET         call VIToken_VIToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5401]  COND FALSE  !(revert)
[L1889]  RET         call VIToken_VIToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L1890]              assume revert || gas < 0;
[L8255]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8256]              assume !revert && gas >= 0;
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND FALSE  !(choice == 16)
[L8146]  COND TRUE   choice == 15
[L8147]              gas := gas - 21000;
[L8148]  COND TRUE   gas >= 0
[L8149]              assume msgvalue_MSG == 0;
[L8150]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s352, spender_s352);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _allowances_ERC20[this][owner_s352][spender_s352] >= 0 && _allowances_ERC20[this][owner_s352][spender_s352] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_ERC200 := true;
[L2]                 call_allowance_ERC200 := false;
[L2]                 revert := revert_hold;
[L841]               havoc __exception;
[L842]               revert := false;
[L843]   COND FALSE  !(__exception)
[L871]   CALL        call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s352, spender_s352);
[L3491]              __ret_0_ := _allowances_ERC20[this][owner_s352][spender_s352];
[L871]   RET         call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s352, spender_s352);
[L872]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _allowances_ERC20[this][owner_s352][spender_s352] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L8150]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s352, spender_s352);
[L8259]  RET         call CorralChoice_VIToken(this);

Loop:
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND FALSE  !(choice == 16)
[L8146]  COND TRUE   choice == 15
[L8147]              gas := gas - 21000;
[L8148]  COND TRUE   gas >= 0
[L8149]              assume msgvalue_MSG == 0;
[L8150]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s352, spender_s352);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _allowances_ERC20[this][owner_s352][spender_s352] >= 0 && _allowances_ERC20[this][owner_s352][spender_s352] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_ERC200 := true;
[L2]                 call_allowance_ERC200 := false;
[L2]                 revert := revert_hold;
[L841]               havoc __exception;
[L842]               revert := false;
[L843]   COND FALSE  !(__exception)
[L871]   CALL        call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s352, spender_s352);
[L3491]              __ret_0_ := _allowances_ERC20[this][owner_s352][spender_s352];
[L871]   RET         call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s352, spender_s352);
[L872]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _allowances_ERC20[this][owner_s352][spender_s352] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L8150]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s352, spender_s352);
[L8259]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:35:58,598 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:35:58,598 INFO  L82        PathProgramCache]: Analyzing trace with hash -222365625, now seen corresponding path program 1 times
[2020-11-25 08:35:58,599 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:35:58,621 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:35:58,858 INFO  L134       CoverageAnalysis]: Checked inductivity of 1541 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1541 trivial. 0 not checked.
[2020-11-25 08:35:58,858 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:35:58,858 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 08:35:58,859 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:35:58,859 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 08:35:58,859 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 08:35:58,859 INFO  L87              Difference]: Start difference. First operand 5122 states and 6224 transitions. cyclomatic complexity: 1104 Second operand 4 states.
[2020-11-25 08:35:59,065 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:35:59,065 INFO  L93              Difference]: Finished difference Result 5969 states and 7075 transitions.
[2020-11-25 08:35:59,065 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 08:35:59,065 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5969 states and 7075 transitions.
[2020-11-25 08:35:59,079 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 12
[2020-11-25 08:35:59,096 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5969 states to 5703 states and 6781 transitions.
[2020-11-25 08:35:59,096 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1222
[2020-11-25 08:35:59,097 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1222
[2020-11-25 08:35:59,097 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5703 states and 6781 transitions.
[2020-11-25 08:35:59,102 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:35:59,102 INFO  L728         BuchiCegarLoop]: Abstraction has 5703 states and 6781 transitions.
[2020-11-25 08:35:59,106 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5703 states and 6781 transitions.
[2020-11-25 08:35:59,143 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5703 to 5044.
[2020-11-25 08:35:59,143 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5044 states.
[2020-11-25 08:35:59,148 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5044 states to 5044 states and 5964 transitions.
[2020-11-25 08:35:59,149 INFO  L751         BuchiCegarLoop]: Abstraction has 5044 states and 5964 transitions.
[2020-11-25 08:35:59,149 INFO  L631         BuchiCegarLoop]: Abstraction has 5044 states and 5964 transitions.
[2020-11-25 08:35:59,149 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 08:35:59,149 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5044 states and 5964 transitions.
[2020-11-25 08:35:59,155 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 08:35:59,155 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:35:59,155 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:35:59,157 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:35:59,157 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_allowance_ERC200 := false;
[L2]                 call_allowance_ERC200 := false;
[L2]     CALL        call main();
[L8249]              assume null == 0;
[L8250]  CALL        call this := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L8250]  RET         call this := FreshRefGenerator__success();
[L8251]              assume now >= 0;
[L8252]              assume DType[this] == VIToken;
[L8253]              assume msgvalue_MSG == 0;
[L8254]              gas := gas - 53000;
[L8255]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1862]              havoc __exception;
[L1863]              revert := false;
[L1864]  COND FALSE  !(__exception)
[L1892]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5409]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5409]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  COND FALSE  !(revert)
[L5413]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5413]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5414]  COND FALSE  !(revert)
[L5417]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L3049]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3049]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3050]  COND FALSE  !(revert)
[L3053]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3024]              assume msgsender_MSG != null;
[L3025]              Balance[this] := 0;
[L3026]              _name_ERC20Detailed[this] := 890295274;
[L3027]              _symbol_ERC20Detailed[this] := 890295274;
[L3028]              _decimals_ERC20Detailed[this] := 0;
[L3030]              _name_ERC20Detailed[this] := name_s99;
[L3031]              _symbol_ERC20Detailed[this] := symbol_s99;
[L3032]              _decimals_ERC20Detailed[this] := decimals_s99;
[L3053]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3054]  COND FALSE  !(revert)
[L5417]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L5418]  COND FALSE  !(revert)
[L5421]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5421]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND FALSE  !(DType[this] == VIToken)
[L4763]  COND FALSE  !(DType[this] == ERC20Capped)
[L4768]  COND FALSE  !(DType[this] == ERC20Mintable)
[L4773]  COND TRUE   DType[this] == MinterRole
[L4774]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4774]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4775]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5425]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND FALSE  !(revert)
[L5429]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5073]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5073]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  COND FALSE  !(revert)
[L5077]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5077]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  COND FALSE  !(revert)
[L5081]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5081]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5082]  COND FALSE  !(revert)
[L5085]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND FALSE  !(DType[this] == VIToken)
[L4763]  COND FALSE  !(DType[this] == ERC20Capped)
[L4768]  COND FALSE  !(DType[this] == ERC20Mintable)
[L4773]  COND TRUE   DType[this] == MinterRole
[L4774]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4774]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4775]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5085]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5086]  COND FALSE  !(revert)
[L5089]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5042]              assume msgsender_MSG != null;
[L5043]              Balance[this] := 0;
[L5089]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]  COND FALSE  !(revert)
[L5429]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5430]  COND FALSE  !(revert)
[L5433]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5209]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5209]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5210]  COND FALSE  !(revert)
[L5213]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5213]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5214]  COND FALSE  !(revert)
[L5217]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5217]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5218]  COND FALSE  !(revert)
[L5221]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND FALSE  !(DType[this] == VIToken)
[L4763]  COND FALSE  !(DType[this] == ERC20Capped)
[L4768]  COND FALSE  !(DType[this] == ERC20Mintable)
[L4773]  COND TRUE   DType[this] == MinterRole
[L4774]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4774]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4775]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5221]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5222]  COND FALSE  !(revert)
[L5225]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5073]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5073]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  COND FALSE  !(revert)
[L5077]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5077]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  COND FALSE  !(revert)
[L5081]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5081]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5082]  COND FALSE  !(revert)
[L5085]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND FALSE  !(DType[this] == VIToken)
[L4763]  COND FALSE  !(DType[this] == ERC20Capped)
[L4768]  COND FALSE  !(DType[this] == ERC20Mintable)
[L4773]  COND TRUE   DType[this] == MinterRole
[L4774]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4774]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4775]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5085]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5086]  COND FALSE  !(revert)
[L5089]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5042]              assume msgsender_MSG != null;
[L5043]              Balance[this] := 0;
[L5089]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]  COND FALSE  !(revert)
[L5225]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5226]  COND FALSE  !(revert)
[L5229]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5168]              assume msgsender_MSG != null;
[L5169]              Balance[this] := 0;
[L5170]              _cap_ERC20Capped[this] := 0;
[L5172]  COND FALSE  !(!(cap_s910 > 0))
[L5176]              _cap_ERC20Capped[this] := cap_s910;
[L5229]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5230]  COND FALSE  !(revert)
[L5433]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5434]  COND FALSE  !(revert)
[L5437]  CALL        call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5353]              assume msgsender_MSG != null;
[L5354]              Balance[this] := 0;
[L5355]              DECIMALS_VIToken[this] := 18;
[L5356]              __var_39 := DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5357]              INITIAL_SUPPLY_VIToken[this] := 888888888 * (nonlinearPow(10, DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5359]  COND TRUE   DType[this] == VIToken
[L5360]  CALL        call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5293]  COND TRUE   DType[this] == VIToken
[L5294]  CALL        call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]              __ret_0_ := _totalSupply_ERC20[this];
[L5294]  RET         call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5295]  COND FALSE  !(revert)
[L5306]  CALL        call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L5306]  RET         call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L5307]  COND FALSE  !(revert)
[L5310]  COND FALSE  !(!(__var_36 <= _cap_ERC20Capped[this]))
[L5314]  COND FALSE  !(DType[this] == VIToken)
[L5319]  COND TRUE   DType[this] == ERC20Capped
[L5320]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L4233]              __var_16 := null;
[L4234]  COND FALSE  !(!(account_s562 != null))
[L4238]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4238]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L4239]  COND FALSE  !(revert)
[L4242]              _totalSupply_ERC20[this] := __var_17;
[L4243]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4243]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L4244]  COND FALSE  !(revert)
[L4247]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s562];
[L4248]              _balances_ERC20[this][account_s562] := __var_18;
[L4249]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s562];
[L4250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5320]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L5321]  COND FALSE  !(revert)
[L5360]  RET         call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5361]  COND FALSE  !(revert)
[L5437]  RET         call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5438]  COND FALSE  !(revert)
[L1892]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1893]              assume !revert && gas >= 0;
[L8255]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8256]              assume !revert && gas >= 0;
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND FALSE  !(choice == 16)
[L8146]  COND TRUE   choice == 15
[L8147]              gas := gas - 21000;
[L8148]  COND TRUE   gas >= 0
[L8149]              assume msgvalue_MSG == 0;
[L8150]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s352, spender_s352);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _allowances_ERC20[this][owner_s352][spender_s352] >= 0 && _allowances_ERC20[this][owner_s352][spender_s352] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_ERC200 := true;
[L2]                 call_allowance_ERC200 := false;
[L2]                 revert := revert_hold;
[L841]               havoc __exception;
[L842]               revert := false;
[L843]   COND FALSE  !(__exception)
[L871]   CALL        call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s352, spender_s352);
[L3491]              __ret_0_ := _allowances_ERC20[this][owner_s352][spender_s352];
[L871]   RET         call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s352, spender_s352);
[L872]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _allowances_ERC20[this][owner_s352][spender_s352] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L8150]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s352, spender_s352);
[L8259]  RET         call CorralChoice_VIToken(this);

Loop:
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND TRUE   choice == 18
[L8128]              gas := gas - 21000;
[L8129]  COND FALSE  !(gas >= 0)
[L8259]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:35:59,164 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:35:59,164 INFO  L82        PathProgramCache]: Analyzing trace with hash 1870368399, now seen corresponding path program 1 times
[2020-11-25 08:35:59,165 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:35:59,179 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:35:59,357 INFO  L134       CoverageAnalysis]: Checked inductivity of 1589 backedges. 0 proven. 48 refuted. 0 times theorem prover too weak. 1541 trivial. 0 not checked.
[2020-11-25 08:35:59,357 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:35:59,357 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [3] total 3
[2020-11-25 08:35:59,358 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:35:59,358 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 08:35:59,358 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 08:35:59,358 INFO  L87              Difference]: Start difference. First operand 5044 states and 5964 transitions. cyclomatic complexity: 922 Second operand 3 states.
[2020-11-25 08:35:59,398 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:35:59,398 INFO  L93              Difference]: Finished difference Result 5047 states and 5967 transitions.
[2020-11-25 08:35:59,398 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 08:35:59,399 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5047 states and 5967 transitions.
[2020-11-25 08:35:59,406 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 08:35:59,417 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5047 states to 5047 states and 5967 transitions.
[2020-11-25 08:35:59,417 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1176
[2020-11-25 08:35:59,418 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1176
[2020-11-25 08:35:59,418 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5047 states and 5967 transitions.
[2020-11-25 08:35:59,421 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:35:59,421 INFO  L728         BuchiCegarLoop]: Abstraction has 5047 states and 5967 transitions.
[2020-11-25 08:35:59,425 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5047 states and 5967 transitions.
[2020-11-25 08:35:59,452 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5047 to 5045.
[2020-11-25 08:35:59,452 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5045 states.
[2020-11-25 08:35:59,457 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5045 states to 5045 states and 5965 transitions.
[2020-11-25 08:35:59,457 INFO  L751         BuchiCegarLoop]: Abstraction has 5045 states and 5965 transitions.
[2020-11-25 08:35:59,457 INFO  L631         BuchiCegarLoop]: Abstraction has 5045 states and 5965 transitions.
[2020-11-25 08:35:59,457 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 08:35:59,457 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5045 states and 5965 transitions.
[2020-11-25 08:35:59,462 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 08:35:59,462 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:35:59,462 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:35:59,464 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:35:59,464 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_allowance_ERC200 := false;
[L2]                 call_allowance_ERC200 := false;
[L2]     CALL        call main();
[L8249]              assume null == 0;
[L8250]  CALL        call this := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L8250]  RET         call this := FreshRefGenerator__success();
[L8251]              assume now >= 0;
[L8252]              assume DType[this] == VIToken;
[L8253]              assume msgvalue_MSG == 0;
[L8254]              gas := gas - 53000;
[L8255]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1862]              havoc __exception;
[L1863]              revert := false;
[L1864]  COND FALSE  !(__exception)
[L1892]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5409]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5409]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  COND FALSE  !(revert)
[L5413]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5413]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5414]  COND FALSE  !(revert)
[L5417]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L3049]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3049]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3050]  COND FALSE  !(revert)
[L3053]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3024]              assume msgsender_MSG != null;
[L3025]              Balance[this] := 0;
[L3026]              _name_ERC20Detailed[this] := 890295274;
[L3027]              _symbol_ERC20Detailed[this] := 890295274;
[L3028]              _decimals_ERC20Detailed[this] := 0;
[L3030]              _name_ERC20Detailed[this] := name_s99;
[L3031]              _symbol_ERC20Detailed[this] := symbol_s99;
[L3032]              _decimals_ERC20Detailed[this] := decimals_s99;
[L3053]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3054]  COND FALSE  !(revert)
[L5417]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L5418]  COND FALSE  !(revert)
[L5421]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5421]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5425]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND FALSE  !(revert)
[L5429]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5073]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5073]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  COND FALSE  !(revert)
[L5077]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5077]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  COND FALSE  !(revert)
[L5081]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5081]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5082]  COND FALSE  !(revert)
[L5085]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5085]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5086]  COND FALSE  !(revert)
[L5089]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5042]              assume msgsender_MSG != null;
[L5043]              Balance[this] := 0;
[L5089]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]  COND FALSE  !(revert)
[L5429]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5430]  COND FALSE  !(revert)
[L5433]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5209]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5209]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5210]  COND FALSE  !(revert)
[L5213]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5213]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5214]  COND FALSE  !(revert)
[L5217]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5217]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5218]  COND FALSE  !(revert)
[L5221]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5221]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5222]  COND FALSE  !(revert)
[L5225]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5073]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5073]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  COND FALSE  !(revert)
[L5077]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5077]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  COND FALSE  !(revert)
[L5081]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5081]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5082]  COND FALSE  !(revert)
[L5085]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5085]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5086]  COND FALSE  !(revert)
[L5089]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5042]              assume msgsender_MSG != null;
[L5043]              Balance[this] := 0;
[L5089]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]  COND FALSE  !(revert)
[L5225]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5226]  COND FALSE  !(revert)
[L5229]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5168]              assume msgsender_MSG != null;
[L5169]              Balance[this] := 0;
[L5170]              _cap_ERC20Capped[this] := 0;
[L5172]  COND FALSE  !(!(cap_s910 > 0))
[L5176]              _cap_ERC20Capped[this] := cap_s910;
[L5229]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5230]  COND FALSE  !(revert)
[L5433]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5434]  COND FALSE  !(revert)
[L5437]  CALL        call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5353]              assume msgsender_MSG != null;
[L5354]              Balance[this] := 0;
[L5355]              DECIMALS_VIToken[this] := 18;
[L5356]              __var_39 := DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5357]              INITIAL_SUPPLY_VIToken[this] := 888888888 * (nonlinearPow(10, DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5359]  COND TRUE   DType[this] == VIToken
[L5360]  CALL        call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5293]  COND TRUE   DType[this] == VIToken
[L5294]  CALL        call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]              __ret_0_ := _totalSupply_ERC20[this];
[L5294]  RET         call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5295]  COND FALSE  !(revert)
[L5306]  CALL        call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L5306]  RET         call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L5307]  COND FALSE  !(revert)
[L5310]  COND FALSE  !(!(__var_36 <= _cap_ERC20Capped[this]))
[L5314]  COND TRUE   DType[this] == VIToken
[L5315]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L4233]              __var_16 := null;
[L4234]  COND FALSE  !(!(account_s562 != null))
[L4238]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4238]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L4239]  COND FALSE  !(revert)
[L4242]              _totalSupply_ERC20[this] := __var_17;
[L4243]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4243]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L4244]  COND FALSE  !(revert)
[L4247]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s562];
[L4248]              _balances_ERC20[this][account_s562] := __var_18;
[L4249]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s562];
[L4250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5315]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L5316]  COND FALSE  !(revert)
[L5360]  RET         call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5361]  COND FALSE  !(revert)
[L5437]  RET         call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5438]  COND FALSE  !(revert)
[L1892]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1893]              assume !revert && gas >= 0;
[L8255]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8256]              assume !revert && gas >= 0;
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND FALSE  !(choice == 16)
[L8146]  COND TRUE   choice == 15
[L8147]              gas := gas - 21000;
[L8148]  COND TRUE   gas >= 0
[L8149]              assume msgvalue_MSG == 0;
[L8150]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s352, spender_s352);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _allowances_ERC20[this][owner_s352][spender_s352] >= 0 && _allowances_ERC20[this][owner_s352][spender_s352] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_ERC200 := true;
[L2]                 call_allowance_ERC200 := false;
[L2]                 revert := revert_hold;
[L841]               havoc __exception;
[L842]               revert := false;
[L843]   COND FALSE  !(__exception)
[L871]   CALL        call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s352, spender_s352);
[L3491]              __ret_0_ := _allowances_ERC20[this][owner_s352][spender_s352];
[L871]   RET         call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s352, spender_s352);
[L872]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _allowances_ERC20[this][owner_s352][spender_s352] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L8150]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s352, spender_s352);
[L8259]  RET         call CorralChoice_VIToken(this);

Loop:
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND FALSE  !(choice == 16)
[L8146]  COND TRUE   choice == 15
[L8147]              gas := gas - 21000;
[L8148]  COND TRUE   gas >= 0
[L8149]              assume msgvalue_MSG == 0;
[L8150]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s352, spender_s352);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _allowances_ERC20[this][owner_s352][spender_s352] >= 0 && _allowances_ERC20[this][owner_s352][spender_s352] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_ERC200 := true;
[L2]                 call_allowance_ERC200 := false;
[L2]                 revert := revert_hold;
[L841]               havoc __exception;
[L842]               revert := false;
[L843]   COND FALSE  !(__exception)
[L871]   CALL        call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s352, spender_s352);
[L3491]              __ret_0_ := _allowances_ERC20[this][owner_s352][spender_s352];
[L871]   RET         call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s352, spender_s352);
[L872]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _allowances_ERC20[this][owner_s352][spender_s352] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L8150]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s352, spender_s352);
[L8259]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:35:59,469 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:35:59,469 INFO  L82        PathProgramCache]: Analyzing trace with hash 1624759495, now seen corresponding path program 1 times
[2020-11-25 08:35:59,470 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:35:59,490 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:35:59,698 INFO  L134       CoverageAnalysis]: Checked inductivity of 1571 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1571 trivial. 0 not checked.
[2020-11-25 08:35:59,698 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:35:59,699 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 08:35:59,699 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:35:59,699 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 08:35:59,699 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 08:35:59,699 INFO  L87              Difference]: Start difference. First operand 5045 states and 5965 transitions. cyclomatic complexity: 922 Second operand 4 states.
[2020-11-25 08:35:59,754 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:35:59,754 INFO  L93              Difference]: Finished difference Result 4923 states and 5798 transitions.
[2020-11-25 08:35:59,754 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 08:35:59,754 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4923 states and 5798 transitions.
[2020-11-25 08:35:59,763 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:35:59,773 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4923 states to 4913 states and 5788 transitions.
[2020-11-25 08:35:59,774 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1137
[2020-11-25 08:35:59,774 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1137
[2020-11-25 08:35:59,774 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4913 states and 5788 transitions.
[2020-11-25 08:35:59,777 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:35:59,777 INFO  L728         BuchiCegarLoop]: Abstraction has 4913 states and 5788 transitions.
[2020-11-25 08:35:59,781 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4913 states and 5788 transitions.
[2020-11-25 08:35:59,811 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4913 to 4911.
[2020-11-25 08:35:59,812 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4911 states.
[2020-11-25 08:35:59,817 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4911 states to 4911 states and 5786 transitions.
[2020-11-25 08:35:59,817 INFO  L751         BuchiCegarLoop]: Abstraction has 4911 states and 5786 transitions.
[2020-11-25 08:35:59,817 INFO  L631         BuchiCegarLoop]: Abstraction has 4911 states and 5786 transitions.
[2020-11-25 08:35:59,817 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 08:35:59,817 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4911 states and 5786 transitions.
[2020-11-25 08:35:59,824 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:35:59,824 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:35:59,824 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:35:59,826 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:35:59,827 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_allowance_ERC200 := false;
[L2]                 call_allowance_ERC200 := false;
[L2]     CALL        call main();
[L8249]              assume null == 0;
[L8250]  CALL        call this := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L8250]  RET         call this := FreshRefGenerator__success();
[L8251]              assume now >= 0;
[L8252]              assume DType[this] == VIToken;
[L8253]              assume msgvalue_MSG == 0;
[L8254]              gas := gas - 53000;
[L8255]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1862]              havoc __exception;
[L1863]              revert := false;
[L1864]  COND FALSE  !(__exception)
[L1892]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5409]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5409]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  COND FALSE  !(revert)
[L5413]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5413]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5414]  COND FALSE  !(revert)
[L5417]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L3049]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3049]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3050]  COND FALSE  !(revert)
[L3053]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3024]              assume msgsender_MSG != null;
[L3025]              Balance[this] := 0;
[L3026]              _name_ERC20Detailed[this] := 890295274;
[L3027]              _symbol_ERC20Detailed[this] := 890295274;
[L3028]              _decimals_ERC20Detailed[this] := 0;
[L3030]              _name_ERC20Detailed[this] := name_s99;
[L3031]              _symbol_ERC20Detailed[this] := symbol_s99;
[L3032]              _decimals_ERC20Detailed[this] := decimals_s99;
[L3053]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3054]  COND FALSE  !(revert)
[L5417]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L5418]  COND FALSE  !(revert)
[L5421]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5421]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5425]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND FALSE  !(revert)
[L5429]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5073]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5073]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  COND FALSE  !(revert)
[L5077]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5077]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  COND FALSE  !(revert)
[L5081]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5081]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5082]  COND FALSE  !(revert)
[L5085]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5085]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5086]  COND FALSE  !(revert)
[L5089]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5042]              assume msgsender_MSG != null;
[L5043]              Balance[this] := 0;
[L5089]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]  COND FALSE  !(revert)
[L5429]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5430]  COND FALSE  !(revert)
[L5433]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5209]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5209]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5210]  COND FALSE  !(revert)
[L5213]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5213]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5214]  COND FALSE  !(revert)
[L5217]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5217]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5218]  COND FALSE  !(revert)
[L5221]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5221]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5222]  COND FALSE  !(revert)
[L5225]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5073]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5073]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  COND FALSE  !(revert)
[L5077]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5077]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  COND FALSE  !(revert)
[L5081]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5081]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5082]  COND FALSE  !(revert)
[L5085]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5085]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5086]  COND FALSE  !(revert)
[L5089]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5042]              assume msgsender_MSG != null;
[L5043]              Balance[this] := 0;
[L5089]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]  COND FALSE  !(revert)
[L5225]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5226]  COND FALSE  !(revert)
[L5229]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5168]              assume msgsender_MSG != null;
[L5169]              Balance[this] := 0;
[L5170]              _cap_ERC20Capped[this] := 0;
[L5172]  COND FALSE  !(!(cap_s910 > 0))
[L5176]              _cap_ERC20Capped[this] := cap_s910;
[L5229]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5230]  COND FALSE  !(revert)
[L5433]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5434]  COND FALSE  !(revert)
[L5437]  CALL        call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5353]              assume msgsender_MSG != null;
[L5354]              Balance[this] := 0;
[L5355]              DECIMALS_VIToken[this] := 18;
[L5356]              __var_39 := DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5357]              INITIAL_SUPPLY_VIToken[this] := 888888888 * (nonlinearPow(10, DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5359]  COND TRUE   DType[this] == VIToken
[L5360]  CALL        call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5293]  COND TRUE   DType[this] == VIToken
[L5294]  CALL        call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]              __ret_0_ := _totalSupply_ERC20[this];
[L5294]  RET         call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5295]  COND FALSE  !(revert)
[L5306]  CALL        call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L5306]  RET         call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L5307]  COND FALSE  !(revert)
[L5310]  COND FALSE  !(!(__var_36 <= _cap_ERC20Capped[this]))
[L5314]  COND TRUE   DType[this] == VIToken
[L5315]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L4233]              __var_16 := null;
[L4234]  COND FALSE  !(!(account_s562 != null))
[L4238]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4238]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L4239]  COND FALSE  !(revert)
[L4242]              _totalSupply_ERC20[this] := __var_17;
[L4243]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4243]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L4244]  COND FALSE  !(revert)
[L4247]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s562];
[L4248]              _balances_ERC20[this][account_s562] := __var_18;
[L4249]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s562];
[L4250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5315]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L5316]  COND FALSE  !(revert)
[L5360]  RET         call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5361]  COND FALSE  !(revert)
[L5437]  RET         call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5438]  COND FALSE  !(revert)
[L1892]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1893]              assume !revert && gas >= 0;
[L8255]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8256]              assume !revert && gas >= 0;
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND FALSE  !(choice == 16)
[L8146]  COND TRUE   choice == 15
[L8147]              gas := gas - 21000;
[L8148]  COND TRUE   gas >= 0
[L8149]              assume msgvalue_MSG == 0;
[L8150]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s352, spender_s352);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _allowances_ERC20[this][owner_s352][spender_s352] >= 0 && _allowances_ERC20[this][owner_s352][spender_s352] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_ERC200 := true;
[L2]                 call_allowance_ERC200 := false;
[L2]                 revert := revert_hold;
[L841]               havoc __exception;
[L842]               revert := false;
[L843]   COND TRUE   __exception
[L844]               __tmp__Balance := Balance;
[L845]               __tmp__DType := DType;
[L846]               __tmp__Alloc := Alloc;
[L847]               __tmp__balance_ADDR := balance_ADDR;
[L848]               __tmp__M_Ref_int := M_Ref_int;
[L849]               __tmp__sum__balances0 := sum__balances0;
[L850]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L851]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L852]               __tmp__sum__allowances1 := sum__allowances1;
[L853]               __tmp__M_Ref_bool := M_Ref_bool;
[L854]               __tmp__sum := sum;
[L855]               __tmp__Length := Length;
[L856]               __tmp__now := now;
[L857]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L858]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L859]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L860]               __tmp___balances_ERC20 := _balances_ERC20;
[L861]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L862]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L863]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L864]               __tmp___minters_MinterRole := _minters_MinterRole;
[L865]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L866]               __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L867]               __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L868]   CALL        call __ret_0_ := allowance~address~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s352, spender_s352);
[L3485]              __ret_0_ := __tmp___allowances_ERC20[this][owner_s352][spender_s352];
[L868]   RET         call __ret_0_ := allowance~address~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s352, spender_s352);
[L869]               assume revert || gas < 0;
[L8150]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s352, spender_s352);
[L8259]  RET         call CorralChoice_VIToken(this);

Loop:
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND FALSE  !(choice == 16)
[L8146]  COND TRUE   choice == 15
[L8147]              gas := gas - 21000;
[L8148]  COND TRUE   gas >= 0
[L8149]              assume msgvalue_MSG == 0;
[L8150]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s352, spender_s352);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _allowances_ERC20[this][owner_s352][spender_s352] >= 0 && _allowances_ERC20[this][owner_s352][spender_s352] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_ERC200 := true;
[L2]                 call_allowance_ERC200 := false;
[L2]                 revert := revert_hold;
[L841]               havoc __exception;
[L842]               revert := false;
[L843]   COND TRUE   __exception
[L844]               __tmp__Balance := Balance;
[L845]               __tmp__DType := DType;
[L846]               __tmp__Alloc := Alloc;
[L847]               __tmp__balance_ADDR := balance_ADDR;
[L848]               __tmp__M_Ref_int := M_Ref_int;
[L849]               __tmp__sum__balances0 := sum__balances0;
[L850]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L851]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L852]               __tmp__sum__allowances1 := sum__allowances1;
[L853]               __tmp__M_Ref_bool := M_Ref_bool;
[L854]               __tmp__sum := sum;
[L855]               __tmp__Length := Length;
[L856]               __tmp__now := now;
[L857]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L858]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L859]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L860]               __tmp___balances_ERC20 := _balances_ERC20;
[L861]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L862]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L863]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L864]               __tmp___minters_MinterRole := _minters_MinterRole;
[L865]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L866]               __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L867]               __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L868]   CALL        call __ret_0_ := allowance~address~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s352, spender_s352);
[L3485]              __ret_0_ := __tmp___allowances_ERC20[this][owner_s352][spender_s352];
[L868]   RET         call __ret_0_ := allowance~address~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s352, spender_s352);
[L869]               assume revert || gas < 0;
[L8150]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s352, spender_s352);
[L8259]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:35:59,832 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:35:59,832 INFO  L82        PathProgramCache]: Analyzing trace with hash -1757509934, now seen corresponding path program 1 times
[2020-11-25 08:35:59,833 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:35:59,858 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:36:00,059 INFO  L134       CoverageAnalysis]: Checked inductivity of 1571 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1571 trivial. 0 not checked.
[2020-11-25 08:36:00,060 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:36:00,060 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 08:36:00,060 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:36:00,060 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 08:36:00,060 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 08:36:00,060 INFO  L87              Difference]: Start difference. First operand 4911 states and 5786 transitions. cyclomatic complexity: 877 Second operand 5 states.
[2020-11-25 08:36:00,409 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:36:00,409 INFO  L93              Difference]: Finished difference Result 2959 states and 3446 transitions.
[2020-11-25 08:36:00,409 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 08:36:00,410 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2959 states and 3446 transitions.
[2020-11-25 08:36:00,415 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 08:36:00,415 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2959 states to 0 states and 0 transitions.
[2020-11-25 08:36:00,415 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 08:36:00,416 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 08:36:00,416 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 08:36:00,416 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:36:00,416 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 08:36:00,416 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 08:36:00,416 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 08:36:00,416 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 08:36:00,416 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 08:36:00,416 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 08:36:00,416 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 08:36:00,419 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 08:36:00 BasicIcfg
[2020-11-25 08:36:00,419 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 08:36:00,419 INFO  L168              Benchmark]: Toolchain (without parser) took 8229.65 ms. Allocated memory was 1.0 GB in the beginning and 2.2 GB in the end (delta: 1.2 GB). Free memory was 929.8 MB in the beginning and 954.1 MB in the end (delta: -24.3 MB). Peak memory consumption was 1.2 GB. Max. memory is 15.3 GB.
[2020-11-25 08:36:00,420 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 08:36:00,420 INFO  L168              Benchmark]: Boogie Preprocessor took 135.35 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 908.4 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
[2020-11-25 08:36:00,421 INFO  L168              Benchmark]: UtopiaSpecLang took 86.93 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 903.0 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 08:36:00,421 INFO  L168              Benchmark]: Boogie Printer took 23.60 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 08:36:00,421 INFO  L168              Benchmark]: RCFGBuilder took 1293.04 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 62.4 MB). Free memory was 897.6 MB in the beginning and 905.4 MB in the end (delta: -7.8 MB). Peak memory consumption was 185.7 MB. Max. memory is 15.3 GB.
[2020-11-25 08:36:00,422 INFO  L168              Benchmark]: UtopiaLTL2Aut took 37.23 ms. Allocated memory is still 1.1 GB. Free memory was 905.4 MB in the beginning and 902.0 MB in the end (delta: 3.5 MB). Peak memory consumption was 3.5 MB. Max. memory is 15.3 GB.
[2020-11-25 08:36:00,422 INFO  L168              Benchmark]: BÃ¼chi Program Product took 2240.40 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 191.9 MB). Free memory was 902.0 MB in the beginning and 982.8 MB in the end (delta: -80.8 MB). Peak memory consumption was 472.1 MB. Max. memory is 15.3 GB.
[2020-11-25 08:36:00,422 INFO  L168              Benchmark]: BlockEncodingV2 took 207.98 ms. Allocated memory is still 1.3 GB. Free memory was 982.8 MB in the beginning and 859.5 MB in the end (delta: 123.3 MB). Peak memory consumption was 123.3 MB. Max. memory is 15.3 GB.
[2020-11-25 08:36:00,423 INFO  L168              Benchmark]: BuchiAutomizer took 4202.12 ms. Allocated memory was 1.3 GB in the beginning and 2.2 GB in the end (delta: 934.8 MB). Free memory was 859.5 MB in the beginning and 954.1 MB in the end (delta: -94.6 MB). Peak memory consumption was 840.2 MB. Max. memory is 15.3 GB.
[2020-11-25 08:36:00,426 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    8160 locations, 15600 edges
  - StatisticsResult: Encoded RCFG
    7992 locations, 15131 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 135.35 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 908.4 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 86.93 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 903.0 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 23.60 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1293.04 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 62.4 MB). Free memory was 897.6 MB in the beginning and 905.4 MB in the end (delta: -7.8 MB). Peak memory consumption was 185.7 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 37.23 ms. Allocated memory is still 1.1 GB. Free memory was 905.4 MB in the beginning and 902.0 MB in the end (delta: 3.5 MB). Peak memory consumption was 3.5 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 2240.40 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 191.9 MB). Free memory was 902.0 MB in the beginning and 982.8 MB in the end (delta: -80.8 MB). Peak memory consumption was 472.1 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 207.98 ms. Allocated memory is still 1.3 GB. Free memory was 982.8 MB in the beginning and 859.5 MB in the end (delta: 123.3 MB). Peak memory consumption was 123.3 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 4202.12 ms. Allocated memory was 1.3 GB in the beginning and 2.2 GB in the end (delta: 934.8 MB). Free memory was 859.5 MB in the beginning and 954.1 MB in the end (delta: -94.6 MB). Peak memory consumption was 840.2 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    3084 locations, 4749 edges
  - StatisticsResult: BuchiProgram size
    8160 locations, 15600 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 7 terminating modules (7 trivial, 0 deterministic, 0 nondeterministic). 7 modules have a trivial ranking function, the largest among these consists of 5 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 4.1s and 8 iterations.  TraceHistogramMax:12. Analysis of lassos took 1.6s. Construction of modules took 1.0s. BÃ¼chi inclusion checks took 0.6s. Highest rank in rank-based complementation 0. Minimization of det autom 7. Minimization of nondet autom 0. Automata minimization 0.3s AutomataMinimizationTime, 6 MinimizatonAttempts, 1036 StatesRemovedByMinimization, 5 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 5122 states and ocurred in iteration 3.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 36982 SDtfs, 17784 SDslu, 39623 SDs, 0 SdLazy, 5805 SolverSat, 4700 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 1.0s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU7 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_allowance_ERC200) ==> ( <>(success_allowance_ERC200) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
