This is Ultimate 0.1.24-f1553f5-m
[2020-11-24 23:41:02,945 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-24 23:41:02,947 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-24 23:41:02,957 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-24 23:41:02,957 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-24 23:41:02,957 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-24 23:41:02,958 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-24 23:41:02,960 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-24 23:41:02,962 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-24 23:41:02,962 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-24 23:41:02,963 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-24 23:41:02,963 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-24 23:41:02,964 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-24 23:41:02,965 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-24 23:41:02,965 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-24 23:41:02,966 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-24 23:41:02,967 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-24 23:41:02,968 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-24 23:41:02,969 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-24 23:41:02,970 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-24 23:41:02,971 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-24 23:41:02,972 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-24 23:41:02,974 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-24 23:41:02,974 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-24 23:41:02,974 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-24 23:41:02,975 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-24 23:41:02,975 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-24 23:41:02,976 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-24 23:41:02,976 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-24 23:41:02,976 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-24 23:41:02,977 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-24 23:41:02,977 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-24 23:41:02,978 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-24 23:41:02,978 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-24 23:41:02,979 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-24 23:41:02,979 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-24 23:41:02,980 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-24 23:41:02,980 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-24 23:41:02,980 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-24 23:41:02,981 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-24 23:41:02,981 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-24 23:41:02,981 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-24 23:41:02,988 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-24 23:41:02,989 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-24 23:41:02,989 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-24 23:41:02,989 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-24 23:41:02,990 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-24 23:41:02,990 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-24 23:41:02,990 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-24 23:41:02,990 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-24 23:41:02,990 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-24 23:41:02,990 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-24 23:41:02,990 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-24 23:41:02,990 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-24 23:41:02,990 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-24 23:41:02,991 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-24 23:41:02,991 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-24 23:41:02,991 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-24 23:41:02,991 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-24 23:41:02,991 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-24 23:41:02,991 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-24 23:41:02,991 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-24 23:41:02,991 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-24 23:41:02,991 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-24 23:41:02,991 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-24 23:41:02,992 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-24 23:41:02,992 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-24 23:41:02,992 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-24 23:41:03,013 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-24 23:41:03,023 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-24 23:41:03,025 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-24 23:41:03,026 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-24 23:41:03,027 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-24 23:41:03,027 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/AirBasicToken_0xd1ccc390f181a38faab2c818d19c5a68ba9251b7_transfer-self.bpl
[2020-11-24 23:41:03,027 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/AirBasicToken_0xd1ccc390f181a38faab2c818d19c5a68ba9251b7_transfer-self.bpl'
[2020-11-24 23:41:03,124 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-24 23:41:03,125 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-24 23:41:03,125 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-24 23:41:03,125 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-24 23:41:03,126 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-24 23:41:03,141 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "AirBasicToken_0xd1ccc390f181a38faab2c818d19c5a68ba9251b7_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 11:41:03" (1/1) ...
[2020-11-24 23:41:03,143 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "AirBasicToken_0xd1ccc390f181a38faab2c818d19c5a68ba9251b7_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 11:41:03" (1/1) ...
[2020-11-24 23:41:03,177 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "AirBasicToken_0xd1ccc390f181a38faab2c818d19c5a68ba9251b7_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 11:41:03" (1/1) ...
[2020-11-24 23:41:03,178 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "AirBasicToken_0xd1ccc390f181a38faab2c818d19c5a68ba9251b7_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 11:41:03" (1/1) ...
[2020-11-24 23:41:03,206 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "AirBasicToken_0xd1ccc390f181a38faab2c818d19c5a68ba9251b7_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 11:41:03" (1/1) ...
[2020-11-24 23:41:03,217 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "AirBasicToken_0xd1ccc390f181a38faab2c818d19c5a68ba9251b7_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 11:41:03" (1/1) ...
[2020-11-24 23:41:03,227 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "AirBasicToken_0xd1ccc390f181a38faab2c818d19c5a68ba9251b7_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 11:41:03" (1/1) ...
[2020-11-24 23:41:03,238 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-24 23:41:03,239 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-24 23:41:03,239 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-24 23:41:03,241 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-24 23:41:03,245 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "AirBasicToken_0xd1ccc390f181a38faab2c818d19c5a68ba9251b7_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 11:41:03" (1/1) ...
[2020-11-24 23:41:03,264 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(AirBasicToken.transfer(to, value), msg.sender == to && value <= balances_BasicToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(AirBasicToken.transfer(to, value), return == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && balanceLocked_AirBasicToken[this] == old(balanceLocked_AirBasicToken[this]) && amountRaised_AirBasicToken[this] == old(amountRaised_AirBasicToken[this]) && buyPrice_AirBasicToken[this] == old(buyPrice_AirBasicToken[this]) && crowdsaleClosed_AirBasicToken[this] == old(crowdsaleClosed_AirBasicToken[this]) && transferEnabled_AirBasicToken[this] == old(transferEnabled_AirBasicToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-24 23:41:03,270 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(AirBasicToken.transfer(to, value), msg.sender == to && value <= balances_BasicToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(AirBasicToken.transfer(to, value), return == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && balanceLocked_AirBasicToken[this] == old(balanceLocked_AirBasicToken[this]) && amountRaised_AirBasicToken[this] == old(amountRaised_AirBasicToken[this]) && buyPrice_AirBasicToken[this] == old(buyPrice_AirBasicToken[this]) && crowdsaleClosed_AirBasicToken[this] == old(crowdsaleClosed_AirBasicToken[this]) && transferEnabled_AirBasicToken[this] == old(transferEnabled_AirBasicToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-24 23:41:03,277 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(AirBasicToken.transfer(to, value), msg.sender == to && value <= balances_BasicToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(AirBasicToken.transfer(to, value), return == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && balanceLocked_AirBasicToken[this] == old(balanceLocked_AirBasicToken[this]) && amountRaised_AirBasicToken[this] == old(amountRaised_AirBasicToken[this]) && buyPrice_AirBasicToken[this] == old(buyPrice_AirBasicToken[this]) && crowdsaleClosed_AirBasicToken[this] == old(crowdsaleClosed_AirBasicToken[this]) && transferEnabled_AirBasicToken[this] == old(transferEnabled_AirBasicToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-24 23:41:03,285 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==_to_s841 && _value_s841<=balances_BasicToken[this][msg.sender] ) && _value_s841>=0 ) && _value_s841<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BasicToken[this][_to_s841]>=0 ) && balances_BasicToken[this][_to_s841]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BasicToken[this][msg.sender]>=0 ) && balances_BasicToken[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_AirBasicToken>],IdentifierExpression[_to_s841,<IMPLEMENTATION_INPARAM,transfer~address~uint256_AirBasicToken>]],BinaryExpression[COMPLEQ,IdentifierExpression[_value_s841,<IMPLEMENTATION_INPARAM,transfer~address~uint256_AirBasicToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_AirBasicToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_AirBasicToken>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[_value_s841,<IMPLEMENTATION_INPARAM,transfer~address~uint256_AirBasicToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_value_s841,<IMPLEMENTATION_INPARAM,transfer~address~uint256_AirBasicToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_AirBasicToken>]]],[IdentifierExpression[_to_s841,<IMPLEMENTATION_INPARAM,transfer~address~uint256_AirBasicToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_AirBasicToken>]]],[IdentifierExpression[_to_s841,<IMPLEMENTATION_INPARAM,transfer~address~uint256_AirBasicToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_AirBasicToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_AirBasicToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_AirBasicToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_AirBasicToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-24 23:41:03,288 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( __ret_0_==true && totalSupply__BasicToken[this]==( old(totalSupply__BasicToken[this]) ) ) && balances_BasicToken[this]==( old(balances_BasicToken[this]) ) ) && allowed_StandardToken[this]==( old(allowed_StandardToken[this]) ) ) && balanceLocked_AirBasicToken[this]==( old(balanceLocked_AirBasicToken[this]) ) ) && amountRaised_AirBasicToken[this]==( old(amountRaised_AirBasicToken[this]) ) ) && buyPrice_AirBasicToken[this]==( old(buyPrice_AirBasicToken[this]) ) ) && crowdsaleClosed_AirBasicToken[this]==( old(crowdsaleClosed_AirBasicToken[this]) ) ) && transferEnabled_AirBasicToken[this]==( old(transferEnabled_AirBasicToken[this]) ) ) && owner_Ownable[this]==( old(owner_Ownable[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_AirBasicToken>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_AirBasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_AirBasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_AirBasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_AirBasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_AirBasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_AirBasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balanceLocked_AirBasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_AirBasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balanceLocked_AirBasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_AirBasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[amountRaised_AirBasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_AirBasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[amountRaised_AirBasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_AirBasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[buyPrice_AirBasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_AirBasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[buyPrice_AirBasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_AirBasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[crowdsaleClosed_AirBasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_AirBasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[crowdsaleClosed_AirBasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_AirBasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[transferEnabled_AirBasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_AirBasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[transferEnabled_AirBasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_AirBasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_AirBasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_AirBasicToken>]]]]]]
[2020-11-24 23:41:03,294 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(AirBasicToken.transfer(to, value), msg.sender == to && value <= balances_BasicToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(AirBasicToken.transfer(to, value), return == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && balanceLocked_AirBasicToken[this] == old(balanceLocked_AirBasicToken[this]) && amountRaised_AirBasicToken[this] == old(amountRaised_AirBasicToken[this]) && buyPrice_AirBasicToken[this] == old(buyPrice_AirBasicToken[this]) && crowdsaleClosed_AirBasicToken[this] == old(crowdsaleClosed_AirBasicToken[this]) && transferEnabled_AirBasicToken[this] == old(transferEnabled_AirBasicToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-24 23:41:03,294 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_AirBasicToken0) ==> ( <>AP(success_transfer_AirBasicToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-24 23:41:03,307 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 11:41:03 PropertyContainer
[2020-11-24 23:41:03,307 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-24 23:41:03,307 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-24 23:41:03,308 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-24 23:41:03,308 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-24 23:41:03,309 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "AirBasicToken_0xd1ccc390f181a38faab2c818d19c5a68ba9251b7_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 11:41:03" (1/2) ...
[2020-11-24 23:41:03,309 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-24 23:41:03,309 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-24 23:41:03,329 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 11:41:03" (2/2) ...
[2020-11-24 23:41:03,330 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-24 23:41:03,330 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-24 23:41:03,330 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-24 23:41:03,330 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-24 23:41:03,331 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "AirBasicToken_0xd1ccc390f181a38faab2c818d19c5a68ba9251b7_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 11:41:03" (1/2) ...
[2020-11-24 23:41:03,388 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-24 23:41:03,388 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 23:41:03,388 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-24 23:41:03,388 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-24 23:41:03,388 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-24 23:41:03,388 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-24 23:41:03,388 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 23:41:03,388 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-24 23:41:03,388 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-24 23:41:03,389 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 23:41:03,389 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 23:41:03,389 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 23:41:03,389 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 23:41:03,389 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-24 23:41:03,389 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic
[2020-11-24 23:41:03,389 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic
[2020-11-24 23:41:03,390 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Basic
[2020-11-24 23:41:03,390 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Basic
[2020-11-24 23:41:03,390 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Basic
[2020-11-24 23:41:03,390 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-24 23:41:03,390 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken
[2020-11-24 23:41:03,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken
[2020-11-24 23:41:03,390 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken
[2020-11-24 23:41:03,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken
[2020-11-24 23:41:03,390 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken
[2020-11-24 23:41:03,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken
[2020-11-24 23:41:03,391 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken
[2020-11-24 23:41:03,391 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken
[2020-11-24 23:41:03,391 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-24 23:41:03,391 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken
[2020-11-24 23:41:03,391 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken
[2020-11-24 23:41:03,391 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken
[2020-11-24 23:41:03,391 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken
[2020-11-24 23:41:03,391 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_BurnableToken__success
[2020-11-24 23:41:03,391 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 23:41:03,391 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-24 23:41:03,391 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-24 23:41:03,391 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-24 23:41:03,391 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-24 23:41:03,392 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-24 23:41:03,392 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-24 23:41:03,392 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken
[2020-11-24 23:41:03,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken
[2020-11-24 23:41:03,392 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-24 23:41:03,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-24 23:41:03,392 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken
[2020-11-24 23:41:03,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken
[2020-11-24 23:41:03,392 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken
[2020-11-24 23:41:03,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken
[2020-11-24 23:41:03,392 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken
[2020-11-24 23:41:03,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken
[2020-11-24 23:41:03,393 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-24 23:41:03,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-24 23:41:03,393 INFO  L130     BoogieDeclarations]: Found specification of procedure AirBasicToken_AirBasicToken_NoBaseCtor__success
[2020-11-24 23:41:03,393 INFO  L130     BoogieDeclarations]: Found specification of procedure AirBasicToken_AirBasicToken
[2020-11-24 23:41:03,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure AirBasicToken_AirBasicToken
[2020-11-24 23:41:03,393 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_AirBasicToken__success
[2020-11-24 23:41:03,393 INFO  L130     BoogieDeclarations]: Found specification of procedure setPrice~uint256_AirBasicToken
[2020-11-24 23:41:03,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure setPrice~uint256_AirBasicToken
[2020-11-24 23:41:03,393 INFO  L130     BoogieDeclarations]: Found specification of procedure closeBuy~bool_AirBasicToken
[2020-11-24 23:41:03,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure closeBuy~bool_AirBasicToken
[2020-11-24 23:41:03,394 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_AirBasicToken__success
[2020-11-24 23:41:03,394 INFO  L130     BoogieDeclarations]: Found specification of procedure enableTransfer~bool_AirBasicToken
[2020-11-24 23:41:03,394 INFO  L138     BoogieDeclarations]: Found implementation of procedure enableTransfer~bool_AirBasicToken
[2020-11-24 23:41:03,394 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_AirBasicToken
[2020-11-24 23:41:03,394 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_AirBasicToken
[2020-11-24 23:41:03,394 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_AirBasicToken
[2020-11-24 23:41:03,394 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_AirBasicToken
[2020-11-24 23:41:03,394 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~arr_AirBasicToken
[2020-11-24 23:41:03,394 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~arr_AirBasicToken
[2020-11-24 23:41:03,395 INFO  L130     BoogieDeclarations]: Found specification of procedure unlock~arr_AirBasicToken
[2020-11-24 23:41:03,395 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlock~arr_AirBasicToken
[2020-11-24 23:41:03,395 INFO  L130     BoogieDeclarations]: Found specification of procedure name_AirBasicToken
[2020-11-24 23:41:03,395 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_AirBasicToken
[2020-11-24 23:41:03,395 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_AirBasicToken
[2020-11-24 23:41:03,395 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_AirBasicToken
[2020-11-24 23:41:03,395 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_AirBasicToken
[2020-11-24 23:41:03,395 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_AirBasicToken
[2020-11-24 23:41:03,395 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_AirBasicToken
[2020-11-24 23:41:03,395 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_AirBasicToken
[2020-11-24 23:41:03,396 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceLocked~address_AirBasicToken
[2020-11-24 23:41:03,396 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceLocked~address_AirBasicToken
[2020-11-24 23:41:03,396 INFO  L130     BoogieDeclarations]: Found specification of procedure amountRaised_AirBasicToken
[2020-11-24 23:41:03,396 INFO  L138     BoogieDeclarations]: Found implementation of procedure amountRaised_AirBasicToken
[2020-11-24 23:41:03,396 INFO  L130     BoogieDeclarations]: Found specification of procedure buyPrice_AirBasicToken
[2020-11-24 23:41:03,396 INFO  L138     BoogieDeclarations]: Found implementation of procedure buyPrice_AirBasicToken
[2020-11-24 23:41:03,396 INFO  L130     BoogieDeclarations]: Found specification of procedure crowdsaleClosed_AirBasicToken
[2020-11-24 23:41:03,396 INFO  L138     BoogieDeclarations]: Found implementation of procedure crowdsaleClosed_AirBasicToken
[2020-11-24 23:41:03,396 INFO  L130     BoogieDeclarations]: Found specification of procedure transferEnabled_AirBasicToken
[2020-11-24 23:41:03,396 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferEnabled_AirBasicToken
[2020-11-24 23:41:03,397 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-24 23:41:03,397 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-24 23:41:03,397 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-24 23:41:03,397 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-24 23:41:03,397 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-24 23:41:03,397 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-24 23:41:03,397 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-24 23:41:03,397 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-24 23:41:03,397 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Basic
[2020-11-24 23:41:03,397 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Basic
[2020-11-24 23:41:03,398 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BasicToken
[2020-11-24 23:41:03,398 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BasicToken
[2020-11-24 23:41:03,398 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BurnableToken
[2020-11-24 23:41:03,398 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BurnableToken
[2020-11-24 23:41:03,398 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-24 23:41:03,398 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-24 23:41:03,398 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_StandardToken
[2020-11-24 23:41:03,398 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_StandardToken
[2020-11-24 23:41:03,398 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_AirBasicToken
[2020-11-24 23:41:03,398 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-24 23:41:03,399 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-24 23:41:03,399 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 23:41:03,399 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-24 23:41:03,399 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-24 23:41:03,399 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-24 23:41:03,399 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-24 23:41:03,399 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 23:41:03,399 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-24 23:41:03,399 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-24 23:41:03,400 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 23:41:03,400 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 23:41:03,400 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 23:41:03,400 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 23:41:03,400 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-24 23:41:03,400 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__success
[2020-11-24 23:41:03,400 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__fail
[2020-11-24 23:41:03,400 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-24 23:41:03,400 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__success
[2020-11-24 23:41:03,400 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__fail
[2020-11-24 23:41:03,401 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__success
[2020-11-24 23:41:03,401 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__fail
[2020-11-24 23:41:03,401 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__success
[2020-11-24 23:41:03,401 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__fail
[2020-11-24 23:41:03,401 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__success
[2020-11-24 23:41:03,401 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__fail
[2020-11-24 23:41:03,401 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-24 23:41:03,401 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__success
[2020-11-24 23:41:03,401 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__fail
[2020-11-24 23:41:03,401 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__success
[2020-11-24 23:41:03,402 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__fail
[2020-11-24 23:41:03,402 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_BurnableToken__fail
[2020-11-24 23:41:03,402 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 23:41:03,402 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-24 23:41:03,402 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-24 23:41:03,402 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-24 23:41:03,402 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__success
[2020-11-24 23:41:03,402 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__fail
[2020-11-24 23:41:03,402 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-24 23:41:03,402 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-24 23:41:03,403 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__success
[2020-11-24 23:41:03,403 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__fail
[2020-11-24 23:41:03,403 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__success
[2020-11-24 23:41:03,403 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__fail
[2020-11-24 23:41:03,403 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-24 23:41:03,403 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-24 23:41:03,403 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-24 23:41:03,403 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-24 23:41:03,403 INFO  L130     BoogieDeclarations]: Found specification of procedure AirBasicToken_AirBasicToken_NoBaseCtor__fail
[2020-11-24 23:41:03,403 INFO  L130     BoogieDeclarations]: Found specification of procedure AirBasicToken_AirBasicToken__success
[2020-11-24 23:41:03,404 INFO  L130     BoogieDeclarations]: Found specification of procedure AirBasicToken_AirBasicToken__fail
[2020-11-24 23:41:03,404 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_AirBasicToken__fail
[2020-11-24 23:41:03,404 INFO  L130     BoogieDeclarations]: Found specification of procedure setPrice~uint256_AirBasicToken__success
[2020-11-24 23:41:03,404 INFO  L130     BoogieDeclarations]: Found specification of procedure setPrice~uint256_AirBasicToken__fail
[2020-11-24 23:41:03,404 INFO  L130     BoogieDeclarations]: Found specification of procedure closeBuy~bool_AirBasicToken__success
[2020-11-24 23:41:03,404 INFO  L130     BoogieDeclarations]: Found specification of procedure closeBuy~bool_AirBasicToken__fail
[2020-11-24 23:41:03,404 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_AirBasicToken__fail
[2020-11-24 23:41:03,404 INFO  L130     BoogieDeclarations]: Found specification of procedure enableTransfer~bool_AirBasicToken__success
[2020-11-24 23:41:03,404 INFO  L130     BoogieDeclarations]: Found specification of procedure enableTransfer~bool_AirBasicToken__fail
[2020-11-24 23:41:03,404 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_AirBasicToken__success
[2020-11-24 23:41:03,404 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_AirBasicToken__fail
[2020-11-24 23:41:03,405 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_AirBasicToken__success
[2020-11-24 23:41:03,405 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_AirBasicToken__fail
[2020-11-24 23:41:03,405 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~arr_AirBasicToken__success
[2020-11-24 23:41:03,405 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~arr_AirBasicToken__fail
[2020-11-24 23:41:03,405 INFO  L130     BoogieDeclarations]: Found specification of procedure unlock~arr_AirBasicToken__success
[2020-11-24 23:41:03,405 INFO  L130     BoogieDeclarations]: Found specification of procedure unlock~arr_AirBasicToken__fail
[2020-11-24 23:41:03,405 INFO  L130     BoogieDeclarations]: Found specification of procedure name_AirBasicToken__success
[2020-11-24 23:41:03,405 INFO  L130     BoogieDeclarations]: Found specification of procedure name_AirBasicToken__fail
[2020-11-24 23:41:03,405 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_AirBasicToken__success
[2020-11-24 23:41:03,405 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_AirBasicToken__fail
[2020-11-24 23:41:03,405 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_AirBasicToken__success
[2020-11-24 23:41:03,406 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_AirBasicToken__fail
[2020-11-24 23:41:03,406 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_AirBasicToken__success
[2020-11-24 23:41:03,406 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_AirBasicToken__fail
[2020-11-24 23:41:03,406 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceLocked~address_AirBasicToken__success
[2020-11-24 23:41:03,406 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceLocked~address_AirBasicToken__fail
[2020-11-24 23:41:03,406 INFO  L130     BoogieDeclarations]: Found specification of procedure amountRaised_AirBasicToken__success
[2020-11-24 23:41:03,406 INFO  L130     BoogieDeclarations]: Found specification of procedure amountRaised_AirBasicToken__fail
[2020-11-24 23:41:03,406 INFO  L130     BoogieDeclarations]: Found specification of procedure buyPrice_AirBasicToken__success
[2020-11-24 23:41:03,406 INFO  L130     BoogieDeclarations]: Found specification of procedure buyPrice_AirBasicToken__fail
[2020-11-24 23:41:03,406 INFO  L130     BoogieDeclarations]: Found specification of procedure crowdsaleClosed_AirBasicToken__success
[2020-11-24 23:41:03,406 INFO  L130     BoogieDeclarations]: Found specification of procedure crowdsaleClosed_AirBasicToken__fail
[2020-11-24 23:41:03,407 INFO  L130     BoogieDeclarations]: Found specification of procedure transferEnabled_AirBasicToken__success
[2020-11-24 23:41:03,407 INFO  L130     BoogieDeclarations]: Found specification of procedure transferEnabled_AirBasicToken__fail
[2020-11-24 23:41:03,407 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-24 23:41:03,407 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-24 23:41:03,407 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-24 23:41:03,407 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-24 23:41:03,407 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-24 23:41:03,407 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-24 23:41:03,407 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 23:41:03,407 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 23:41:03,407 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-24 23:41:03,407 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-24 23:41:03,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-24 23:41:03,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-24 23:41:03,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 23:41:03,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 23:41:03,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-24 23:41:03,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-24 23:41:03,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 23:41:03,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 23:41:03,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 23:41:03,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 23:41:03,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 23:41:03,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 23:41:03,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 23:41:03,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 23:41:03,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-24 23:41:03,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-24 23:41:03,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__fail
[2020-11-24 23:41:03,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__success
[2020-11-24 23:41:03,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-24 23:41:03,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-24 23:41:03,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__fail
[2020-11-24 23:41:03,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__success
[2020-11-24 23:41:03,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__fail
[2020-11-24 23:41:03,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__success
[2020-11-24 23:41:03,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__fail
[2020-11-24 23:41:03,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__success
[2020-11-24 23:41:03,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__fail
[2020-11-24 23:41:03,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__success
[2020-11-24 23:41:03,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-24 23:41:03,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-24 23:41:03,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__fail
[2020-11-24 23:41:03,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__success
[2020-11-24 23:41:03,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__fail
[2020-11-24 23:41:03,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__success
[2020-11-24 23:41:03,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_BurnableToken__fail
[2020-11-24 23:41:03,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_BurnableToken__success
[2020-11-24 23:41:03,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 23:41:03,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 23:41:03,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-24 23:41:03,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-24 23:41:03,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-24 23:41:03,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-24 23:41:03,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__fail
[2020-11-24 23:41:03,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__success
[2020-11-24 23:41:03,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-24 23:41:03,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-24 23:41:03,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__fail
[2020-11-24 23:41:03,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__success
[2020-11-24 23:41:03,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__fail
[2020-11-24 23:41:03,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__success
[2020-11-24 23:41:03,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-24 23:41:03,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-24 23:41:03,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-24 23:41:03,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-24 23:41:03,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure AirBasicToken_AirBasicToken_NoBaseCtor__fail
[2020-11-24 23:41:03,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure AirBasicToken_AirBasicToken_NoBaseCtor__success
[2020-11-24 23:41:03,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure AirBasicToken_AirBasicToken__fail
[2020-11-24 23:41:03,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure AirBasicToken_AirBasicToken__success
[2020-11-24 23:41:03,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_AirBasicToken__fail
[2020-11-24 23:41:03,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_AirBasicToken__success
[2020-11-24 23:41:03,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure setPrice~uint256_AirBasicToken__fail
[2020-11-24 23:41:03,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure setPrice~uint256_AirBasicToken__success
[2020-11-24 23:41:03,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure closeBuy~bool_AirBasicToken__fail
[2020-11-24 23:41:03,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure closeBuy~bool_AirBasicToken__success
[2020-11-24 23:41:03,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_AirBasicToken__fail
[2020-11-24 23:41:03,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_AirBasicToken__success
[2020-11-24 23:41:03,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure enableTransfer~bool_AirBasicToken__fail
[2020-11-24 23:41:03,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure enableTransfer~bool_AirBasicToken__success
[2020-11-24 23:41:03,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_AirBasicToken__fail
[2020-11-24 23:41:03,414 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_AirBasicToken__success
[2020-11-24 23:41:03,414 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_AirBasicToken__fail
[2020-11-24 23:41:03,414 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_AirBasicToken__success
[2020-11-24 23:41:03,414 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~arr_AirBasicToken__fail
[2020-11-24 23:41:03,414 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~arr_AirBasicToken__success
[2020-11-24 23:41:03,414 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlock~arr_AirBasicToken__fail
[2020-11-24 23:41:03,414 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlock~arr_AirBasicToken__success
[2020-11-24 23:41:03,414 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_AirBasicToken__fail
[2020-11-24 23:41:03,414 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_AirBasicToken__success
[2020-11-24 23:41:03,414 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_AirBasicToken__fail
[2020-11-24 23:41:03,415 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_AirBasicToken__success
[2020-11-24 23:41:03,415 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_AirBasicToken__fail
[2020-11-24 23:41:03,415 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_AirBasicToken__success
[2020-11-24 23:41:03,415 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_AirBasicToken__fail
[2020-11-24 23:41:03,415 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_AirBasicToken__success
[2020-11-24 23:41:03,415 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceLocked~address_AirBasicToken__fail
[2020-11-24 23:41:03,415 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceLocked~address_AirBasicToken__success
[2020-11-24 23:41:03,415 INFO  L138     BoogieDeclarations]: Found implementation of procedure amountRaised_AirBasicToken__fail
[2020-11-24 23:41:03,415 INFO  L138     BoogieDeclarations]: Found implementation of procedure amountRaised_AirBasicToken__success
[2020-11-24 23:41:03,415 INFO  L138     BoogieDeclarations]: Found implementation of procedure buyPrice_AirBasicToken__fail
[2020-11-24 23:41:03,415 INFO  L138     BoogieDeclarations]: Found implementation of procedure buyPrice_AirBasicToken__success
[2020-11-24 23:41:03,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure crowdsaleClosed_AirBasicToken__fail
[2020-11-24 23:41:03,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure crowdsaleClosed_AirBasicToken__success
[2020-11-24 23:41:03,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferEnabled_AirBasicToken__fail
[2020-11-24 23:41:03,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferEnabled_AirBasicToken__success
[2020-11-24 23:41:03,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-24 23:41:03,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-24 23:41:03,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-24 23:41:03,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-24 23:41:03,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-24 23:41:03,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-24 23:41:03,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-24 23:41:03,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-24 23:41:03,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-24 23:41:03,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-24 23:41:03,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-24 23:41:03,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-24 23:41:03,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Basic
[2020-11-24 23:41:03,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Basic
[2020-11-24 23:41:03,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BasicToken
[2020-11-24 23:41:03,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BasicToken
[2020-11-24 23:41:03,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BurnableToken
[2020-11-24 23:41:03,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BurnableToken
[2020-11-24 23:41:03,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-24 23:41:03,418 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-24 23:41:03,418 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_StandardToken
[2020-11-24 23:41:03,418 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_StandardToken
[2020-11-24 23:41:03,418 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_AirBasicToken
[2020-11-24 23:41:03,418 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-24 23:41:03,418 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-24 23:41:03,418 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-24 23:41:03,938 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 23:41:03,938 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 23:41:03,939 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 23:41:04,378 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-24 23:41:04,378 INFO  L286             CfgBuilder]: Removed 8 assue(true) statements.
[2020-11-24 23:41:04,381 INFO  L202        PluginConnector]: Adding new model AirBasicToken_0xd1ccc390f181a38faab2c818d19c5a68ba9251b7_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 11:41:04 BoogieIcfgContainer
[2020-11-24 23:41:04,381 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 11:41:03" (2/2) ...
[2020-11-24 23:41:04,381 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-24 23:41:04,381 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@159d6513 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 11:41:04, skipping insertion in model container
[2020-11-24 23:41:04,381 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-24 23:41:04,382 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-24 23:41:04,382 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-24 23:41:04,383 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-24 23:41:04,383 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "AirBasicToken_0xd1ccc390f181a38faab2c818d19c5a68ba9251b7_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 11:41:03" (1/3) ...
[2020-11-24 23:41:04,384 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@3c4f998c and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 11:41:04, skipping insertion in model container
[2020-11-24 23:41:04,384 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 11:41:03" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-24 23:41:04,423 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 11:41:04 NWAContainer
[2020-11-24 23:41:04,423 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-24 23:41:04,424 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-24 23:41:04,424 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-24 23:41:04,424 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-24 23:41:04,426 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "AirBasicToken_0xd1ccc390f181a38faab2c818d19c5a68ba9251b7_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 11:41:04" (3/4) ...
[2020-11-24 23:41:04,426 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@24379399 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 11:41:04, skipping insertion in model container
[2020-11-24 23:41:04,427 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 11:41:04" (4/4) ...
[2020-11-24 23:41:04,430 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-24 23:41:04,436 INFO  L110   BuchiProductObserver]: Initial RCFG 3209 locations, 4263 edges
[2020-11-24 23:41:04,436 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-24 23:41:04,454 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-24 23:41:06,223 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-24 23:41:06,232 INFO  L110   BuchiProductObserver]: BuchiProgram size 7632 locations, 13498 edges
[2020-11-24 23:41:06,232 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 11:41:06 BoogieIcfgContainer
[2020-11-24 23:41:06,232 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-24 23:41:06,232 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-24 23:41:06,233 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-24 23:41:06,234 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-24 23:41:06,234 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 11:41:06" (1/1) ...
[2020-11-24 23:41:06,349 INFO  L313           BlockEncoder]: Initial Icfg 7632 locations, 13498 edges
[2020-11-24 23:41:06,349 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-24 23:41:06,349 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-24 23:41:06,349 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-24 23:41:06,350 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-24 23:41:06,364 INFO  L70    emoveInfeasibleEdges]: Removed 99 edges and 19 locations because of local infeasibility
[2020-11-24 23:41:06,380 INFO  L70        RemoveSinkStates]: Removed 20 edges and 13 locations by removing sink states
[2020-11-24 23:41:06,394 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-24 23:41:06,398 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-24 23:41:06,402 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-24 23:41:06,403 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-24 23:41:06,407 INFO  L313           BlockEncoder]: Encoded RCFG 7566 locations, 13329 edges
[2020-11-24 23:41:06,407 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 11:41:06 BasicIcfg
[2020-11-24 23:41:06,407 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-24 23:41:06,408 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-24 23:41:06,408 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-24 23:41:06,409 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-24 23:41:06,409 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 23:41:06,409 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "AirBasicToken_0xd1ccc390f181a38faab2c818d19c5a68ba9251b7_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 11:41:03" (1/6) ...
[2020-11-24 23:41:06,411 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@62ab4d90 and model type AirBasicToken_0xd1ccc390f181a38faab2c818d19c5a68ba9251b7_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 11:41:06, skipping insertion in model container
[2020-11-24 23:41:06,411 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 23:41:06,411 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 11:41:03" (2/6) ...
[2020-11-24 23:41:06,411 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@62ab4d90 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 11:41:06, skipping insertion in model container
[2020-11-24 23:41:06,411 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 23:41:06,411 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "AirBasicToken_0xd1ccc390f181a38faab2c818d19c5a68ba9251b7_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 11:41:04" (3/6) ...
[2020-11-24 23:41:06,411 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@62ab4d90 and model type AirBasicToken_0xd1ccc390f181a38faab2c818d19c5a68ba9251b7_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 11:41:06, skipping insertion in model container
[2020-11-24 23:41:06,411 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 23:41:06,412 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 11:41:04" (4/6) ...
[2020-11-24 23:41:06,412 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@62ab4d90 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 11:41:06, skipping insertion in model container
[2020-11-24 23:41:06,412 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 23:41:06,412 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 11:41:06" (5/6) ...
[2020-11-24 23:41:06,412 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@62ab4d90 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 24.11 11:41:06, skipping insertion in model container
[2020-11-24 23:41:06,412 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 23:41:06,412 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 11:41:06" (6/6) ...
[2020-11-24 23:41:06,413 INFO  L404   chiAutomizerObserver]: Analyzing ICFG AirBasicToken_0xd1ccc390f181a38faab2c818d19c5a68ba9251b7_transfer-self.bpl_BEv2
[2020-11-24 23:41:06,447 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-24 23:41:06,447 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-24 23:41:06,447 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-24 23:41:06,448 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-24 23:41:06,448 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-24 23:41:06,448 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-24 23:41:06,448 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-24 23:41:06,448 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-24 23:41:06,448 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-24 23:41:06,493 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7566 states.
[2020-11-24 23:41:06,548 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 23:41:06,548 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 23:41:06,548 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 23:41:06,555 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 23:41:06,555 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 23:41:06,555 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-24 23:41:06,555 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7566 states.
[2020-11-24 23:41:06,576 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 23:41:06,576 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 23:41:06,576 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 23:41:06,578 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 23:41:06,578 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_AirBasicToken0 := false;
[L2]                 call_transfer_AirBasicToken0 := false;
[L2]     CALL        call main();
[L7063]              assume null == 0;
[L7064]  CALL        call this := FreshRefGenerator__success();
[L3583]              havoc newRef;
[L3584]              assume Alloc[newRef] == false;
[L3585]              Alloc[newRef] := true;
[L3586]              assume newRef != null;
[L7064]  RET         call this := FreshRefGenerator__success();
[L7065]              assume now >= 0;
[L7066]              assume DType[this] == AirBasicToken;
[L7067]              assume msgvalue_MSG == 0;
[L7068]              gas := gas - 53000;
[L7069]  CALL        call AirBasicToken_AirBasicToken(this, msgsender_MSG, msgvalue_MSG);
[L1419]              havoc __exception;
[L1420]              revert := false;
[L1421]  COND FALSE  !(__exception)
[L1453]  CALL        call AirBasicToken_AirBasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4404]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L4404]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4405]  COND TRUE   revert
[L1453]  RET         call AirBasicToken_AirBasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1454]              assume !revert && gas >= 0;
[L7069]  RET         call AirBasicToken_AirBasicToken(this, msgsender_MSG, msgvalue_MSG);
[L7070]              assume !revert && gas >= 0;

Loop:
[L7073]  CALL        call CorralChoice_AirBasicToken(this);
[L6844]              havoc msgsender_MSG;
[L6845]              havoc msgvalue_MSG;
[L6846]              havoc choice;
[L6847]              havoc __ret_0_owner;
[L6848]              havoc __ret_0_totalSupply;
[L6849]              havoc _owner_s237;
[L6850]              havoc __ret_0_balanceOf;
[L6851]              havoc _to_s841;
[L6852]              havoc _value_s841;
[L6853]              havoc __ret_0_transfer;
[L6854]              havoc _value_s258;
[L6855]              havoc _owner_s486;
[L6856]              havoc _spender_s486;
[L6857]              havoc __ret_0_allowance;
[L6858]              havoc _from_s813;
[L6859]              havoc _to_s813;
[L6860]              havoc _value_s813;
[L6861]              havoc __ret_0_transferFrom;
[L6862]              havoc _spender_s470;
[L6863]              havoc _value_s470;
[L6864]              havoc __ret_0_approve;
[L6865]              havoc _spender_s527;
[L6866]              havoc _addedValue_s527;
[L6867]              havoc __ret_0_increaseApproval;
[L6868]              havoc _spender_s587;
[L6869]              havoc _subtractedValue_s587;
[L6870]              havoc __ret_0_decreaseApproval;
[L6871]              havoc __ret_0_name;
[L6872]              havoc __ret_0_symbol;
[L6873]              havoc __ret_0_decimals;
[L6874]              havoc __ret_0_INITIAL_SUPPLY;
[L6875]              havoc arg904_s0;
[L6876]              havoc __ret_0_balanceLocked;
[L6877]              havoc __ret_0_amountRaised;
[L6878]              havoc __ret_0_buyPrice;
[L6879]              havoc __ret_0_crowdsaleClosed;
[L6880]              havoc __ret_0_transferEnabled;
[L6881]              havoc newBuyPrice_s722;
[L6882]              havoc closebuy_s734;
[L6883]              havoc _enable_s783;
[L6884]              havoc _addr_s871;
[L6885]              havoc _addr_s901;
[L6886]              havoc tmpNow;
[L6887]              havoc gas;
[L6888]              assume gas > 4000000 && gas <= 8000000;
[L6889]              tmpNow := now;
[L6890]              havoc now;
[L6891]              assume now > tmpNow;
[L6892]              assume msgsender_MSG != null;
[L6893]              assume DType[msgsender_MSG] != Ownable;
[L6894]              assume DType[msgsender_MSG] != SafeMath;
[L6895]              assume DType[msgsender_MSG] != ERC20Basic;
[L6896]              assume DType[msgsender_MSG] != BasicToken;
[L6897]              assume DType[msgsender_MSG] != BurnableToken;
[L6898]              assume DType[msgsender_MSG] != ERC20;
[L6899]              assume DType[msgsender_MSG] != StandardToken;
[L6900]              assume DType[msgsender_MSG] != AirBasicToken;
[L6901]              Alloc[msgsender_MSG] := true;
[L6902]  COND TRUE   choice == 24
[L6903]              gas := gas - 21000;
[L6904]  COND FALSE  !(gas >= 0)
[L7073]  RET         call CorralChoice_AirBasicToken(this);

[2020-11-24 23:41:06,591 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 23:41:06,591 INFO  L82        PathProgramCache]: Analyzing trace with hash 148106134, now seen corresponding path program 1 times
[2020-11-24 23:41:06,595 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 23:41:06,620 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 23:41:06,660 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 23:41:06,662 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 23:41:06,662 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 23:41:07,052 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 23:41:07,061 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 23:41:07,062 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-24 23:41:07,063 INFO  L87              Difference]: Start difference. First operand 7566 states. Second operand 4 states.
[2020-11-24 23:41:07,559 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 23:41:07,559 INFO  L93              Difference]: Finished difference Result 3771 states and 4171 transitions.
[2020-11-24 23:41:07,559 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 23:41:07,560 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3771 states and 4171 transitions.
[2020-11-24 23:41:07,581 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 23:41:07,606 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3771 states to 3767 states and 4163 transitions.
[2020-11-24 23:41:07,607 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-24 23:41:07,610 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1016
[2020-11-24 23:41:07,611 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3767 states and 4163 transitions.
[2020-11-24 23:41:07,621 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 23:41:07,621 INFO  L728         BuchiCegarLoop]: Abstraction has 3767 states and 4163 transitions.
[2020-11-24 23:41:07,636 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3767 states and 4163 transitions.
[2020-11-24 23:41:07,695 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3767 to 3767.
[2020-11-24 23:41:07,696 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3767 states.
[2020-11-24 23:41:07,701 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3767 states to 3767 states and 4163 transitions.
[2020-11-24 23:41:07,702 INFO  L751         BuchiCegarLoop]: Abstraction has 3767 states and 4163 transitions.
[2020-11-24 23:41:07,702 INFO  L631         BuchiCegarLoop]: Abstraction has 3767 states and 4163 transitions.
[2020-11-24 23:41:07,702 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-24 23:41:07,702 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3767 states and 4163 transitions.
[2020-11-24 23:41:07,711 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 23:41:07,711 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 23:41:07,711 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 23:41:07,713 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 23:41:07,713 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_AirBasicToken0 := false;
[L2]                 call_transfer_AirBasicToken0 := false;
[L2]     CALL        call main();
[L7063]              assume null == 0;
[L7064]  CALL        call this := FreshRefGenerator__success();
[L3583]              havoc newRef;
[L3584]              assume Alloc[newRef] == false;
[L3585]              Alloc[newRef] := true;
[L3586]              assume newRef != null;
[L7064]  RET         call this := FreshRefGenerator__success();
[L7065]              assume now >= 0;
[L7066]              assume DType[this] == AirBasicToken;
[L7067]              assume msgvalue_MSG == 0;
[L7068]              gas := gas - 53000;
[L7069]  CALL        call AirBasicToken_AirBasicToken(this, msgsender_MSG, msgvalue_MSG);
[L1419]              havoc __exception;
[L1420]              revert := false;
[L1421]  COND FALSE  !(__exception)
[L1453]  CALL        call AirBasicToken_AirBasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4404]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND TRUE   revert
[L4404]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4405]  COND TRUE   revert
[L1453]  RET         call AirBasicToken_AirBasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1454]              assume !revert && gas >= 0;
[L7069]  RET         call AirBasicToken_AirBasicToken(this, msgsender_MSG, msgvalue_MSG);
[L7070]              assume !revert && gas >= 0;
[L7073]  CALL        call CorralChoice_AirBasicToken(this);
[L6844]              havoc msgsender_MSG;
[L6845]              havoc msgvalue_MSG;
[L6846]              havoc choice;
[L6847]              havoc __ret_0_owner;
[L6848]              havoc __ret_0_totalSupply;
[L6849]              havoc _owner_s237;
[L6850]              havoc __ret_0_balanceOf;
[L6851]              havoc _to_s841;
[L6852]              havoc _value_s841;
[L6853]              havoc __ret_0_transfer;
[L6854]              havoc _value_s258;
[L6855]              havoc _owner_s486;
[L6856]              havoc _spender_s486;
[L6857]              havoc __ret_0_allowance;
[L6858]              havoc _from_s813;
[L6859]              havoc _to_s813;
[L6860]              havoc _value_s813;
[L6861]              havoc __ret_0_transferFrom;
[L6862]              havoc _spender_s470;
[L6863]              havoc _value_s470;
[L6864]              havoc __ret_0_approve;
[L6865]              havoc _spender_s527;
[L6866]              havoc _addedValue_s527;
[L6867]              havoc __ret_0_increaseApproval;
[L6868]              havoc _spender_s587;
[L6869]              havoc _subtractedValue_s587;
[L6870]              havoc __ret_0_decreaseApproval;
[L6871]              havoc __ret_0_name;
[L6872]              havoc __ret_0_symbol;
[L6873]              havoc __ret_0_decimals;
[L6874]              havoc __ret_0_INITIAL_SUPPLY;
[L6875]              havoc arg904_s0;
[L6876]              havoc __ret_0_balanceLocked;
[L6877]              havoc __ret_0_amountRaised;
[L6878]              havoc __ret_0_buyPrice;
[L6879]              havoc __ret_0_crowdsaleClosed;
[L6880]              havoc __ret_0_transferEnabled;
[L6881]              havoc newBuyPrice_s722;
[L6882]              havoc closebuy_s734;
[L6883]              havoc _enable_s783;
[L6884]              havoc _addr_s871;
[L6885]              havoc _addr_s901;
[L6886]              havoc tmpNow;
[L6887]              havoc gas;
[L6888]              assume gas > 4000000 && gas <= 8000000;
[L6889]              tmpNow := now;
[L6890]              havoc now;
[L6891]              assume now > tmpNow;
[L6892]              assume msgsender_MSG != null;
[L6893]              assume DType[msgsender_MSG] != Ownable;
[L6894]              assume DType[msgsender_MSG] != SafeMath;
[L6895]              assume DType[msgsender_MSG] != ERC20Basic;
[L6896]              assume DType[msgsender_MSG] != BasicToken;
[L6897]              assume DType[msgsender_MSG] != BurnableToken;
[L6898]              assume DType[msgsender_MSG] != ERC20;
[L6899]              assume DType[msgsender_MSG] != StandardToken;
[L6900]              assume DType[msgsender_MSG] != AirBasicToken;
[L6901]              Alloc[msgsender_MSG] := true;
[L6902]  COND FALSE  !(choice == 24)
[L6908]  COND FALSE  !(choice == 23)
[L6914]  COND FALSE  !(choice == 22)
[L6920]  COND TRUE   choice == 21
[L6921]              gas := gas - 21000;
[L6922]  COND TRUE   gas >= 0
[L6923]              assume _value_s841 >= 0 && _value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6924]              assume msgvalue_MSG == 0;
[L6925]  CALL        call __ret_0_transfer := transfer~address~uint256_AirBasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s841 && _value_s841 <= balances_BasicToken[this][msgsender_MSG]) && _value_s841 >= 0) && _value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s841] >= 0) && balances_BasicToken[this][_to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_AirBasicToken0 := true;
[L2]                 call_transfer_AirBasicToken0 := false;
[L2]                 revert := revert_hold;
[L1835]              havoc __exception;
[L1836]              revert := false;
[L1837]  COND FALSE  !(__exception)
[L1869]  CALL        call __ret_0_ := transfer~address~uint256_AirBasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L4707]  COND TRUE   !transferEnabled_AirBasicToken[this]
[L4708]              revert := true;
[L1869]  RET         call __ret_0_ := transfer~address~uint256_AirBasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L1870]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && balanceLocked_AirBasicToken[this] == old(balanceLocked_AirBasicToken[this])) && amountRaised_AirBasicToken[this] == old(amountRaised_AirBasicToken[this])) && buyPrice_AirBasicToken[this] == old(buyPrice_AirBasicToken[this])) && crowdsaleClosed_AirBasicToken[this] == old(crowdsaleClosed_AirBasicToken[this])) && transferEnabled_AirBasicToken[this] == old(transferEnabled_AirBasicToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6925]  RET         call __ret_0_transfer := transfer~address~uint256_AirBasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L7073]  RET         call CorralChoice_AirBasicToken(this);

Loop:
[L7073]  CALL        call CorralChoice_AirBasicToken(this);
[L6844]              havoc msgsender_MSG;
[L6845]              havoc msgvalue_MSG;
[L6846]              havoc choice;
[L6847]              havoc __ret_0_owner;
[L6848]              havoc __ret_0_totalSupply;
[L6849]              havoc _owner_s237;
[L6850]              havoc __ret_0_balanceOf;
[L6851]              havoc _to_s841;
[L6852]              havoc _value_s841;
[L6853]              havoc __ret_0_transfer;
[L6854]              havoc _value_s258;
[L6855]              havoc _owner_s486;
[L6856]              havoc _spender_s486;
[L6857]              havoc __ret_0_allowance;
[L6858]              havoc _from_s813;
[L6859]              havoc _to_s813;
[L6860]              havoc _value_s813;
[L6861]              havoc __ret_0_transferFrom;
[L6862]              havoc _spender_s470;
[L6863]              havoc _value_s470;
[L6864]              havoc __ret_0_approve;
[L6865]              havoc _spender_s527;
[L6866]              havoc _addedValue_s527;
[L6867]              havoc __ret_0_increaseApproval;
[L6868]              havoc _spender_s587;
[L6869]              havoc _subtractedValue_s587;
[L6870]              havoc __ret_0_decreaseApproval;
[L6871]              havoc __ret_0_name;
[L6872]              havoc __ret_0_symbol;
[L6873]              havoc __ret_0_decimals;
[L6874]              havoc __ret_0_INITIAL_SUPPLY;
[L6875]              havoc arg904_s0;
[L6876]              havoc __ret_0_balanceLocked;
[L6877]              havoc __ret_0_amountRaised;
[L6878]              havoc __ret_0_buyPrice;
[L6879]              havoc __ret_0_crowdsaleClosed;
[L6880]              havoc __ret_0_transferEnabled;
[L6881]              havoc newBuyPrice_s722;
[L6882]              havoc closebuy_s734;
[L6883]              havoc _enable_s783;
[L6884]              havoc _addr_s871;
[L6885]              havoc _addr_s901;
[L6886]              havoc tmpNow;
[L6887]              havoc gas;
[L6888]              assume gas > 4000000 && gas <= 8000000;
[L6889]              tmpNow := now;
[L6890]              havoc now;
[L6891]              assume now > tmpNow;
[L6892]              assume msgsender_MSG != null;
[L6893]              assume DType[msgsender_MSG] != Ownable;
[L6894]              assume DType[msgsender_MSG] != SafeMath;
[L6895]              assume DType[msgsender_MSG] != ERC20Basic;
[L6896]              assume DType[msgsender_MSG] != BasicToken;
[L6897]              assume DType[msgsender_MSG] != BurnableToken;
[L6898]              assume DType[msgsender_MSG] != ERC20;
[L6899]              assume DType[msgsender_MSG] != StandardToken;
[L6900]              assume DType[msgsender_MSG] != AirBasicToken;
[L6901]              Alloc[msgsender_MSG] := true;
[L6902]  COND FALSE  !(choice == 24)
[L6908]  COND FALSE  !(choice == 23)
[L6914]  COND FALSE  !(choice == 22)
[L6920]  COND TRUE   choice == 21
[L6921]              gas := gas - 21000;
[L6922]  COND TRUE   gas >= 0
[L6923]              assume _value_s841 >= 0 && _value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6924]              assume msgvalue_MSG == 0;
[L6925]  CALL        call __ret_0_transfer := transfer~address~uint256_AirBasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s841 && _value_s841 <= balances_BasicToken[this][msgsender_MSG]) && _value_s841 >= 0) && _value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s841] >= 0) && balances_BasicToken[this][_to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_AirBasicToken0 := true;
[L2]                 call_transfer_AirBasicToken0 := false;
[L2]                 revert := revert_hold;
[L1835]              havoc __exception;
[L1836]              revert := false;
[L1837]  COND FALSE  !(__exception)
[L1869]  CALL        call __ret_0_ := transfer~address~uint256_AirBasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L4707]  COND TRUE   !transferEnabled_AirBasicToken[this]
[L4708]              revert := true;
[L1869]  RET         call __ret_0_ := transfer~address~uint256_AirBasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L1870]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && balanceLocked_AirBasicToken[this] == old(balanceLocked_AirBasicToken[this])) && amountRaised_AirBasicToken[this] == old(amountRaised_AirBasicToken[this])) && buyPrice_AirBasicToken[this] == old(buyPrice_AirBasicToken[this])) && crowdsaleClosed_AirBasicToken[this] == old(crowdsaleClosed_AirBasicToken[this])) && transferEnabled_AirBasicToken[this] == old(transferEnabled_AirBasicToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6925]  RET         call __ret_0_transfer := transfer~address~uint256_AirBasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L7073]  RET         call CorralChoice_AirBasicToken(this);

[2020-11-24 23:41:07,717 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 23:41:07,717 INFO  L82        PathProgramCache]: Analyzing trace with hash -99345049, now seen corresponding path program 1 times
[2020-11-24 23:41:07,718 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 23:41:07,728 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 23:41:07,750 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 23:41:07,751 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 23:41:07,751 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 23:41:07,752 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 23:41:07,752 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 23:41:07,752 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-24 23:41:07,752 INFO  L87              Difference]: Start difference. First operand 3767 states and 4163 transitions. cyclomatic complexity: 406 Second operand 4 states.
[2020-11-24 23:41:08,490 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 23:41:08,491 INFO  L93              Difference]: Finished difference Result 5149 states and 5793 transitions.
[2020-11-24 23:41:08,491 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 23:41:08,491 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5149 states and 5793 transitions.
[2020-11-24 23:41:08,506 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-24 23:41:08,523 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5149 states to 5011 states and 5639 transitions.
[2020-11-24 23:41:08,523 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1307
[2020-11-24 23:41:08,524 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1314
[2020-11-24 23:41:08,524 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5011 states and 5639 transitions.
[2020-11-24 23:41:08,530 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 23:41:08,530 INFO  L728         BuchiCegarLoop]: Abstraction has 5011 states and 5639 transitions.
[2020-11-24 23:41:08,534 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5011 states and 5639 transitions.
[2020-11-24 23:41:08,568 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5011 to 3945.
[2020-11-24 23:41:08,568 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3945 states.
[2020-11-24 23:41:08,573 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3945 states to 3945 states and 4269 transitions.
[2020-11-24 23:41:08,573 INFO  L751         BuchiCegarLoop]: Abstraction has 3945 states and 4269 transitions.
[2020-11-24 23:41:08,573 INFO  L631         BuchiCegarLoop]: Abstraction has 3945 states and 4269 transitions.
[2020-11-24 23:41:08,573 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-24 23:41:08,573 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3945 states and 4269 transitions.
[2020-11-24 23:41:08,580 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 23:41:08,580 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 23:41:08,580 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 23:41:08,583 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 23:41:08,583 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_AirBasicToken0 := false;
[L2]                 call_transfer_AirBasicToken0 := false;
[L2]     CALL        call main();
[L7063]              assume null == 0;
[L7064]  CALL        call this := FreshRefGenerator__success();
[L3583]              havoc newRef;
[L3584]              assume Alloc[newRef] == false;
[L3585]              Alloc[newRef] := true;
[L3586]              assume newRef != null;
[L7064]  RET         call this := FreshRefGenerator__success();
[L7065]              assume now >= 0;
[L7066]              assume DType[this] == AirBasicToken;
[L7067]              assume msgvalue_MSG == 0;
[L7068]              gas := gas - 53000;
[L7069]  CALL        call AirBasicToken_AirBasicToken(this, msgsender_MSG, msgvalue_MSG);
[L1419]              havoc __exception;
[L1420]              revert := false;
[L1421]  COND FALSE  !(__exception)
[L1453]  CALL        call AirBasicToken_AirBasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4404]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L4404]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4405]  COND FALSE  !(revert)
[L4408]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4057]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L4057]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4058]  COND FALSE  !(revert)
[L4061]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4038]              assume msgsender_MSG != null;
[L4039]              Balance[this] := 0;
[L4061]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4062]  COND FALSE  !(revert)
[L4408]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4409]  COND FALSE  !(revert)
[L4412]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L3800]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3801]  COND FALSE  !(revert)
[L3804]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3778]              assume msgsender_MSG != null;
[L3779]              Balance[this] := 0;
[L3780]              balances_BasicToken[this] := zeroRefintArr();
[L3781]              sum_balances0[this] := 0;
[L3782]              totalSupply__BasicToken[this] := 0;
[L3804]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3805]  COND FALSE  !(revert)
[L4412]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4413]  COND FALSE  !(revert)
[L4416]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L4109]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4110]  COND FALSE  !(revert)
[L4113]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4057]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L4057]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4058]  COND FALSE  !(revert)
[L4061]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4038]              assume msgsender_MSG != null;
[L4039]              Balance[this] := 0;
[L4061]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4062]  COND FALSE  !(revert)
[L4113]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4114]  COND FALSE  !(revert)
[L4117]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L3800]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3801]  COND FALSE  !(revert)
[L3804]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3778]              assume msgsender_MSG != null;
[L3779]              Balance[this] := 0;
[L3780]              balances_BasicToken[this] := zeroRefintArr();
[L3781]              sum_balances0[this] := 0;
[L3782]              totalSupply__BasicToken[this] := 0;
[L3804]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3805]  COND FALSE  !(revert)
[L4117]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4118]  COND FALSE  !(revert)
[L4121]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4080]              assume msgsender_MSG != null;
[L4081]              Balance[this] := 0;
[L4082]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4083]              sum_allowed1[this] := 0;
[L4121]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]  COND FALSE  !(revert)
[L4416]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4417]  COND FALSE  !(revert)
[L4420]  CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3933]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L3933]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]  COND FALSE  !(revert)
[L3937]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L3800]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3801]  COND FALSE  !(revert)
[L3804]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3778]              assume msgsender_MSG != null;
[L3779]              Balance[this] := 0;
[L3780]              balances_BasicToken[this] := zeroRefintArr();
[L3781]              sum_balances0[this] := 0;
[L3782]              totalSupply__BasicToken[this] := 0;
[L3804]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3805]  COND FALSE  !(revert)
[L3937]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3938]  COND FALSE  !(revert)
[L3941]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3910]              assume msgsender_MSG != null;
[L3911]              Balance[this] := 0;
[L3941]  RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3942]  COND FALSE  !(revert)
[L4420]  RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4421]  COND FALSE  !(revert)
[L4424]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3619]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              owner_Ownable[this] := null;
[L3606]              owner_Ownable[this] := msgsender_MSG;
[L3619]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  COND FALSE  !(revert)
[L4424]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4425]  COND FALSE  !(revert)
[L4428]  CALL        call AirBasicToken_AirBasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4350]              name_AirBasicToken[this] := 1433815699;
[L4351]              symbol_AirBasicToken[this] := -1312980976;
[L4352]              decimals_AirBasicToken[this] := 18;
[L4353]              __var_12 := decimals_AirBasicToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4354]              INITIAL_SUPPLY_AirBasicToken[this] := 1282793976 * (nonlinearPow(10, decimals_AirBasicToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4355]              balanceLocked_AirBasicToken[this] := zeroRefboolArr();
[L4356]              amountRaised_AirBasicToken[this] := 0;
[L4357]              buyPrice_AirBasicToken[this] := 100000;
[L4358]              crowdsaleClosed_AirBasicToken[this] := true;
[L4359]              transferEnabled_AirBasicToken[this] := true;
[L4361]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_AirBasicToken[this];
[L4362]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L4363]              balances_BasicToken[this][msgsender_MSG] := INITIAL_SUPPLY_AirBasicToken[this];
[L4364]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L4365]              assert { :EventEmitted "Transfer_AirBasicToken" } true;
[L4428]  RET         call AirBasicToken_AirBasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4429]  COND FALSE  !(revert)
[L1453]  RET         call AirBasicToken_AirBasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1454]              assume !revert && gas >= 0;
[L7069]  RET         call AirBasicToken_AirBasicToken(this, msgsender_MSG, msgvalue_MSG);
[L7070]              assume !revert && gas >= 0;
[L7073]  CALL        call CorralChoice_AirBasicToken(this);
[L6844]              havoc msgsender_MSG;
[L6845]              havoc msgvalue_MSG;
[L6846]              havoc choice;
[L6847]              havoc __ret_0_owner;
[L6848]              havoc __ret_0_totalSupply;
[L6849]              havoc _owner_s237;
[L6850]              havoc __ret_0_balanceOf;
[L6851]              havoc _to_s841;
[L6852]              havoc _value_s841;
[L6853]              havoc __ret_0_transfer;
[L6854]              havoc _value_s258;
[L6855]              havoc _owner_s486;
[L6856]              havoc _spender_s486;
[L6857]              havoc __ret_0_allowance;
[L6858]              havoc _from_s813;
[L6859]              havoc _to_s813;
[L6860]              havoc _value_s813;
[L6861]              havoc __ret_0_transferFrom;
[L6862]              havoc _spender_s470;
[L6863]              havoc _value_s470;
[L6864]              havoc __ret_0_approve;
[L6865]              havoc _spender_s527;
[L6866]              havoc _addedValue_s527;
[L6867]              havoc __ret_0_increaseApproval;
[L6868]              havoc _spender_s587;
[L6869]              havoc _subtractedValue_s587;
[L6870]              havoc __ret_0_decreaseApproval;
[L6871]              havoc __ret_0_name;
[L6872]              havoc __ret_0_symbol;
[L6873]              havoc __ret_0_decimals;
[L6874]              havoc __ret_0_INITIAL_SUPPLY;
[L6875]              havoc arg904_s0;
[L6876]              havoc __ret_0_balanceLocked;
[L6877]              havoc __ret_0_amountRaised;
[L6878]              havoc __ret_0_buyPrice;
[L6879]              havoc __ret_0_crowdsaleClosed;
[L6880]              havoc __ret_0_transferEnabled;
[L6881]              havoc newBuyPrice_s722;
[L6882]              havoc closebuy_s734;
[L6883]              havoc _enable_s783;
[L6884]              havoc _addr_s871;
[L6885]              havoc _addr_s901;
[L6886]              havoc tmpNow;
[L6887]              havoc gas;
[L6888]              assume gas > 4000000 && gas <= 8000000;
[L6889]              tmpNow := now;
[L6890]              havoc now;
[L6891]              assume now > tmpNow;
[L6892]              assume msgsender_MSG != null;
[L6893]              assume DType[msgsender_MSG] != Ownable;
[L6894]              assume DType[msgsender_MSG] != SafeMath;
[L6895]              assume DType[msgsender_MSG] != ERC20Basic;
[L6896]              assume DType[msgsender_MSG] != BasicToken;
[L6897]              assume DType[msgsender_MSG] != BurnableToken;
[L6898]              assume DType[msgsender_MSG] != ERC20;
[L6899]              assume DType[msgsender_MSG] != StandardToken;
[L6900]              assume DType[msgsender_MSG] != AirBasicToken;
[L6901]              Alloc[msgsender_MSG] := true;
[L6902]  COND FALSE  !(choice == 24)
[L6908]  COND FALSE  !(choice == 23)
[L6914]  COND FALSE  !(choice == 22)
[L6920]  COND TRUE   choice == 21
[L6921]              gas := gas - 21000;
[L6922]  COND TRUE   gas >= 0
[L6923]              assume _value_s841 >= 0 && _value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6924]              assume msgvalue_MSG == 0;
[L6925]  CALL        call __ret_0_transfer := transfer~address~uint256_AirBasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s841 && _value_s841 <= balances_BasicToken[this][msgsender_MSG]) && _value_s841 >= 0) && _value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s841] >= 0) && balances_BasicToken[this][_to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_AirBasicToken0 := true;
[L2]                 call_transfer_AirBasicToken0 := false;
[L2]                 revert := revert_hold;
[L1835]              havoc __exception;
[L1836]              revert := false;
[L1837]  COND TRUE   __exception
[L1838]              __tmp__Balance := Balance;
[L1839]              __tmp__DType := DType;
[L1840]              __tmp__Alloc := Alloc;
[L1841]              __tmp__balance_ADDR := balance_ADDR;
[L1842]              __tmp__M_Ref_int := M_Ref_int;
[L1843]              __tmp__sum_balances0 := sum_balances0;
[L1844]              __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L1845]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1846]              __tmp__sum_allowed1 := sum_allowed1;
[L1847]              __tmp__M_Ref_bool := M_Ref_bool;
[L1848]              __tmp__sum_balanceLocked2 := sum_balanceLocked2;
[L1849]              __tmp__M_int_Ref := M_int_Ref;
[L1850]              __tmp__sum := sum;
[L1851]              __tmp__Length := Length;
[L1852]              __tmp__now := now;
[L1853]              __tmp__owner_Ownable := owner_Ownable;
[L1854]              __tmp__balances_BasicToken := balances_BasicToken;
[L1855]              __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L1856]              __tmp__allowed_StandardToken := allowed_StandardToken;
[L1857]              __tmp__name_AirBasicToken := name_AirBasicToken;
[L1858]              __tmp__symbol_AirBasicToken := symbol_AirBasicToken;
[L1859]              __tmp__decimals_AirBasicToken := decimals_AirBasicToken;
[L1860]              __tmp__INITIAL_SUPPLY_AirBasicToken := INITIAL_SUPPLY_AirBasicToken;
[L1861]              __tmp__balanceLocked_AirBasicToken := balanceLocked_AirBasicToken;
[L1862]              __tmp__amountRaised_AirBasicToken := amountRaised_AirBasicToken;
[L1863]              __tmp__buyPrice_AirBasicToken := buyPrice_AirBasicToken;
[L1864]              __tmp__crowdsaleClosed_AirBasicToken := crowdsaleClosed_AirBasicToken;
[L1865]              __tmp__transferEnabled_AirBasicToken := transferEnabled_AirBasicToken;
[L1866]  CALL        call __ret_0_ := transfer~address~uint256_AirBasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L4683]  COND TRUE   !__tmp__transferEnabled_AirBasicToken[this]
[L4684]              revert := true;
[L1866]  RET         call __ret_0_ := transfer~address~uint256_AirBasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L1867]              assume revert || gas < 0;
[L6925]  RET         call __ret_0_transfer := transfer~address~uint256_AirBasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L7073]  RET         call CorralChoice_AirBasicToken(this);

Loop:
[L7073]  CALL        call CorralChoice_AirBasicToken(this);
[L6844]              havoc msgsender_MSG;
[L6845]              havoc msgvalue_MSG;
[L6846]              havoc choice;
[L6847]              havoc __ret_0_owner;
[L6848]              havoc __ret_0_totalSupply;
[L6849]              havoc _owner_s237;
[L6850]              havoc __ret_0_balanceOf;
[L6851]              havoc _to_s841;
[L6852]              havoc _value_s841;
[L6853]              havoc __ret_0_transfer;
[L6854]              havoc _value_s258;
[L6855]              havoc _owner_s486;
[L6856]              havoc _spender_s486;
[L6857]              havoc __ret_0_allowance;
[L6858]              havoc _from_s813;
[L6859]              havoc _to_s813;
[L6860]              havoc _value_s813;
[L6861]              havoc __ret_0_transferFrom;
[L6862]              havoc _spender_s470;
[L6863]              havoc _value_s470;
[L6864]              havoc __ret_0_approve;
[L6865]              havoc _spender_s527;
[L6866]              havoc _addedValue_s527;
[L6867]              havoc __ret_0_increaseApproval;
[L6868]              havoc _spender_s587;
[L6869]              havoc _subtractedValue_s587;
[L6870]              havoc __ret_0_decreaseApproval;
[L6871]              havoc __ret_0_name;
[L6872]              havoc __ret_0_symbol;
[L6873]              havoc __ret_0_decimals;
[L6874]              havoc __ret_0_INITIAL_SUPPLY;
[L6875]              havoc arg904_s0;
[L6876]              havoc __ret_0_balanceLocked;
[L6877]              havoc __ret_0_amountRaised;
[L6878]              havoc __ret_0_buyPrice;
[L6879]              havoc __ret_0_crowdsaleClosed;
[L6880]              havoc __ret_0_transferEnabled;
[L6881]              havoc newBuyPrice_s722;
[L6882]              havoc closebuy_s734;
[L6883]              havoc _enable_s783;
[L6884]              havoc _addr_s871;
[L6885]              havoc _addr_s901;
[L6886]              havoc tmpNow;
[L6887]              havoc gas;
[L6888]              assume gas > 4000000 && gas <= 8000000;
[L6889]              tmpNow := now;
[L6890]              havoc now;
[L6891]              assume now > tmpNow;
[L6892]              assume msgsender_MSG != null;
[L6893]              assume DType[msgsender_MSG] != Ownable;
[L6894]              assume DType[msgsender_MSG] != SafeMath;
[L6895]              assume DType[msgsender_MSG] != ERC20Basic;
[L6896]              assume DType[msgsender_MSG] != BasicToken;
[L6897]              assume DType[msgsender_MSG] != BurnableToken;
[L6898]              assume DType[msgsender_MSG] != ERC20;
[L6899]              assume DType[msgsender_MSG] != StandardToken;
[L6900]              assume DType[msgsender_MSG] != AirBasicToken;
[L6901]              Alloc[msgsender_MSG] := true;
[L6902]  COND FALSE  !(choice == 24)
[L6908]  COND FALSE  !(choice == 23)
[L6914]  COND FALSE  !(choice == 22)
[L6920]  COND TRUE   choice == 21
[L6921]              gas := gas - 21000;
[L6922]  COND TRUE   gas >= 0
[L6923]              assume _value_s841 >= 0 && _value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6924]              assume msgvalue_MSG == 0;
[L6925]  CALL        call __ret_0_transfer := transfer~address~uint256_AirBasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s841 && _value_s841 <= balances_BasicToken[this][msgsender_MSG]) && _value_s841 >= 0) && _value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s841] >= 0) && balances_BasicToken[this][_to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_AirBasicToken0 := true;
[L2]                 call_transfer_AirBasicToken0 := false;
[L2]                 revert := revert_hold;
[L1835]              havoc __exception;
[L1836]              revert := false;
[L1837]  COND TRUE   __exception
[L1838]              __tmp__Balance := Balance;
[L1839]              __tmp__DType := DType;
[L1840]              __tmp__Alloc := Alloc;
[L1841]              __tmp__balance_ADDR := balance_ADDR;
[L1842]              __tmp__M_Ref_int := M_Ref_int;
[L1843]              __tmp__sum_balances0 := sum_balances0;
[L1844]              __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L1845]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1846]              __tmp__sum_allowed1 := sum_allowed1;
[L1847]              __tmp__M_Ref_bool := M_Ref_bool;
[L1848]              __tmp__sum_balanceLocked2 := sum_balanceLocked2;
[L1849]              __tmp__M_int_Ref := M_int_Ref;
[L1850]              __tmp__sum := sum;
[L1851]              __tmp__Length := Length;
[L1852]              __tmp__now := now;
[L1853]              __tmp__owner_Ownable := owner_Ownable;
[L1854]              __tmp__balances_BasicToken := balances_BasicToken;
[L1855]              __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L1856]              __tmp__allowed_StandardToken := allowed_StandardToken;
[L1857]              __tmp__name_AirBasicToken := name_AirBasicToken;
[L1858]              __tmp__symbol_AirBasicToken := symbol_AirBasicToken;
[L1859]              __tmp__decimals_AirBasicToken := decimals_AirBasicToken;
[L1860]              __tmp__INITIAL_SUPPLY_AirBasicToken := INITIAL_SUPPLY_AirBasicToken;
[L1861]              __tmp__balanceLocked_AirBasicToken := balanceLocked_AirBasicToken;
[L1862]              __tmp__amountRaised_AirBasicToken := amountRaised_AirBasicToken;
[L1863]              __tmp__buyPrice_AirBasicToken := buyPrice_AirBasicToken;
[L1864]              __tmp__crowdsaleClosed_AirBasicToken := crowdsaleClosed_AirBasicToken;
[L1865]              __tmp__transferEnabled_AirBasicToken := transferEnabled_AirBasicToken;
[L1866]  CALL        call __ret_0_ := transfer~address~uint256_AirBasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L4683]  COND TRUE   !__tmp__transferEnabled_AirBasicToken[this]
[L4684]              revert := true;
[L1866]  RET         call __ret_0_ := transfer~address~uint256_AirBasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L1867]              assume revert || gas < 0;
[L6925]  RET         call __ret_0_transfer := transfer~address~uint256_AirBasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L7073]  RET         call CorralChoice_AirBasicToken(this);

[2020-11-24 23:41:08,588 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 23:41:08,588 INFO  L82        PathProgramCache]: Analyzing trace with hash 965351858, now seen corresponding path program 1 times
[2020-11-24 23:41:08,589 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 23:41:08,606 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 23:41:08,726 INFO  L134       CoverageAnalysis]: Checked inductivity of 345 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 345 trivial. 0 not checked.
[2020-11-24 23:41:08,726 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 23:41:08,726 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-11-24 23:41:08,727 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 23:41:08,727 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-11-24 23:41:08,727 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=19, Invalid=91, Unknown=0, NotChecked=0, Total=110
[2020-11-24 23:41:08,727 INFO  L87              Difference]: Start difference. First operand 3945 states and 4269 transitions. cyclomatic complexity: 334 Second operand 11 states.
[2020-11-24 23:41:11,044 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 23:41:11,044 INFO  L93              Difference]: Finished difference Result 6898 states and 7607 transitions.
[2020-11-24 23:41:11,044 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-11-24 23:41:11,044 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6898 states and 7607 transitions.
[2020-11-24 23:41:11,058 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 12
[2020-11-24 23:41:11,076 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6898 states to 6898 states and 7607 transitions.
[2020-11-24 23:41:11,076 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1855
[2020-11-24 23:41:11,077 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1855
[2020-11-24 23:41:11,077 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6898 states and 7607 transitions.
[2020-11-24 23:41:11,083 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 23:41:11,083 INFO  L728         BuchiCegarLoop]: Abstraction has 6898 states and 7607 transitions.
[2020-11-24 23:41:11,087 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6898 states and 7607 transitions.
[2020-11-24 23:41:11,140 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6898 to 5526.
[2020-11-24 23:41:11,140 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5526 states.
[2020-11-24 23:41:11,147 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5526 states to 5526 states and 6196 transitions.
[2020-11-24 23:41:11,147 INFO  L751         BuchiCegarLoop]: Abstraction has 5526 states and 6196 transitions.
[2020-11-24 23:41:11,147 INFO  L631         BuchiCegarLoop]: Abstraction has 5526 states and 6196 transitions.
[2020-11-24 23:41:11,147 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-24 23:41:11,147 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5526 states and 6196 transitions.
[2020-11-24 23:41:11,154 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-24 23:41:11,154 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 23:41:11,154 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 23:41:11,156 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 23:41:11,156 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_AirBasicToken0 := false;
[L2]                 call_transfer_AirBasicToken0 := false;
[L2]     CALL        call main();
[L7063]              assume null == 0;
[L7064]  CALL        call this := FreshRefGenerator__success();
[L3583]              havoc newRef;
[L3584]              assume Alloc[newRef] == false;
[L3585]              Alloc[newRef] := true;
[L3586]              assume newRef != null;
[L7064]  RET         call this := FreshRefGenerator__success();
[L7065]              assume now >= 0;
[L7066]              assume DType[this] == AirBasicToken;
[L7067]              assume msgvalue_MSG == 0;
[L7068]              gas := gas - 53000;
[L7069]  CALL        call AirBasicToken_AirBasicToken(this, msgsender_MSG, msgvalue_MSG);
[L1419]              havoc __exception;
[L1420]              revert := false;
[L1421]  COND FALSE  !(__exception)
[L1453]  CALL        call AirBasicToken_AirBasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4404]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L4404]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4405]  COND FALSE  !(revert)
[L4408]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4057]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L4057]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4058]  COND FALSE  !(revert)
[L4061]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4038]              assume msgsender_MSG != null;
[L4039]              Balance[this] := 0;
[L4061]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4062]  COND FALSE  !(revert)
[L4408]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4409]  COND FALSE  !(revert)
[L4412]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L3800]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3801]  COND FALSE  !(revert)
[L3804]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3778]              assume msgsender_MSG != null;
[L3779]              Balance[this] := 0;
[L3780]              balances_BasicToken[this] := zeroRefintArr();
[L3781]              sum_balances0[this] := 0;
[L3782]              totalSupply__BasicToken[this] := 0;
[L3804]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3805]  COND FALSE  !(revert)
[L4412]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4413]  COND FALSE  !(revert)
[L4416]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L4109]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4110]  COND FALSE  !(revert)
[L4113]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4057]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L4057]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4058]  COND FALSE  !(revert)
[L4061]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4038]              assume msgsender_MSG != null;
[L4039]              Balance[this] := 0;
[L4061]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4062]  COND FALSE  !(revert)
[L4113]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4114]  COND FALSE  !(revert)
[L4117]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L3800]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3801]  COND FALSE  !(revert)
[L3804]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3778]              assume msgsender_MSG != null;
[L3779]              Balance[this] := 0;
[L3780]              balances_BasicToken[this] := zeroRefintArr();
[L3781]              sum_balances0[this] := 0;
[L3782]              totalSupply__BasicToken[this] := 0;
[L3804]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3805]  COND FALSE  !(revert)
[L4117]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4118]  COND FALSE  !(revert)
[L4121]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4080]              assume msgsender_MSG != null;
[L4081]              Balance[this] := 0;
[L4082]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4083]              sum_allowed1[this] := 0;
[L4121]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]  COND FALSE  !(revert)
[L4416]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4417]  COND FALSE  !(revert)
[L4420]  CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3933]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L3933]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]  COND FALSE  !(revert)
[L3937]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L3800]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3801]  COND FALSE  !(revert)
[L3804]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3778]              assume msgsender_MSG != null;
[L3779]              Balance[this] := 0;
[L3780]              balances_BasicToken[this] := zeroRefintArr();
[L3781]              sum_balances0[this] := 0;
[L3782]              totalSupply__BasicToken[this] := 0;
[L3804]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3805]  COND FALSE  !(revert)
[L3937]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3938]  COND FALSE  !(revert)
[L3941]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3910]              assume msgsender_MSG != null;
[L3911]              Balance[this] := 0;
[L3941]  RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3942]  COND FALSE  !(revert)
[L4420]  RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4421]  COND FALSE  !(revert)
[L4424]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3619]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              owner_Ownable[this] := null;
[L3606]              owner_Ownable[this] := msgsender_MSG;
[L3619]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  COND FALSE  !(revert)
[L4424]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4425]  COND FALSE  !(revert)
[L4428]  CALL        call AirBasicToken_AirBasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4350]              name_AirBasicToken[this] := 1433815699;
[L4351]              symbol_AirBasicToken[this] := -1312980976;
[L4352]              decimals_AirBasicToken[this] := 18;
[L4353]              __var_12 := decimals_AirBasicToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4354]              INITIAL_SUPPLY_AirBasicToken[this] := 1282793976 * (nonlinearPow(10, decimals_AirBasicToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4355]              balanceLocked_AirBasicToken[this] := zeroRefboolArr();
[L4356]              amountRaised_AirBasicToken[this] := 0;
[L4357]              buyPrice_AirBasicToken[this] := 100000;
[L4358]              crowdsaleClosed_AirBasicToken[this] := true;
[L4359]              transferEnabled_AirBasicToken[this] := true;
[L4361]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_AirBasicToken[this];
[L4362]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L4363]              balances_BasicToken[this][msgsender_MSG] := INITIAL_SUPPLY_AirBasicToken[this];
[L4364]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L4365]              assert { :EventEmitted "Transfer_AirBasicToken" } true;
[L4428]  RET         call AirBasicToken_AirBasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4429]  COND FALSE  !(revert)
[L1453]  RET         call AirBasicToken_AirBasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1454]              assume !revert && gas >= 0;
[L7069]  RET         call AirBasicToken_AirBasicToken(this, msgsender_MSG, msgvalue_MSG);
[L7070]              assume !revert && gas >= 0;
[L7073]  CALL        call CorralChoice_AirBasicToken(this);
[L6844]              havoc msgsender_MSG;
[L6845]              havoc msgvalue_MSG;
[L6846]              havoc choice;
[L6847]              havoc __ret_0_owner;
[L6848]              havoc __ret_0_totalSupply;
[L6849]              havoc _owner_s237;
[L6850]              havoc __ret_0_balanceOf;
[L6851]              havoc _to_s841;
[L6852]              havoc _value_s841;
[L6853]              havoc __ret_0_transfer;
[L6854]              havoc _value_s258;
[L6855]              havoc _owner_s486;
[L6856]              havoc _spender_s486;
[L6857]              havoc __ret_0_allowance;
[L6858]              havoc _from_s813;
[L6859]              havoc _to_s813;
[L6860]              havoc _value_s813;
[L6861]              havoc __ret_0_transferFrom;
[L6862]              havoc _spender_s470;
[L6863]              havoc _value_s470;
[L6864]              havoc __ret_0_approve;
[L6865]              havoc _spender_s527;
[L6866]              havoc _addedValue_s527;
[L6867]              havoc __ret_0_increaseApproval;
[L6868]              havoc _spender_s587;
[L6869]              havoc _subtractedValue_s587;
[L6870]              havoc __ret_0_decreaseApproval;
[L6871]              havoc __ret_0_name;
[L6872]              havoc __ret_0_symbol;
[L6873]              havoc __ret_0_decimals;
[L6874]              havoc __ret_0_INITIAL_SUPPLY;
[L6875]              havoc arg904_s0;
[L6876]              havoc __ret_0_balanceLocked;
[L6877]              havoc __ret_0_amountRaised;
[L6878]              havoc __ret_0_buyPrice;
[L6879]              havoc __ret_0_crowdsaleClosed;
[L6880]              havoc __ret_0_transferEnabled;
[L6881]              havoc newBuyPrice_s722;
[L6882]              havoc closebuy_s734;
[L6883]              havoc _enable_s783;
[L6884]              havoc _addr_s871;
[L6885]              havoc _addr_s901;
[L6886]              havoc tmpNow;
[L6887]              havoc gas;
[L6888]              assume gas > 4000000 && gas <= 8000000;
[L6889]              tmpNow := now;
[L6890]              havoc now;
[L6891]              assume now > tmpNow;
[L6892]              assume msgsender_MSG != null;
[L6893]              assume DType[msgsender_MSG] != Ownable;
[L6894]              assume DType[msgsender_MSG] != SafeMath;
[L6895]              assume DType[msgsender_MSG] != ERC20Basic;
[L6896]              assume DType[msgsender_MSG] != BasicToken;
[L6897]              assume DType[msgsender_MSG] != BurnableToken;
[L6898]              assume DType[msgsender_MSG] != ERC20;
[L6899]              assume DType[msgsender_MSG] != StandardToken;
[L6900]              assume DType[msgsender_MSG] != AirBasicToken;
[L6901]              Alloc[msgsender_MSG] := true;
[L6902]  COND FALSE  !(choice == 24)
[L6908]  COND FALSE  !(choice == 23)
[L6914]  COND FALSE  !(choice == 22)
[L6920]  COND TRUE   choice == 21
[L6921]              gas := gas - 21000;
[L6922]  COND TRUE   gas >= 0
[L6923]              assume _value_s841 >= 0 && _value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6924]              assume msgvalue_MSG == 0;
[L6925]  CALL        call __ret_0_transfer := transfer~address~uint256_AirBasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s841 && _value_s841 <= balances_BasicToken[this][msgsender_MSG]) && _value_s841 >= 0) && _value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s841] >= 0) && balances_BasicToken[this][_to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_AirBasicToken0 := true;
[L2]                 call_transfer_AirBasicToken0 := false;
[L2]                 revert := revert_hold;
[L1835]              havoc __exception;
[L1836]              revert := false;
[L1837]  COND TRUE   __exception
[L1838]              __tmp__Balance := Balance;
[L1839]              __tmp__DType := DType;
[L1840]              __tmp__Alloc := Alloc;
[L1841]              __tmp__balance_ADDR := balance_ADDR;
[L1842]              __tmp__M_Ref_int := M_Ref_int;
[L1843]              __tmp__sum_balances0 := sum_balances0;
[L1844]              __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L1845]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1846]              __tmp__sum_allowed1 := sum_allowed1;
[L1847]              __tmp__M_Ref_bool := M_Ref_bool;
[L1848]              __tmp__sum_balanceLocked2 := sum_balanceLocked2;
[L1849]              __tmp__M_int_Ref := M_int_Ref;
[L1850]              __tmp__sum := sum;
[L1851]              __tmp__Length := Length;
[L1852]              __tmp__now := now;
[L1853]              __tmp__owner_Ownable := owner_Ownable;
[L1854]              __tmp__balances_BasicToken := balances_BasicToken;
[L1855]              __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L1856]              __tmp__allowed_StandardToken := allowed_StandardToken;
[L1857]              __tmp__name_AirBasicToken := name_AirBasicToken;
[L1858]              __tmp__symbol_AirBasicToken := symbol_AirBasicToken;
[L1859]              __tmp__decimals_AirBasicToken := decimals_AirBasicToken;
[L1860]              __tmp__INITIAL_SUPPLY_AirBasicToken := INITIAL_SUPPLY_AirBasicToken;
[L1861]              __tmp__balanceLocked_AirBasicToken := balanceLocked_AirBasicToken;
[L1862]              __tmp__amountRaised_AirBasicToken := amountRaised_AirBasicToken;
[L1863]              __tmp__buyPrice_AirBasicToken := buyPrice_AirBasicToken;
[L1864]              __tmp__crowdsaleClosed_AirBasicToken := crowdsaleClosed_AirBasicToken;
[L1865]              __tmp__transferEnabled_AirBasicToken := transferEnabled_AirBasicToken;
[L1866]  CALL        call __ret_0_ := transfer~address~uint256_AirBasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L4683]  COND FALSE  !(!__tmp__transferEnabled_AirBasicToken[this])
[L4687]  COND TRUE   !!__tmp__balanceLocked_AirBasicToken[this][msgsender_MSG]
[L4688]              revert := true;
[L1866]  RET         call __ret_0_ := transfer~address~uint256_AirBasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L1867]              assume revert || gas < 0;
[L6925]  RET         call __ret_0_transfer := transfer~address~uint256_AirBasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L7073]  RET         call CorralChoice_AirBasicToken(this);

Loop:
[L7073]  CALL        call CorralChoice_AirBasicToken(this);
[L6844]              havoc msgsender_MSG;
[L6845]              havoc msgvalue_MSG;
[L6846]              havoc choice;
[L6847]              havoc __ret_0_owner;
[L6848]              havoc __ret_0_totalSupply;
[L6849]              havoc _owner_s237;
[L6850]              havoc __ret_0_balanceOf;
[L6851]              havoc _to_s841;
[L6852]              havoc _value_s841;
[L6853]              havoc __ret_0_transfer;
[L6854]              havoc _value_s258;
[L6855]              havoc _owner_s486;
[L6856]              havoc _spender_s486;
[L6857]              havoc __ret_0_allowance;
[L6858]              havoc _from_s813;
[L6859]              havoc _to_s813;
[L6860]              havoc _value_s813;
[L6861]              havoc __ret_0_transferFrom;
[L6862]              havoc _spender_s470;
[L6863]              havoc _value_s470;
[L6864]              havoc __ret_0_approve;
[L6865]              havoc _spender_s527;
[L6866]              havoc _addedValue_s527;
[L6867]              havoc __ret_0_increaseApproval;
[L6868]              havoc _spender_s587;
[L6869]              havoc _subtractedValue_s587;
[L6870]              havoc __ret_0_decreaseApproval;
[L6871]              havoc __ret_0_name;
[L6872]              havoc __ret_0_symbol;
[L6873]              havoc __ret_0_decimals;
[L6874]              havoc __ret_0_INITIAL_SUPPLY;
[L6875]              havoc arg904_s0;
[L6876]              havoc __ret_0_balanceLocked;
[L6877]              havoc __ret_0_amountRaised;
[L6878]              havoc __ret_0_buyPrice;
[L6879]              havoc __ret_0_crowdsaleClosed;
[L6880]              havoc __ret_0_transferEnabled;
[L6881]              havoc newBuyPrice_s722;
[L6882]              havoc closebuy_s734;
[L6883]              havoc _enable_s783;
[L6884]              havoc _addr_s871;
[L6885]              havoc _addr_s901;
[L6886]              havoc tmpNow;
[L6887]              havoc gas;
[L6888]              assume gas > 4000000 && gas <= 8000000;
[L6889]              tmpNow := now;
[L6890]              havoc now;
[L6891]              assume now > tmpNow;
[L6892]              assume msgsender_MSG != null;
[L6893]              assume DType[msgsender_MSG] != Ownable;
[L6894]              assume DType[msgsender_MSG] != SafeMath;
[L6895]              assume DType[msgsender_MSG] != ERC20Basic;
[L6896]              assume DType[msgsender_MSG] != BasicToken;
[L6897]              assume DType[msgsender_MSG] != BurnableToken;
[L6898]              assume DType[msgsender_MSG] != ERC20;
[L6899]              assume DType[msgsender_MSG] != StandardToken;
[L6900]              assume DType[msgsender_MSG] != AirBasicToken;
[L6901]              Alloc[msgsender_MSG] := true;
[L6902]  COND FALSE  !(choice == 24)
[L6908]  COND FALSE  !(choice == 23)
[L6914]  COND FALSE  !(choice == 22)
[L6920]  COND TRUE   choice == 21
[L6921]              gas := gas - 21000;
[L6922]  COND TRUE   gas >= 0
[L6923]              assume _value_s841 >= 0 && _value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6924]              assume msgvalue_MSG == 0;
[L6925]  CALL        call __ret_0_transfer := transfer~address~uint256_AirBasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s841 && _value_s841 <= balances_BasicToken[this][msgsender_MSG]) && _value_s841 >= 0) && _value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s841] >= 0) && balances_BasicToken[this][_to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_AirBasicToken0 := true;
[L2]                 call_transfer_AirBasicToken0 := false;
[L2]                 revert := revert_hold;
[L1835]              havoc __exception;
[L1836]              revert := false;
[L1837]  COND TRUE   __exception
[L1838]              __tmp__Balance := Balance;
[L1839]              __tmp__DType := DType;
[L1840]              __tmp__Alloc := Alloc;
[L1841]              __tmp__balance_ADDR := balance_ADDR;
[L1842]              __tmp__M_Ref_int := M_Ref_int;
[L1843]              __tmp__sum_balances0 := sum_balances0;
[L1844]              __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L1845]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1846]              __tmp__sum_allowed1 := sum_allowed1;
[L1847]              __tmp__M_Ref_bool := M_Ref_bool;
[L1848]              __tmp__sum_balanceLocked2 := sum_balanceLocked2;
[L1849]              __tmp__M_int_Ref := M_int_Ref;
[L1850]              __tmp__sum := sum;
[L1851]              __tmp__Length := Length;
[L1852]              __tmp__now := now;
[L1853]              __tmp__owner_Ownable := owner_Ownable;
[L1854]              __tmp__balances_BasicToken := balances_BasicToken;
[L1855]              __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L1856]              __tmp__allowed_StandardToken := allowed_StandardToken;
[L1857]              __tmp__name_AirBasicToken := name_AirBasicToken;
[L1858]              __tmp__symbol_AirBasicToken := symbol_AirBasicToken;
[L1859]              __tmp__decimals_AirBasicToken := decimals_AirBasicToken;
[L1860]              __tmp__INITIAL_SUPPLY_AirBasicToken := INITIAL_SUPPLY_AirBasicToken;
[L1861]              __tmp__balanceLocked_AirBasicToken := balanceLocked_AirBasicToken;
[L1862]              __tmp__amountRaised_AirBasicToken := amountRaised_AirBasicToken;
[L1863]              __tmp__buyPrice_AirBasicToken := buyPrice_AirBasicToken;
[L1864]              __tmp__crowdsaleClosed_AirBasicToken := crowdsaleClosed_AirBasicToken;
[L1865]              __tmp__transferEnabled_AirBasicToken := transferEnabled_AirBasicToken;
[L1866]  CALL        call __ret_0_ := transfer~address~uint256_AirBasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L4683]  COND FALSE  !(!__tmp__transferEnabled_AirBasicToken[this])
[L4687]  COND TRUE   !!__tmp__balanceLocked_AirBasicToken[this][msgsender_MSG]
[L4688]              revert := true;
[L1866]  RET         call __ret_0_ := transfer~address~uint256_AirBasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L1867]              assume revert || gas < 0;
[L6925]  RET         call __ret_0_transfer := transfer~address~uint256_AirBasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L7073]  RET         call CorralChoice_AirBasicToken(this);

[2020-11-24 23:41:11,163 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 23:41:11,163 INFO  L82        PathProgramCache]: Analyzing trace with hash -790883057, now seen corresponding path program 1 times
[2020-11-24 23:41:11,165 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 23:41:11,186 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 23:41:11,334 INFO  L134       CoverageAnalysis]: Checked inductivity of 345 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 345 trivial. 0 not checked.
[2020-11-24 23:41:11,335 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 23:41:11,335 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-11-24 23:41:11,336 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 23:41:11,336 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-11-24 23:41:11,336 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=19, Invalid=91, Unknown=0, NotChecked=0, Total=110
[2020-11-24 23:41:11,336 INFO  L87              Difference]: Start difference. First operand 5526 states and 6196 transitions. cyclomatic complexity: 686 Second operand 11 states.
[2020-11-24 23:41:13,415 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 23:41:13,415 INFO  L93              Difference]: Finished difference Result 9948 states and 11708 transitions.
[2020-11-24 23:41:13,415 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-11-24 23:41:13,415 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9948 states and 11708 transitions.
[2020-11-24 23:41:13,439 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 40
[2020-11-24 23:41:13,478 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9948 states to 9948 states and 11708 transitions.
[2020-11-24 23:41:13,478 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2677
[2020-11-24 23:41:13,480 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2677
[2020-11-24 23:41:13,480 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9948 states and 11708 transitions.
[2020-11-24 23:41:13,488 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 23:41:13,489 INFO  L728         BuchiCegarLoop]: Abstraction has 9948 states and 11708 transitions.
[2020-11-24 23:41:13,501 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9948 states and 11708 transitions.
[2020-11-24 23:41:13,613 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9948 to 8742.
[2020-11-24 23:41:13,613 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8742 states.
[2020-11-24 23:41:13,635 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8742 states to 8742 states and 10376 transitions.
[2020-11-24 23:41:13,635 INFO  L751         BuchiCegarLoop]: Abstraction has 8742 states and 10376 transitions.
[2020-11-24 23:41:13,635 INFO  L631         BuchiCegarLoop]: Abstraction has 8742 states and 10376 transitions.
[2020-11-24 23:41:13,635 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-24 23:41:13,635 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8742 states and 10376 transitions.
[2020-11-24 23:41:13,651 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 32
[2020-11-24 23:41:13,651 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 23:41:13,651 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 23:41:13,654 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 23:41:13,654 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_AirBasicToken0 := false;
[L2]                 call_transfer_AirBasicToken0 := false;
[L2]     CALL        call main();
[L7063]              assume null == 0;
[L7064]  CALL        call this := FreshRefGenerator__success();
[L3583]              havoc newRef;
[L3584]              assume Alloc[newRef] == false;
[L3585]              Alloc[newRef] := true;
[L3586]              assume newRef != null;
[L7064]  RET         call this := FreshRefGenerator__success();
[L7065]              assume now >= 0;
[L7066]              assume DType[this] == AirBasicToken;
[L7067]              assume msgvalue_MSG == 0;
[L7068]              gas := gas - 53000;
[L7069]  CALL        call AirBasicToken_AirBasicToken(this, msgsender_MSG, msgvalue_MSG);
[L1419]              havoc __exception;
[L1420]              revert := false;
[L1421]  COND FALSE  !(__exception)
[L1453]  CALL        call AirBasicToken_AirBasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4404]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L4404]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4405]  COND FALSE  !(revert)
[L4408]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4057]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L4057]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4058]  COND FALSE  !(revert)
[L4061]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4038]              assume msgsender_MSG != null;
[L4039]              Balance[this] := 0;
[L4061]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4062]  COND FALSE  !(revert)
[L4408]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4409]  COND FALSE  !(revert)
[L4412]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L3800]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3801]  COND FALSE  !(revert)
[L3804]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3778]              assume msgsender_MSG != null;
[L3779]              Balance[this] := 0;
[L3780]              balances_BasicToken[this] := zeroRefintArr();
[L3781]              sum_balances0[this] := 0;
[L3782]              totalSupply__BasicToken[this] := 0;
[L3804]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3805]  COND FALSE  !(revert)
[L4412]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4413]  COND FALSE  !(revert)
[L4416]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L4109]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4110]  COND FALSE  !(revert)
[L4113]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4057]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L4057]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4058]  COND FALSE  !(revert)
[L4061]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4038]              assume msgsender_MSG != null;
[L4039]              Balance[this] := 0;
[L4061]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4062]  COND FALSE  !(revert)
[L4113]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4114]  COND FALSE  !(revert)
[L4117]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L3800]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3801]  COND FALSE  !(revert)
[L3804]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3778]              assume msgsender_MSG != null;
[L3779]              Balance[this] := 0;
[L3780]              balances_BasicToken[this] := zeroRefintArr();
[L3781]              sum_balances0[this] := 0;
[L3782]              totalSupply__BasicToken[this] := 0;
[L3804]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3805]  COND FALSE  !(revert)
[L4117]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4118]  COND FALSE  !(revert)
[L4121]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4080]              assume msgsender_MSG != null;
[L4081]              Balance[this] := 0;
[L4082]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4083]              sum_allowed1[this] := 0;
[L4121]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]  COND FALSE  !(revert)
[L4416]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4417]  COND FALSE  !(revert)
[L4420]  CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3933]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L3933]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]  COND FALSE  !(revert)
[L3937]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L3800]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3801]  COND FALSE  !(revert)
[L3804]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3778]              assume msgsender_MSG != null;
[L3779]              Balance[this] := 0;
[L3780]              balances_BasicToken[this] := zeroRefintArr();
[L3781]              sum_balances0[this] := 0;
[L3782]              totalSupply__BasicToken[this] := 0;
[L3804]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3805]  COND FALSE  !(revert)
[L3937]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3938]  COND FALSE  !(revert)
[L3941]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3910]              assume msgsender_MSG != null;
[L3911]              Balance[this] := 0;
[L3941]  RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3942]  COND FALSE  !(revert)
[L4420]  RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4421]  COND FALSE  !(revert)
[L4424]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3619]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              owner_Ownable[this] := null;
[L3606]              owner_Ownable[this] := msgsender_MSG;
[L3619]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  COND FALSE  !(revert)
[L4424]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4425]  COND FALSE  !(revert)
[L4428]  CALL        call AirBasicToken_AirBasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4350]              name_AirBasicToken[this] := 1433815699;
[L4351]              symbol_AirBasicToken[this] := -1312980976;
[L4352]              decimals_AirBasicToken[this] := 18;
[L4353]              __var_12 := decimals_AirBasicToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4354]              INITIAL_SUPPLY_AirBasicToken[this] := 1282793976 * (nonlinearPow(10, decimals_AirBasicToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4355]              balanceLocked_AirBasicToken[this] := zeroRefboolArr();
[L4356]              amountRaised_AirBasicToken[this] := 0;
[L4357]              buyPrice_AirBasicToken[this] := 100000;
[L4358]              crowdsaleClosed_AirBasicToken[this] := true;
[L4359]              transferEnabled_AirBasicToken[this] := true;
[L4361]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_AirBasicToken[this];
[L4362]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L4363]              balances_BasicToken[this][msgsender_MSG] := INITIAL_SUPPLY_AirBasicToken[this];
[L4364]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L4365]              assert { :EventEmitted "Transfer_AirBasicToken" } true;
[L4428]  RET         call AirBasicToken_AirBasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4429]  COND FALSE  !(revert)
[L1453]  RET         call AirBasicToken_AirBasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1454]              assume !revert && gas >= 0;
[L7069]  RET         call AirBasicToken_AirBasicToken(this, msgsender_MSG, msgvalue_MSG);
[L7070]              assume !revert && gas >= 0;
[L7073]  CALL        call CorralChoice_AirBasicToken(this);
[L6844]              havoc msgsender_MSG;
[L6845]              havoc msgvalue_MSG;
[L6846]              havoc choice;
[L6847]              havoc __ret_0_owner;
[L6848]              havoc __ret_0_totalSupply;
[L6849]              havoc _owner_s237;
[L6850]              havoc __ret_0_balanceOf;
[L6851]              havoc _to_s841;
[L6852]              havoc _value_s841;
[L6853]              havoc __ret_0_transfer;
[L6854]              havoc _value_s258;
[L6855]              havoc _owner_s486;
[L6856]              havoc _spender_s486;
[L6857]              havoc __ret_0_allowance;
[L6858]              havoc _from_s813;
[L6859]              havoc _to_s813;
[L6860]              havoc _value_s813;
[L6861]              havoc __ret_0_transferFrom;
[L6862]              havoc _spender_s470;
[L6863]              havoc _value_s470;
[L6864]              havoc __ret_0_approve;
[L6865]              havoc _spender_s527;
[L6866]              havoc _addedValue_s527;
[L6867]              havoc __ret_0_increaseApproval;
[L6868]              havoc _spender_s587;
[L6869]              havoc _subtractedValue_s587;
[L6870]              havoc __ret_0_decreaseApproval;
[L6871]              havoc __ret_0_name;
[L6872]              havoc __ret_0_symbol;
[L6873]              havoc __ret_0_decimals;
[L6874]              havoc __ret_0_INITIAL_SUPPLY;
[L6875]              havoc arg904_s0;
[L6876]              havoc __ret_0_balanceLocked;
[L6877]              havoc __ret_0_amountRaised;
[L6878]              havoc __ret_0_buyPrice;
[L6879]              havoc __ret_0_crowdsaleClosed;
[L6880]              havoc __ret_0_transferEnabled;
[L6881]              havoc newBuyPrice_s722;
[L6882]              havoc closebuy_s734;
[L6883]              havoc _enable_s783;
[L6884]              havoc _addr_s871;
[L6885]              havoc _addr_s901;
[L6886]              havoc tmpNow;
[L6887]              havoc gas;
[L6888]              assume gas > 4000000 && gas <= 8000000;
[L6889]              tmpNow := now;
[L6890]              havoc now;
[L6891]              assume now > tmpNow;
[L6892]              assume msgsender_MSG != null;
[L6893]              assume DType[msgsender_MSG] != Ownable;
[L6894]              assume DType[msgsender_MSG] != SafeMath;
[L6895]              assume DType[msgsender_MSG] != ERC20Basic;
[L6896]              assume DType[msgsender_MSG] != BasicToken;
[L6897]              assume DType[msgsender_MSG] != BurnableToken;
[L6898]              assume DType[msgsender_MSG] != ERC20;
[L6899]              assume DType[msgsender_MSG] != StandardToken;
[L6900]              assume DType[msgsender_MSG] != AirBasicToken;
[L6901]              Alloc[msgsender_MSG] := true;
[L6902]  COND FALSE  !(choice == 24)
[L6908]  COND FALSE  !(choice == 23)
[L6914]  COND FALSE  !(choice == 22)
[L6920]  COND TRUE   choice == 21
[L6921]              gas := gas - 21000;
[L6922]  COND TRUE   gas >= 0
[L6923]              assume _value_s841 >= 0 && _value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6924]              assume msgvalue_MSG == 0;
[L6925]  CALL        call __ret_0_transfer := transfer~address~uint256_AirBasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s841 && _value_s841 <= balances_BasicToken[this][msgsender_MSG]) && _value_s841 >= 0) && _value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s841] >= 0) && balances_BasicToken[this][_to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_AirBasicToken0 := true;
[L2]                 call_transfer_AirBasicToken0 := false;
[L2]                 revert := revert_hold;
[L1835]              havoc __exception;
[L1836]              revert := false;
[L1837]  COND TRUE   __exception
[L1838]              __tmp__Balance := Balance;
[L1839]              __tmp__DType := DType;
[L1840]              __tmp__Alloc := Alloc;
[L1841]              __tmp__balance_ADDR := balance_ADDR;
[L1842]              __tmp__M_Ref_int := M_Ref_int;
[L1843]              __tmp__sum_balances0 := sum_balances0;
[L1844]              __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L1845]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1846]              __tmp__sum_allowed1 := sum_allowed1;
[L1847]              __tmp__M_Ref_bool := M_Ref_bool;
[L1848]              __tmp__sum_balanceLocked2 := sum_balanceLocked2;
[L1849]              __tmp__M_int_Ref := M_int_Ref;
[L1850]              __tmp__sum := sum;
[L1851]              __tmp__Length := Length;
[L1852]              __tmp__now := now;
[L1853]              __tmp__owner_Ownable := owner_Ownable;
[L1854]              __tmp__balances_BasicToken := balances_BasicToken;
[L1855]              __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L1856]              __tmp__allowed_StandardToken := allowed_StandardToken;
[L1857]              __tmp__name_AirBasicToken := name_AirBasicToken;
[L1858]              __tmp__symbol_AirBasicToken := symbol_AirBasicToken;
[L1859]              __tmp__decimals_AirBasicToken := decimals_AirBasicToken;
[L1860]              __tmp__INITIAL_SUPPLY_AirBasicToken := INITIAL_SUPPLY_AirBasicToken;
[L1861]              __tmp__balanceLocked_AirBasicToken := balanceLocked_AirBasicToken;
[L1862]              __tmp__amountRaised_AirBasicToken := amountRaised_AirBasicToken;
[L1863]              __tmp__buyPrice_AirBasicToken := buyPrice_AirBasicToken;
[L1864]              __tmp__crowdsaleClosed_AirBasicToken := crowdsaleClosed_AirBasicToken;
[L1865]              __tmp__transferEnabled_AirBasicToken := transferEnabled_AirBasicToken;
[L1866]  CALL        call __ret_0_ := transfer~address~uint256_AirBasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L4683]  COND FALSE  !(!__tmp__transferEnabled_AirBasicToken[this])
[L4687]  COND FALSE  !(!!__tmp__balanceLocked_AirBasicToken[this][msgsender_MSG])
[L4691]  COND TRUE   __tmp__DType[this] == AirBasicToken
[L4692]  CALL        call __var_21 := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L3827]              __var_1 := null;
[L3828]  COND TRUE   !(_to_s225 != null)
[L3829]              revert := true;
[L4692]  RET         call __var_21 := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L4693]  COND TRUE   revert
[L1866]  RET         call __ret_0_ := transfer~address~uint256_AirBasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L1867]              assume revert || gas < 0;
[L6925]  RET         call __ret_0_transfer := transfer~address~uint256_AirBasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L7073]  RET         call CorralChoice_AirBasicToken(this);

Loop:
[L7073]  CALL        call CorralChoice_AirBasicToken(this);
[L6844]              havoc msgsender_MSG;
[L6845]              havoc msgvalue_MSG;
[L6846]              havoc choice;
[L6847]              havoc __ret_0_owner;
[L6848]              havoc __ret_0_totalSupply;
[L6849]              havoc _owner_s237;
[L6850]              havoc __ret_0_balanceOf;
[L6851]              havoc _to_s841;
[L6852]              havoc _value_s841;
[L6853]              havoc __ret_0_transfer;
[L6854]              havoc _value_s258;
[L6855]              havoc _owner_s486;
[L6856]              havoc _spender_s486;
[L6857]              havoc __ret_0_allowance;
[L6858]              havoc _from_s813;
[L6859]              havoc _to_s813;
[L6860]              havoc _value_s813;
[L6861]              havoc __ret_0_transferFrom;
[L6862]              havoc _spender_s470;
[L6863]              havoc _value_s470;
[L6864]              havoc __ret_0_approve;
[L6865]              havoc _spender_s527;
[L6866]              havoc _addedValue_s527;
[L6867]              havoc __ret_0_increaseApproval;
[L6868]              havoc _spender_s587;
[L6869]              havoc _subtractedValue_s587;
[L6870]              havoc __ret_0_decreaseApproval;
[L6871]              havoc __ret_0_name;
[L6872]              havoc __ret_0_symbol;
[L6873]              havoc __ret_0_decimals;
[L6874]              havoc __ret_0_INITIAL_SUPPLY;
[L6875]              havoc arg904_s0;
[L6876]              havoc __ret_0_balanceLocked;
[L6877]              havoc __ret_0_amountRaised;
[L6878]              havoc __ret_0_buyPrice;
[L6879]              havoc __ret_0_crowdsaleClosed;
[L6880]              havoc __ret_0_transferEnabled;
[L6881]              havoc newBuyPrice_s722;
[L6882]              havoc closebuy_s734;
[L6883]              havoc _enable_s783;
[L6884]              havoc _addr_s871;
[L6885]              havoc _addr_s901;
[L6886]              havoc tmpNow;
[L6887]              havoc gas;
[L6888]              assume gas > 4000000 && gas <= 8000000;
[L6889]              tmpNow := now;
[L6890]              havoc now;
[L6891]              assume now > tmpNow;
[L6892]              assume msgsender_MSG != null;
[L6893]              assume DType[msgsender_MSG] != Ownable;
[L6894]              assume DType[msgsender_MSG] != SafeMath;
[L6895]              assume DType[msgsender_MSG] != ERC20Basic;
[L6896]              assume DType[msgsender_MSG] != BasicToken;
[L6897]              assume DType[msgsender_MSG] != BurnableToken;
[L6898]              assume DType[msgsender_MSG] != ERC20;
[L6899]              assume DType[msgsender_MSG] != StandardToken;
[L6900]              assume DType[msgsender_MSG] != AirBasicToken;
[L6901]              Alloc[msgsender_MSG] := true;
[L6902]  COND FALSE  !(choice == 24)
[L6908]  COND FALSE  !(choice == 23)
[L6914]  COND FALSE  !(choice == 22)
[L6920]  COND TRUE   choice == 21
[L6921]              gas := gas - 21000;
[L6922]  COND TRUE   gas >= 0
[L6923]              assume _value_s841 >= 0 && _value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6924]              assume msgvalue_MSG == 0;
[L6925]  CALL        call __ret_0_transfer := transfer~address~uint256_AirBasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s841 && _value_s841 <= balances_BasicToken[this][msgsender_MSG]) && _value_s841 >= 0) && _value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s841] >= 0) && balances_BasicToken[this][_to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_AirBasicToken0 := true;
[L2]                 call_transfer_AirBasicToken0 := false;
[L2]                 revert := revert_hold;
[L1835]              havoc __exception;
[L1836]              revert := false;
[L1837]  COND TRUE   __exception
[L1838]              __tmp__Balance := Balance;
[L1839]              __tmp__DType := DType;
[L1840]              __tmp__Alloc := Alloc;
[L1841]              __tmp__balance_ADDR := balance_ADDR;
[L1842]              __tmp__M_Ref_int := M_Ref_int;
[L1843]              __tmp__sum_balances0 := sum_balances0;
[L1844]              __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L1845]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1846]              __tmp__sum_allowed1 := sum_allowed1;
[L1847]              __tmp__M_Ref_bool := M_Ref_bool;
[L1848]              __tmp__sum_balanceLocked2 := sum_balanceLocked2;
[L1849]              __tmp__M_int_Ref := M_int_Ref;
[L1850]              __tmp__sum := sum;
[L1851]              __tmp__Length := Length;
[L1852]              __tmp__now := now;
[L1853]              __tmp__owner_Ownable := owner_Ownable;
[L1854]              __tmp__balances_BasicToken := balances_BasicToken;
[L1855]              __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L1856]              __tmp__allowed_StandardToken := allowed_StandardToken;
[L1857]              __tmp__name_AirBasicToken := name_AirBasicToken;
[L1858]              __tmp__symbol_AirBasicToken := symbol_AirBasicToken;
[L1859]              __tmp__decimals_AirBasicToken := decimals_AirBasicToken;
[L1860]              __tmp__INITIAL_SUPPLY_AirBasicToken := INITIAL_SUPPLY_AirBasicToken;
[L1861]              __tmp__balanceLocked_AirBasicToken := balanceLocked_AirBasicToken;
[L1862]              __tmp__amountRaised_AirBasicToken := amountRaised_AirBasicToken;
[L1863]              __tmp__buyPrice_AirBasicToken := buyPrice_AirBasicToken;
[L1864]              __tmp__crowdsaleClosed_AirBasicToken := crowdsaleClosed_AirBasicToken;
[L1865]              __tmp__transferEnabled_AirBasicToken := transferEnabled_AirBasicToken;
[L1866]  CALL        call __ret_0_ := transfer~address~uint256_AirBasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L4683]  COND FALSE  !(!__tmp__transferEnabled_AirBasicToken[this])
[L4687]  COND FALSE  !(!!__tmp__balanceLocked_AirBasicToken[this][msgsender_MSG])
[L4691]  COND TRUE   __tmp__DType[this] == AirBasicToken
[L4692]  CALL        call __var_21 := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L3827]              __var_1 := null;
[L3828]  COND TRUE   !(_to_s225 != null)
[L3829]              revert := true;
[L4692]  RET         call __var_21 := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L4693]  COND TRUE   revert
[L1866]  RET         call __ret_0_ := transfer~address~uint256_AirBasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L1867]              assume revert || gas < 0;
[L6925]  RET         call __ret_0_transfer := transfer~address~uint256_AirBasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L7073]  RET         call CorralChoice_AirBasicToken(this);

[2020-11-24 23:41:13,658 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 23:41:13,658 INFO  L82        PathProgramCache]: Analyzing trace with hash 1340033355, now seen corresponding path program 1 times
[2020-11-24 23:41:13,659 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 23:41:13,671 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 23:41:13,740 INFO  L134       CoverageAnalysis]: Checked inductivity of 345 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 345 trivial. 0 not checked.
[2020-11-24 23:41:13,740 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 23:41:13,740 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 23:41:13,741 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 23:41:13,741 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 23:41:13,741 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 23:41:13,741 INFO  L87              Difference]: Start difference. First operand 8742 states and 10376 transitions. cyclomatic complexity: 1656 Second operand 7 states.
[2020-11-24 23:41:13,836 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 23:41:13,836 INFO  L93              Difference]: Finished difference Result 8954 states and 10632 transitions.
[2020-11-24 23:41:13,837 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 23:41:13,837 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8954 states and 10632 transitions.
[2020-11-24 23:41:13,858 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 32
[2020-11-24 23:41:13,888 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8954 states to 8946 states and 10624 transitions.
[2020-11-24 23:41:13,888 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2385
[2020-11-24 23:41:13,890 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2385
[2020-11-24 23:41:13,890 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8946 states and 10624 transitions.
[2020-11-24 23:41:13,898 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 23:41:13,898 INFO  L728         BuchiCegarLoop]: Abstraction has 8946 states and 10624 transitions.
[2020-11-24 23:41:13,903 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8946 states and 10624 transitions.
[2020-11-24 23:41:13,971 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8946 to 8890.
[2020-11-24 23:41:13,971 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8890 states.
[2020-11-24 23:41:13,985 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8890 states to 8890 states and 10551 transitions.
[2020-11-24 23:41:13,985 INFO  L751         BuchiCegarLoop]: Abstraction has 8890 states and 10551 transitions.
[2020-11-24 23:41:13,985 INFO  L631         BuchiCegarLoop]: Abstraction has 8890 states and 10551 transitions.
[2020-11-24 23:41:13,985 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-24 23:41:13,985 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8890 states and 10551 transitions.
[2020-11-24 23:41:13,995 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 32
[2020-11-24 23:41:13,995 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 23:41:13,995 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 23:41:13,997 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 23:41:13,997 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_AirBasicToken0 := false;
[L2]                 call_transfer_AirBasicToken0 := false;
[L2]     CALL        call main();
[L7063]              assume null == 0;
[L7064]  CALL        call this := FreshRefGenerator__success();
[L3583]              havoc newRef;
[L3584]              assume Alloc[newRef] == false;
[L3585]              Alloc[newRef] := true;
[L3586]              assume newRef != null;
[L7064]  RET         call this := FreshRefGenerator__success();
[L7065]              assume now >= 0;
[L7066]              assume DType[this] == AirBasicToken;
[L7067]              assume msgvalue_MSG == 0;
[L7068]              gas := gas - 53000;
[L7069]  CALL        call AirBasicToken_AirBasicToken(this, msgsender_MSG, msgvalue_MSG);
[L1419]              havoc __exception;
[L1420]              revert := false;
[L1421]  COND FALSE  !(__exception)
[L1453]  CALL        call AirBasicToken_AirBasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4404]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L4404]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4405]  COND FALSE  !(revert)
[L4408]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4057]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L4057]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4058]  COND FALSE  !(revert)
[L4061]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4038]              assume msgsender_MSG != null;
[L4039]              Balance[this] := 0;
[L4061]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4062]  COND FALSE  !(revert)
[L4408]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4409]  COND FALSE  !(revert)
[L4412]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L3800]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3801]  COND FALSE  !(revert)
[L3804]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3778]              assume msgsender_MSG != null;
[L3779]              Balance[this] := 0;
[L3780]              balances_BasicToken[this] := zeroRefintArr();
[L3781]              sum_balances0[this] := 0;
[L3782]              totalSupply__BasicToken[this] := 0;
[L3804]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3805]  COND FALSE  !(revert)
[L4412]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4413]  COND FALSE  !(revert)
[L4416]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L4109]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4110]  COND FALSE  !(revert)
[L4113]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4057]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L4057]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4058]  COND FALSE  !(revert)
[L4061]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4038]              assume msgsender_MSG != null;
[L4039]              Balance[this] := 0;
[L4061]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4062]  COND FALSE  !(revert)
[L4113]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4114]  COND FALSE  !(revert)
[L4117]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L3800]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3801]  COND FALSE  !(revert)
[L3804]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3778]              assume msgsender_MSG != null;
[L3779]              Balance[this] := 0;
[L3780]              balances_BasicToken[this] := zeroRefintArr();
[L3781]              sum_balances0[this] := 0;
[L3782]              totalSupply__BasicToken[this] := 0;
[L3804]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3805]  COND FALSE  !(revert)
[L4117]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4118]  COND FALSE  !(revert)
[L4121]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4080]              assume msgsender_MSG != null;
[L4081]              Balance[this] := 0;
[L4082]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4083]              sum_allowed1[this] := 0;
[L4121]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]  COND FALSE  !(revert)
[L4416]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4417]  COND FALSE  !(revert)
[L4420]  CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3933]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L3933]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]  COND FALSE  !(revert)
[L3937]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L3800]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3801]  COND FALSE  !(revert)
[L3804]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3778]              assume msgsender_MSG != null;
[L3779]              Balance[this] := 0;
[L3780]              balances_BasicToken[this] := zeroRefintArr();
[L3781]              sum_balances0[this] := 0;
[L3782]              totalSupply__BasicToken[this] := 0;
[L3804]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3805]  COND FALSE  !(revert)
[L3937]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3938]  COND FALSE  !(revert)
[L3941]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3910]              assume msgsender_MSG != null;
[L3911]              Balance[this] := 0;
[L3941]  RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3942]  COND FALSE  !(revert)
[L4420]  RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4421]  COND FALSE  !(revert)
[L4424]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3619]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              owner_Ownable[this] := null;
[L3606]              owner_Ownable[this] := msgsender_MSG;
[L3619]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  COND FALSE  !(revert)
[L4424]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4425]  COND FALSE  !(revert)
[L4428]  CALL        call AirBasicToken_AirBasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4350]              name_AirBasicToken[this] := 1433815699;
[L4351]              symbol_AirBasicToken[this] := -1312980976;
[L4352]              decimals_AirBasicToken[this] := 18;
[L4353]              __var_12 := decimals_AirBasicToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4354]              INITIAL_SUPPLY_AirBasicToken[this] := 1282793976 * (nonlinearPow(10, decimals_AirBasicToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4355]              balanceLocked_AirBasicToken[this] := zeroRefboolArr();
[L4356]              amountRaised_AirBasicToken[this] := 0;
[L4357]              buyPrice_AirBasicToken[this] := 100000;
[L4358]              crowdsaleClosed_AirBasicToken[this] := true;
[L4359]              transferEnabled_AirBasicToken[this] := true;
[L4361]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_AirBasicToken[this];
[L4362]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L4363]              balances_BasicToken[this][msgsender_MSG] := INITIAL_SUPPLY_AirBasicToken[this];
[L4364]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L4365]              assert { :EventEmitted "Transfer_AirBasicToken" } true;
[L4428]  RET         call AirBasicToken_AirBasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4429]  COND FALSE  !(revert)
[L1453]  RET         call AirBasicToken_AirBasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1454]              assume !revert && gas >= 0;
[L7069]  RET         call AirBasicToken_AirBasicToken(this, msgsender_MSG, msgvalue_MSG);
[L7070]              assume !revert && gas >= 0;
[L7073]  CALL        call CorralChoice_AirBasicToken(this);
[L6844]              havoc msgsender_MSG;
[L6845]              havoc msgvalue_MSG;
[L6846]              havoc choice;
[L6847]              havoc __ret_0_owner;
[L6848]              havoc __ret_0_totalSupply;
[L6849]              havoc _owner_s237;
[L6850]              havoc __ret_0_balanceOf;
[L6851]              havoc _to_s841;
[L6852]              havoc _value_s841;
[L6853]              havoc __ret_0_transfer;
[L6854]              havoc _value_s258;
[L6855]              havoc _owner_s486;
[L6856]              havoc _spender_s486;
[L6857]              havoc __ret_0_allowance;
[L6858]              havoc _from_s813;
[L6859]              havoc _to_s813;
[L6860]              havoc _value_s813;
[L6861]              havoc __ret_0_transferFrom;
[L6862]              havoc _spender_s470;
[L6863]              havoc _value_s470;
[L6864]              havoc __ret_0_approve;
[L6865]              havoc _spender_s527;
[L6866]              havoc _addedValue_s527;
[L6867]              havoc __ret_0_increaseApproval;
[L6868]              havoc _spender_s587;
[L6869]              havoc _subtractedValue_s587;
[L6870]              havoc __ret_0_decreaseApproval;
[L6871]              havoc __ret_0_name;
[L6872]              havoc __ret_0_symbol;
[L6873]              havoc __ret_0_decimals;
[L6874]              havoc __ret_0_INITIAL_SUPPLY;
[L6875]              havoc arg904_s0;
[L6876]              havoc __ret_0_balanceLocked;
[L6877]              havoc __ret_0_amountRaised;
[L6878]              havoc __ret_0_buyPrice;
[L6879]              havoc __ret_0_crowdsaleClosed;
[L6880]              havoc __ret_0_transferEnabled;
[L6881]              havoc newBuyPrice_s722;
[L6882]              havoc closebuy_s734;
[L6883]              havoc _enable_s783;
[L6884]              havoc _addr_s871;
[L6885]              havoc _addr_s901;
[L6886]              havoc tmpNow;
[L6887]              havoc gas;
[L6888]              assume gas > 4000000 && gas <= 8000000;
[L6889]              tmpNow := now;
[L6890]              havoc now;
[L6891]              assume now > tmpNow;
[L6892]              assume msgsender_MSG != null;
[L6893]              assume DType[msgsender_MSG] != Ownable;
[L6894]              assume DType[msgsender_MSG] != SafeMath;
[L6895]              assume DType[msgsender_MSG] != ERC20Basic;
[L6896]              assume DType[msgsender_MSG] != BasicToken;
[L6897]              assume DType[msgsender_MSG] != BurnableToken;
[L6898]              assume DType[msgsender_MSG] != ERC20;
[L6899]              assume DType[msgsender_MSG] != StandardToken;
[L6900]              assume DType[msgsender_MSG] != AirBasicToken;
[L6901]              Alloc[msgsender_MSG] := true;
[L6902]  COND FALSE  !(choice == 24)
[L6908]  COND FALSE  !(choice == 23)
[L6914]  COND FALSE  !(choice == 22)
[L6920]  COND TRUE   choice == 21
[L6921]              gas := gas - 21000;
[L6922]  COND TRUE   gas >= 0
[L6923]              assume _value_s841 >= 0 && _value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6924]              assume msgvalue_MSG == 0;
[L6925]  CALL        call __ret_0_transfer := transfer~address~uint256_AirBasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s841 && _value_s841 <= balances_BasicToken[this][msgsender_MSG]) && _value_s841 >= 0) && _value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s841] >= 0) && balances_BasicToken[this][_to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_AirBasicToken0 := true;
[L2]                 call_transfer_AirBasicToken0 := false;
[L2]                 revert := revert_hold;
[L1835]              havoc __exception;
[L1836]              revert := false;
[L1837]  COND TRUE   __exception
[L1838]              __tmp__Balance := Balance;
[L1839]              __tmp__DType := DType;
[L1840]              __tmp__Alloc := Alloc;
[L1841]              __tmp__balance_ADDR := balance_ADDR;
[L1842]              __tmp__M_Ref_int := M_Ref_int;
[L1843]              __tmp__sum_balances0 := sum_balances0;
[L1844]              __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L1845]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1846]              __tmp__sum_allowed1 := sum_allowed1;
[L1847]              __tmp__M_Ref_bool := M_Ref_bool;
[L1848]              __tmp__sum_balanceLocked2 := sum_balanceLocked2;
[L1849]              __tmp__M_int_Ref := M_int_Ref;
[L1850]              __tmp__sum := sum;
[L1851]              __tmp__Length := Length;
[L1852]              __tmp__now := now;
[L1853]              __tmp__owner_Ownable := owner_Ownable;
[L1854]              __tmp__balances_BasicToken := balances_BasicToken;
[L1855]              __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L1856]              __tmp__allowed_StandardToken := allowed_StandardToken;
[L1857]              __tmp__name_AirBasicToken := name_AirBasicToken;
[L1858]              __tmp__symbol_AirBasicToken := symbol_AirBasicToken;
[L1859]              __tmp__decimals_AirBasicToken := decimals_AirBasicToken;
[L1860]              __tmp__INITIAL_SUPPLY_AirBasicToken := INITIAL_SUPPLY_AirBasicToken;
[L1861]              __tmp__balanceLocked_AirBasicToken := balanceLocked_AirBasicToken;
[L1862]              __tmp__amountRaised_AirBasicToken := amountRaised_AirBasicToken;
[L1863]              __tmp__buyPrice_AirBasicToken := buyPrice_AirBasicToken;
[L1864]              __tmp__crowdsaleClosed_AirBasicToken := crowdsaleClosed_AirBasicToken;
[L1865]              __tmp__transferEnabled_AirBasicToken := transferEnabled_AirBasicToken;
[L1866]  CALL        call __ret_0_ := transfer~address~uint256_AirBasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L4683]  COND FALSE  !(!__tmp__transferEnabled_AirBasicToken[this])
[L4687]  COND FALSE  !(!!__tmp__balanceLocked_AirBasicToken[this][msgsender_MSG])
[L4691]  COND TRUE   __tmp__DType[this] == AirBasicToken
[L4692]  CALL        call __var_21 := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L3827]              __var_1 := null;
[L3828]  COND FALSE  !(!(_to_s225 != null))
[L3832]  COND TRUE   !(_value_s225 <= __tmp__balances_BasicToken[this][msgsender_MSG])
[L3833]              revert := true;
[L4692]  RET         call __var_21 := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L4693]  COND TRUE   revert
[L1866]  RET         call __ret_0_ := transfer~address~uint256_AirBasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L1867]              assume revert || gas < 0;
[L6925]  RET         call __ret_0_transfer := transfer~address~uint256_AirBasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L7073]  RET         call CorralChoice_AirBasicToken(this);

Loop:
[L7073]  CALL        call CorralChoice_AirBasicToken(this);
[L6844]              havoc msgsender_MSG;
[L6845]              havoc msgvalue_MSG;
[L6846]              havoc choice;
[L6847]              havoc __ret_0_owner;
[L6848]              havoc __ret_0_totalSupply;
[L6849]              havoc _owner_s237;
[L6850]              havoc __ret_0_balanceOf;
[L6851]              havoc _to_s841;
[L6852]              havoc _value_s841;
[L6853]              havoc __ret_0_transfer;
[L6854]              havoc _value_s258;
[L6855]              havoc _owner_s486;
[L6856]              havoc _spender_s486;
[L6857]              havoc __ret_0_allowance;
[L6858]              havoc _from_s813;
[L6859]              havoc _to_s813;
[L6860]              havoc _value_s813;
[L6861]              havoc __ret_0_transferFrom;
[L6862]              havoc _spender_s470;
[L6863]              havoc _value_s470;
[L6864]              havoc __ret_0_approve;
[L6865]              havoc _spender_s527;
[L6866]              havoc _addedValue_s527;
[L6867]              havoc __ret_0_increaseApproval;
[L6868]              havoc _spender_s587;
[L6869]              havoc _subtractedValue_s587;
[L6870]              havoc __ret_0_decreaseApproval;
[L6871]              havoc __ret_0_name;
[L6872]              havoc __ret_0_symbol;
[L6873]              havoc __ret_0_decimals;
[L6874]              havoc __ret_0_INITIAL_SUPPLY;
[L6875]              havoc arg904_s0;
[L6876]              havoc __ret_0_balanceLocked;
[L6877]              havoc __ret_0_amountRaised;
[L6878]              havoc __ret_0_buyPrice;
[L6879]              havoc __ret_0_crowdsaleClosed;
[L6880]              havoc __ret_0_transferEnabled;
[L6881]              havoc newBuyPrice_s722;
[L6882]              havoc closebuy_s734;
[L6883]              havoc _enable_s783;
[L6884]              havoc _addr_s871;
[L6885]              havoc _addr_s901;
[L6886]              havoc tmpNow;
[L6887]              havoc gas;
[L6888]              assume gas > 4000000 && gas <= 8000000;
[L6889]              tmpNow := now;
[L6890]              havoc now;
[L6891]              assume now > tmpNow;
[L6892]              assume msgsender_MSG != null;
[L6893]              assume DType[msgsender_MSG] != Ownable;
[L6894]              assume DType[msgsender_MSG] != SafeMath;
[L6895]              assume DType[msgsender_MSG] != ERC20Basic;
[L6896]              assume DType[msgsender_MSG] != BasicToken;
[L6897]              assume DType[msgsender_MSG] != BurnableToken;
[L6898]              assume DType[msgsender_MSG] != ERC20;
[L6899]              assume DType[msgsender_MSG] != StandardToken;
[L6900]              assume DType[msgsender_MSG] != AirBasicToken;
[L6901]              Alloc[msgsender_MSG] := true;
[L6902]  COND FALSE  !(choice == 24)
[L6908]  COND FALSE  !(choice == 23)
[L6914]  COND FALSE  !(choice == 22)
[L6920]  COND TRUE   choice == 21
[L6921]              gas := gas - 21000;
[L6922]  COND TRUE   gas >= 0
[L6923]              assume _value_s841 >= 0 && _value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6924]              assume msgvalue_MSG == 0;
[L6925]  CALL        call __ret_0_transfer := transfer~address~uint256_AirBasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s841 && _value_s841 <= balances_BasicToken[this][msgsender_MSG]) && _value_s841 >= 0) && _value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s841] >= 0) && balances_BasicToken[this][_to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_AirBasicToken0 := true;
[L2]                 call_transfer_AirBasicToken0 := false;
[L2]                 revert := revert_hold;
[L1835]              havoc __exception;
[L1836]              revert := false;
[L1837]  COND TRUE   __exception
[L1838]              __tmp__Balance := Balance;
[L1839]              __tmp__DType := DType;
[L1840]              __tmp__Alloc := Alloc;
[L1841]              __tmp__balance_ADDR := balance_ADDR;
[L1842]              __tmp__M_Ref_int := M_Ref_int;
[L1843]              __tmp__sum_balances0 := sum_balances0;
[L1844]              __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L1845]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1846]              __tmp__sum_allowed1 := sum_allowed1;
[L1847]              __tmp__M_Ref_bool := M_Ref_bool;
[L1848]              __tmp__sum_balanceLocked2 := sum_balanceLocked2;
[L1849]              __tmp__M_int_Ref := M_int_Ref;
[L1850]              __tmp__sum := sum;
[L1851]              __tmp__Length := Length;
[L1852]              __tmp__now := now;
[L1853]              __tmp__owner_Ownable := owner_Ownable;
[L1854]              __tmp__balances_BasicToken := balances_BasicToken;
[L1855]              __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L1856]              __tmp__allowed_StandardToken := allowed_StandardToken;
[L1857]              __tmp__name_AirBasicToken := name_AirBasicToken;
[L1858]              __tmp__symbol_AirBasicToken := symbol_AirBasicToken;
[L1859]              __tmp__decimals_AirBasicToken := decimals_AirBasicToken;
[L1860]              __tmp__INITIAL_SUPPLY_AirBasicToken := INITIAL_SUPPLY_AirBasicToken;
[L1861]              __tmp__balanceLocked_AirBasicToken := balanceLocked_AirBasicToken;
[L1862]              __tmp__amountRaised_AirBasicToken := amountRaised_AirBasicToken;
[L1863]              __tmp__buyPrice_AirBasicToken := buyPrice_AirBasicToken;
[L1864]              __tmp__crowdsaleClosed_AirBasicToken := crowdsaleClosed_AirBasicToken;
[L1865]              __tmp__transferEnabled_AirBasicToken := transferEnabled_AirBasicToken;
[L1866]  CALL        call __ret_0_ := transfer~address~uint256_AirBasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L4683]  COND FALSE  !(!__tmp__transferEnabled_AirBasicToken[this])
[L4687]  COND FALSE  !(!!__tmp__balanceLocked_AirBasicToken[this][msgsender_MSG])
[L4691]  COND TRUE   __tmp__DType[this] == AirBasicToken
[L4692]  CALL        call __var_21 := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L3827]              __var_1 := null;
[L3828]  COND FALSE  !(!(_to_s225 != null))
[L3832]  COND TRUE   !(_value_s225 <= __tmp__balances_BasicToken[this][msgsender_MSG])
[L3833]              revert := true;
[L4692]  RET         call __var_21 := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L4693]  COND TRUE   revert
[L1866]  RET         call __ret_0_ := transfer~address~uint256_AirBasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L1867]              assume revert || gas < 0;
[L6925]  RET         call __ret_0_transfer := transfer~address~uint256_AirBasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L7073]  RET         call CorralChoice_AirBasicToken(this);

[2020-11-24 23:41:14,001 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 23:41:14,001 INFO  L82        PathProgramCache]: Analyzing trace with hash 1345009385, now seen corresponding path program 1 times
[2020-11-24 23:41:14,002 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 23:41:14,014 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 23:41:14,110 INFO  L134       CoverageAnalysis]: Checked inductivity of 345 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 345 trivial. 0 not checked.
[2020-11-24 23:41:14,110 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 23:41:14,110 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 23:41:14,111 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 23:41:14,111 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 23:41:14,111 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 23:41:14,111 INFO  L87              Difference]: Start difference. First operand 8890 states and 10551 transitions. cyclomatic complexity: 1683 Second operand 7 states.
[2020-11-24 23:41:14,957 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 23:41:14,957 INFO  L93              Difference]: Finished difference Result 9097 states and 10902 transitions.
[2020-11-24 23:41:14,957 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-24 23:41:14,957 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9097 states and 10902 transitions.
[2020-11-24 23:41:14,981 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 38
[2020-11-24 23:41:15,009 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9097 states to 9097 states and 10902 transitions.
[2020-11-24 23:41:15,009 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2480
[2020-11-24 23:41:15,010 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2480
[2020-11-24 23:41:15,010 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9097 states and 10902 transitions.
[2020-11-24 23:41:15,018 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 23:41:15,018 INFO  L728         BuchiCegarLoop]: Abstraction has 9097 states and 10902 transitions.
[2020-11-24 23:41:15,023 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9097 states and 10902 transitions.
[2020-11-24 23:41:15,099 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9097 to 8620.
[2020-11-24 23:41:15,099 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8620 states.
[2020-11-24 23:41:15,111 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8620 states to 8620 states and 10035 transitions.
[2020-11-24 23:41:15,111 INFO  L751         BuchiCegarLoop]: Abstraction has 8620 states and 10035 transitions.
[2020-11-24 23:41:15,111 INFO  L631         BuchiCegarLoop]: Abstraction has 8620 states and 10035 transitions.
[2020-11-24 23:41:15,111 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-24 23:41:15,111 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8620 states and 10035 transitions.
[2020-11-24 23:41:15,121 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 32
[2020-11-24 23:41:15,121 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 23:41:15,121 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 23:41:15,122 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 23:41:15,122 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_AirBasicToken0 := false;
[L2]                 call_transfer_AirBasicToken0 := false;
[L2]     CALL        call main();
[L7063]              assume null == 0;
[L7064]  CALL        call this := FreshRefGenerator__success();
[L3583]              havoc newRef;
[L3584]              assume Alloc[newRef] == false;
[L3585]              Alloc[newRef] := true;
[L3586]              assume newRef != null;
[L7064]  RET         call this := FreshRefGenerator__success();
[L7065]              assume now >= 0;
[L7066]              assume DType[this] == AirBasicToken;
[L7067]              assume msgvalue_MSG == 0;
[L7068]              gas := gas - 53000;
[L7069]  CALL        call AirBasicToken_AirBasicToken(this, msgsender_MSG, msgvalue_MSG);
[L1419]              havoc __exception;
[L1420]              revert := false;
[L1421]  COND FALSE  !(__exception)
[L1453]  CALL        call AirBasicToken_AirBasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4404]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L4404]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4405]  COND FALSE  !(revert)
[L4408]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4057]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L4057]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4058]  COND FALSE  !(revert)
[L4061]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4038]              assume msgsender_MSG != null;
[L4039]              Balance[this] := 0;
[L4061]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4062]  COND FALSE  !(revert)
[L4408]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4409]  COND FALSE  !(revert)
[L4412]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L3800]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3801]  COND FALSE  !(revert)
[L3804]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3778]              assume msgsender_MSG != null;
[L3779]              Balance[this] := 0;
[L3780]              balances_BasicToken[this] := zeroRefintArr();
[L3781]              sum_balances0[this] := 0;
[L3782]              totalSupply__BasicToken[this] := 0;
[L3804]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3805]  COND FALSE  !(revert)
[L4412]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4413]  COND FALSE  !(revert)
[L4416]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L4109]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4110]  COND FALSE  !(revert)
[L4113]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4057]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L4057]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4058]  COND FALSE  !(revert)
[L4061]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4038]              assume msgsender_MSG != null;
[L4039]              Balance[this] := 0;
[L4061]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4062]  COND FALSE  !(revert)
[L4113]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4114]  COND FALSE  !(revert)
[L4117]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L3800]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3801]  COND FALSE  !(revert)
[L3804]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3778]              assume msgsender_MSG != null;
[L3779]              Balance[this] := 0;
[L3780]              balances_BasicToken[this] := zeroRefintArr();
[L3781]              sum_balances0[this] := 0;
[L3782]              totalSupply__BasicToken[this] := 0;
[L3804]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3805]  COND FALSE  !(revert)
[L4117]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4118]  COND FALSE  !(revert)
[L4121]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4080]              assume msgsender_MSG != null;
[L4081]              Balance[this] := 0;
[L4082]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4083]              sum_allowed1[this] := 0;
[L4121]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]  COND FALSE  !(revert)
[L4416]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4417]  COND FALSE  !(revert)
[L4420]  CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3933]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L3933]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]  COND FALSE  !(revert)
[L3937]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L3800]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3801]  COND FALSE  !(revert)
[L3804]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3778]              assume msgsender_MSG != null;
[L3779]              Balance[this] := 0;
[L3780]              balances_BasicToken[this] := zeroRefintArr();
[L3781]              sum_balances0[this] := 0;
[L3782]              totalSupply__BasicToken[this] := 0;
[L3804]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3805]  COND FALSE  !(revert)
[L3937]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3938]  COND FALSE  !(revert)
[L3941]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3910]              assume msgsender_MSG != null;
[L3911]              Balance[this] := 0;
[L3941]  RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3942]  COND FALSE  !(revert)
[L4420]  RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4421]  COND FALSE  !(revert)
[L4424]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3619]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              owner_Ownable[this] := null;
[L3606]              owner_Ownable[this] := msgsender_MSG;
[L3619]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  COND FALSE  !(revert)
[L4424]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4425]  COND FALSE  !(revert)
[L4428]  CALL        call AirBasicToken_AirBasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4350]              name_AirBasicToken[this] := 1433815699;
[L4351]              symbol_AirBasicToken[this] := -1312980976;
[L4352]              decimals_AirBasicToken[this] := 18;
[L4353]              __var_12 := decimals_AirBasicToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4354]              INITIAL_SUPPLY_AirBasicToken[this] := 1282793976 * (nonlinearPow(10, decimals_AirBasicToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4355]              balanceLocked_AirBasicToken[this] := zeroRefboolArr();
[L4356]              amountRaised_AirBasicToken[this] := 0;
[L4357]              buyPrice_AirBasicToken[this] := 100000;
[L4358]              crowdsaleClosed_AirBasicToken[this] := true;
[L4359]              transferEnabled_AirBasicToken[this] := true;
[L4361]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_AirBasicToken[this];
[L4362]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L4363]              balances_BasicToken[this][msgsender_MSG] := INITIAL_SUPPLY_AirBasicToken[this];
[L4364]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L4365]              assert { :EventEmitted "Transfer_AirBasicToken" } true;
[L4428]  RET         call AirBasicToken_AirBasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4429]  COND FALSE  !(revert)
[L1453]  RET         call AirBasicToken_AirBasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1454]              assume !revert && gas >= 0;
[L7069]  RET         call AirBasicToken_AirBasicToken(this, msgsender_MSG, msgvalue_MSG);
[L7070]              assume !revert && gas >= 0;
[L7073]  CALL        call CorralChoice_AirBasicToken(this);
[L6844]              havoc msgsender_MSG;
[L6845]              havoc msgvalue_MSG;
[L6846]              havoc choice;
[L6847]              havoc __ret_0_owner;
[L6848]              havoc __ret_0_totalSupply;
[L6849]              havoc _owner_s237;
[L6850]              havoc __ret_0_balanceOf;
[L6851]              havoc _to_s841;
[L6852]              havoc _value_s841;
[L6853]              havoc __ret_0_transfer;
[L6854]              havoc _value_s258;
[L6855]              havoc _owner_s486;
[L6856]              havoc _spender_s486;
[L6857]              havoc __ret_0_allowance;
[L6858]              havoc _from_s813;
[L6859]              havoc _to_s813;
[L6860]              havoc _value_s813;
[L6861]              havoc __ret_0_transferFrom;
[L6862]              havoc _spender_s470;
[L6863]              havoc _value_s470;
[L6864]              havoc __ret_0_approve;
[L6865]              havoc _spender_s527;
[L6866]              havoc _addedValue_s527;
[L6867]              havoc __ret_0_increaseApproval;
[L6868]              havoc _spender_s587;
[L6869]              havoc _subtractedValue_s587;
[L6870]              havoc __ret_0_decreaseApproval;
[L6871]              havoc __ret_0_name;
[L6872]              havoc __ret_0_symbol;
[L6873]              havoc __ret_0_decimals;
[L6874]              havoc __ret_0_INITIAL_SUPPLY;
[L6875]              havoc arg904_s0;
[L6876]              havoc __ret_0_balanceLocked;
[L6877]              havoc __ret_0_amountRaised;
[L6878]              havoc __ret_0_buyPrice;
[L6879]              havoc __ret_0_crowdsaleClosed;
[L6880]              havoc __ret_0_transferEnabled;
[L6881]              havoc newBuyPrice_s722;
[L6882]              havoc closebuy_s734;
[L6883]              havoc _enable_s783;
[L6884]              havoc _addr_s871;
[L6885]              havoc _addr_s901;
[L6886]              havoc tmpNow;
[L6887]              havoc gas;
[L6888]              assume gas > 4000000 && gas <= 8000000;
[L6889]              tmpNow := now;
[L6890]              havoc now;
[L6891]              assume now > tmpNow;
[L6892]              assume msgsender_MSG != null;
[L6893]              assume DType[msgsender_MSG] != Ownable;
[L6894]              assume DType[msgsender_MSG] != SafeMath;
[L6895]              assume DType[msgsender_MSG] != ERC20Basic;
[L6896]              assume DType[msgsender_MSG] != BasicToken;
[L6897]              assume DType[msgsender_MSG] != BurnableToken;
[L6898]              assume DType[msgsender_MSG] != ERC20;
[L6899]              assume DType[msgsender_MSG] != StandardToken;
[L6900]              assume DType[msgsender_MSG] != AirBasicToken;
[L6901]              Alloc[msgsender_MSG] := true;
[L6902]  COND FALSE  !(choice == 24)
[L6908]  COND FALSE  !(choice == 23)
[L6914]  COND FALSE  !(choice == 22)
[L6920]  COND TRUE   choice == 21
[L6921]              gas := gas - 21000;
[L6922]  COND TRUE   gas >= 0
[L6923]              assume _value_s841 >= 0 && _value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6924]              assume msgvalue_MSG == 0;
[L6925]  CALL        call __ret_0_transfer := transfer~address~uint256_AirBasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s841 && _value_s841 <= balances_BasicToken[this][msgsender_MSG]) && _value_s841 >= 0) && _value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s841] >= 0) && balances_BasicToken[this][_to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_AirBasicToken0 := true;
[L2]                 call_transfer_AirBasicToken0 := false;
[L2]                 revert := revert_hold;
[L1835]              havoc __exception;
[L1836]              revert := false;
[L1837]  COND FALSE  !(__exception)
[L1869]  CALL        call __ret_0_ := transfer~address~uint256_AirBasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L4707]  COND FALSE  !(!transferEnabled_AirBasicToken[this])
[L4711]  COND FALSE  !(!!balanceLocked_AirBasicToken[this][msgsender_MSG])
[L4715]  COND TRUE   DType[this] == AirBasicToken
[L4716]  CALL        call __var_21 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L3859]              __var_1 := null;
[L3860]  COND FALSE  !(!(_to_s225 != null))
[L3864]  COND FALSE  !(!(_value_s225 <= balances_BasicToken[this][msgsender_MSG]))
[L3868]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s225);
[L3712]              assert b_s91 <= a_s91;
[L3713]              __ret_0_ := (a_s91 - b_s91) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3868]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s225);
[L3869]  COND FALSE  !(revert)
[L3872]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L3873]              balances_BasicToken[this][msgsender_MSG] := __var_2;
[L3874]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L3875]  CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s225], _value_s225);
[L3726]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3727]              assert c_s115 >= a_s115;
[L3728]              c_s115 := c_s115;
[L3875]  RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s225], _value_s225);
[L3876]  COND FALSE  !(revert)
[L3879]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s225];
[L3880]              balances_BasicToken[this][_to_s225] := __var_3;
[L3881]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s225];
[L3882]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L3883]              __ret_0_ := true;
[L4716]  RET         call __var_21 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L4717]  COND FALSE  !(revert)
[L4723]              __ret_0_ := __var_21;
[L1869]  RET         call __ret_0_ := transfer~address~uint256_AirBasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L1870]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && balanceLocked_AirBasicToken[this] == old(balanceLocked_AirBasicToken[this])) && amountRaised_AirBasicToken[this] == old(amountRaised_AirBasicToken[this])) && buyPrice_AirBasicToken[this] == old(buyPrice_AirBasicToken[this])) && crowdsaleClosed_AirBasicToken[this] == old(crowdsaleClosed_AirBasicToken[this])) && transferEnabled_AirBasicToken[this] == old(transferEnabled_AirBasicToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6925]  RET         call __ret_0_transfer := transfer~address~uint256_AirBasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L7073]  RET         call CorralChoice_AirBasicToken(this);

Loop:
[L7073]  CALL        call CorralChoice_AirBasicToken(this);
[L6844]              havoc msgsender_MSG;
[L6845]              havoc msgvalue_MSG;
[L6846]              havoc choice;
[L6847]              havoc __ret_0_owner;
[L6848]              havoc __ret_0_totalSupply;
[L6849]              havoc _owner_s237;
[L6850]              havoc __ret_0_balanceOf;
[L6851]              havoc _to_s841;
[L6852]              havoc _value_s841;
[L6853]              havoc __ret_0_transfer;
[L6854]              havoc _value_s258;
[L6855]              havoc _owner_s486;
[L6856]              havoc _spender_s486;
[L6857]              havoc __ret_0_allowance;
[L6858]              havoc _from_s813;
[L6859]              havoc _to_s813;
[L6860]              havoc _value_s813;
[L6861]              havoc __ret_0_transferFrom;
[L6862]              havoc _spender_s470;
[L6863]              havoc _value_s470;
[L6864]              havoc __ret_0_approve;
[L6865]              havoc _spender_s527;
[L6866]              havoc _addedValue_s527;
[L6867]              havoc __ret_0_increaseApproval;
[L6868]              havoc _spender_s587;
[L6869]              havoc _subtractedValue_s587;
[L6870]              havoc __ret_0_decreaseApproval;
[L6871]              havoc __ret_0_name;
[L6872]              havoc __ret_0_symbol;
[L6873]              havoc __ret_0_decimals;
[L6874]              havoc __ret_0_INITIAL_SUPPLY;
[L6875]              havoc arg904_s0;
[L6876]              havoc __ret_0_balanceLocked;
[L6877]              havoc __ret_0_amountRaised;
[L6878]              havoc __ret_0_buyPrice;
[L6879]              havoc __ret_0_crowdsaleClosed;
[L6880]              havoc __ret_0_transferEnabled;
[L6881]              havoc newBuyPrice_s722;
[L6882]              havoc closebuy_s734;
[L6883]              havoc _enable_s783;
[L6884]              havoc _addr_s871;
[L6885]              havoc _addr_s901;
[L6886]              havoc tmpNow;
[L6887]              havoc gas;
[L6888]              assume gas > 4000000 && gas <= 8000000;
[L6889]              tmpNow := now;
[L6890]              havoc now;
[L6891]              assume now > tmpNow;
[L6892]              assume msgsender_MSG != null;
[L6893]              assume DType[msgsender_MSG] != Ownable;
[L6894]              assume DType[msgsender_MSG] != SafeMath;
[L6895]              assume DType[msgsender_MSG] != ERC20Basic;
[L6896]              assume DType[msgsender_MSG] != BasicToken;
[L6897]              assume DType[msgsender_MSG] != BurnableToken;
[L6898]              assume DType[msgsender_MSG] != ERC20;
[L6899]              assume DType[msgsender_MSG] != StandardToken;
[L6900]              assume DType[msgsender_MSG] != AirBasicToken;
[L6901]              Alloc[msgsender_MSG] := true;
[L6902]  COND FALSE  !(choice == 24)
[L6908]  COND FALSE  !(choice == 23)
[L6914]  COND FALSE  !(choice == 22)
[L6920]  COND TRUE   choice == 21
[L6921]              gas := gas - 21000;
[L6922]  COND TRUE   gas >= 0
[L6923]              assume _value_s841 >= 0 && _value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6924]              assume msgvalue_MSG == 0;
[L6925]  CALL        call __ret_0_transfer := transfer~address~uint256_AirBasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s841 && _value_s841 <= balances_BasicToken[this][msgsender_MSG]) && _value_s841 >= 0) && _value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s841] >= 0) && balances_BasicToken[this][_to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_AirBasicToken0 := true;
[L2]                 call_transfer_AirBasicToken0 := false;
[L2]                 revert := revert_hold;
[L1835]              havoc __exception;
[L1836]              revert := false;
[L1837]  COND FALSE  !(__exception)
[L1869]  CALL        call __ret_0_ := transfer~address~uint256_AirBasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L4707]  COND FALSE  !(!transferEnabled_AirBasicToken[this])
[L4711]  COND FALSE  !(!!balanceLocked_AirBasicToken[this][msgsender_MSG])
[L4715]  COND TRUE   DType[this] == AirBasicToken
[L4716]  CALL        call __var_21 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L3859]              __var_1 := null;
[L3860]  COND FALSE  !(!(_to_s225 != null))
[L3864]  COND FALSE  !(!(_value_s225 <= balances_BasicToken[this][msgsender_MSG]))
[L3868]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s225);
[L3712]              assert b_s91 <= a_s91;
[L3713]              __ret_0_ := (a_s91 - b_s91) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3868]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s225);
[L3869]  COND FALSE  !(revert)
[L3872]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L3873]              balances_BasicToken[this][msgsender_MSG] := __var_2;
[L3874]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L3875]  CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s225], _value_s225);
[L3726]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3727]              assert c_s115 >= a_s115;
[L3728]              c_s115 := c_s115;
[L3875]  RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s225], _value_s225);
[L3876]  COND FALSE  !(revert)
[L3879]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s225];
[L3880]              balances_BasicToken[this][_to_s225] := __var_3;
[L3881]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s225];
[L3882]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L3883]              __ret_0_ := true;
[L4716]  RET         call __var_21 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L4717]  COND FALSE  !(revert)
[L4723]              __ret_0_ := __var_21;
[L1869]  RET         call __ret_0_ := transfer~address~uint256_AirBasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L1870]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && balanceLocked_AirBasicToken[this] == old(balanceLocked_AirBasicToken[this])) && amountRaised_AirBasicToken[this] == old(amountRaised_AirBasicToken[this])) && buyPrice_AirBasicToken[this] == old(buyPrice_AirBasicToken[this])) && crowdsaleClosed_AirBasicToken[this] == old(crowdsaleClosed_AirBasicToken[this])) && transferEnabled_AirBasicToken[this] == old(transferEnabled_AirBasicToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6925]  RET         call __ret_0_transfer := transfer~address~uint256_AirBasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L7073]  RET         call CorralChoice_AirBasicToken(this);

[2020-11-24 23:41:15,130 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 23:41:15,130 INFO  L82        PathProgramCache]: Analyzing trace with hash -1154769065, now seen corresponding path program 1 times
[2020-11-24 23:41:15,131 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 23:41:15,175 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 23:41:16,111 INFO  L134       CoverageAnalysis]: Checked inductivity of 345 backedges. 16 proven. 0 refuted. 0 times theorem prover too weak. 329 trivial. 0 not checked.
[2020-11-24 23:41:16,112 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 23:41:16,112 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [35] imperfect sequences [] total 35
[2020-11-24 23:41:16,112 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 23:41:16,113 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 36 interpolants.
[2020-11-24 23:41:16,113 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=91, Invalid=1169, Unknown=0, NotChecked=0, Total=1260
[2020-11-24 23:41:16,113 INFO  L87              Difference]: Start difference. First operand 8620 states and 10035 transitions. cyclomatic complexity: 1437 Second operand 36 states.
[2020-11-24 23:41:27,388 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 23:41:27,388 INFO  L93              Difference]: Finished difference Result 8818 states and 10804 transitions.
[2020-11-24 23:41:27,388 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 37 states. 
[2020-11-24 23:41:27,388 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8818 states and 10804 transitions.
[2020-11-24 23:41:27,412 INFO  L131   ngComponentsAnalysis]: Automaton has 11 accepting balls. 78
[2020-11-24 23:41:27,441 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8818 states to 8818 states and 10804 transitions.
[2020-11-24 23:41:27,442 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2530
[2020-11-24 23:41:27,443 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2530
[2020-11-24 23:41:27,443 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8818 states and 10804 transitions.
[2020-11-24 23:41:27,450 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 23:41:27,450 INFO  L728         BuchiCegarLoop]: Abstraction has 8818 states and 10804 transitions.
[2020-11-24 23:41:27,454 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8818 states and 10804 transitions.
[2020-11-24 23:41:27,512 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8818 to 8760.
[2020-11-24 23:41:27,513 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8760 states.
[2020-11-24 23:41:27,528 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8760 states to 8760 states and 10527 transitions.
[2020-11-24 23:41:27,529 INFO  L751         BuchiCegarLoop]: Abstraction has 8760 states and 10527 transitions.
[2020-11-24 23:41:27,529 INFO  L631         BuchiCegarLoop]: Abstraction has 8760 states and 10527 transitions.
[2020-11-24 23:41:27,529 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-24 23:41:27,529 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8760 states and 10527 transitions.
[2020-11-24 23:41:27,539 INFO  L131   ngComponentsAnalysis]: Automaton has 9 accepting balls. 62
[2020-11-24 23:41:27,539 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 23:41:27,539 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 23:41:27,541 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 23:41:27,541 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_AirBasicToken0 := false;
[L2]                 call_transfer_AirBasicToken0 := false;
[L2]     CALL        call main();
[L7063]              assume null == 0;
[L7064]  CALL        call this := FreshRefGenerator__success();
[L3583]              havoc newRef;
[L3584]              assume Alloc[newRef] == false;
[L3585]              Alloc[newRef] := true;
[L3586]              assume newRef != null;
[L7064]  RET         call this := FreshRefGenerator__success();
[L7065]              assume now >= 0;
[L7066]              assume DType[this] == AirBasicToken;
[L7067]              assume msgvalue_MSG == 0;
[L7068]              gas := gas - 53000;
[L7069]  CALL        call AirBasicToken_AirBasicToken(this, msgsender_MSG, msgvalue_MSG);
[L1419]              havoc __exception;
[L1420]              revert := false;
[L1421]  COND FALSE  !(__exception)
[L1453]  CALL        call AirBasicToken_AirBasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4404]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L4404]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4405]  COND FALSE  !(revert)
[L4408]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4057]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L4057]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4058]  COND FALSE  !(revert)
[L4061]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4038]              assume msgsender_MSG != null;
[L4039]              Balance[this] := 0;
[L4061]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4062]  COND FALSE  !(revert)
[L4408]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4409]  COND FALSE  !(revert)
[L4412]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L3800]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3801]  COND FALSE  !(revert)
[L3804]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3778]              assume msgsender_MSG != null;
[L3779]              Balance[this] := 0;
[L3780]              balances_BasicToken[this] := zeroRefintArr();
[L3781]              sum_balances0[this] := 0;
[L3782]              totalSupply__BasicToken[this] := 0;
[L3804]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3805]  COND FALSE  !(revert)
[L4412]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4413]  COND FALSE  !(revert)
[L4416]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L4109]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4110]  COND FALSE  !(revert)
[L4113]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4057]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L4057]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4058]  COND FALSE  !(revert)
[L4061]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4038]              assume msgsender_MSG != null;
[L4039]              Balance[this] := 0;
[L4061]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4062]  COND FALSE  !(revert)
[L4113]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4114]  COND FALSE  !(revert)
[L4117]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L3800]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3801]  COND FALSE  !(revert)
[L3804]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3778]              assume msgsender_MSG != null;
[L3779]              Balance[this] := 0;
[L3780]              balances_BasicToken[this] := zeroRefintArr();
[L3781]              sum_balances0[this] := 0;
[L3782]              totalSupply__BasicToken[this] := 0;
[L3804]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3805]  COND FALSE  !(revert)
[L4117]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4118]  COND FALSE  !(revert)
[L4121]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4080]              assume msgsender_MSG != null;
[L4081]              Balance[this] := 0;
[L4082]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4083]              sum_allowed1[this] := 0;
[L4121]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]  COND FALSE  !(revert)
[L4416]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4417]  COND FALSE  !(revert)
[L4420]  CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3933]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L3933]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]  COND FALSE  !(revert)
[L3937]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L3800]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3801]  COND FALSE  !(revert)
[L3804]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3778]              assume msgsender_MSG != null;
[L3779]              Balance[this] := 0;
[L3780]              balances_BasicToken[this] := zeroRefintArr();
[L3781]              sum_balances0[this] := 0;
[L3782]              totalSupply__BasicToken[this] := 0;
[L3804]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3805]  COND FALSE  !(revert)
[L3937]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3938]  COND FALSE  !(revert)
[L3941]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3910]              assume msgsender_MSG != null;
[L3911]              Balance[this] := 0;
[L3941]  RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3942]  COND FALSE  !(revert)
[L4420]  RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4421]  COND FALSE  !(revert)
[L4424]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3619]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              owner_Ownable[this] := null;
[L3606]              owner_Ownable[this] := msgsender_MSG;
[L3619]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  COND FALSE  !(revert)
[L4424]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4425]  COND FALSE  !(revert)
[L4428]  CALL        call AirBasicToken_AirBasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4350]              name_AirBasicToken[this] := 1433815699;
[L4351]              symbol_AirBasicToken[this] := -1312980976;
[L4352]              decimals_AirBasicToken[this] := 18;
[L4353]              __var_12 := decimals_AirBasicToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4354]              INITIAL_SUPPLY_AirBasicToken[this] := 1282793976 * (nonlinearPow(10, decimals_AirBasicToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4355]              balanceLocked_AirBasicToken[this] := zeroRefboolArr();
[L4356]              amountRaised_AirBasicToken[this] := 0;
[L4357]              buyPrice_AirBasicToken[this] := 100000;
[L4358]              crowdsaleClosed_AirBasicToken[this] := true;
[L4359]              transferEnabled_AirBasicToken[this] := true;
[L4361]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_AirBasicToken[this];
[L4362]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L4363]              balances_BasicToken[this][msgsender_MSG] := INITIAL_SUPPLY_AirBasicToken[this];
[L4364]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L4365]              assert { :EventEmitted "Transfer_AirBasicToken" } true;
[L4428]  RET         call AirBasicToken_AirBasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4429]  COND FALSE  !(revert)
[L1453]  RET         call AirBasicToken_AirBasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1454]              assume !revert && gas >= 0;
[L7069]  RET         call AirBasicToken_AirBasicToken(this, msgsender_MSG, msgvalue_MSG);
[L7070]              assume !revert && gas >= 0;
[L7073]  CALL        call CorralChoice_AirBasicToken(this);
[L6844]              havoc msgsender_MSG;
[L6845]              havoc msgvalue_MSG;
[L6846]              havoc choice;
[L6847]              havoc __ret_0_owner;
[L6848]              havoc __ret_0_totalSupply;
[L6849]              havoc _owner_s237;
[L6850]              havoc __ret_0_balanceOf;
[L6851]              havoc _to_s841;
[L6852]              havoc _value_s841;
[L6853]              havoc __ret_0_transfer;
[L6854]              havoc _value_s258;
[L6855]              havoc _owner_s486;
[L6856]              havoc _spender_s486;
[L6857]              havoc __ret_0_allowance;
[L6858]              havoc _from_s813;
[L6859]              havoc _to_s813;
[L6860]              havoc _value_s813;
[L6861]              havoc __ret_0_transferFrom;
[L6862]              havoc _spender_s470;
[L6863]              havoc _value_s470;
[L6864]              havoc __ret_0_approve;
[L6865]              havoc _spender_s527;
[L6866]              havoc _addedValue_s527;
[L6867]              havoc __ret_0_increaseApproval;
[L6868]              havoc _spender_s587;
[L6869]              havoc _subtractedValue_s587;
[L6870]              havoc __ret_0_decreaseApproval;
[L6871]              havoc __ret_0_name;
[L6872]              havoc __ret_0_symbol;
[L6873]              havoc __ret_0_decimals;
[L6874]              havoc __ret_0_INITIAL_SUPPLY;
[L6875]              havoc arg904_s0;
[L6876]              havoc __ret_0_balanceLocked;
[L6877]              havoc __ret_0_amountRaised;
[L6878]              havoc __ret_0_buyPrice;
[L6879]              havoc __ret_0_crowdsaleClosed;
[L6880]              havoc __ret_0_transferEnabled;
[L6881]              havoc newBuyPrice_s722;
[L6882]              havoc closebuy_s734;
[L6883]              havoc _enable_s783;
[L6884]              havoc _addr_s871;
[L6885]              havoc _addr_s901;
[L6886]              havoc tmpNow;
[L6887]              havoc gas;
[L6888]              assume gas > 4000000 && gas <= 8000000;
[L6889]              tmpNow := now;
[L6890]              havoc now;
[L6891]              assume now > tmpNow;
[L6892]              assume msgsender_MSG != null;
[L6893]              assume DType[msgsender_MSG] != Ownable;
[L6894]              assume DType[msgsender_MSG] != SafeMath;
[L6895]              assume DType[msgsender_MSG] != ERC20Basic;
[L6896]              assume DType[msgsender_MSG] != BasicToken;
[L6897]              assume DType[msgsender_MSG] != BurnableToken;
[L6898]              assume DType[msgsender_MSG] != ERC20;
[L6899]              assume DType[msgsender_MSG] != StandardToken;
[L6900]              assume DType[msgsender_MSG] != AirBasicToken;
[L6901]              Alloc[msgsender_MSG] := true;
[L6902]  COND FALSE  !(choice == 24)
[L6908]  COND FALSE  !(choice == 23)
[L6914]  COND FALSE  !(choice == 22)
[L6920]  COND TRUE   choice == 21
[L6921]              gas := gas - 21000;
[L6922]  COND TRUE   gas >= 0
[L6923]              assume _value_s841 >= 0 && _value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6924]              assume msgvalue_MSG == 0;
[L6925]  CALL        call __ret_0_transfer := transfer~address~uint256_AirBasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s841 && _value_s841 <= balances_BasicToken[this][msgsender_MSG]) && _value_s841 >= 0) && _value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s841] >= 0) && balances_BasicToken[this][_to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_AirBasicToken0 := true;
[L2]                 call_transfer_AirBasicToken0 := false;
[L2]                 revert := revert_hold;
[L1835]              havoc __exception;
[L1836]              revert := false;
[L1837]  COND TRUE   __exception
[L1838]              __tmp__Balance := Balance;
[L1839]              __tmp__DType := DType;
[L1840]              __tmp__Alloc := Alloc;
[L1841]              __tmp__balance_ADDR := balance_ADDR;
[L1842]              __tmp__M_Ref_int := M_Ref_int;
[L1843]              __tmp__sum_balances0 := sum_balances0;
[L1844]              __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L1845]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1846]              __tmp__sum_allowed1 := sum_allowed1;
[L1847]              __tmp__M_Ref_bool := M_Ref_bool;
[L1848]              __tmp__sum_balanceLocked2 := sum_balanceLocked2;
[L1849]              __tmp__M_int_Ref := M_int_Ref;
[L1850]              __tmp__sum := sum;
[L1851]              __tmp__Length := Length;
[L1852]              __tmp__now := now;
[L1853]              __tmp__owner_Ownable := owner_Ownable;
[L1854]              __tmp__balances_BasicToken := balances_BasicToken;
[L1855]              __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L1856]              __tmp__allowed_StandardToken := allowed_StandardToken;
[L1857]              __tmp__name_AirBasicToken := name_AirBasicToken;
[L1858]              __tmp__symbol_AirBasicToken := symbol_AirBasicToken;
[L1859]              __tmp__decimals_AirBasicToken := decimals_AirBasicToken;
[L1860]              __tmp__INITIAL_SUPPLY_AirBasicToken := INITIAL_SUPPLY_AirBasicToken;
[L1861]              __tmp__balanceLocked_AirBasicToken := balanceLocked_AirBasicToken;
[L1862]              __tmp__amountRaised_AirBasicToken := amountRaised_AirBasicToken;
[L1863]              __tmp__buyPrice_AirBasicToken := buyPrice_AirBasicToken;
[L1864]              __tmp__crowdsaleClosed_AirBasicToken := crowdsaleClosed_AirBasicToken;
[L1865]              __tmp__transferEnabled_AirBasicToken := transferEnabled_AirBasicToken;
[L1866]  CALL        call __ret_0_ := transfer~address~uint256_AirBasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L4683]  COND FALSE  !(!__tmp__transferEnabled_AirBasicToken[this])
[L4687]  COND FALSE  !(!!__tmp__balanceLocked_AirBasicToken[this][msgsender_MSG])
[L4691]  COND TRUE   __tmp__DType[this] == AirBasicToken
[L4692]  CALL        call __var_21 := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L3827]              __var_1 := null;
[L3828]  COND FALSE  !(!(_to_s225 != null))
[L3832]  COND FALSE  !(!(_value_s225 <= __tmp__balances_BasicToken[this][msgsender_MSG]))
[L3836]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][msgsender_MSG], _value_s225);
[L3706]              __ret_0_ := (a_s91 - b_s91) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3836]  RET         call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][msgsender_MSG], _value_s225);
[L3837]  COND FALSE  !(revert)
[L3840]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_BasicToken[this][msgsender_MSG];
[L3841]              __tmp__balances_BasicToken[this][msgsender_MSG] := __var_2;
[L3842]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_BasicToken[this][msgsender_MSG];
[L3843]  CALL        call __var_3 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][_to_s225], _value_s225);
[L3719]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3720]              c_s115 := c_s115;
[L3843]  RET         call __var_3 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][_to_s225], _value_s225);
[L3844]  COND FALSE  !(revert)
[L3847]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_BasicToken[this][_to_s225];
[L3848]              __tmp__balances_BasicToken[this][_to_s225] := __var_3;
[L3849]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_BasicToken[this][_to_s225];
[L3850]              __ret_0_ := true;
[L4692]  RET         call __var_21 := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L4693]  COND FALSE  !(revert)
[L4699]              __ret_0_ := __var_21;
[L1866]  RET         call __ret_0_ := transfer~address~uint256_AirBasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L1867]              assume revert || gas < 0;
[L6925]  RET         call __ret_0_transfer := transfer~address~uint256_AirBasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L7073]  RET         call CorralChoice_AirBasicToken(this);

Loop:
[L7073]  CALL        call CorralChoice_AirBasicToken(this);
[L6844]              havoc msgsender_MSG;
[L6845]              havoc msgvalue_MSG;
[L6846]              havoc choice;
[L6847]              havoc __ret_0_owner;
[L6848]              havoc __ret_0_totalSupply;
[L6849]              havoc _owner_s237;
[L6850]              havoc __ret_0_balanceOf;
[L6851]              havoc _to_s841;
[L6852]              havoc _value_s841;
[L6853]              havoc __ret_0_transfer;
[L6854]              havoc _value_s258;
[L6855]              havoc _owner_s486;
[L6856]              havoc _spender_s486;
[L6857]              havoc __ret_0_allowance;
[L6858]              havoc _from_s813;
[L6859]              havoc _to_s813;
[L6860]              havoc _value_s813;
[L6861]              havoc __ret_0_transferFrom;
[L6862]              havoc _spender_s470;
[L6863]              havoc _value_s470;
[L6864]              havoc __ret_0_approve;
[L6865]              havoc _spender_s527;
[L6866]              havoc _addedValue_s527;
[L6867]              havoc __ret_0_increaseApproval;
[L6868]              havoc _spender_s587;
[L6869]              havoc _subtractedValue_s587;
[L6870]              havoc __ret_0_decreaseApproval;
[L6871]              havoc __ret_0_name;
[L6872]              havoc __ret_0_symbol;
[L6873]              havoc __ret_0_decimals;
[L6874]              havoc __ret_0_INITIAL_SUPPLY;
[L6875]              havoc arg904_s0;
[L6876]              havoc __ret_0_balanceLocked;
[L6877]              havoc __ret_0_amountRaised;
[L6878]              havoc __ret_0_buyPrice;
[L6879]              havoc __ret_0_crowdsaleClosed;
[L6880]              havoc __ret_0_transferEnabled;
[L6881]              havoc newBuyPrice_s722;
[L6882]              havoc closebuy_s734;
[L6883]              havoc _enable_s783;
[L6884]              havoc _addr_s871;
[L6885]              havoc _addr_s901;
[L6886]              havoc tmpNow;
[L6887]              havoc gas;
[L6888]              assume gas > 4000000 && gas <= 8000000;
[L6889]              tmpNow := now;
[L6890]              havoc now;
[L6891]              assume now > tmpNow;
[L6892]              assume msgsender_MSG != null;
[L6893]              assume DType[msgsender_MSG] != Ownable;
[L6894]              assume DType[msgsender_MSG] != SafeMath;
[L6895]              assume DType[msgsender_MSG] != ERC20Basic;
[L6896]              assume DType[msgsender_MSG] != BasicToken;
[L6897]              assume DType[msgsender_MSG] != BurnableToken;
[L6898]              assume DType[msgsender_MSG] != ERC20;
[L6899]              assume DType[msgsender_MSG] != StandardToken;
[L6900]              assume DType[msgsender_MSG] != AirBasicToken;
[L6901]              Alloc[msgsender_MSG] := true;
[L6902]  COND FALSE  !(choice == 24)
[L6908]  COND FALSE  !(choice == 23)
[L6914]  COND FALSE  !(choice == 22)
[L6920]  COND TRUE   choice == 21
[L6921]              gas := gas - 21000;
[L6922]  COND TRUE   gas >= 0
[L6923]              assume _value_s841 >= 0 && _value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6924]              assume msgvalue_MSG == 0;
[L6925]  CALL        call __ret_0_transfer := transfer~address~uint256_AirBasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s841 && _value_s841 <= balances_BasicToken[this][msgsender_MSG]) && _value_s841 >= 0) && _value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s841] >= 0) && balances_BasicToken[this][_to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_AirBasicToken0 := true;
[L2]                 call_transfer_AirBasicToken0 := false;
[L2]                 revert := revert_hold;
[L1835]              havoc __exception;
[L1836]              revert := false;
[L1837]  COND TRUE   __exception
[L1838]              __tmp__Balance := Balance;
[L1839]              __tmp__DType := DType;
[L1840]              __tmp__Alloc := Alloc;
[L1841]              __tmp__balance_ADDR := balance_ADDR;
[L1842]              __tmp__M_Ref_int := M_Ref_int;
[L1843]              __tmp__sum_balances0 := sum_balances0;
[L1844]              __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L1845]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1846]              __tmp__sum_allowed1 := sum_allowed1;
[L1847]              __tmp__M_Ref_bool := M_Ref_bool;
[L1848]              __tmp__sum_balanceLocked2 := sum_balanceLocked2;
[L1849]              __tmp__M_int_Ref := M_int_Ref;
[L1850]              __tmp__sum := sum;
[L1851]              __tmp__Length := Length;
[L1852]              __tmp__now := now;
[L1853]              __tmp__owner_Ownable := owner_Ownable;
[L1854]              __tmp__balances_BasicToken := balances_BasicToken;
[L1855]              __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L1856]              __tmp__allowed_StandardToken := allowed_StandardToken;
[L1857]              __tmp__name_AirBasicToken := name_AirBasicToken;
[L1858]              __tmp__symbol_AirBasicToken := symbol_AirBasicToken;
[L1859]              __tmp__decimals_AirBasicToken := decimals_AirBasicToken;
[L1860]              __tmp__INITIAL_SUPPLY_AirBasicToken := INITIAL_SUPPLY_AirBasicToken;
[L1861]              __tmp__balanceLocked_AirBasicToken := balanceLocked_AirBasicToken;
[L1862]              __tmp__amountRaised_AirBasicToken := amountRaised_AirBasicToken;
[L1863]              __tmp__buyPrice_AirBasicToken := buyPrice_AirBasicToken;
[L1864]              __tmp__crowdsaleClosed_AirBasicToken := crowdsaleClosed_AirBasicToken;
[L1865]              __tmp__transferEnabled_AirBasicToken := transferEnabled_AirBasicToken;
[L1866]  CALL        call __ret_0_ := transfer~address~uint256_AirBasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L4683]  COND FALSE  !(!__tmp__transferEnabled_AirBasicToken[this])
[L4687]  COND FALSE  !(!!__tmp__balanceLocked_AirBasicToken[this][msgsender_MSG])
[L4691]  COND TRUE   __tmp__DType[this] == AirBasicToken
[L4692]  CALL        call __var_21 := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L3827]              __var_1 := null;
[L3828]  COND FALSE  !(!(_to_s225 != null))
[L3832]  COND FALSE  !(!(_value_s225 <= __tmp__balances_BasicToken[this][msgsender_MSG]))
[L3836]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][msgsender_MSG], _value_s225);
[L3706]              __ret_0_ := (a_s91 - b_s91) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3836]  RET         call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][msgsender_MSG], _value_s225);
[L3837]  COND FALSE  !(revert)
[L3840]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_BasicToken[this][msgsender_MSG];
[L3841]              __tmp__balances_BasicToken[this][msgsender_MSG] := __var_2;
[L3842]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_BasicToken[this][msgsender_MSG];
[L3843]  CALL        call __var_3 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][_to_s225], _value_s225);
[L3719]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3720]              c_s115 := c_s115;
[L3843]  RET         call __var_3 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][_to_s225], _value_s225);
[L3844]  COND FALSE  !(revert)
[L3847]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_BasicToken[this][_to_s225];
[L3848]              __tmp__balances_BasicToken[this][_to_s225] := __var_3;
[L3849]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_BasicToken[this][_to_s225];
[L3850]              __ret_0_ := true;
[L4692]  RET         call __var_21 := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L4693]  COND FALSE  !(revert)
[L4699]              __ret_0_ := __var_21;
[L1866]  RET         call __ret_0_ := transfer~address~uint256_AirBasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L1867]              assume revert || gas < 0;
[L6925]  RET         call __ret_0_transfer := transfer~address~uint256_AirBasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L7073]  RET         call CorralChoice_AirBasicToken(this);

[2020-11-24 23:41:27,545 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 23:41:27,545 INFO  L82        PathProgramCache]: Analyzing trace with hash 1580815095, now seen corresponding path program 1 times
[2020-11-24 23:41:27,546 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 23:41:27,557 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 23:41:27,612 INFO  L134       CoverageAnalysis]: Checked inductivity of 345 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 345 trivial. 0 not checked.
[2020-11-24 23:41:27,612 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 23:41:27,612 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-24 23:41:27,612 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 23:41:27,613 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-24 23:41:27,613 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-24 23:41:27,613 INFO  L87              Difference]: Start difference. First operand 8760 states and 10527 transitions. cyclomatic complexity: 1798 Second operand 5 states.
[2020-11-24 23:41:28,038 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 23:41:28,038 INFO  L93              Difference]: Finished difference Result 11659 states and 14718 transitions.
[2020-11-24 23:41:28,038 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 23:41:28,038 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11659 states and 14718 transitions.
[2020-11-24 23:41:28,077 INFO  L131   ngComponentsAnalysis]: Automaton has 10 accepting balls. 140
[2020-11-24 23:41:28,154 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11659 states to 10036 states and 12969 transitions.
[2020-11-24 23:41:28,154 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2417
[2020-11-24 23:41:28,155 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2721
[2020-11-24 23:41:28,156 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10036 states and 12969 transitions.
[2020-11-24 23:41:28,163 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 23:41:28,163 INFO  L728         BuchiCegarLoop]: Abstraction has 10036 states and 12969 transitions.
[2020-11-24 23:41:28,166 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10036 states and 12969 transitions.
[2020-11-24 23:41:28,237 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10036 to 7734.
[2020-11-24 23:41:28,237 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7734 states.
[2020-11-24 23:41:28,248 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7734 states to 7734 states and 9295 transitions.
[2020-11-24 23:41:28,248 INFO  L751         BuchiCegarLoop]: Abstraction has 7734 states and 9295 transitions.
[2020-11-24 23:41:28,248 INFO  L631         BuchiCegarLoop]: Abstraction has 7734 states and 9295 transitions.
[2020-11-24 23:41:28,248 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-24 23:41:28,248 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7734 states and 9295 transitions.
[2020-11-24 23:41:28,257 INFO  L131   ngComponentsAnalysis]: Automaton has 10 accepting balls. 56
[2020-11-24 23:41:28,257 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 23:41:28,257 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 23:41:28,258 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 23:41:28,258 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_AirBasicToken0 := false;
[L2]                 call_transfer_AirBasicToken0 := false;
[L2]     CALL        call main();
[L7063]              assume null == 0;
[L7064]  CALL        call this := FreshRefGenerator__success();
[L3583]              havoc newRef;
[L3584]              assume Alloc[newRef] == false;
[L3585]              Alloc[newRef] := true;
[L3586]              assume newRef != null;
[L7064]  RET         call this := FreshRefGenerator__success();
[L7065]              assume now >= 0;
[L7066]              assume DType[this] == AirBasicToken;
[L7067]              assume msgvalue_MSG == 0;
[L7068]              gas := gas - 53000;
[L7069]  CALL        call AirBasicToken_AirBasicToken(this, msgsender_MSG, msgvalue_MSG);
[L1419]              havoc __exception;
[L1420]              revert := false;
[L1421]  COND FALSE  !(__exception)
[L1453]  CALL        call AirBasicToken_AirBasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4404]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L4404]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4405]  COND FALSE  !(revert)
[L4408]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4057]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L4057]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4058]  COND FALSE  !(revert)
[L4061]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4038]              assume msgsender_MSG != null;
[L4039]              Balance[this] := 0;
[L4061]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4062]  COND FALSE  !(revert)
[L4408]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4409]  COND FALSE  !(revert)
[L4412]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L3800]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3801]  COND FALSE  !(revert)
[L3804]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3778]              assume msgsender_MSG != null;
[L3779]              Balance[this] := 0;
[L3780]              balances_BasicToken[this] := zeroRefintArr();
[L3781]              sum_balances0[this] := 0;
[L3782]              totalSupply__BasicToken[this] := 0;
[L3804]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3805]  COND FALSE  !(revert)
[L4412]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4413]  COND FALSE  !(revert)
[L4416]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L4109]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4110]  COND FALSE  !(revert)
[L4113]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4057]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L4057]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4058]  COND FALSE  !(revert)
[L4061]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4038]              assume msgsender_MSG != null;
[L4039]              Balance[this] := 0;
[L4061]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4062]  COND FALSE  !(revert)
[L4113]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4114]  COND FALSE  !(revert)
[L4117]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L3800]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3801]  COND FALSE  !(revert)
[L3804]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3778]              assume msgsender_MSG != null;
[L3779]              Balance[this] := 0;
[L3780]              balances_BasicToken[this] := zeroRefintArr();
[L3781]              sum_balances0[this] := 0;
[L3782]              totalSupply__BasicToken[this] := 0;
[L3804]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3805]  COND FALSE  !(revert)
[L4117]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4118]  COND FALSE  !(revert)
[L4121]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4080]              assume msgsender_MSG != null;
[L4081]              Balance[this] := 0;
[L4082]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4083]              sum_allowed1[this] := 0;
[L4121]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]  COND FALSE  !(revert)
[L4416]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4417]  COND FALSE  !(revert)
[L4420]  CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3933]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L3933]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]  COND FALSE  !(revert)
[L3937]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L3800]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3801]  COND FALSE  !(revert)
[L3804]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3778]              assume msgsender_MSG != null;
[L3779]              Balance[this] := 0;
[L3780]              balances_BasicToken[this] := zeroRefintArr();
[L3781]              sum_balances0[this] := 0;
[L3782]              totalSupply__BasicToken[this] := 0;
[L3804]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3805]  COND FALSE  !(revert)
[L3937]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3938]  COND FALSE  !(revert)
[L3941]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3910]              assume msgsender_MSG != null;
[L3911]              Balance[this] := 0;
[L3941]  RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3942]  COND FALSE  !(revert)
[L4420]  RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4421]  COND FALSE  !(revert)
[L4424]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3619]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              owner_Ownable[this] := null;
[L3606]              owner_Ownable[this] := msgsender_MSG;
[L3619]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  COND FALSE  !(revert)
[L4424]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4425]  COND FALSE  !(revert)
[L4428]  CALL        call AirBasicToken_AirBasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4350]              name_AirBasicToken[this] := 1433815699;
[L4351]              symbol_AirBasicToken[this] := -1312980976;
[L4352]              decimals_AirBasicToken[this] := 18;
[L4353]              __var_12 := decimals_AirBasicToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4354]              INITIAL_SUPPLY_AirBasicToken[this] := 1282793976 * (nonlinearPow(10, decimals_AirBasicToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4355]              balanceLocked_AirBasicToken[this] := zeroRefboolArr();
[L4356]              amountRaised_AirBasicToken[this] := 0;
[L4357]              buyPrice_AirBasicToken[this] := 100000;
[L4358]              crowdsaleClosed_AirBasicToken[this] := true;
[L4359]              transferEnabled_AirBasicToken[this] := true;
[L4361]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_AirBasicToken[this];
[L4362]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L4363]              balances_BasicToken[this][msgsender_MSG] := INITIAL_SUPPLY_AirBasicToken[this];
[L4364]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L4365]              assert { :EventEmitted "Transfer_AirBasicToken" } true;
[L4428]  RET         call AirBasicToken_AirBasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4429]  COND FALSE  !(revert)
[L1453]  RET         call AirBasicToken_AirBasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1454]              assume !revert && gas >= 0;
[L7069]  RET         call AirBasicToken_AirBasicToken(this, msgsender_MSG, msgvalue_MSG);
[L7070]              assume !revert && gas >= 0;
[L7073]  CALL        call CorralChoice_AirBasicToken(this);
[L6844]              havoc msgsender_MSG;
[L6845]              havoc msgvalue_MSG;
[L6846]              havoc choice;
[L6847]              havoc __ret_0_owner;
[L6848]              havoc __ret_0_totalSupply;
[L6849]              havoc _owner_s237;
[L6850]              havoc __ret_0_balanceOf;
[L6851]              havoc _to_s841;
[L6852]              havoc _value_s841;
[L6853]              havoc __ret_0_transfer;
[L6854]              havoc _value_s258;
[L6855]              havoc _owner_s486;
[L6856]              havoc _spender_s486;
[L6857]              havoc __ret_0_allowance;
[L6858]              havoc _from_s813;
[L6859]              havoc _to_s813;
[L6860]              havoc _value_s813;
[L6861]              havoc __ret_0_transferFrom;
[L6862]              havoc _spender_s470;
[L6863]              havoc _value_s470;
[L6864]              havoc __ret_0_approve;
[L6865]              havoc _spender_s527;
[L6866]              havoc _addedValue_s527;
[L6867]              havoc __ret_0_increaseApproval;
[L6868]              havoc _spender_s587;
[L6869]              havoc _subtractedValue_s587;
[L6870]              havoc __ret_0_decreaseApproval;
[L6871]              havoc __ret_0_name;
[L6872]              havoc __ret_0_symbol;
[L6873]              havoc __ret_0_decimals;
[L6874]              havoc __ret_0_INITIAL_SUPPLY;
[L6875]              havoc arg904_s0;
[L6876]              havoc __ret_0_balanceLocked;
[L6877]              havoc __ret_0_amountRaised;
[L6878]              havoc __ret_0_buyPrice;
[L6879]              havoc __ret_0_crowdsaleClosed;
[L6880]              havoc __ret_0_transferEnabled;
[L6881]              havoc newBuyPrice_s722;
[L6882]              havoc closebuy_s734;
[L6883]              havoc _enable_s783;
[L6884]              havoc _addr_s871;
[L6885]              havoc _addr_s901;
[L6886]              havoc tmpNow;
[L6887]              havoc gas;
[L6888]              assume gas > 4000000 && gas <= 8000000;
[L6889]              tmpNow := now;
[L6890]              havoc now;
[L6891]              assume now > tmpNow;
[L6892]              assume msgsender_MSG != null;
[L6893]              assume DType[msgsender_MSG] != Ownable;
[L6894]              assume DType[msgsender_MSG] != SafeMath;
[L6895]              assume DType[msgsender_MSG] != ERC20Basic;
[L6896]              assume DType[msgsender_MSG] != BasicToken;
[L6897]              assume DType[msgsender_MSG] != BurnableToken;
[L6898]              assume DType[msgsender_MSG] != ERC20;
[L6899]              assume DType[msgsender_MSG] != StandardToken;
[L6900]              assume DType[msgsender_MSG] != AirBasicToken;
[L6901]              Alloc[msgsender_MSG] := true;
[L6902]  COND FALSE  !(choice == 24)
[L6908]  COND FALSE  !(choice == 23)
[L6914]  COND FALSE  !(choice == 22)
[L6920]  COND FALSE  !(choice == 21)
[L6927]  COND TRUE   choice == 20
[L6928]              gas := gas - 21000;
[L6929]  COND TRUE   gas >= 0
[L6930]              assume _value_s258 >= 0 && _value_s258 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6931]              assume msgvalue_MSG == 0;
[L6932]  CALL        call burn~uint256_BurnableToken(this, msgsender_MSG, msgvalue_MSG, _value_s258);
[L772]               havoc __exception;
[L773]               revert := false;
[L774]   COND FALSE  !(__exception)
[L806]   CALL        call burn~uint256_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG, _value_s258);
[L3966]  COND TRUE   DType[this] == AirBasicToken
[L3967]  CALL        call _burn~address~uint256_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s258);
[L4007]  COND FALSE  !(!(_value_s305 <= balances_BasicToken[this][_who_s305]))
[L4011]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_who_s305], _value_s305);
[L3712]              assert b_s91 <= a_s91;
[L3713]              __ret_0_ := (a_s91 - b_s91) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4011]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_who_s305], _value_s305);
[L4012]  COND FALSE  !(revert)
[L4015]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_who_s305];
[L4016]              balances_BasicToken[this][_who_s305] := __var_4;
[L4017]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_who_s305];
[L4018]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _value_s305);
[L3712]              assert b_s91 <= a_s91;
[L3713]              __ret_0_ := (a_s91 - b_s91) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4018]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _value_s305);
[L4019]  COND FALSE  !(revert)
[L4022]              totalSupply__BasicToken[this] := __var_5;
[L4023]              assert { :EventEmitted "Burn_BurnableToken" } true;
[L4024]              assert { :EventEmitted "Transfer_BurnableToken" } true;
[L3967]  RET         call _burn~address~uint256_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s258);
[L3968]  COND FALSE  !(revert)
[L806]   RET         call burn~uint256_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG, _value_s258);
[L807]               assume !revert && gas >= 0;
[L6932]  RET         call burn~uint256_BurnableToken(this, msgsender_MSG, msgvalue_MSG, _value_s258);
[L7073]  RET         call CorralChoice_AirBasicToken(this);
[L7073]  CALL        call CorralChoice_AirBasicToken(this);
[L6844]              havoc msgsender_MSG;
[L6845]              havoc msgvalue_MSG;
[L6846]              havoc choice;
[L6847]              havoc __ret_0_owner;
[L6848]              havoc __ret_0_totalSupply;
[L6849]              havoc _owner_s237;
[L6850]              havoc __ret_0_balanceOf;
[L6851]              havoc _to_s841;
[L6852]              havoc _value_s841;
[L6853]              havoc __ret_0_transfer;
[L6854]              havoc _value_s258;
[L6855]              havoc _owner_s486;
[L6856]              havoc _spender_s486;
[L6857]              havoc __ret_0_allowance;
[L6858]              havoc _from_s813;
[L6859]              havoc _to_s813;
[L6860]              havoc _value_s813;
[L6861]              havoc __ret_0_transferFrom;
[L6862]              havoc _spender_s470;
[L6863]              havoc _value_s470;
[L6864]              havoc __ret_0_approve;
[L6865]              havoc _spender_s527;
[L6866]              havoc _addedValue_s527;
[L6867]              havoc __ret_0_increaseApproval;
[L6868]              havoc _spender_s587;
[L6869]              havoc _subtractedValue_s587;
[L6870]              havoc __ret_0_decreaseApproval;
[L6871]              havoc __ret_0_name;
[L6872]              havoc __ret_0_symbol;
[L6873]              havoc __ret_0_decimals;
[L6874]              havoc __ret_0_INITIAL_SUPPLY;
[L6875]              havoc arg904_s0;
[L6876]              havoc __ret_0_balanceLocked;
[L6877]              havoc __ret_0_amountRaised;
[L6878]              havoc __ret_0_buyPrice;
[L6879]              havoc __ret_0_crowdsaleClosed;
[L6880]              havoc __ret_0_transferEnabled;
[L6881]              havoc newBuyPrice_s722;
[L6882]              havoc closebuy_s734;
[L6883]              havoc _enable_s783;
[L6884]              havoc _addr_s871;
[L6885]              havoc _addr_s901;
[L6886]              havoc tmpNow;
[L6887]              havoc gas;
[L6888]              assume gas > 4000000 && gas <= 8000000;
[L6889]              tmpNow := now;
[L6890]              havoc now;
[L6891]              assume now > tmpNow;
[L6892]              assume msgsender_MSG != null;
[L6893]              assume DType[msgsender_MSG] != Ownable;
[L6894]              assume DType[msgsender_MSG] != SafeMath;
[L6895]              assume DType[msgsender_MSG] != ERC20Basic;
[L6896]              assume DType[msgsender_MSG] != BasicToken;
[L6897]              assume DType[msgsender_MSG] != BurnableToken;
[L6898]              assume DType[msgsender_MSG] != ERC20;
[L6899]              assume DType[msgsender_MSG] != StandardToken;
[L6900]              assume DType[msgsender_MSG] != AirBasicToken;
[L6901]              Alloc[msgsender_MSG] := true;
[L6902]  COND FALSE  !(choice == 24)
[L6908]  COND FALSE  !(choice == 23)
[L6914]  COND FALSE  !(choice == 22)
[L6920]  COND TRUE   choice == 21
[L6921]              gas := gas - 21000;
[L6922]  COND TRUE   gas >= 0
[L6923]              assume _value_s841 >= 0 && _value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6924]              assume msgvalue_MSG == 0;
[L6925]  CALL        call __ret_0_transfer := transfer~address~uint256_AirBasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s841 && _value_s841 <= balances_BasicToken[this][msgsender_MSG]) && _value_s841 >= 0) && _value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s841] >= 0) && balances_BasicToken[this][_to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_AirBasicToken0 := true;
[L2]                 call_transfer_AirBasicToken0 := false;
[L2]                 revert := revert_hold;
[L1835]              havoc __exception;
[L1836]              revert := false;
[L1837]  COND FALSE  !(__exception)
[L1869]  CALL        call __ret_0_ := transfer~address~uint256_AirBasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L4707]  COND FALSE  !(!transferEnabled_AirBasicToken[this])
[L4711]  COND FALSE  !(!!balanceLocked_AirBasicToken[this][msgsender_MSG])
[L4715]  COND TRUE   DType[this] == AirBasicToken
[L4716]  CALL        call __var_21 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L3859]              __var_1 := null;
[L3860]  COND FALSE  !(!(_to_s225 != null))
[L3864]  COND FALSE  !(!(_value_s225 <= balances_BasicToken[this][msgsender_MSG]))
[L3868]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s225);
[L3712]              assert b_s91 <= a_s91;
[L3713]              __ret_0_ := (a_s91 - b_s91) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3868]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s225);
[L3869]  COND FALSE  !(revert)
[L3872]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L3873]              balances_BasicToken[this][msgsender_MSG] := __var_2;
[L3874]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L3875]  CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s225], _value_s225);
[L3726]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3727]              assert c_s115 >= a_s115;
[L3728]              c_s115 := c_s115;
[L3875]  RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s225], _value_s225);
[L3876]  COND FALSE  !(revert)
[L3879]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s225];
[L3880]              balances_BasicToken[this][_to_s225] := __var_3;
[L3881]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s225];
[L3882]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L3883]              __ret_0_ := true;
[L4716]  RET         call __var_21 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L4717]  COND FALSE  !(revert)
[L4723]              __ret_0_ := __var_21;
[L1869]  RET         call __ret_0_ := transfer~address~uint256_AirBasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L1870]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && balanceLocked_AirBasicToken[this] == old(balanceLocked_AirBasicToken[this])) && amountRaised_AirBasicToken[this] == old(amountRaised_AirBasicToken[this])) && buyPrice_AirBasicToken[this] == old(buyPrice_AirBasicToken[this])) && crowdsaleClosed_AirBasicToken[this] == old(crowdsaleClosed_AirBasicToken[this])) && transferEnabled_AirBasicToken[this] == old(transferEnabled_AirBasicToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6925]  RET         call __ret_0_transfer := transfer~address~uint256_AirBasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L7073]  RET         call CorralChoice_AirBasicToken(this);

Loop:
[L7073]  CALL        call CorralChoice_AirBasicToken(this);
[L6844]              havoc msgsender_MSG;
[L6845]              havoc msgvalue_MSG;
[L6846]              havoc choice;
[L6847]              havoc __ret_0_owner;
[L6848]              havoc __ret_0_totalSupply;
[L6849]              havoc _owner_s237;
[L6850]              havoc __ret_0_balanceOf;
[L6851]              havoc _to_s841;
[L6852]              havoc _value_s841;
[L6853]              havoc __ret_0_transfer;
[L6854]              havoc _value_s258;
[L6855]              havoc _owner_s486;
[L6856]              havoc _spender_s486;
[L6857]              havoc __ret_0_allowance;
[L6858]              havoc _from_s813;
[L6859]              havoc _to_s813;
[L6860]              havoc _value_s813;
[L6861]              havoc __ret_0_transferFrom;
[L6862]              havoc _spender_s470;
[L6863]              havoc _value_s470;
[L6864]              havoc __ret_0_approve;
[L6865]              havoc _spender_s527;
[L6866]              havoc _addedValue_s527;
[L6867]              havoc __ret_0_increaseApproval;
[L6868]              havoc _spender_s587;
[L6869]              havoc _subtractedValue_s587;
[L6870]              havoc __ret_0_decreaseApproval;
[L6871]              havoc __ret_0_name;
[L6872]              havoc __ret_0_symbol;
[L6873]              havoc __ret_0_decimals;
[L6874]              havoc __ret_0_INITIAL_SUPPLY;
[L6875]              havoc arg904_s0;
[L6876]              havoc __ret_0_balanceLocked;
[L6877]              havoc __ret_0_amountRaised;
[L6878]              havoc __ret_0_buyPrice;
[L6879]              havoc __ret_0_crowdsaleClosed;
[L6880]              havoc __ret_0_transferEnabled;
[L6881]              havoc newBuyPrice_s722;
[L6882]              havoc closebuy_s734;
[L6883]              havoc _enable_s783;
[L6884]              havoc _addr_s871;
[L6885]              havoc _addr_s901;
[L6886]              havoc tmpNow;
[L6887]              havoc gas;
[L6888]              assume gas > 4000000 && gas <= 8000000;
[L6889]              tmpNow := now;
[L6890]              havoc now;
[L6891]              assume now > tmpNow;
[L6892]              assume msgsender_MSG != null;
[L6893]              assume DType[msgsender_MSG] != Ownable;
[L6894]              assume DType[msgsender_MSG] != SafeMath;
[L6895]              assume DType[msgsender_MSG] != ERC20Basic;
[L6896]              assume DType[msgsender_MSG] != BasicToken;
[L6897]              assume DType[msgsender_MSG] != BurnableToken;
[L6898]              assume DType[msgsender_MSG] != ERC20;
[L6899]              assume DType[msgsender_MSG] != StandardToken;
[L6900]              assume DType[msgsender_MSG] != AirBasicToken;
[L6901]              Alloc[msgsender_MSG] := true;
[L6902]  COND FALSE  !(choice == 24)
[L6908]  COND FALSE  !(choice == 23)
[L6914]  COND FALSE  !(choice == 22)
[L6920]  COND TRUE   choice == 21
[L6921]              gas := gas - 21000;
[L6922]  COND TRUE   gas >= 0
[L6923]              assume _value_s841 >= 0 && _value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6924]              assume msgvalue_MSG == 0;
[L6925]  CALL        call __ret_0_transfer := transfer~address~uint256_AirBasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == _to_s841 && _value_s841 <= balances_BasicToken[this][msgsender_MSG]) && _value_s841 >= 0) && _value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s841] >= 0) && balances_BasicToken[this][_to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L1835]              havoc __exception;
[L1836]              revert := false;
[L1837]  COND FALSE  !(__exception)
[L1869]  CALL        call __ret_0_ := transfer~address~uint256_AirBasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L4707]  COND FALSE  !(!transferEnabled_AirBasicToken[this])
[L4711]  COND FALSE  !(!!balanceLocked_AirBasicToken[this][msgsender_MSG])
[L4715]  COND TRUE   DType[this] == AirBasicToken
[L4716]  CALL        call __var_21 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L3859]              __var_1 := null;
[L3860]  COND FALSE  !(!(_to_s225 != null))
[L3864]  COND FALSE  !(!(_value_s225 <= balances_BasicToken[this][msgsender_MSG]))
[L3868]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s225);
[L3712]              assert b_s91 <= a_s91;
[L3713]              __ret_0_ := (a_s91 - b_s91) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3868]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s225);
[L3869]  COND FALSE  !(revert)
[L3872]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L3873]              balances_BasicToken[this][msgsender_MSG] := __var_2;
[L3874]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L3875]  CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s225], _value_s225);
[L3726]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3727]              assert c_s115 >= a_s115;
[L3728]              c_s115 := c_s115;
[L3875]  RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s225], _value_s225);
[L3876]  COND FALSE  !(revert)
[L3879]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s225];
[L3880]              balances_BasicToken[this][_to_s225] := __var_3;
[L3881]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s225];
[L3882]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L3883]              __ret_0_ := true;
[L4716]  RET         call __var_21 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L4717]  COND FALSE  !(revert)
[L4723]              __ret_0_ := __var_21;
[L1869]  RET         call __ret_0_ := transfer~address~uint256_AirBasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L1870]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && balanceLocked_AirBasicToken[this] == old(balanceLocked_AirBasicToken[this])) && amountRaised_AirBasicToken[this] == old(amountRaised_AirBasicToken[this])) && buyPrice_AirBasicToken[this] == old(buyPrice_AirBasicToken[this])) && crowdsaleClosed_AirBasicToken[this] == old(crowdsaleClosed_AirBasicToken[this])) && transferEnabled_AirBasicToken[this] == old(transferEnabled_AirBasicToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6925]  RET         call __ret_0_transfer := transfer~address~uint256_AirBasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L7073]  RET         call CorralChoice_AirBasicToken(this);

[2020-11-24 23:41:28,269 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 23:41:28,269 INFO  L82        PathProgramCache]: Analyzing trace with hash 20449424, now seen corresponding path program 1 times
[2020-11-24 23:41:28,270 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 23:41:28,387 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 23:41:30,640 INFO  L134       CoverageAnalysis]: Checked inductivity of 413 backedges. 16 proven. 4 refuted. 0 times theorem prover too weak. 393 trivial. 0 not checked.
[2020-11-24 23:41:30,640 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 23:41:30,640 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [45] total 45
[2020-11-24 23:41:30,640 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 23:41:30,641 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 46 interpolants.
[2020-11-24 23:41:30,641 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=130, Invalid=1940, Unknown=0, NotChecked=0, Total=2070
[2020-11-24 23:41:30,641 INFO  L87              Difference]: Start difference. First operand 7734 states and 9295 transitions. cyclomatic complexity: 1593 Second operand 46 states.
[2020-11-24 23:41:40,069 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 23:41:40,069 INFO  L93              Difference]: Finished difference Result 7894 states and 10253 transitions.
[2020-11-24 23:41:40,069 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 46 states. 
[2020-11-24 23:41:40,070 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7894 states and 10253 transitions.
[2020-11-24 23:41:40,093 INFO  L131   ngComponentsAnalysis]: Automaton has 20 accepting balls. 112
[2020-11-24 23:41:40,124 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7894 states to 7894 states and 10253 transitions.
[2020-11-24 23:41:40,124 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2351
[2020-11-24 23:41:40,125 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2351
[2020-11-24 23:41:40,125 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7894 states and 10253 transitions.
[2020-11-24 23:41:40,132 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 23:41:40,132 INFO  L728         BuchiCegarLoop]: Abstraction has 7894 states and 10253 transitions.
[2020-11-24 23:41:40,134 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7894 states and 10253 transitions.
[2020-11-24 23:41:40,193 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7894 to 7790.
[2020-11-24 23:41:40,193 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7790 states.
[2020-11-24 23:41:40,205 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7790 states to 7790 states and 9589 transitions.
[2020-11-24 23:41:40,205 INFO  L751         BuchiCegarLoop]: Abstraction has 7790 states and 9589 transitions.
[2020-11-24 23:41:40,205 INFO  L631         BuchiCegarLoop]: Abstraction has 7790 states and 9589 transitions.
[2020-11-24 23:41:40,206 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-24 23:41:40,206 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7790 states and 9589 transitions.
[2020-11-24 23:41:40,214 INFO  L131   ngComponentsAnalysis]: Automaton has 13 accepting balls. 72
[2020-11-24 23:41:40,214 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 23:41:40,214 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 23:41:40,216 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 23:41:40,216 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_AirBasicToken0 := false;
[L2]                 call_transfer_AirBasicToken0 := false;
[L2]     CALL        call main();
[L7063]              assume null == 0;
[L7064]  CALL        call this := FreshRefGenerator__success();
[L3583]              havoc newRef;
[L3584]              assume Alloc[newRef] == false;
[L3585]              Alloc[newRef] := true;
[L3586]              assume newRef != null;
[L7064]  RET         call this := FreshRefGenerator__success();
[L7065]              assume now >= 0;
[L7066]              assume DType[this] == AirBasicToken;
[L7067]              assume msgvalue_MSG == 0;
[L7068]              gas := gas - 53000;
[L7069]  CALL        call AirBasicToken_AirBasicToken(this, msgsender_MSG, msgvalue_MSG);
[L1419]              havoc __exception;
[L1420]              revert := false;
[L1421]  COND FALSE  !(__exception)
[L1453]  CALL        call AirBasicToken_AirBasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4404]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L4404]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4405]  COND FALSE  !(revert)
[L4408]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4057]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L4057]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4058]  COND FALSE  !(revert)
[L4061]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4038]              assume msgsender_MSG != null;
[L4039]              Balance[this] := 0;
[L4061]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4062]  COND FALSE  !(revert)
[L4408]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4409]  COND FALSE  !(revert)
[L4412]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L3800]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3801]  COND FALSE  !(revert)
[L3804]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3778]              assume msgsender_MSG != null;
[L3779]              Balance[this] := 0;
[L3780]              balances_BasicToken[this] := zeroRefintArr();
[L3781]              sum_balances0[this] := 0;
[L3782]              totalSupply__BasicToken[this] := 0;
[L3804]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3805]  COND FALSE  !(revert)
[L4412]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4413]  COND FALSE  !(revert)
[L4416]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L4109]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4110]  COND FALSE  !(revert)
[L4113]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4057]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L4057]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4058]  COND FALSE  !(revert)
[L4061]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4038]              assume msgsender_MSG != null;
[L4039]              Balance[this] := 0;
[L4061]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4062]  COND FALSE  !(revert)
[L4113]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4114]  COND FALSE  !(revert)
[L4117]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L3800]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3801]  COND FALSE  !(revert)
[L3804]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3778]              assume msgsender_MSG != null;
[L3779]              Balance[this] := 0;
[L3780]              balances_BasicToken[this] := zeroRefintArr();
[L3781]              sum_balances0[this] := 0;
[L3782]              totalSupply__BasicToken[this] := 0;
[L3804]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3805]  COND FALSE  !(revert)
[L4117]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4118]  COND FALSE  !(revert)
[L4121]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4080]              assume msgsender_MSG != null;
[L4081]              Balance[this] := 0;
[L4082]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4083]              sum_allowed1[this] := 0;
[L4121]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]  COND FALSE  !(revert)
[L4416]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4417]  COND FALSE  !(revert)
[L4420]  CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3933]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L3933]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]  COND FALSE  !(revert)
[L3937]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L3800]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3801]  COND FALSE  !(revert)
[L3804]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3778]              assume msgsender_MSG != null;
[L3779]              Balance[this] := 0;
[L3780]              balances_BasicToken[this] := zeroRefintArr();
[L3781]              sum_balances0[this] := 0;
[L3782]              totalSupply__BasicToken[this] := 0;
[L3804]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3805]  COND FALSE  !(revert)
[L3937]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3938]  COND FALSE  !(revert)
[L3941]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3910]              assume msgsender_MSG != null;
[L3911]              Balance[this] := 0;
[L3941]  RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3942]  COND FALSE  !(revert)
[L4420]  RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4421]  COND FALSE  !(revert)
[L4424]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3619]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              owner_Ownable[this] := null;
[L3606]              owner_Ownable[this] := msgsender_MSG;
[L3619]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  COND FALSE  !(revert)
[L4424]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4425]  COND FALSE  !(revert)
[L4428]  CALL        call AirBasicToken_AirBasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4350]              name_AirBasicToken[this] := 1433815699;
[L4351]              symbol_AirBasicToken[this] := -1312980976;
[L4352]              decimals_AirBasicToken[this] := 18;
[L4353]              __var_12 := decimals_AirBasicToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4354]              INITIAL_SUPPLY_AirBasicToken[this] := 1282793976 * (nonlinearPow(10, decimals_AirBasicToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4355]              balanceLocked_AirBasicToken[this] := zeroRefboolArr();
[L4356]              amountRaised_AirBasicToken[this] := 0;
[L4357]              buyPrice_AirBasicToken[this] := 100000;
[L4358]              crowdsaleClosed_AirBasicToken[this] := true;
[L4359]              transferEnabled_AirBasicToken[this] := true;
[L4361]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_AirBasicToken[this];
[L4362]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L4363]              balances_BasicToken[this][msgsender_MSG] := INITIAL_SUPPLY_AirBasicToken[this];
[L4364]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L4365]              assert { :EventEmitted "Transfer_AirBasicToken" } true;
[L4428]  RET         call AirBasicToken_AirBasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4429]  COND FALSE  !(revert)
[L1453]  RET         call AirBasicToken_AirBasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1454]              assume !revert && gas >= 0;
[L7069]  RET         call AirBasicToken_AirBasicToken(this, msgsender_MSG, msgvalue_MSG);
[L7070]              assume !revert && gas >= 0;
[L7073]  CALL        call CorralChoice_AirBasicToken(this);
[L6844]              havoc msgsender_MSG;
[L6845]              havoc msgvalue_MSG;
[L6846]              havoc choice;
[L6847]              havoc __ret_0_owner;
[L6848]              havoc __ret_0_totalSupply;
[L6849]              havoc _owner_s237;
[L6850]              havoc __ret_0_balanceOf;
[L6851]              havoc _to_s841;
[L6852]              havoc _value_s841;
[L6853]              havoc __ret_0_transfer;
[L6854]              havoc _value_s258;
[L6855]              havoc _owner_s486;
[L6856]              havoc _spender_s486;
[L6857]              havoc __ret_0_allowance;
[L6858]              havoc _from_s813;
[L6859]              havoc _to_s813;
[L6860]              havoc _value_s813;
[L6861]              havoc __ret_0_transferFrom;
[L6862]              havoc _spender_s470;
[L6863]              havoc _value_s470;
[L6864]              havoc __ret_0_approve;
[L6865]              havoc _spender_s527;
[L6866]              havoc _addedValue_s527;
[L6867]              havoc __ret_0_increaseApproval;
[L6868]              havoc _spender_s587;
[L6869]              havoc _subtractedValue_s587;
[L6870]              havoc __ret_0_decreaseApproval;
[L6871]              havoc __ret_0_name;
[L6872]              havoc __ret_0_symbol;
[L6873]              havoc __ret_0_decimals;
[L6874]              havoc __ret_0_INITIAL_SUPPLY;
[L6875]              havoc arg904_s0;
[L6876]              havoc __ret_0_balanceLocked;
[L6877]              havoc __ret_0_amountRaised;
[L6878]              havoc __ret_0_buyPrice;
[L6879]              havoc __ret_0_crowdsaleClosed;
[L6880]              havoc __ret_0_transferEnabled;
[L6881]              havoc newBuyPrice_s722;
[L6882]              havoc closebuy_s734;
[L6883]              havoc _enable_s783;
[L6884]              havoc _addr_s871;
[L6885]              havoc _addr_s901;
[L6886]              havoc tmpNow;
[L6887]              havoc gas;
[L6888]              assume gas > 4000000 && gas <= 8000000;
[L6889]              tmpNow := now;
[L6890]              havoc now;
[L6891]              assume now > tmpNow;
[L6892]              assume msgsender_MSG != null;
[L6893]              assume DType[msgsender_MSG] != Ownable;
[L6894]              assume DType[msgsender_MSG] != SafeMath;
[L6895]              assume DType[msgsender_MSG] != ERC20Basic;
[L6896]              assume DType[msgsender_MSG] != BasicToken;
[L6897]              assume DType[msgsender_MSG] != BurnableToken;
[L6898]              assume DType[msgsender_MSG] != ERC20;
[L6899]              assume DType[msgsender_MSG] != StandardToken;
[L6900]              assume DType[msgsender_MSG] != AirBasicToken;
[L6901]              Alloc[msgsender_MSG] := true;
[L6902]  COND FALSE  !(choice == 24)
[L6908]  COND FALSE  !(choice == 23)
[L6914]  COND FALSE  !(choice == 22)
[L6920]  COND TRUE   choice == 21
[L6921]              gas := gas - 21000;
[L6922]  COND TRUE   gas >= 0
[L6923]              assume _value_s841 >= 0 && _value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6924]              assume msgvalue_MSG == 0;
[L6925]  CALL        call __ret_0_transfer := transfer~address~uint256_AirBasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == _to_s841 && _value_s841 <= balances_BasicToken[this][msgsender_MSG]) && _value_s841 >= 0) && _value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s841] >= 0) && balances_BasicToken[this][_to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L1835]              havoc __exception;
[L1836]              revert := false;
[L1837]  COND FALSE  !(__exception)
[L1869]  CALL        call __ret_0_ := transfer~address~uint256_AirBasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L4707]  COND FALSE  !(!transferEnabled_AirBasicToken[this])
[L4711]  COND FALSE  !(!!balanceLocked_AirBasicToken[this][msgsender_MSG])
[L4715]  COND TRUE   DType[this] == AirBasicToken
[L4716]  CALL        call __var_21 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L3859]              __var_1 := null;
[L3860]  COND FALSE  !(!(_to_s225 != null))
[L3864]  COND FALSE  !(!(_value_s225 <= balances_BasicToken[this][msgsender_MSG]))
[L3868]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s225);
[L3712]              assert b_s91 <= a_s91;
[L3713]              __ret_0_ := (a_s91 - b_s91) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3868]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s225);
[L3869]  COND FALSE  !(revert)
[L3872]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L3873]              balances_BasicToken[this][msgsender_MSG] := __var_2;
[L3874]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L3875]  CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s225], _value_s225);
[L3726]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3727]              assert c_s115 >= a_s115;
[L3728]              c_s115 := c_s115;
[L3875]  RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s225], _value_s225);
[L3876]  COND FALSE  !(revert)
[L3879]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s225];
[L3880]              balances_BasicToken[this][_to_s225] := __var_3;
[L3881]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s225];
[L3882]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L3883]              __ret_0_ := true;
[L4716]  RET         call __var_21 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L4717]  COND FALSE  !(revert)
[L4723]              __ret_0_ := __var_21;
[L1869]  RET         call __ret_0_ := transfer~address~uint256_AirBasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L1870]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && balanceLocked_AirBasicToken[this] == old(balanceLocked_AirBasicToken[this])) && amountRaised_AirBasicToken[this] == old(amountRaised_AirBasicToken[this])) && buyPrice_AirBasicToken[this] == old(buyPrice_AirBasicToken[this])) && crowdsaleClosed_AirBasicToken[this] == old(crowdsaleClosed_AirBasicToken[this])) && transferEnabled_AirBasicToken[this] == old(transferEnabled_AirBasicToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6925]  RET         call __ret_0_transfer := transfer~address~uint256_AirBasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L7073]  RET         call CorralChoice_AirBasicToken(this);
[L7073]  CALL        call CorralChoice_AirBasicToken(this);
[L6844]              havoc msgsender_MSG;
[L6845]              havoc msgvalue_MSG;
[L6846]              havoc choice;
[L6847]              havoc __ret_0_owner;
[L6848]              havoc __ret_0_totalSupply;
[L6849]              havoc _owner_s237;
[L6850]              havoc __ret_0_balanceOf;
[L6851]              havoc _to_s841;
[L6852]              havoc _value_s841;
[L6853]              havoc __ret_0_transfer;
[L6854]              havoc _value_s258;
[L6855]              havoc _owner_s486;
[L6856]              havoc _spender_s486;
[L6857]              havoc __ret_0_allowance;
[L6858]              havoc _from_s813;
[L6859]              havoc _to_s813;
[L6860]              havoc _value_s813;
[L6861]              havoc __ret_0_transferFrom;
[L6862]              havoc _spender_s470;
[L6863]              havoc _value_s470;
[L6864]              havoc __ret_0_approve;
[L6865]              havoc _spender_s527;
[L6866]              havoc _addedValue_s527;
[L6867]              havoc __ret_0_increaseApproval;
[L6868]              havoc _spender_s587;
[L6869]              havoc _subtractedValue_s587;
[L6870]              havoc __ret_0_decreaseApproval;
[L6871]              havoc __ret_0_name;
[L6872]              havoc __ret_0_symbol;
[L6873]              havoc __ret_0_decimals;
[L6874]              havoc __ret_0_INITIAL_SUPPLY;
[L6875]              havoc arg904_s0;
[L6876]              havoc __ret_0_balanceLocked;
[L6877]              havoc __ret_0_amountRaised;
[L6878]              havoc __ret_0_buyPrice;
[L6879]              havoc __ret_0_crowdsaleClosed;
[L6880]              havoc __ret_0_transferEnabled;
[L6881]              havoc newBuyPrice_s722;
[L6882]              havoc closebuy_s734;
[L6883]              havoc _enable_s783;
[L6884]              havoc _addr_s871;
[L6885]              havoc _addr_s901;
[L6886]              havoc tmpNow;
[L6887]              havoc gas;
[L6888]              assume gas > 4000000 && gas <= 8000000;
[L6889]              tmpNow := now;
[L6890]              havoc now;
[L6891]              assume now > tmpNow;
[L6892]              assume msgsender_MSG != null;
[L6893]              assume DType[msgsender_MSG] != Ownable;
[L6894]              assume DType[msgsender_MSG] != SafeMath;
[L6895]              assume DType[msgsender_MSG] != ERC20Basic;
[L6896]              assume DType[msgsender_MSG] != BasicToken;
[L6897]              assume DType[msgsender_MSG] != BurnableToken;
[L6898]              assume DType[msgsender_MSG] != ERC20;
[L6899]              assume DType[msgsender_MSG] != StandardToken;
[L6900]              assume DType[msgsender_MSG] != AirBasicToken;
[L6901]              Alloc[msgsender_MSG] := true;
[L6902]  COND FALSE  !(choice == 24)
[L6908]  COND FALSE  !(choice == 23)
[L6914]  COND FALSE  !(choice == 22)
[L6920]  COND TRUE   choice == 21
[L6921]              gas := gas - 21000;
[L6922]  COND TRUE   gas >= 0
[L6923]              assume _value_s841 >= 0 && _value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6924]              assume msgvalue_MSG == 0;
[L6925]  CALL        call __ret_0_transfer := transfer~address~uint256_AirBasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s841 && _value_s841 <= balances_BasicToken[this][msgsender_MSG]) && _value_s841 >= 0) && _value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s841] >= 0) && balances_BasicToken[this][_to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_AirBasicToken0 := true;
[L2]                 call_transfer_AirBasicToken0 := false;
[L2]                 revert := revert_hold;
[L1835]              havoc __exception;
[L1836]              revert := false;
[L1837]  COND FALSE  !(__exception)
[L1869]  CALL        call __ret_0_ := transfer~address~uint256_AirBasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L4707]  COND FALSE  !(!transferEnabled_AirBasicToken[this])
[L4711]  COND FALSE  !(!!balanceLocked_AirBasicToken[this][msgsender_MSG])
[L4715]  COND TRUE   DType[this] == AirBasicToken
[L4716]  CALL        call __var_21 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L3859]              __var_1 := null;
[L3860]  COND FALSE  !(!(_to_s225 != null))
[L3864]  COND FALSE  !(!(_value_s225 <= balances_BasicToken[this][msgsender_MSG]))
[L3868]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s225);
[L3712]              assert b_s91 <= a_s91;
[L3713]              __ret_0_ := (a_s91 - b_s91) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3868]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s225);
[L3869]  COND FALSE  !(revert)
[L3872]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L3873]              balances_BasicToken[this][msgsender_MSG] := __var_2;
[L3874]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L3875]  CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s225], _value_s225);
[L3726]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3727]              assert c_s115 >= a_s115;
[L3728]              c_s115 := c_s115;
[L3875]  RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s225], _value_s225);
[L3876]  COND FALSE  !(revert)
[L3879]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s225];
[L3880]              balances_BasicToken[this][_to_s225] := __var_3;
[L3881]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s225];
[L3882]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L3883]              __ret_0_ := true;
[L4716]  RET         call __var_21 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L4717]  COND FALSE  !(revert)
[L4723]              __ret_0_ := __var_21;
[L1869]  RET         call __ret_0_ := transfer~address~uint256_AirBasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L1870]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && balanceLocked_AirBasicToken[this] == old(balanceLocked_AirBasicToken[this])) && amountRaised_AirBasicToken[this] == old(amountRaised_AirBasicToken[this])) && buyPrice_AirBasicToken[this] == old(buyPrice_AirBasicToken[this])) && crowdsaleClosed_AirBasicToken[this] == old(crowdsaleClosed_AirBasicToken[this])) && transferEnabled_AirBasicToken[this] == old(transferEnabled_AirBasicToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6925]  RET         call __ret_0_transfer := transfer~address~uint256_AirBasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L7073]  RET         call CorralChoice_AirBasicToken(this);

Loop:
[L7073]  CALL        call CorralChoice_AirBasicToken(this);
[L6844]              havoc msgsender_MSG;
[L6845]              havoc msgvalue_MSG;
[L6846]              havoc choice;
[L6847]              havoc __ret_0_owner;
[L6848]              havoc __ret_0_totalSupply;
[L6849]              havoc _owner_s237;
[L6850]              havoc __ret_0_balanceOf;
[L6851]              havoc _to_s841;
[L6852]              havoc _value_s841;
[L6853]              havoc __ret_0_transfer;
[L6854]              havoc _value_s258;
[L6855]              havoc _owner_s486;
[L6856]              havoc _spender_s486;
[L6857]              havoc __ret_0_allowance;
[L6858]              havoc _from_s813;
[L6859]              havoc _to_s813;
[L6860]              havoc _value_s813;
[L6861]              havoc __ret_0_transferFrom;
[L6862]              havoc _spender_s470;
[L6863]              havoc _value_s470;
[L6864]              havoc __ret_0_approve;
[L6865]              havoc _spender_s527;
[L6866]              havoc _addedValue_s527;
[L6867]              havoc __ret_0_increaseApproval;
[L6868]              havoc _spender_s587;
[L6869]              havoc _subtractedValue_s587;
[L6870]              havoc __ret_0_decreaseApproval;
[L6871]              havoc __ret_0_name;
[L6872]              havoc __ret_0_symbol;
[L6873]              havoc __ret_0_decimals;
[L6874]              havoc __ret_0_INITIAL_SUPPLY;
[L6875]              havoc arg904_s0;
[L6876]              havoc __ret_0_balanceLocked;
[L6877]              havoc __ret_0_amountRaised;
[L6878]              havoc __ret_0_buyPrice;
[L6879]              havoc __ret_0_crowdsaleClosed;
[L6880]              havoc __ret_0_transferEnabled;
[L6881]              havoc newBuyPrice_s722;
[L6882]              havoc closebuy_s734;
[L6883]              havoc _enable_s783;
[L6884]              havoc _addr_s871;
[L6885]              havoc _addr_s901;
[L6886]              havoc tmpNow;
[L6887]              havoc gas;
[L6888]              assume gas > 4000000 && gas <= 8000000;
[L6889]              tmpNow := now;
[L6890]              havoc now;
[L6891]              assume now > tmpNow;
[L6892]              assume msgsender_MSG != null;
[L6893]              assume DType[msgsender_MSG] != Ownable;
[L6894]              assume DType[msgsender_MSG] != SafeMath;
[L6895]              assume DType[msgsender_MSG] != ERC20Basic;
[L6896]              assume DType[msgsender_MSG] != BasicToken;
[L6897]              assume DType[msgsender_MSG] != BurnableToken;
[L6898]              assume DType[msgsender_MSG] != ERC20;
[L6899]              assume DType[msgsender_MSG] != StandardToken;
[L6900]              assume DType[msgsender_MSG] != AirBasicToken;
[L6901]              Alloc[msgsender_MSG] := true;
[L6902]  COND TRUE   choice == 24
[L6903]              gas := gas - 21000;
[L6904]  COND FALSE  !(gas >= 0)
[L7073]  RET         call CorralChoice_AirBasicToken(this);

[2020-11-24 23:41:40,219 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 23:41:40,219 INFO  L82        PathProgramCache]: Analyzing trace with hash 88994172, now seen corresponding path program 1 times
[2020-11-24 23:41:40,220 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 23:41:40,293 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 23:41:40,486 INFO  L134       CoverageAnalysis]: Checked inductivity of 418 backedges. 72 proven. 0 refuted. 0 times theorem prover too weak. 346 trivial. 0 not checked.
[2020-11-24 23:41:40,487 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 23:41:40,487 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-24 23:41:40,487 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 23:41:40,487 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-24 23:41:40,487 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=31, Invalid=151, Unknown=0, NotChecked=0, Total=182
[2020-11-24 23:41:40,487 INFO  L87              Difference]: Start difference. First operand 7790 states and 9589 transitions. cyclomatic complexity: 1841 Second operand 14 states.
[2020-11-24 23:41:42,592 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 23:41:42,593 INFO  L93              Difference]: Finished difference Result 7748 states and 9431 transitions.
[2020-11-24 23:41:42,593 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-24 23:41:42,593 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7748 states and 9431 transitions.
[2020-11-24 23:41:42,611 INFO  L131   ngComponentsAnalysis]: Automaton has 9 accepting balls. 58
[2020-11-24 23:41:42,631 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7748 states to 7724 states and 9403 transitions.
[2020-11-24 23:41:42,632 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2251
[2020-11-24 23:41:42,633 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2263
[2020-11-24 23:41:42,633 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7724 states and 9403 transitions.
[2020-11-24 23:41:42,638 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 23:41:42,638 INFO  L728         BuchiCegarLoop]: Abstraction has 7724 states and 9403 transitions.
[2020-11-24 23:41:42,641 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7724 states and 9403 transitions.
[2020-11-24 23:41:42,694 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7724 to 6726.
[2020-11-24 23:41:42,694 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6726 states.
[2020-11-24 23:41:42,701 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6726 states to 6726 states and 7575 transitions.
[2020-11-24 23:41:42,701 INFO  L751         BuchiCegarLoop]: Abstraction has 6726 states and 7575 transitions.
[2020-11-24 23:41:42,701 INFO  L631         BuchiCegarLoop]: Abstraction has 6726 states and 7575 transitions.
[2020-11-24 23:41:42,701 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-24 23:41:42,701 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6726 states and 7575 transitions.
[2020-11-24 23:41:42,708 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 16
[2020-11-24 23:41:42,708 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 23:41:42,708 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 23:41:42,709 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 23:41:42,709 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_AirBasicToken0 := false;
[L2]                 call_transfer_AirBasicToken0 := false;
[L2]     CALL        call main();
[L7063]              assume null == 0;
[L7064]  CALL        call this := FreshRefGenerator__success();
[L3583]              havoc newRef;
[L3584]              assume Alloc[newRef] == false;
[L3585]              Alloc[newRef] := true;
[L3586]              assume newRef != null;
[L7064]  RET         call this := FreshRefGenerator__success();
[L7065]              assume now >= 0;
[L7066]              assume DType[this] == AirBasicToken;
[L7067]              assume msgvalue_MSG == 0;
[L7068]              gas := gas - 53000;
[L7069]  CALL        call AirBasicToken_AirBasicToken(this, msgsender_MSG, msgvalue_MSG);
[L1419]              havoc __exception;
[L1420]              revert := false;
[L1421]  COND FALSE  !(__exception)
[L1453]  CALL        call AirBasicToken_AirBasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4404]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L4404]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4405]  COND FALSE  !(revert)
[L4408]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4057]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L4057]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4058]  COND FALSE  !(revert)
[L4061]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4038]              assume msgsender_MSG != null;
[L4039]              Balance[this] := 0;
[L4061]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4062]  COND FALSE  !(revert)
[L4408]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4409]  COND FALSE  !(revert)
[L4412]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L3800]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3801]  COND FALSE  !(revert)
[L3804]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3778]              assume msgsender_MSG != null;
[L3779]              Balance[this] := 0;
[L3780]              balances_BasicToken[this] := zeroRefintArr();
[L3781]              sum_balances0[this] := 0;
[L3782]              totalSupply__BasicToken[this] := 0;
[L3804]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3805]  COND FALSE  !(revert)
[L4412]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4413]  COND FALSE  !(revert)
[L4416]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L4109]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4110]  COND FALSE  !(revert)
[L4113]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4057]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L4057]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4058]  COND FALSE  !(revert)
[L4061]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4038]              assume msgsender_MSG != null;
[L4039]              Balance[this] := 0;
[L4061]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4062]  COND FALSE  !(revert)
[L4113]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4114]  COND FALSE  !(revert)
[L4117]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L3800]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3801]  COND FALSE  !(revert)
[L3804]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3778]              assume msgsender_MSG != null;
[L3779]              Balance[this] := 0;
[L3780]              balances_BasicToken[this] := zeroRefintArr();
[L3781]              sum_balances0[this] := 0;
[L3782]              totalSupply__BasicToken[this] := 0;
[L3804]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3805]  COND FALSE  !(revert)
[L4117]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4118]  COND FALSE  !(revert)
[L4121]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4080]              assume msgsender_MSG != null;
[L4081]              Balance[this] := 0;
[L4082]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4083]              sum_allowed1[this] := 0;
[L4121]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]  COND FALSE  !(revert)
[L4416]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4417]  COND FALSE  !(revert)
[L4420]  CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3933]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L3933]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]  COND FALSE  !(revert)
[L3937]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L3800]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3801]  COND FALSE  !(revert)
[L3804]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3778]              assume msgsender_MSG != null;
[L3779]              Balance[this] := 0;
[L3780]              balances_BasicToken[this] := zeroRefintArr();
[L3781]              sum_balances0[this] := 0;
[L3782]              totalSupply__BasicToken[this] := 0;
[L3804]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3805]  COND FALSE  !(revert)
[L3937]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3938]  COND FALSE  !(revert)
[L3941]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3910]              assume msgsender_MSG != null;
[L3911]              Balance[this] := 0;
[L3941]  RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3942]  COND FALSE  !(revert)
[L4420]  RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4421]  COND FALSE  !(revert)
[L4424]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3619]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              owner_Ownable[this] := null;
[L3606]              owner_Ownable[this] := msgsender_MSG;
[L3619]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  COND FALSE  !(revert)
[L4424]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4425]  COND FALSE  !(revert)
[L4428]  CALL        call AirBasicToken_AirBasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4350]              name_AirBasicToken[this] := 1433815699;
[L4351]              symbol_AirBasicToken[this] := -1312980976;
[L4352]              decimals_AirBasicToken[this] := 18;
[L4353]              __var_12 := decimals_AirBasicToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4354]              INITIAL_SUPPLY_AirBasicToken[this] := 1282793976 * (nonlinearPow(10, decimals_AirBasicToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4355]              balanceLocked_AirBasicToken[this] := zeroRefboolArr();
[L4356]              amountRaised_AirBasicToken[this] := 0;
[L4357]              buyPrice_AirBasicToken[this] := 100000;
[L4358]              crowdsaleClosed_AirBasicToken[this] := true;
[L4359]              transferEnabled_AirBasicToken[this] := true;
[L4361]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_AirBasicToken[this];
[L4362]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L4363]              balances_BasicToken[this][msgsender_MSG] := INITIAL_SUPPLY_AirBasicToken[this];
[L4364]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L4365]              assert { :EventEmitted "Transfer_AirBasicToken" } true;
[L4428]  RET         call AirBasicToken_AirBasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4429]  COND FALSE  !(revert)
[L1453]  RET         call AirBasicToken_AirBasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1454]              assume !revert && gas >= 0;
[L7069]  RET         call AirBasicToken_AirBasicToken(this, msgsender_MSG, msgvalue_MSG);
[L7070]              assume !revert && gas >= 0;
[L7073]  CALL        call CorralChoice_AirBasicToken(this);
[L6844]              havoc msgsender_MSG;
[L6845]              havoc msgvalue_MSG;
[L6846]              havoc choice;
[L6847]              havoc __ret_0_owner;
[L6848]              havoc __ret_0_totalSupply;
[L6849]              havoc _owner_s237;
[L6850]              havoc __ret_0_balanceOf;
[L6851]              havoc _to_s841;
[L6852]              havoc _value_s841;
[L6853]              havoc __ret_0_transfer;
[L6854]              havoc _value_s258;
[L6855]              havoc _owner_s486;
[L6856]              havoc _spender_s486;
[L6857]              havoc __ret_0_allowance;
[L6858]              havoc _from_s813;
[L6859]              havoc _to_s813;
[L6860]              havoc _value_s813;
[L6861]              havoc __ret_0_transferFrom;
[L6862]              havoc _spender_s470;
[L6863]              havoc _value_s470;
[L6864]              havoc __ret_0_approve;
[L6865]              havoc _spender_s527;
[L6866]              havoc _addedValue_s527;
[L6867]              havoc __ret_0_increaseApproval;
[L6868]              havoc _spender_s587;
[L6869]              havoc _subtractedValue_s587;
[L6870]              havoc __ret_0_decreaseApproval;
[L6871]              havoc __ret_0_name;
[L6872]              havoc __ret_0_symbol;
[L6873]              havoc __ret_0_decimals;
[L6874]              havoc __ret_0_INITIAL_SUPPLY;
[L6875]              havoc arg904_s0;
[L6876]              havoc __ret_0_balanceLocked;
[L6877]              havoc __ret_0_amountRaised;
[L6878]              havoc __ret_0_buyPrice;
[L6879]              havoc __ret_0_crowdsaleClosed;
[L6880]              havoc __ret_0_transferEnabled;
[L6881]              havoc newBuyPrice_s722;
[L6882]              havoc closebuy_s734;
[L6883]              havoc _enable_s783;
[L6884]              havoc _addr_s871;
[L6885]              havoc _addr_s901;
[L6886]              havoc tmpNow;
[L6887]              havoc gas;
[L6888]              assume gas > 4000000 && gas <= 8000000;
[L6889]              tmpNow := now;
[L6890]              havoc now;
[L6891]              assume now > tmpNow;
[L6892]              assume msgsender_MSG != null;
[L6893]              assume DType[msgsender_MSG] != Ownable;
[L6894]              assume DType[msgsender_MSG] != SafeMath;
[L6895]              assume DType[msgsender_MSG] != ERC20Basic;
[L6896]              assume DType[msgsender_MSG] != BasicToken;
[L6897]              assume DType[msgsender_MSG] != BurnableToken;
[L6898]              assume DType[msgsender_MSG] != ERC20;
[L6899]              assume DType[msgsender_MSG] != StandardToken;
[L6900]              assume DType[msgsender_MSG] != AirBasicToken;
[L6901]              Alloc[msgsender_MSG] := true;
[L6902]  COND FALSE  !(choice == 24)
[L6908]  COND FALSE  !(choice == 23)
[L6914]  COND FALSE  !(choice == 22)
[L6920]  COND FALSE  !(choice == 21)
[L6927]  COND FALSE  !(choice == 20)
[L6934]  COND FALSE  !(choice == 19)
[L6940]  COND FALSE  !(choice == 18)
[L6947]  COND FALSE  !(choice == 17)
[L6954]  COND FALSE  !(choice == 16)
[L6961]  COND FALSE  !(choice == 15)
[L6968]  COND FALSE  !(choice == 14)
[L6974]  COND FALSE  !(choice == 13)
[L6980]  COND FALSE  !(choice == 12)
[L6986]  COND FALSE  !(choice == 11)
[L6992]  COND FALSE  !(choice == 10)
[L6998]  COND FALSE  !(choice == 9)
[L7004]  COND FALSE  !(choice == 8)
[L7010]  COND FALSE  !(choice == 7)
[L7016]  COND FALSE  !(choice == 6)
[L7022]  COND FALSE  !(choice == 5)
[L7029]  COND FALSE  !(choice == 4)
[L7035]  COND TRUE   choice == 3
[L7036]              gas := gas - 21000;
[L7037]  COND TRUE   gas >= 0
[L7038]              assume msgvalue_MSG == 0;
[L7039]  CALL        call enableTransfer~bool_AirBasicToken(this, msgsender_MSG, msgvalue_MSG, _enable_s783);
[L1685]              havoc __exception;
[L1686]              revert := false;
[L1687]  COND FALSE  !(__exception)
[L1719]  CALL        call enableTransfer~bool_AirBasicToken__success(this, msgsender_MSG, msgvalue_MSG, _enable_s783);
[L4624]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6187]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L4624]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4625]  COND FALSE  !(revert)
[L4628]              transferEnabled_AirBasicToken[this] := _enable_s783;
[L1719]  RET         call enableTransfer~bool_AirBasicToken__success(this, msgsender_MSG, msgvalue_MSG, _enable_s783);
[L1720]              assume !revert && gas >= 0;
[L7039]  RET         call enableTransfer~bool_AirBasicToken(this, msgsender_MSG, msgvalue_MSG, _enable_s783);
[L7073]  RET         call CorralChoice_AirBasicToken(this);
[L7073]  CALL        call CorralChoice_AirBasicToken(this);
[L6844]              havoc msgsender_MSG;
[L6845]              havoc msgvalue_MSG;
[L6846]              havoc choice;
[L6847]              havoc __ret_0_owner;
[L6848]              havoc __ret_0_totalSupply;
[L6849]              havoc _owner_s237;
[L6850]              havoc __ret_0_balanceOf;
[L6851]              havoc _to_s841;
[L6852]              havoc _value_s841;
[L6853]              havoc __ret_0_transfer;
[L6854]              havoc _value_s258;
[L6855]              havoc _owner_s486;
[L6856]              havoc _spender_s486;
[L6857]              havoc __ret_0_allowance;
[L6858]              havoc _from_s813;
[L6859]              havoc _to_s813;
[L6860]              havoc _value_s813;
[L6861]              havoc __ret_0_transferFrom;
[L6862]              havoc _spender_s470;
[L6863]              havoc _value_s470;
[L6864]              havoc __ret_0_approve;
[L6865]              havoc _spender_s527;
[L6866]              havoc _addedValue_s527;
[L6867]              havoc __ret_0_increaseApproval;
[L6868]              havoc _spender_s587;
[L6869]              havoc _subtractedValue_s587;
[L6870]              havoc __ret_0_decreaseApproval;
[L6871]              havoc __ret_0_name;
[L6872]              havoc __ret_0_symbol;
[L6873]              havoc __ret_0_decimals;
[L6874]              havoc __ret_0_INITIAL_SUPPLY;
[L6875]              havoc arg904_s0;
[L6876]              havoc __ret_0_balanceLocked;
[L6877]              havoc __ret_0_amountRaised;
[L6878]              havoc __ret_0_buyPrice;
[L6879]              havoc __ret_0_crowdsaleClosed;
[L6880]              havoc __ret_0_transferEnabled;
[L6881]              havoc newBuyPrice_s722;
[L6882]              havoc closebuy_s734;
[L6883]              havoc _enable_s783;
[L6884]              havoc _addr_s871;
[L6885]              havoc _addr_s901;
[L6886]              havoc tmpNow;
[L6887]              havoc gas;
[L6888]              assume gas > 4000000 && gas <= 8000000;
[L6889]              tmpNow := now;
[L6890]              havoc now;
[L6891]              assume now > tmpNow;
[L6892]              assume msgsender_MSG != null;
[L6893]              assume DType[msgsender_MSG] != Ownable;
[L6894]              assume DType[msgsender_MSG] != SafeMath;
[L6895]              assume DType[msgsender_MSG] != ERC20Basic;
[L6896]              assume DType[msgsender_MSG] != BasicToken;
[L6897]              assume DType[msgsender_MSG] != BurnableToken;
[L6898]              assume DType[msgsender_MSG] != ERC20;
[L6899]              assume DType[msgsender_MSG] != StandardToken;
[L6900]              assume DType[msgsender_MSG] != AirBasicToken;
[L6901]              Alloc[msgsender_MSG] := true;
[L6902]  COND FALSE  !(choice == 24)
[L6908]  COND FALSE  !(choice == 23)
[L6914]  COND FALSE  !(choice == 22)
[L6920]  COND TRUE   choice == 21
[L6921]              gas := gas - 21000;
[L6922]  COND TRUE   gas >= 0
[L6923]              assume _value_s841 >= 0 && _value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6924]              assume msgvalue_MSG == 0;
[L6925]  CALL        call __ret_0_transfer := transfer~address~uint256_AirBasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s841 && _value_s841 <= balances_BasicToken[this][msgsender_MSG]) && _value_s841 >= 0) && _value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s841] >= 0) && balances_BasicToken[this][_to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_AirBasicToken0 := true;
[L2]                 call_transfer_AirBasicToken0 := false;
[L2]                 revert := revert_hold;
[L1835]              havoc __exception;
[L1836]              revert := false;
[L1837]  COND TRUE   __exception
[L1838]              __tmp__Balance := Balance;
[L1839]              __tmp__DType := DType;
[L1840]              __tmp__Alloc := Alloc;
[L1841]              __tmp__balance_ADDR := balance_ADDR;
[L1842]              __tmp__M_Ref_int := M_Ref_int;
[L1843]              __tmp__sum_balances0 := sum_balances0;
[L1844]              __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L1845]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1846]              __tmp__sum_allowed1 := sum_allowed1;
[L1847]              __tmp__M_Ref_bool := M_Ref_bool;
[L1848]              __tmp__sum_balanceLocked2 := sum_balanceLocked2;
[L1849]              __tmp__M_int_Ref := M_int_Ref;
[L1850]              __tmp__sum := sum;
[L1851]              __tmp__Length := Length;
[L1852]              __tmp__now := now;
[L1853]              __tmp__owner_Ownable := owner_Ownable;
[L1854]              __tmp__balances_BasicToken := balances_BasicToken;
[L1855]              __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L1856]              __tmp__allowed_StandardToken := allowed_StandardToken;
[L1857]              __tmp__name_AirBasicToken := name_AirBasicToken;
[L1858]              __tmp__symbol_AirBasicToken := symbol_AirBasicToken;
[L1859]              __tmp__decimals_AirBasicToken := decimals_AirBasicToken;
[L1860]              __tmp__INITIAL_SUPPLY_AirBasicToken := INITIAL_SUPPLY_AirBasicToken;
[L1861]              __tmp__balanceLocked_AirBasicToken := balanceLocked_AirBasicToken;
[L1862]              __tmp__amountRaised_AirBasicToken := amountRaised_AirBasicToken;
[L1863]              __tmp__buyPrice_AirBasicToken := buyPrice_AirBasicToken;
[L1864]              __tmp__crowdsaleClosed_AirBasicToken := crowdsaleClosed_AirBasicToken;
[L1865]              __tmp__transferEnabled_AirBasicToken := transferEnabled_AirBasicToken;
[L1866]  CALL        call __ret_0_ := transfer~address~uint256_AirBasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L4683]  COND TRUE   !__tmp__transferEnabled_AirBasicToken[this]
[L4684]              revert := true;
[L1866]  RET         call __ret_0_ := transfer~address~uint256_AirBasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L1867]              assume revert || gas < 0;
[L6925]  RET         call __ret_0_transfer := transfer~address~uint256_AirBasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L7073]  RET         call CorralChoice_AirBasicToken(this);

Loop:
[L7073]  CALL        call CorralChoice_AirBasicToken(this);
[L6844]              havoc msgsender_MSG;
[L6845]              havoc msgvalue_MSG;
[L6846]              havoc choice;
[L6847]              havoc __ret_0_owner;
[L6848]              havoc __ret_0_totalSupply;
[L6849]              havoc _owner_s237;
[L6850]              havoc __ret_0_balanceOf;
[L6851]              havoc _to_s841;
[L6852]              havoc _value_s841;
[L6853]              havoc __ret_0_transfer;
[L6854]              havoc _value_s258;
[L6855]              havoc _owner_s486;
[L6856]              havoc _spender_s486;
[L6857]              havoc __ret_0_allowance;
[L6858]              havoc _from_s813;
[L6859]              havoc _to_s813;
[L6860]              havoc _value_s813;
[L6861]              havoc __ret_0_transferFrom;
[L6862]              havoc _spender_s470;
[L6863]              havoc _value_s470;
[L6864]              havoc __ret_0_approve;
[L6865]              havoc _spender_s527;
[L6866]              havoc _addedValue_s527;
[L6867]              havoc __ret_0_increaseApproval;
[L6868]              havoc _spender_s587;
[L6869]              havoc _subtractedValue_s587;
[L6870]              havoc __ret_0_decreaseApproval;
[L6871]              havoc __ret_0_name;
[L6872]              havoc __ret_0_symbol;
[L6873]              havoc __ret_0_decimals;
[L6874]              havoc __ret_0_INITIAL_SUPPLY;
[L6875]              havoc arg904_s0;
[L6876]              havoc __ret_0_balanceLocked;
[L6877]              havoc __ret_0_amountRaised;
[L6878]              havoc __ret_0_buyPrice;
[L6879]              havoc __ret_0_crowdsaleClosed;
[L6880]              havoc __ret_0_transferEnabled;
[L6881]              havoc newBuyPrice_s722;
[L6882]              havoc closebuy_s734;
[L6883]              havoc _enable_s783;
[L6884]              havoc _addr_s871;
[L6885]              havoc _addr_s901;
[L6886]              havoc tmpNow;
[L6887]              havoc gas;
[L6888]              assume gas > 4000000 && gas <= 8000000;
[L6889]              tmpNow := now;
[L6890]              havoc now;
[L6891]              assume now > tmpNow;
[L6892]              assume msgsender_MSG != null;
[L6893]              assume DType[msgsender_MSG] != Ownable;
[L6894]              assume DType[msgsender_MSG] != SafeMath;
[L6895]              assume DType[msgsender_MSG] != ERC20Basic;
[L6896]              assume DType[msgsender_MSG] != BasicToken;
[L6897]              assume DType[msgsender_MSG] != BurnableToken;
[L6898]              assume DType[msgsender_MSG] != ERC20;
[L6899]              assume DType[msgsender_MSG] != StandardToken;
[L6900]              assume DType[msgsender_MSG] != AirBasicToken;
[L6901]              Alloc[msgsender_MSG] := true;
[L6902]  COND FALSE  !(choice == 24)
[L6908]  COND FALSE  !(choice == 23)
[L6914]  COND FALSE  !(choice == 22)
[L6920]  COND TRUE   choice == 21
[L6921]              gas := gas - 21000;
[L6922]  COND TRUE   gas >= 0
[L6923]              assume _value_s841 >= 0 && _value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6924]              assume msgvalue_MSG == 0;
[L6925]  CALL        call __ret_0_transfer := transfer~address~uint256_AirBasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s841 && _value_s841 <= balances_BasicToken[this][msgsender_MSG]) && _value_s841 >= 0) && _value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s841] >= 0) && balances_BasicToken[this][_to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_AirBasicToken0 := true;
[L2]                 call_transfer_AirBasicToken0 := false;
[L2]                 revert := revert_hold;
[L1835]              havoc __exception;
[L1836]              revert := false;
[L1837]  COND TRUE   __exception
[L1838]              __tmp__Balance := Balance;
[L1839]              __tmp__DType := DType;
[L1840]              __tmp__Alloc := Alloc;
[L1841]              __tmp__balance_ADDR := balance_ADDR;
[L1842]              __tmp__M_Ref_int := M_Ref_int;
[L1843]              __tmp__sum_balances0 := sum_balances0;
[L1844]              __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L1845]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1846]              __tmp__sum_allowed1 := sum_allowed1;
[L1847]              __tmp__M_Ref_bool := M_Ref_bool;
[L1848]              __tmp__sum_balanceLocked2 := sum_balanceLocked2;
[L1849]              __tmp__M_int_Ref := M_int_Ref;
[L1850]              __tmp__sum := sum;
[L1851]              __tmp__Length := Length;
[L1852]              __tmp__now := now;
[L1853]              __tmp__owner_Ownable := owner_Ownable;
[L1854]              __tmp__balances_BasicToken := balances_BasicToken;
[L1855]              __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L1856]              __tmp__allowed_StandardToken := allowed_StandardToken;
[L1857]              __tmp__name_AirBasicToken := name_AirBasicToken;
[L1858]              __tmp__symbol_AirBasicToken := symbol_AirBasicToken;
[L1859]              __tmp__decimals_AirBasicToken := decimals_AirBasicToken;
[L1860]              __tmp__INITIAL_SUPPLY_AirBasicToken := INITIAL_SUPPLY_AirBasicToken;
[L1861]              __tmp__balanceLocked_AirBasicToken := balanceLocked_AirBasicToken;
[L1862]              __tmp__amountRaised_AirBasicToken := amountRaised_AirBasicToken;
[L1863]              __tmp__buyPrice_AirBasicToken := buyPrice_AirBasicToken;
[L1864]              __tmp__crowdsaleClosed_AirBasicToken := crowdsaleClosed_AirBasicToken;
[L1865]              __tmp__transferEnabled_AirBasicToken := transferEnabled_AirBasicToken;
[L1866]  CALL        call __ret_0_ := transfer~address~uint256_AirBasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L4683]  COND TRUE   !__tmp__transferEnabled_AirBasicToken[this]
[L4684]              revert := true;
[L1866]  RET         call __ret_0_ := transfer~address~uint256_AirBasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L1867]              assume revert || gas < 0;
[L6925]  RET         call __ret_0_transfer := transfer~address~uint256_AirBasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L7073]  RET         call CorralChoice_AirBasicToken(this);

[2020-11-24 23:41:42,713 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 23:41:42,713 INFO  L82        PathProgramCache]: Analyzing trace with hash -911996848, now seen corresponding path program 1 times
[2020-11-24 23:41:42,714 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 23:41:42,728 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 23:41:42,744 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 23:41:42,864 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 23:41:42,864 INFO  L82        PathProgramCache]: Analyzing trace with hash 1142933669, now seen corresponding path program 1 times
[2020-11-24 23:41:42,865 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 23:41:42,871 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 23:41:42,876 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 23:41:42,889 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 23:41:42,889 INFO  L82        PathProgramCache]: Analyzing trace with hash 1417796406, now seen corresponding path program 1 times
[2020-11-24 23:41:42,890 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 23:41:42,915 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 23:41:42,942 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 883 to 1759
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 673 to 1327
Garbage collection #6: 1327 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 1327 to 2647
Garbage collection #7: 2647 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 2647 to 5281
[2020-11-24 23:41:43,353 WARN  L188               SmtUtils]: Spent 120.00 ms on a formula simplification that was a NOOP. DAG size: 296
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 3967 to 7933
[2020-11-24 23:41:43,509 WARN  L188               SmtUtils]: Spent 144.00 ms on a formula simplification that was a NOOP. DAG size: 232
[2020-11-24 23:41:43,945 WARN  L188               SmtUtils]: Spent 432.00 ms on a formula simplification. DAG size of input: 295 DAG size of output: 282
Garbage collection #1: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3137 to 6271
Garbage collection #7: 6271 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 6271 to 12541
Garbage collection #8: 12541 nodes / 0 free / 0.003s / 0.005s total
Resizing node table from 12541 to 25073
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.002s total
Resizing node table from 2017 to 4027
Garbage collection #7: 4027 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 4027 to 8053
[2020-11-24 23:41:44,249 WARN  L188               SmtUtils]: Spent 180.00 ms on a formula simplification that was a NOOP. DAG size: 372
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 4591 to 9181
[2020-11-24 23:41:44,396 WARN  L188               SmtUtils]: Spent 140.00 ms on a formula simplification that was a NOOP. DAG size: 297
[2020-11-24 23:41:44,542 WARN  L188               SmtUtils]: Spent 143.00 ms on a formula simplification that was a NOOP. DAG size: 297
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 3517 to 7027
Garbage collection #7: 7027 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 7027 to 14051
Garbage collection #1: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
[2020-11-24 23:41:44,603 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
[2020-11-24 23:41:45,119 WARN  L188               SmtUtils]: Spent 286.00 ms on a formula simplification. DAG size of input: 265 DAG size of output: 253
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
[2020-11-24 23:41:45,456 WARN  L188               SmtUtils]: Spent 144.00 ms on a formula simplification that was a NOOP. DAG size: 319
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2179 to 4357
[2020-11-24 23:41:45,850 WARN  L188               SmtUtils]: Spent 150.00 ms on a formula simplification. DAG size of input: 292 DAG size of output: 228
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #7: 5281 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5281 to 10559
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #7: 6661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6661 to 13313
[2020-11-24 23:41:46,115 WARN  L188               SmtUtils]: Spent 123.00 ms on a formula simplification that was a NOOP. DAG size: 277
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #6: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #7: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
[2020-11-24 23:41:46,409 WARN  L188               SmtUtils]: Spent 121.00 ms on a formula simplification that was a NOOP. DAG size: 233
[2020-11-24 23:41:46,757 WARN  L188               SmtUtils]: Spent 346.00 ms on a formula simplification. DAG size of input: 295 DAG size of output: 283
Garbage collection #1: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #7: 6271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6271 to 12541
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #7: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
[2020-11-24 23:41:46,978 WARN  L188               SmtUtils]: Spent 126.00 ms on a formula simplification that was a NOOP. DAG size: 372
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 9181 to 18353
[2020-11-24 23:41:47,107 WARN  L188               SmtUtils]: Spent 123.00 ms on a formula simplification that was a NOOP. DAG size: 297
[2020-11-24 23:41:49,081 WARN  L188               SmtUtils]: Spent 1.97 s on a formula simplification. DAG size of input: 768 DAG size of output: 758
Garbage collection #1: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #2: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #3: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #4: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #5: 5003 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5003 to 9973
Garbage collection #6: 9973 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9973 to 19937
Garbage collection #7: 19937 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19937 to 39869
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2647 to 5281
[2020-11-24 23:41:49,391 WARN  L188               SmtUtils]: Spent 271.00 ms on a formula simplification. DAG size of input: 253 DAG size of output: 250
[2020-11-24 23:41:49,618 WARN  L188               SmtUtils]: Spent 205.00 ms on a formula simplification that was a NOOP. DAG size: 383
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 4273 to 8543
Garbage collection #7: 8543 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 8543 to 17077
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
[2020-11-24 23:41:49,725 WARN  L188               SmtUtils]: Spent 102.00 ms on a formula simplification that was a NOOP. DAG size: 250
[2020-11-24 23:41:50,141 WARN  L188               SmtUtils]: Spent 414.00 ms on a formula simplification. DAG size of input: 385 DAG size of output: 384
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 4273 to 8543
Garbage collection #7: 8543 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 8543 to 17077
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8053 to 16103
[2020-11-24 23:41:50,348 WARN  L188               SmtUtils]: Spent 203.00 ms on a formula simplification that was a NOOP. DAG size: 380
[2020-11-24 23:41:50,366 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 23:41:50,388 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 23:41:50,398 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 11:41:50 BasicIcfg
[2020-11-24 23:41:50,398 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-24 23:41:50,398 INFO  L168              Benchmark]: Toolchain (without parser) took 47273.64 ms. Allocated memory was 1.0 GB in the beginning and 2.8 GB in the end (delta: 1.8 GB). Free memory was 929.8 MB in the beginning and 1.3 GB in the end (delta: -397.8 MB). Peak memory consumption was 1.9 GB. Max. memory is 15.3 GB.
[2020-11-24 23:41:50,398 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 23:41:50,399 INFO  L168              Benchmark]: Boogie Preprocessor took 113.27 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.7 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-24 23:41:50,399 INFO  L168              Benchmark]: UtopiaSpecLang took 68.33 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 908.4 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-24 23:41:50,399 INFO  L168              Benchmark]: Boogie Printer took 22.42 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 903.0 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-24 23:41:50,399 INFO  L168              Benchmark]: RCFGBuilder took 1051.34 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 62.4 MB). Free memory was 903.0 MB in the beginning and 1.0 GB in the end (delta: -99.2 MB). Peak memory consumption was 190.9 MB. Max. memory is 15.3 GB.
[2020-11-24 23:41:50,400 INFO  L168              Benchmark]: UtopiaLTL2Aut took 41.78 ms. Allocated memory is still 1.1 GB. Free memory was 1.0 GB in the beginning and 995.3 MB in the end (delta: 6.9 MB). Peak memory consumption was 6.9 MB. Max. memory is 15.3 GB.
[2020-11-24 23:41:50,400 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1808.66 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 162.0 MB). Free memory was 995.3 MB in the beginning and 901.4 MB in the end (delta: 93.9 MB). Peak memory consumption was 494.9 MB. Max. memory is 15.3 GB.
[2020-11-24 23:41:50,400 INFO  L168              Benchmark]: BlockEncodingV2 took 174.88 ms. Allocated memory is still 1.3 GB. Free memory was 901.4 MB in the beginning and 813.9 MB in the end (delta: 87.5 MB). Peak memory consumption was 87.5 MB. Max. memory is 15.3 GB.
[2020-11-24 23:41:50,400 INFO  L168              Benchmark]: BuchiAutomizer took 43990.02 ms. Allocated memory was 1.3 GB in the beginning and 2.8 GB in the end (delta: 1.6 GB). Free memory was 813.9 MB in the beginning and 1.3 GB in the end (delta: -513.8 MB). Peak memory consumption was 1.6 GB. Max. memory is 15.3 GB.
[2020-11-24 23:41:50,405 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    7632 locations, 13498 edges
  - StatisticsResult: Encoded RCFG
    7566 locations, 13329 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 113.27 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.7 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 68.33 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 908.4 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 22.42 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 903.0 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1051.34 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 62.4 MB). Free memory was 903.0 MB in the beginning and 1.0 GB in the end (delta: -99.2 MB). Peak memory consumption was 190.9 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 41.78 ms. Allocated memory is still 1.1 GB. Free memory was 1.0 GB in the beginning and 995.3 MB in the end (delta: 6.9 MB). Peak memory consumption was 6.9 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1808.66 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 162.0 MB). Free memory was 995.3 MB in the beginning and 901.4 MB in the end (delta: 93.9 MB). Peak memory consumption was 494.9 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 174.88 ms. Allocated memory is still 1.3 GB. Free memory was 901.4 MB in the beginning and 813.9 MB in the end (delta: 87.5 MB). Peak memory consumption was 87.5 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 43990.02 ms. Allocated memory was 1.3 GB in the beginning and 2.8 GB in the end (delta: 1.6 GB). Free memory was 813.9 MB in the beginning and 1.3 GB in the end (delta: -513.8 MB). Peak memory consumption was 1.6 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    3209 locations, 4263 edges
  - StatisticsResult: BuchiProgram size
    7632 locations, 13498 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 10 terminating modules (10 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.10 modules have a trivial ranking function, the largest among these consists of 46 locations. The remainder module has 6726 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 43.9s and 11 iterations.  TraceHistogramMax:8. Analysis of lassos took 12.4s. Construction of modules took 23.3s. BÃ¼chi inclusion checks took 6.4s. Highest rank in rank-based complementation 0. Minimization of det autom 10. Minimization of nondet autom 0. Automata minimization 0.8s AutomataMinimizationTime, 10 MinimizatonAttempts, 7639 StatesRemovedByMinimization, 9 NontrivialMinimizations. Non-live state removal took 0.5s Buchi closure took 0.0s. Biggest automaton had 8890 states and ocurred in iteration 5.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 39631 SDtfs, 42930 SDslu, 128290 SDs, 0 SdLazy, 229183 SolverSat, 7169 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 23.3s Time	LassoAnalysisResults: nont1 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU10 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(1488521969746207115796662763011823468376097022971261398284606896589626094530) = (new AirBasicToken)({from : 1488521969746207115796662763011823468376097022971261398284606896589626094529});
[L1419]              havoc __exception;
[L1420]              revert := false;
[L1421]  COND FALSE  !(__exception)
[L1453]  CALL        call AirBasicToken_AirBasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4404]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L4404]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4405]  COND FALSE  !(revert)
[L4408]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4057]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L4057]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4058]  COND FALSE  !(revert)
[L4061]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4038]              assume msgsender_MSG != null;
[L4039]              Balance[this] := 0;
[L4061]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4062]  COND FALSE  !(revert)
[L4408]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4409]  COND FALSE  !(revert)
[L4412]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L3800]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3801]  COND FALSE  !(revert)
[L3804]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3778]              assume msgsender_MSG != null;
[L3779]              Balance[this] := 0;
[L3780]              balances_BasicToken[this] := zeroRefintArr();
[L3781]              sum_balances0[this] := 0;
[L3782]              totalSupply__BasicToken[this] := 0;
[L3804]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3805]  COND FALSE  !(revert)
[L4412]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4413]  COND FALSE  !(revert)
[L4416]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L4109]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4110]  COND FALSE  !(revert)
[L4113]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4057]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L4057]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4058]  COND FALSE  !(revert)
[L4061]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4038]              assume msgsender_MSG != null;
[L4039]              Balance[this] := 0;
[L4061]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4062]  COND FALSE  !(revert)
[L4113]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4114]  COND FALSE  !(revert)
[L4117]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L3800]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3801]  COND FALSE  !(revert)
[L3804]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3778]              assume msgsender_MSG != null;
[L3779]              Balance[this] := 0;
[L3780]              balances_BasicToken[this] := zeroRefintArr();
[L3781]              sum_balances0[this] := 0;
[L3782]              totalSupply__BasicToken[this] := 0;
[L3804]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3805]  COND FALSE  !(revert)
[L4117]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4118]  COND FALSE  !(revert)
[L4121]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4080]              assume msgsender_MSG != null;
[L4081]              Balance[this] := 0;
[L4082]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4083]              sum_allowed1[this] := 0;
[L4121]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]  COND FALSE  !(revert)
[L4416]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4417]  COND FALSE  !(revert)
[L4420]  CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3933]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L3933]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]  COND FALSE  !(revert)
[L3937]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3743]              assume msgsender_MSG != null;
[L3744]              Balance[this] := 0;
[L3758]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3759]  COND FALSE  !(revert)
[L3800]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3801]  COND FALSE  !(revert)
[L3804]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3778]              assume msgsender_MSG != null;
[L3779]              Balance[this] := 0;
[L3780]              balances_BasicToken[this] := zeroRefintArr();
[L3781]              sum_balances0[this] := 0;
[L3782]              totalSupply__BasicToken[this] := 0;
[L3804]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3805]  COND FALSE  !(revert)
[L3937]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3938]  COND FALSE  !(revert)
[L3941]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3910]              assume msgsender_MSG != null;
[L3911]              Balance[this] := 0;
[L3941]  RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3942]  COND FALSE  !(revert)
[L4420]  RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4421]  COND FALSE  !(revert)
[L4424]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3619]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              owner_Ownable[this] := null;
[L3606]              owner_Ownable[this] := msgsender_MSG;
[L3619]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  COND FALSE  !(revert)
[L4424]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4425]  COND FALSE  !(revert)
[L4428]  CALL        call AirBasicToken_AirBasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4350]              name_AirBasicToken[this] := 1433815699;
[L4351]              symbol_AirBasicToken[this] := -1312980976;
[L4352]              decimals_AirBasicToken[this] := 18;
[L4353]              __var_12 := decimals_AirBasicToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4354]              INITIAL_SUPPLY_AirBasicToken[this] := 1282793976 * (nonlinearPow(10, decimals_AirBasicToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4355]              balanceLocked_AirBasicToken[this] := zeroRefboolArr();
[L4356]              amountRaised_AirBasicToken[this] := 0;
[L4357]              buyPrice_AirBasicToken[this] := 100000;
[L4358]              crowdsaleClosed_AirBasicToken[this] := true;
[L4359]              transferEnabled_AirBasicToken[this] := true;
[L4361]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_AirBasicToken[this];
[L4362]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L4363]              balances_BasicToken[this][msgsender_MSG] := INITIAL_SUPPLY_AirBasicToken[this];
[L4364]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L4365]              assert { :EventEmitted "Transfer_AirBasicToken" } true;
[L4428]  RET         call AirBasicToken_AirBasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4429]  COND FALSE  !(revert)
[L1453]  RET         call AirBasicToken_AirBasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1454]              assume !revert && gas >= 0;
[L7069]  RET         call AirBasicToken_AirBasicToken(this, msgsender_MSG, msgvalue_MSG);
AirBasicToken(1488521969746207115796662763011823468376097022971261398284606896589626094530).enableTransfer~bool.gas(3979002)({from : 1488521969746207115796662763011823468376097022971261398284606896589626094529, _enable : false});
[L1685]              havoc __exception;
[L1686]              revert := false;
[L1687]  COND FALSE  !(__exception)
[L1719]  CALL        call enableTransfer~bool_AirBasicToken__success(this, msgsender_MSG, msgvalue_MSG, _enable_s783);
[L4624]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6187]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L4624]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4625]  COND FALSE  !(revert)
[L4628]              transferEnabled_AirBasicToken[this] := _enable_s783;
[L1719]  RET         call enableTransfer~bool_AirBasicToken__success(this, msgsender_MSG, msgvalue_MSG, _enable_s783);
[L1720]              assume !revert && gas >= 0;
[L7039]  RET         call enableTransfer~bool_AirBasicToken(this, msgsender_MSG, msgvalue_MSG, _enable_s783);
AirBasicToken(1488521969746207115796662763011823468376097022971261398284606896589626094530).transfer~address~uint256.gas(3979003)({from : 1488521969746207115796662763011823468376097022971261398284606896589626094529, _to : 1488521969746207115796662763011823468376097022971261398284606896589626094529, _value : 0});
[L2]                revert_hold := revert;
[L2]                revert := false;
[L2]                assume ((((((msgsender_MSG == _to_s841 && _value_s841 <= balances_BasicToken[this][msgsender_MSG]) && _value_s841 >= 0) && _value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s841] >= 0) && balances_BasicToken[this][_to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                call_transfer_AirBasicToken0 := true;
[L2]                call_transfer_AirBasicToken0 := false;
[L2]                revert := revert_hold;
[L1835]             havoc __exception;
[L1836]             revert := false;
[L1837]  COND TRUE  __exception
[L1838]             __tmp__Balance := Balance;
[L1839]             __tmp__DType := DType;
[L1840]             __tmp__Alloc := Alloc;
[L1841]             __tmp__balance_ADDR := balance_ADDR;
[L1842]             __tmp__M_Ref_int := M_Ref_int;
[L1843]             __tmp__sum_balances0 := sum_balances0;
[L1844]             __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L1845]             __tmp__M_Ref_Ref := M_Ref_Ref;
[L1846]             __tmp__sum_allowed1 := sum_allowed1;
[L1847]             __tmp__M_Ref_bool := M_Ref_bool;
[L1848]             __tmp__sum_balanceLocked2 := sum_balanceLocked2;
[L1849]             __tmp__M_int_Ref := M_int_Ref;
[L1850]             __tmp__sum := sum;
[L1851]             __tmp__Length := Length;
[L1852]             __tmp__now := now;
[L1853]             __tmp__owner_Ownable := owner_Ownable;
[L1854]             __tmp__balances_BasicToken := balances_BasicToken;
[L1855]             __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L1856]             __tmp__allowed_StandardToken := allowed_StandardToken;
[L1857]             __tmp__name_AirBasicToken := name_AirBasicToken;
[L1858]             __tmp__symbol_AirBasicToken := symbol_AirBasicToken;
[L1859]             __tmp__decimals_AirBasicToken := decimals_AirBasicToken;
[L1860]             __tmp__INITIAL_SUPPLY_AirBasicToken := INITIAL_SUPPLY_AirBasicToken;
[L1861]             __tmp__balanceLocked_AirBasicToken := balanceLocked_AirBasicToken;
[L1862]             __tmp__amountRaised_AirBasicToken := amountRaised_AirBasicToken;
[L1863]             __tmp__buyPrice_AirBasicToken := buyPrice_AirBasicToken;
[L1864]             __tmp__crowdsaleClosed_AirBasicToken := crowdsaleClosed_AirBasicToken;
[L1865]             __tmp__transferEnabled_AirBasicToken := transferEnabled_AirBasicToken;
[L1866]  CALL       call __ret_0_ := transfer~address~uint256_AirBasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L4683]  COND TRUE  !__tmp__transferEnabled_AirBasicToken[this]
[L4684]             revert := true;
[L1866]  RET        call __ret_0_ := transfer~address~uint256_AirBasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L1867]             assume revert || gas < 0;
[L6925]  RET        call __ret_0_transfer := transfer~address~uint256_AirBasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);

Loop:
AirBasicToken(1488521969746207115796662763011823468376097022971261398284606896589626094530).transfer~address~uint256.gas(3979001)({from : 1488521969746207115796662763011823468376097022971261398284606896589626094529, _to : 1488521969746207115796662763011823468376097022971261398284606896589626094529, _value : 0});
[L2]                revert_hold := revert;
[L2]                revert := false;
[L2]                assume ((((((msgsender_MSG == _to_s841 && _value_s841 <= balances_BasicToken[this][msgsender_MSG]) && _value_s841 >= 0) && _value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s841] >= 0) && balances_BasicToken[this][_to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                call_transfer_AirBasicToken0 := true;
[L2]                call_transfer_AirBasicToken0 := false;
[L2]                revert := revert_hold;
[L1835]             havoc __exception;
[L1836]             revert := false;
[L1837]  COND TRUE  __exception
[L1838]             __tmp__Balance := Balance;
[L1839]             __tmp__DType := DType;
[L1840]             __tmp__Alloc := Alloc;
[L1841]             __tmp__balance_ADDR := balance_ADDR;
[L1842]             __tmp__M_Ref_int := M_Ref_int;
[L1843]             __tmp__sum_balances0 := sum_balances0;
[L1844]             __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L1845]             __tmp__M_Ref_Ref := M_Ref_Ref;
[L1846]             __tmp__sum_allowed1 := sum_allowed1;
[L1847]             __tmp__M_Ref_bool := M_Ref_bool;
[L1848]             __tmp__sum_balanceLocked2 := sum_balanceLocked2;
[L1849]             __tmp__M_int_Ref := M_int_Ref;
[L1850]             __tmp__sum := sum;
[L1851]             __tmp__Length := Length;
[L1852]             __tmp__now := now;
[L1853]             __tmp__owner_Ownable := owner_Ownable;
[L1854]             __tmp__balances_BasicToken := balances_BasicToken;
[L1855]             __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L1856]             __tmp__allowed_StandardToken := allowed_StandardToken;
[L1857]             __tmp__name_AirBasicToken := name_AirBasicToken;
[L1858]             __tmp__symbol_AirBasicToken := symbol_AirBasicToken;
[L1859]             __tmp__decimals_AirBasicToken := decimals_AirBasicToken;
[L1860]             __tmp__INITIAL_SUPPLY_AirBasicToken := INITIAL_SUPPLY_AirBasicToken;
[L1861]             __tmp__balanceLocked_AirBasicToken := balanceLocked_AirBasicToken;
[L1862]             __tmp__amountRaised_AirBasicToken := amountRaised_AirBasicToken;
[L1863]             __tmp__buyPrice_AirBasicToken := buyPrice_AirBasicToken;
[L1864]             __tmp__crowdsaleClosed_AirBasicToken := crowdsaleClosed_AirBasicToken;
[L1865]             __tmp__transferEnabled_AirBasicToken := transferEnabled_AirBasicToken;
[L1866]  CALL       call __ret_0_ := transfer~address~uint256_AirBasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L4683]  COND TRUE  !__tmp__transferEnabled_AirBasicToken[this]
[L4684]             revert := true;
[L1866]  RET        call __ret_0_ := transfer~address~uint256_AirBasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);
[L1867]             assume revert || gas < 0;
[L6925]  RET        call __ret_0_transfer := transfer~address~uint256_AirBasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s841, _value_s841);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
