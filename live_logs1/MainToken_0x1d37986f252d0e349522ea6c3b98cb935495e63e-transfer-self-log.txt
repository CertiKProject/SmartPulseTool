This is Ultimate 0.1.24-f1553f5-m
[2020-11-24 21:28:48,504 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-24 21:28:48,505 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-24 21:28:48,521 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-24 21:28:48,522 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-24 21:28:48,522 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-24 21:28:48,523 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-24 21:28:48,525 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-24 21:28:48,526 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-24 21:28:48,527 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-24 21:28:48,527 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-24 21:28:48,527 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-24 21:28:48,528 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-24 21:28:48,529 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-24 21:28:48,530 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-24 21:28:48,530 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-24 21:28:48,531 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-24 21:28:48,532 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-24 21:28:48,533 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-24 21:28:48,534 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-24 21:28:48,535 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-24 21:28:48,536 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-24 21:28:48,538 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-24 21:28:48,538 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-24 21:28:48,538 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-24 21:28:48,538 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-24 21:28:48,539 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-24 21:28:48,539 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-24 21:28:48,539 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-24 21:28:48,540 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-24 21:28:48,540 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-24 21:28:48,541 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-24 21:28:48,541 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-24 21:28:48,542 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-24 21:28:48,542 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-24 21:28:48,542 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-24 21:28:48,543 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-24 21:28:48,543 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-24 21:28:48,543 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-24 21:28:48,544 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-24 21:28:48,544 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-24 21:28:48,545 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-24 21:28:48,552 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-24 21:28:48,552 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-24 21:28:48,553 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-24 21:28:48,553 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-24 21:28:48,553 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-24 21:28:48,553 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-24 21:28:48,553 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-24 21:28:48,554 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-24 21:28:48,554 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-24 21:28:48,554 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-24 21:28:48,554 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-24 21:28:48,554 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-24 21:28:48,554 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-24 21:28:48,554 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-24 21:28:48,554 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-24 21:28:48,554 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-24 21:28:48,555 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-24 21:28:48,555 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-24 21:28:48,555 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-24 21:28:48,555 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-24 21:28:48,555 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-24 21:28:48,555 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-24 21:28:48,555 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-24 21:28:48,555 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-24 21:28:48,556 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-24 21:28:48,556 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-24 21:28:48,577 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-24 21:28:48,591 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-24 21:28:48,594 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-24 21:28:48,595 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-24 21:28:48,596 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-24 21:28:48,596 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transfer-self.bpl
[2020-11-24 21:28:48,596 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transfer-self.bpl'
[2020-11-24 21:28:48,757 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-24 21:28:48,758 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-24 21:28:48,759 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-24 21:28:48,759 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-24 21:28:48,759 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-24 21:28:48,776 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:28:48" (1/1) ...
[2020-11-24 21:28:48,778 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:28:48" (1/1) ...
[2020-11-24 21:28:48,832 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:28:48" (1/1) ...
[2020-11-24 21:28:48,833 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:28:48" (1/1) ...
[2020-11-24 21:28:48,882 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:28:48" (1/1) ...
[2020-11-24 21:28:48,908 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:28:48" (1/1) ...
[2020-11-24 21:28:48,929 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:28:48" (1/1) ...
[2020-11-24 21:28:48,955 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-24 21:28:48,955 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-24 21:28:48,956 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-24 21:28:48,958 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-24 21:28:48,962 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:28:48" (1/1) ...
[2020-11-24 21:28:48,994 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(MainToken.transfer(to, value), msg.sender == to && value <= balances_BasicToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(MainToken.transfer(to, value), return == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 21:28:49,000 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(MainToken.transfer(to, value), msg.sender == to && value <= balances_BasicToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(MainToken.transfer(to, value), return == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 21:28:49,008 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(MainToken.transfer(to, value), msg.sender == to && value <= balances_BasicToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(MainToken.transfer(to, value), return == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 21:28:49,020 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==_to_s1572 && _value_s1572<=balances_BasicToken[this][msg.sender] ) && _value_s1572>=0 ) && _value_s1572<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BasicToken[this][_to_s1572]>=0 ) && balances_BasicToken[this][_to_s1572]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BasicToken[this][msg.sender]>=0 ) && balances_BasicToken[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>],IdentifierExpression[_to_s1572,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]],BinaryExpression[COMPLEQ,IdentifierExpression[_value_s1572,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[_value_s1572,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_value_s1572,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],[IdentifierExpression[_to_s1572,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],[IdentifierExpression[_to_s1572,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-24 21:28:49,023 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( _success_s1572==true && totalSupply__BasicToken[this]==( old(totalSupply__BasicToken[this]) ) ) && balances_BasicToken[this]==( old(balances_BasicToken[this]) ) ) && allowed_StandardToken[this]==( old(allowed_StandardToken[this]) ) ) && initialized_MainToken[this]==( old(initialized_MainToken[this]) ) ) && paused_Pausable[this]==( old(paused_Pausable[this]) ) ) && mintingFinished_MintableToken[this]==( old(mintingFinished_MintableToken[this]) ) ) && owner_Ownable[this]==( old(owner_Ownable[this]) ) ) && chains_FreezableToken[this]==( old(chains_FreezableToken[this]) ) ) && freezings_FreezableToken[this]==( old(freezings_FreezableToken[this]) ) ) && freezingBalance_FreezableToken[this]==( old(freezingBalance_FreezableToken[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[_success_s1572,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_MainToken>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[initialized_MainToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[initialized_MainToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[mintingFinished_MintableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[mintingFinished_MintableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[chains_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[chains_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[freezings_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[freezings_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[freezingBalance_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[freezingBalance_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]]]]]
[2020-11-24 21:28:49,030 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(MainToken.transfer(to, value), msg.sender == to && value <= balances_BasicToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(MainToken.transfer(to, value), return == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 21:28:49,030 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_MainToken0) ==> ( <>AP(success_transfer_MainToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-24 21:28:49,056 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:28:49 PropertyContainer
[2020-11-24 21:28:49,056 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-24 21:28:49,056 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-24 21:28:49,057 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-24 21:28:49,057 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-24 21:28:49,058 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:28:48" (1/2) ...
[2020-11-24 21:28:49,058 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-24 21:28:49,058 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-24 21:28:49,090 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:28:49" (2/2) ...
[2020-11-24 21:28:49,090 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-24 21:28:49,091 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-24 21:28:49,091 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-24 21:28:49,091 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-24 21:28:49,092 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:28:48" (1/2) ...
[2020-11-24 21:28:49,154 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-24 21:28:49,155 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-24 21:28:49,155 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic
[2020-11-24 21:28:49,155 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic
[2020-11-24 21:28:49,155 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Basic
[2020-11-24 21:28:49,155 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Basic
[2020-11-24 21:28:49,155 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Basic
[2020-11-24 21:28:49,155 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 21:28:49,156 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-24 21:28:49,156 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-24 21:28:49,156 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 21:28:49,156 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 21:28:49,156 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 21:28:49,156 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 21:28:49,156 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-24 21:28:49,157 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken
[2020-11-24 21:28:49,157 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken
[2020-11-24 21:28:49,157 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken
[2020-11-24 21:28:49,157 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken
[2020-11-24 21:28:49,157 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken
[2020-11-24 21:28:49,157 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken
[2020-11-24 21:28:49,158 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken
[2020-11-24 21:28:49,158 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken
[2020-11-24 21:28:49,158 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 21:28:49,158 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-24 21:28:49,158 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-24 21:28:49,158 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-24 21:28:49,158 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-24 21:28:49,158 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-24 21:28:49,158 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-24 21:28:49,158 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken
[2020-11-24 21:28:49,159 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken
[2020-11-24 21:28:49,159 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-24 21:28:49,159 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-24 21:28:49,159 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken
[2020-11-24 21:28:49,159 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken
[2020-11-24 21:28:49,159 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken
[2020-11-24 21:28:49,160 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken
[2020-11-24 21:28:49,160 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken
[2020-11-24 21:28:49,160 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken
[2020-11-24 21:28:49,160 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-24 21:28:49,160 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-24 21:28:49,160 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 21:28:49,160 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-24 21:28:49,161 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-24 21:28:49,161 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable
[2020-11-24 21:28:49,161 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable
[2020-11-24 21:28:49,161 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-24 21:28:49,161 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-24 21:28:49,161 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__success
[2020-11-24 21:28:49,161 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-24 21:28:49,162 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-24 21:28:49,162 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-24 21:28:49,162 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken
[2020-11-24 21:28:49,162 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken
[2020-11-24 21:28:49,162 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken
[2020-11-24 21:28:49,162 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken
[2020-11-24 21:28:49,162 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken
[2020-11-24 21:28:49,163 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken
[2020-11-24 21:28:49,163 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken
[2020-11-24 21:28:49,163 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken
[2020-11-24 21:28:49,163 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken_NoBaseCtor__success
[2020-11-24 21:28:49,163 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken
[2020-11-24 21:28:49,163 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken
[2020-11-24 21:28:49,163 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken
[2020-11-24 21:28:49,163 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken
[2020-11-24 21:28:49,164 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken
[2020-11-24 21:28:49,164 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken
[2020-11-24 21:28:49,164 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken
[2020-11-24 21:28:49,164 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken
[2020-11-24 21:28:49,164 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken
[2020-11-24 21:28:49,164 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken
[2020-11-24 21:28:49,164 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken
[2020-11-24 21:28:49,165 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken
[2020-11-24 21:28:49,165 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken
[2020-11-24 21:28:49,165 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken
[2020-11-24 21:28:49,165 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken
[2020-11-24 21:28:49,165 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken
[2020-11-24 21:28:49,165 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken
[2020-11-24 21:28:49,165 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken
[2020-11-24 21:28:49,166 INFO  L130     BoogieDeclarations]: Found specification of procedure toKey~address~uint256_FreezableToken__success
[2020-11-24 21:28:49,166 INFO  L130     BoogieDeclarations]: Found specification of procedure freeze~address~uint64_FreezableToken__success
[2020-11-24 21:28:49,166 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-24 21:28:49,166 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken
[2020-11-24 21:28:49,166 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken
[2020-11-24 21:28:49,166 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken
[2020-11-24 21:28:49,167 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken
[2020-11-24 21:28:49,167 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_BurnableToken__success
[2020-11-24 21:28:49,167 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-24 21:28:49,167 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-24 21:28:49,167 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-24 21:28:49,167 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-24 21:28:49,167 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-24 21:28:49,168 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-24 21:28:49,168 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-24 21:28:49,168 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-24 21:28:49,168 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-24 21:28:49,168 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success
[2020-11-24 21:28:49,168 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken
[2020-11-24 21:28:49,168 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken
[2020-11-24 21:28:49,168 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken
[2020-11-24 21:28:49,168 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken
[2020-11-24 21:28:49,169 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts_NoBaseCtor__success
[2020-11-24 21:28:49,169 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts
[2020-11-24 21:28:49,169 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts
[2020-11-24 21:28:49,169 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts
[2020-11-24 21:28:49,169 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts
[2020-11-24 21:28:49,169 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts
[2020-11-24 21:28:49,169 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts
[2020-11-24 21:28:49,169 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts
[2020-11-24 21:28:49,170 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts
[2020-11-24 21:28:49,170 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts
[2020-11-24 21:28:49,170 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts
[2020-11-24 21:28:49,170 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts
[2020-11-24 21:28:49,170 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts
[2020-11-24 21:28:49,170 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts
[2020-11-24 21:28:49,170 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts
[2020-11-24 21:28:49,170 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts
[2020-11-24 21:28:49,170 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts
[2020-11-24 21:28:49,171 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts
[2020-11-24 21:28:49,171 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts
[2020-11-24 21:28:49,171 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken_NoBaseCtor__success
[2020-11-24 21:28:49,171 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken
[2020-11-24 21:28:49,171 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken
[2020-11-24 21:28:49,171 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken
[2020-11-24 21:28:49,171 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken
[2020-11-24 21:28:49,171 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken
[2020-11-24 21:28:49,171 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken
[2020-11-24 21:28:49,172 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken
[2020-11-24 21:28:49,172 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken
[2020-11-24 21:28:49,172 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken
[2020-11-24 21:28:49,172 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken
[2020-11-24 21:28:49,172 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken
[2020-11-24 21:28:49,172 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken
[2020-11-24 21:28:49,172 INFO  L130     BoogieDeclarations]: Found specification of procedure init_MainToken__success
[2020-11-24 21:28:49,172 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken
[2020-11-24 21:28:49,173 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken
[2020-11-24 21:28:49,173 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-24 21:28:49,173 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-24 21:28:49,173 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-24 21:28:49,173 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-24 21:28:49,173 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__success
[2020-11-24 21:28:49,173 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__success
[2020-11-24 21:28:49,173 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-24 21:28:49,173 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-24 21:28:49,174 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Basic
[2020-11-24 21:28:49,174 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Basic
[2020-11-24 21:28:49,174 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-24 21:28:49,174 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-24 21:28:49,174 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BasicToken
[2020-11-24 21:28:49,174 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BasicToken
[2020-11-24 21:28:49,174 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-24 21:28:49,174 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-24 21:28:49,175 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_StandardToken
[2020-11-24 21:28:49,175 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_StandardToken
[2020-11-24 21:28:49,175 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-24 21:28:49,175 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-24 21:28:49,175 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MintableToken
[2020-11-24 21:28:49,175 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MintableToken
[2020-11-24 21:28:49,175 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_FreezableToken
[2020-11-24 21:28:49,175 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_FreezableToken
[2020-11-24 21:28:49,175 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BurnableToken
[2020-11-24 21:28:49,175 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BurnableToken
[2020-11-24 21:28:49,176 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-24 21:28:49,176 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-24 21:28:49,176 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_FreezableMintableToken
[2020-11-24 21:28:49,176 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_FreezableMintableToken
[2020-11-24 21:28:49,176 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Consts
[2020-11-24 21:28:49,176 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Consts
[2020-11-24 21:28:49,176 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MainToken
[2020-11-24 21:28:49,176 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-24 21:28:49,176 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-24 21:28:49,177 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-24 21:28:49,177 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__success
[2020-11-24 21:28:49,177 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__fail
[2020-11-24 21:28:49,177 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 21:28:49,177 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-24 21:28:49,177 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-24 21:28:49,177 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 21:28:49,177 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 21:28:49,177 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 21:28:49,177 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 21:28:49,178 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-24 21:28:49,178 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__success
[2020-11-24 21:28:49,178 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__fail
[2020-11-24 21:28:49,178 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__success
[2020-11-24 21:28:49,178 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__fail
[2020-11-24 21:28:49,178 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__success
[2020-11-24 21:28:49,178 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__fail
[2020-11-24 21:28:49,178 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__success
[2020-11-24 21:28:49,178 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__fail
[2020-11-24 21:28:49,178 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 21:28:49,179 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-24 21:28:49,179 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-24 21:28:49,179 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-24 21:28:49,179 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__success
[2020-11-24 21:28:49,179 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__fail
[2020-11-24 21:28:49,179 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-24 21:28:49,179 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-24 21:28:49,179 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__success
[2020-11-24 21:28:49,179 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__fail
[2020-11-24 21:28:49,179 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__success
[2020-11-24 21:28:49,179 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__fail
[2020-11-24 21:28:49,180 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:28:49,180 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:28:49,180 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:28:49,180 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:28:49,180 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 21:28:49,180 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-24 21:28:49,180 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-24 21:28:49,180 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__success
[2020-11-24 21:28:49,180 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__fail
[2020-11-24 21:28:49,180 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-24 21:28:49,180 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-24 21:28:49,181 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__fail
[2020-11-24 21:28:49,181 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-24 21:28:49,181 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-24 21:28:49,181 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-24 21:28:49,181 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__success
[2020-11-24 21:28:49,181 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__fail
[2020-11-24 21:28:49,181 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__success
[2020-11-24 21:28:49,181 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__fail
[2020-11-24 21:28:49,181 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__success
[2020-11-24 21:28:49,181 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__fail
[2020-11-24 21:28:49,181 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__success
[2020-11-24 21:28:49,181 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__fail
[2020-11-24 21:28:49,182 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken_NoBaseCtor__fail
[2020-11-24 21:28:49,182 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken__success
[2020-11-24 21:28:49,182 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken__fail
[2020-11-24 21:28:49,182 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken__success
[2020-11-24 21:28:49,182 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken__fail
[2020-11-24 21:28:49,182 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken__success
[2020-11-24 21:28:49,182 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken__fail
[2020-11-24 21:28:49,182 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken__success
[2020-11-24 21:28:49,182 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken__fail
[2020-11-24 21:28:49,182 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken__success
[2020-11-24 21:28:49,182 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken__fail
[2020-11-24 21:28:49,183 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken__success
[2020-11-24 21:28:49,183 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken__fail
[2020-11-24 21:28:49,183 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken__success
[2020-11-24 21:28:49,183 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken__fail
[2020-11-24 21:28:49,183 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken__success
[2020-11-24 21:28:49,183 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken__fail
[2020-11-24 21:28:49,183 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken__success
[2020-11-24 21:28:49,183 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken__fail
[2020-11-24 21:28:49,183 INFO  L130     BoogieDeclarations]: Found specification of procedure toKey~address~uint256_FreezableToken__fail
[2020-11-24 21:28:49,183 INFO  L130     BoogieDeclarations]: Found specification of procedure freeze~address~uint64_FreezableToken__fail
[2020-11-24 21:28:49,183 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-24 21:28:49,183 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__success
[2020-11-24 21:28:49,184 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__fail
[2020-11-24 21:28:49,184 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__success
[2020-11-24 21:28:49,184 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__fail
[2020-11-24 21:28:49,184 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_BurnableToken__fail
[2020-11-24 21:28:49,184 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-24 21:28:49,184 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-24 21:28:49,184 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-24 21:28:49,184 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-24 21:28:49,184 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-24 21:28:49,184 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-24 21:28:49,184 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-24 21:28:49,184 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-24 21:28:49,185 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-24 21:28:49,185 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail
[2020-11-24 21:28:49,185 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken__success
[2020-11-24 21:28:49,185 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken__fail
[2020-11-24 21:28:49,185 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success
[2020-11-24 21:28:49,185 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__fail
[2020-11-24 21:28:49,185 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts_NoBaseCtor__fail
[2020-11-24 21:28:49,185 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts__success
[2020-11-24 21:28:49,185 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts__fail
[2020-11-24 21:28:49,185 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts__success
[2020-11-24 21:28:49,185 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts__fail
[2020-11-24 21:28:49,186 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts__success
[2020-11-24 21:28:49,186 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts__fail
[2020-11-24 21:28:49,186 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__success
[2020-11-24 21:28:49,186 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__fail
[2020-11-24 21:28:49,186 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts__success
[2020-11-24 21:28:49,186 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts__fail
[2020-11-24 21:28:49,186 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts__success
[2020-11-24 21:28:49,186 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts__fail
[2020-11-24 21:28:49,186 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts__success
[2020-11-24 21:28:49,186 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts__fail
[2020-11-24 21:28:49,186 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts__success
[2020-11-24 21:28:49,187 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts__fail
[2020-11-24 21:28:49,187 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts__success
[2020-11-24 21:28:49,187 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts__fail
[2020-11-24 21:28:49,187 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken_NoBaseCtor__fail
[2020-11-24 21:28:49,187 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken__success
[2020-11-24 21:28:49,187 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken__fail
[2020-11-24 21:28:49,187 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken__success
[2020-11-24 21:28:49,187 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken__fail
[2020-11-24 21:28:49,187 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken__success
[2020-11-24 21:28:49,187 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken__fail
[2020-11-24 21:28:49,187 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken__success
[2020-11-24 21:28:49,188 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken__fail
[2020-11-24 21:28:49,188 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken__success
[2020-11-24 21:28:49,188 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken__fail
[2020-11-24 21:28:49,188 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken__success
[2020-11-24 21:28:49,188 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken__fail
[2020-11-24 21:28:49,188 INFO  L130     BoogieDeclarations]: Found specification of procedure init_MainToken__fail
[2020-11-24 21:28:49,188 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken__success
[2020-11-24 21:28:49,188 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken__fail
[2020-11-24 21:28:49,188 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-24 21:28:49,188 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-24 21:28:49,188 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-24 21:28:49,189 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-24 21:28:49,189 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__fail
[2020-11-24 21:28:49,189 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__fail
[2020-11-24 21:28:49,189 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-24 21:28:49,189 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-24 21:28:49,189 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-24 21:28:49,189 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-24 21:28:49,189 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-24 21:28:49,189 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-24 21:28:49,189 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__fail
[2020-11-24 21:28:49,189 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__success
[2020-11-24 21:28:49,189 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 21:28:49,190 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 21:28:49,190 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-24 21:28:49,190 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-24 21:28:49,190 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 21:28:49,190 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 21:28:49,190 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 21:28:49,190 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 21:28:49,190 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 21:28:49,190 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 21:28:49,190 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 21:28:49,190 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 21:28:49,190 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-24 21:28:49,191 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-24 21:28:49,191 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__fail
[2020-11-24 21:28:49,191 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__success
[2020-11-24 21:28:49,191 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__fail
[2020-11-24 21:28:49,191 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__success
[2020-11-24 21:28:49,191 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__fail
[2020-11-24 21:28:49,191 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__success
[2020-11-24 21:28:49,191 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__fail
[2020-11-24 21:28:49,191 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__success
[2020-11-24 21:28:49,191 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 21:28:49,191 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 21:28:49,191 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-24 21:28:49,191 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-24 21:28:49,191 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-24 21:28:49,192 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-24 21:28:49,192 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__fail
[2020-11-24 21:28:49,192 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__success
[2020-11-24 21:28:49,192 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-24 21:28:49,192 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-24 21:28:49,192 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__fail
[2020-11-24 21:28:49,192 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__success
[2020-11-24 21:28:49,192 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__fail
[2020-11-24 21:28:49,192 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__success
[2020-11-24 21:28:49,192 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:28:49,192 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:28:49,192 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:28:49,192 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:28:49,193 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 21:28:49,193 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 21:28:49,193 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-24 21:28:49,193 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-24 21:28:49,193 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__fail
[2020-11-24 21:28:49,193 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__success
[2020-11-24 21:28:49,193 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-24 21:28:49,193 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-24 21:28:49,193 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__fail
[2020-11-24 21:28:49,193 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__success
[2020-11-24 21:28:49,193 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-24 21:28:49,193 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-24 21:28:49,193 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-24 21:28:49,193 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-24 21:28:49,194 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__fail
[2020-11-24 21:28:49,194 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__success
[2020-11-24 21:28:49,194 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__fail
[2020-11-24 21:28:49,194 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__success
[2020-11-24 21:28:49,194 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__fail
[2020-11-24 21:28:49,194 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__success
[2020-11-24 21:28:49,194 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__fail
[2020-11-24 21:28:49,194 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__success
[2020-11-24 21:28:49,194 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken_NoBaseCtor__fail
[2020-11-24 21:28:49,194 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken_NoBaseCtor__success
[2020-11-24 21:28:49,194 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken__fail
[2020-11-24 21:28:49,194 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken__success
[2020-11-24 21:28:49,194 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken__fail
[2020-11-24 21:28:49,195 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken__success
[2020-11-24 21:28:49,195 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken__fail
[2020-11-24 21:28:49,195 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken__success
[2020-11-24 21:28:49,195 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken__fail
[2020-11-24 21:28:49,195 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken__success
[2020-11-24 21:28:49,195 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken__fail
[2020-11-24 21:28:49,195 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken__success
[2020-11-24 21:28:49,195 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken__fail
[2020-11-24 21:28:49,195 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken__success
[2020-11-24 21:28:49,195 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken__fail
[2020-11-24 21:28:49,195 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken__success
[2020-11-24 21:28:49,195 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken__fail
[2020-11-24 21:28:49,195 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken__success
[2020-11-24 21:28:49,195 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken__fail
[2020-11-24 21:28:49,196 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken__success
[2020-11-24 21:28:49,196 INFO  L138     BoogieDeclarations]: Found implementation of procedure toKey~address~uint256_FreezableToken__fail
[2020-11-24 21:28:49,196 INFO  L138     BoogieDeclarations]: Found implementation of procedure toKey~address~uint256_FreezableToken__success
[2020-11-24 21:28:49,196 INFO  L138     BoogieDeclarations]: Found implementation of procedure freeze~address~uint64_FreezableToken__fail
[2020-11-24 21:28:49,196 INFO  L138     BoogieDeclarations]: Found implementation of procedure freeze~address~uint64_FreezableToken__success
[2020-11-24 21:28:49,196 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-24 21:28:49,196 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-24 21:28:49,196 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__fail
[2020-11-24 21:28:49,196 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__success
[2020-11-24 21:28:49,196 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__fail
[2020-11-24 21:28:49,196 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__success
[2020-11-24 21:28:49,196 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_BurnableToken__fail
[2020-11-24 21:28:49,197 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_BurnableToken__success
[2020-11-24 21:28:49,197 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-24 21:28:49,197 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-24 21:28:49,197 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-24 21:28:49,197 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-24 21:28:49,197 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-24 21:28:49,197 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-24 21:28:49,197 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-24 21:28:49,197 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-24 21:28:49,197 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-24 21:28:49,197 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-24 21:28:49,197 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail
[2020-11-24 21:28:49,197 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success
[2020-11-24 21:28:49,197 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken__fail
[2020-11-24 21:28:49,198 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken__success
[2020-11-24 21:28:49,198 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__fail
[2020-11-24 21:28:49,198 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success
[2020-11-24 21:28:49,198 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts_NoBaseCtor__fail
[2020-11-24 21:28:49,198 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts_NoBaseCtor__success
[2020-11-24 21:28:49,198 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts__fail
[2020-11-24 21:28:49,198 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts__success
[2020-11-24 21:28:49,198 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts__fail
[2020-11-24 21:28:49,198 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts__success
[2020-11-24 21:28:49,198 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts__fail
[2020-11-24 21:28:49,198 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts__success
[2020-11-24 21:28:49,198 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__fail
[2020-11-24 21:28:49,198 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__success
[2020-11-24 21:28:49,198 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts__fail
[2020-11-24 21:28:49,199 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts__success
[2020-11-24 21:28:49,199 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts__fail
[2020-11-24 21:28:49,199 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts__success
[2020-11-24 21:28:49,199 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts__fail
[2020-11-24 21:28:49,199 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts__success
[2020-11-24 21:28:49,199 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts__fail
[2020-11-24 21:28:49,199 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts__success
[2020-11-24 21:28:49,199 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts__fail
[2020-11-24 21:28:49,199 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts__success
[2020-11-24 21:28:49,199 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken_NoBaseCtor__fail
[2020-11-24 21:28:49,199 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken_NoBaseCtor__success
[2020-11-24 21:28:49,199 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken__fail
[2020-11-24 21:28:49,199 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken__success
[2020-11-24 21:28:49,200 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken__fail
[2020-11-24 21:28:49,200 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken__success
[2020-11-24 21:28:49,200 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken__fail
[2020-11-24 21:28:49,200 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken__success
[2020-11-24 21:28:49,200 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken__fail
[2020-11-24 21:28:49,200 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken__success
[2020-11-24 21:28:49,200 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken__fail
[2020-11-24 21:28:49,200 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken__success
[2020-11-24 21:28:49,200 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken__fail
[2020-11-24 21:28:49,200 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken__success
[2020-11-24 21:28:49,200 INFO  L138     BoogieDeclarations]: Found implementation of procedure init_MainToken__fail
[2020-11-24 21:28:49,200 INFO  L138     BoogieDeclarations]: Found implementation of procedure init_MainToken__success
[2020-11-24 21:28:49,200 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken__fail
[2020-11-24 21:28:49,200 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken__success
[2020-11-24 21:28:49,201 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-24 21:28:49,201 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-24 21:28:49,201 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-24 21:28:49,201 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-24 21:28:49,201 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-24 21:28:49,201 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-24 21:28:49,201 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-24 21:28:49,201 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-24 21:28:49,201 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__fail
[2020-11-24 21:28:49,201 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__success
[2020-11-24 21:28:49,201 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__fail
[2020-11-24 21:28:49,201 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__success
[2020-11-24 21:28:49,201 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-24 21:28:49,202 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-24 21:28:49,202 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-24 21:28:49,202 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-24 21:28:49,202 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Basic
[2020-11-24 21:28:49,202 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Basic
[2020-11-24 21:28:49,202 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-24 21:28:49,202 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-24 21:28:49,202 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BasicToken
[2020-11-24 21:28:49,202 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BasicToken
[2020-11-24 21:28:49,202 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-24 21:28:49,202 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-24 21:28:49,202 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_StandardToken
[2020-11-24 21:28:49,202 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_StandardToken
[2020-11-24 21:28:49,202 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-24 21:28:49,203 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-24 21:28:49,203 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MintableToken
[2020-11-24 21:28:49,203 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MintableToken
[2020-11-24 21:28:49,203 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_FreezableToken
[2020-11-24 21:28:49,203 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_FreezableToken
[2020-11-24 21:28:49,203 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BurnableToken
[2020-11-24 21:28:49,203 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BurnableToken
[2020-11-24 21:28:49,203 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-24 21:28:49,203 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-24 21:28:49,203 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_FreezableMintableToken
[2020-11-24 21:28:49,203 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_FreezableMintableToken
[2020-11-24 21:28:49,203 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Consts
[2020-11-24 21:28:49,203 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Consts
[2020-11-24 21:28:49,203 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MainToken
[2020-11-24 21:28:49,204 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-24 21:28:49,204 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-24 21:28:49,204 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-24 21:28:50,478 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 21:28:50,478 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 21:28:50,478 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 21:28:50,826 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-24 21:28:50,826 INFO  L286             CfgBuilder]: Removed 13 assue(true) statements.
[2020-11-24 21:28:50,830 INFO  L202        PluginConnector]: Adding new model MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:28:50 BoogieIcfgContainer
[2020-11-24 21:28:50,830 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:28:49" (2/2) ...
[2020-11-24 21:28:50,830 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-24 21:28:50,830 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@d85d106 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:28:50, skipping insertion in model container
[2020-11-24 21:28:50,830 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-24 21:28:50,831 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-24 21:28:50,831 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-24 21:28:50,832 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-24 21:28:50,832 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:28:48" (1/3) ...
[2020-11-24 21:28:50,833 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@8908df1 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:28:50, skipping insertion in model container
[2020-11-24 21:28:50,833 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:28:49" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-24 21:28:50,874 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:28:50 NWAContainer
[2020-11-24 21:28:50,874 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-24 21:28:50,874 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-24 21:28:50,874 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-24 21:28:50,875 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-24 21:28:50,875 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:28:50" (3/4) ...
[2020-11-24 21:28:50,876 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@2e7dee77 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:28:50, skipping insertion in model container
[2020-11-24 21:28:50,876 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:28:50" (4/4) ...
[2020-11-24 21:28:50,879 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-24 21:28:50,887 INFO  L110   BuchiProductObserver]: Initial RCFG 5258 locations, 7412 edges
[2020-11-24 21:28:50,888 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-24 21:28:50,908 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-24 21:28:54,914 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-24 21:28:54,931 INFO  L110   BuchiProductObserver]: BuchiProgram size 13180 locations, 24265 edges
[2020-11-24 21:28:54,931 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:28:54 BoogieIcfgContainer
[2020-11-24 21:28:54,931 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-24 21:28:54,932 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-24 21:28:54,932 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-24 21:28:54,933 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-24 21:28:54,933 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:28:54" (1/1) ...
[2020-11-24 21:28:55,157 INFO  L313           BlockEncoder]: Initial Icfg 13180 locations, 24265 edges
[2020-11-24 21:28:55,157 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-24 21:28:55,158 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-24 21:28:55,158 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-24 21:28:55,158 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-24 21:28:55,181 INFO  L70    emoveInfeasibleEdges]: Removed 303 edges and 29 locations because of local infeasibility
[2020-11-24 21:28:55,205 INFO  L70        RemoveSinkStates]: Removed 158 edges and 105 locations by removing sink states
[2020-11-24 21:28:55,236 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-24 21:28:55,245 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-24 21:28:55,257 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-24 21:28:55,257 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-24 21:28:55,264 INFO  L313           BlockEncoder]: Encoded RCFG 12978 locations, 23703 edges
[2020-11-24 21:28:55,264 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 09:28:55 BasicIcfg
[2020-11-24 21:28:55,265 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-24 21:28:55,265 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-24 21:28:55,265 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-24 21:28:55,267 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-24 21:28:55,267 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:28:55,268 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:28:48" (1/6) ...
[2020-11-24 21:28:55,269 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2a430938 and model type MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 09:28:55, skipping insertion in model container
[2020-11-24 21:28:55,269 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:28:55,269 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:28:49" (2/6) ...
[2020-11-24 21:28:55,269 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2a430938 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 09:28:55, skipping insertion in model container
[2020-11-24 21:28:55,270 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:28:55,270 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:28:50" (3/6) ...
[2020-11-24 21:28:55,270 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2a430938 and model type MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 09:28:55, skipping insertion in model container
[2020-11-24 21:28:55,270 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:28:55,270 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:28:50" (4/6) ...
[2020-11-24 21:28:55,270 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2a430938 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 09:28:55, skipping insertion in model container
[2020-11-24 21:28:55,270 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:28:55,271 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:28:54" (5/6) ...
[2020-11-24 21:28:55,271 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2a430938 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 24.11 09:28:55, skipping insertion in model container
[2020-11-24 21:28:55,271 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:28:55,271 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 09:28:55" (6/6) ...
[2020-11-24 21:28:55,272 INFO  L404   chiAutomizerObserver]: Analyzing ICFG MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transfer-self.bpl_BEv2
[2020-11-24 21:28:55,311 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-24 21:28:55,312 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-24 21:28:55,312 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-24 21:28:55,312 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-24 21:28:55,312 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-24 21:28:55,312 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-24 21:28:55,312 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-24 21:28:55,312 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-24 21:28:55,312 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-24 21:28:55,413 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 12978 states.
[2020-11-24 21:28:55,572 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:28:55,572 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:28:55,572 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:28:55,583 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:28:55,583 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:28:55,583 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-24 21:28:55,583 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 12978 states.
[2020-11-24 21:28:55,640 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:28:55,640 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:28:55,640 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:28:55,643 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:28:55,643 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_MainToken0 := false;
[L2]                  call_transfer_MainToken0 := false;
[L2]      CALL        call main();
[L14378]              assume null == 0;
[L14379]  CALL        call this := FreshRefGenerator__success();
[L6396]               havoc newRef;
[L6397]               assume Alloc[newRef] == false;
[L6398]               Alloc[newRef] := true;
[L6399]               assume newRef != null;
[L14379]  RET         call this := FreshRefGenerator__success();
[L14380]              assume now >= 0;
[L14381]              assume DType[this] == MainToken;
[L14382]              assume msgvalue_MSG == 0;
[L14383]              gas := gas - 53000;
[L14384]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4183]               havoc __exception;
[L4184]               revert := false;
[L4185]   COND FALSE  !(__exception)
[L4222]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9205]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9007]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8983]               assume msgsender_MSG != null;
[L8984]               Balance[this] := 0;
[L8985]               TOKEN_DECIMALS_Consts[this] := 18;
[L8986]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8987]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8988]               TOKEN_NAME_Consts[this] := -1051245219;
[L8989]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8990]               PAUSED_Consts[this] := false;
[L8991]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8992]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               CONTINUE_MINTING_Consts[this] := true;
[L9007]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   COND FALSE  !(revert)
[L9205]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   COND TRUE   revert
[L4222]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4223]               assume !revert && gas >= 0;
[L14384]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14385]              assume !revert && gas >= 0;

Loop:
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND TRUE   choice == 38
[L14131]              gas := gas - 21000;
[L14132]  COND FALSE  !(gas >= 0)
[L14388]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:28:55,668 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:28:55,668 INFO  L82        PathProgramCache]: Analyzing trace with hash 1724132387, now seen corresponding path program 1 times
[2020-11-24 21:28:55,672 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:28:55,692 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:28:55,731 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 21:28:55,733 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:28:55,734 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 21:28:56,147 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:28:56,155 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 21:28:56,156 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-24 21:28:56,157 INFO  L87              Difference]: Start difference. First operand 12978 states. Second operand 4 states.
[2020-11-24 21:28:57,462 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:28:57,462 INFO  L93              Difference]: Finished difference Result 8080 states and 9481 transitions.
[2020-11-24 21:28:57,462 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 21:28:57,463 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8080 states and 9481 transitions.
[2020-11-24 21:28:57,496 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:28:57,539 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8080 states to 8076 states and 9473 transitions.
[2020-11-24 21:28:57,539 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-24 21:28:57,543 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1821
[2020-11-24 21:28:57,543 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8076 states and 9473 transitions.
[2020-11-24 21:28:57,560 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:28:57,560 INFO  L728         BuchiCegarLoop]: Abstraction has 8076 states and 9473 transitions.
[2020-11-24 21:28:57,581 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8076 states and 9473 transitions.
[2020-11-24 21:28:57,685 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8076 to 8076.
[2020-11-24 21:28:57,685 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8076 states.
[2020-11-24 21:28:57,698 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8076 states to 8076 states and 9473 transitions.
[2020-11-24 21:28:57,699 INFO  L751         BuchiCegarLoop]: Abstraction has 8076 states and 9473 transitions.
[2020-11-24 21:28:57,699 INFO  L631         BuchiCegarLoop]: Abstraction has 8076 states and 9473 transitions.
[2020-11-24 21:28:57,699 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-24 21:28:57,699 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8076 states and 9473 transitions.
[2020-11-24 21:28:57,712 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:28:57,712 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:28:57,712 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:28:57,714 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:28:57,714 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_MainToken0 := false;
[L2]                  call_transfer_MainToken0 := false;
[L2]      CALL        call main();
[L14378]              assume null == 0;
[L14379]  CALL        call this := FreshRefGenerator__success();
[L6396]               havoc newRef;
[L6397]               assume Alloc[newRef] == false;
[L6398]               Alloc[newRef] := true;
[L6399]               assume newRef != null;
[L14379]  RET         call this := FreshRefGenerator__success();
[L14380]              assume now >= 0;
[L14381]              assume DType[this] == MainToken;
[L14382]              assume msgvalue_MSG == 0;
[L14383]              gas := gas - 53000;
[L14384]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4183]               havoc __exception;
[L4184]               revert := false;
[L4185]   COND FALSE  !(__exception)
[L4222]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9205]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9007]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8983]               assume msgsender_MSG != null;
[L8984]               Balance[this] := 0;
[L8985]               TOKEN_DECIMALS_Consts[this] := 18;
[L8986]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8987]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8988]               TOKEN_NAME_Consts[this] := -1051245219;
[L8989]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8990]               PAUSED_Consts[this] := false;
[L8991]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8992]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               CONTINUE_MINTING_Consts[this] := true;
[L9007]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   COND FALSE  !(revert)
[L9205]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   COND TRUE   revert
[L4222]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4223]               assume !revert && gas >= 0;
[L14384]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14385]              assume !revert && gas >= 0;
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND TRUE   choice == 36
[L14143]              gas := gas - 21000;
[L14144]  COND TRUE   gas >= 0
[L14145]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14146]              assume msgvalue_MSG == 0;
[L14147]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4599]               havoc __exception;
[L4600]               revert := false;
[L4601]   COND FALSE  !(__exception)
[L4638]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9355]   COND TRUE   !!paused_Pausable[this]
[L9356]               revert := true;
[L4638]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4639]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((_success_s1572 == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14147]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14388]  RET         call CorralChoice_MainToken(this);

Loop:
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND TRUE   choice == 36
[L14143]              gas := gas - 21000;
[L14144]  COND TRUE   gas >= 0
[L14145]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14146]              assume msgvalue_MSG == 0;
[L14147]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4599]               havoc __exception;
[L4600]               revert := false;
[L4601]   COND FALSE  !(__exception)
[L4638]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9355]   COND TRUE   !!paused_Pausable[this]
[L9356]               revert := true;
[L4638]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4639]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((_success_s1572 == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14147]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14388]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:28:57,718 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:28:57,718 INFO  L82        PathProgramCache]: Analyzing trace with hash -1362689826, now seen corresponding path program 1 times
[2020-11-24 21:28:57,719 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:28:57,733 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:28:57,760 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 21:28:57,760 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:28:57,760 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:28:57,761 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:28:57,761 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:28:57,762 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:28:57,762 INFO  L87              Difference]: Start difference. First operand 8076 states and 9473 transitions. cyclomatic complexity: 1415 Second operand 3 states.
[2020-11-24 21:28:57,958 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:28:57,959 INFO  L93              Difference]: Finished difference Result 9526 states and 10913 transitions.
[2020-11-24 21:28:57,959 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:28:57,959 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9526 states and 10913 transitions.
[2020-11-24 21:28:57,985 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:28:58,028 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9526 states to 9526 states and 10913 transitions.
[2020-11-24 21:28:58,028 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2244
[2020-11-24 21:28:58,030 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2244
[2020-11-24 21:28:58,030 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9526 states and 10913 transitions.
[2020-11-24 21:28:58,040 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:28:58,040 INFO  L728         BuchiCegarLoop]: Abstraction has 9526 states and 10913 transitions.
[2020-11-24 21:28:58,049 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9526 states and 10913 transitions.
[2020-11-24 21:28:58,133 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9526 to 8436.
[2020-11-24 21:28:58,133 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8436 states.
[2020-11-24 21:28:58,143 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8436 states to 8436 states and 9559 transitions.
[2020-11-24 21:28:58,143 INFO  L751         BuchiCegarLoop]: Abstraction has 8436 states and 9559 transitions.
[2020-11-24 21:28:58,144 INFO  L631         BuchiCegarLoop]: Abstraction has 8436 states and 9559 transitions.
[2020-11-24 21:28:58,144 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-24 21:28:58,144 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8436 states and 9559 transitions.
[2020-11-24 21:28:58,155 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:28:58,155 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:28:58,155 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:28:58,162 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:28:58,162 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_MainToken0 := false;
[L2]                  call_transfer_MainToken0 := false;
[L2]      CALL        call main();
[L14378]              assume null == 0;
[L14379]  CALL        call this := FreshRefGenerator__success();
[L6396]               havoc newRef;
[L6397]               assume Alloc[newRef] == false;
[L6398]               Alloc[newRef] := true;
[L6399]               assume newRef != null;
[L14379]  RET         call this := FreshRefGenerator__success();
[L14380]              assume now >= 0;
[L14381]              assume DType[this] == MainToken;
[L14382]              assume msgvalue_MSG == 0;
[L14383]              gas := gas - 53000;
[L14384]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4183]               havoc __exception;
[L4184]               revert := false;
[L4185]   COND FALSE  !(__exception)
[L4222]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9205]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9007]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8983]               assume msgsender_MSG != null;
[L8984]               Balance[this] := 0;
[L8985]               TOKEN_DECIMALS_Consts[this] := 18;
[L8986]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8987]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8988]               TOKEN_NAME_Consts[this] := -1051245219;
[L8989]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8990]               PAUSED_Consts[this] := false;
[L8991]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8992]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               CONTINUE_MINTING_Consts[this] := true;
[L9007]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   COND FALSE  !(revert)
[L9205]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   COND FALSE  !(revert)
[L9209]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L9209]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9210]   COND FALSE  !(revert)
[L9213]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L9213]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9214]   COND FALSE  !(revert)
[L9217]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L9217]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9218]   COND FALSE  !(revert)
[L9221]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L9221]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9222]   COND FALSE  !(revert)
[L9225]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L9225]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9226]   COND FALSE  !(revert)
[L9229]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L9229]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9230]   COND FALSE  !(revert)
[L9233]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L9233]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9234]   COND FALSE  !(revert)
[L9237]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8792]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8792]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8793]   COND FALSE  !(revert)
[L8796]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L8796]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L8797]   COND FALSE  !(revert)
[L8800]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8800]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8801]   COND FALSE  !(revert)
[L8804]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L8804]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8805]   COND FALSE  !(revert)
[L8808]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L8808]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8809]   COND FALSE  !(revert)
[L8812]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8812]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8813]   COND FALSE  !(revert)
[L8816]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L8816]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8817]   COND FALSE  !(revert)
[L8820]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8749]               assume msgsender_MSG != null;
[L8750]               Balance[this] := 0;
[L8820]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8821]   COND FALSE  !(revert)
[L9237]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9238]   COND FALSE  !(revert)
[L9241]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8536]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8536]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8537]   COND FALSE  !(revert)
[L8540]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8540]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8541]   COND FALSE  !(revert)
[L8544]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8513]               assume msgsender_MSG != null;
[L8514]               Balance[this] := 0;
[L8544]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8545]   COND FALSE  !(revert)
[L9241]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9242]   COND FALSE  !(revert)
[L9245]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8662]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8662]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8663]   COND FALSE  !(revert)
[L8666]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8642]               assume msgsender_MSG != null;
[L8643]               Balance[this] := 0;
[L8644]               paused_Pausable[this] := false;
[L8666]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8667]   COND FALSE  !(revert)
[L9245]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9249]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9133]               assume msgsender_MSG != null;
[L9134]               Balance[this] := 0;
[L9135]               initialized_MainToken[this] := false;
[L9137]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9404]   COND TRUE   !!initialized_MainToken[this]
[L9405]               revert := true;
[L9137]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND TRUE   revert
[L9249]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9250]   COND FALSE  !(revert)
[L4222]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4223]               assume !revert && gas >= 0;
[L14384]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14385]              assume !revert && gas >= 0;
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND TRUE   choice == 36
[L14143]              gas := gas - 21000;
[L14144]  COND TRUE   gas >= 0
[L14145]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14146]              assume msgvalue_MSG == 0;
[L14147]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4599]               havoc __exception;
[L4600]               revert := false;
[L4601]   COND FALSE  !(__exception)
[L4638]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9355]   COND TRUE   !!paused_Pausable[this]
[L9356]               revert := true;
[L4638]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4639]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((_success_s1572 == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14147]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14388]  RET         call CorralChoice_MainToken(this);

Loop:
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND TRUE   choice == 36
[L14143]              gas := gas - 21000;
[L14144]  COND TRUE   gas >= 0
[L14145]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14146]              assume msgvalue_MSG == 0;
[L14147]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4599]               havoc __exception;
[L4600]               revert := false;
[L4601]   COND FALSE  !(__exception)
[L4638]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9355]   COND TRUE   !!paused_Pausable[this]
[L9356]               revert := true;
[L4638]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4639]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((_success_s1572 == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14147]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14388]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:28:58,173 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:28:58,173 INFO  L82        PathProgramCache]: Analyzing trace with hash -2099759901, now seen corresponding path program 1 times
[2020-11-24 21:28:58,174 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:28:58,214 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:28:58,805 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9823 trivial. 0 not checked.
[2020-11-24 21:28:58,806 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:28:58,806 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:28:58,807 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:28:58,807 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:28:58,807 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:28:58,807 INFO  L87              Difference]: Start difference. First operand 8436 states and 9559 transitions. cyclomatic complexity: 1141 Second operand 3 states.
[2020-11-24 21:28:58,942 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:28:58,943 INFO  L93              Difference]: Finished difference Result 9526 states and 10759 transitions.
[2020-11-24 21:28:58,943 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:28:58,943 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9526 states and 10759 transitions.
[2020-11-24 21:28:58,963 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:28:58,990 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9526 states to 9186 states and 10363 transitions.
[2020-11-24 21:28:58,990 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2124
[2020-11-24 21:28:58,991 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2153
[2020-11-24 21:28:58,991 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9186 states and 10363 transitions.
[2020-11-24 21:28:58,999 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:28:58,999 INFO  L728         BuchiCegarLoop]: Abstraction has 9186 states and 10363 transitions.
[2020-11-24 21:28:59,006 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9186 states and 10363 transitions.
[2020-11-24 21:28:59,065 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9186 to 8202.
[2020-11-24 21:28:59,065 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8202 states.
[2020-11-24 21:28:59,075 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8202 states to 8202 states and 9115 transitions.
[2020-11-24 21:28:59,075 INFO  L751         BuchiCegarLoop]: Abstraction has 8202 states and 9115 transitions.
[2020-11-24 21:28:59,075 INFO  L631         BuchiCegarLoop]: Abstraction has 8202 states and 9115 transitions.
[2020-11-24 21:28:59,075 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-24 21:28:59,075 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8202 states and 9115 transitions.
[2020-11-24 21:28:59,084 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:28:59,084 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:28:59,084 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:28:59,088 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:28:59,088 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_MainToken0 := false;
[L2]                  call_transfer_MainToken0 := false;
[L2]      CALL        call main();
[L14378]              assume null == 0;
[L14379]  CALL        call this := FreshRefGenerator__success();
[L6396]               havoc newRef;
[L6397]               assume Alloc[newRef] == false;
[L6398]               Alloc[newRef] := true;
[L6399]               assume newRef != null;
[L14379]  RET         call this := FreshRefGenerator__success();
[L14380]              assume now >= 0;
[L14381]              assume DType[this] == MainToken;
[L14382]              assume msgvalue_MSG == 0;
[L14383]              gas := gas - 53000;
[L14384]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4183]               havoc __exception;
[L4184]               revert := false;
[L4185]   COND FALSE  !(__exception)
[L4222]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9205]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9007]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8983]               assume msgsender_MSG != null;
[L8984]               Balance[this] := 0;
[L8985]               TOKEN_DECIMALS_Consts[this] := 18;
[L8986]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8987]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8988]               TOKEN_NAME_Consts[this] := -1051245219;
[L8989]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8990]               PAUSED_Consts[this] := false;
[L8991]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8992]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               CONTINUE_MINTING_Consts[this] := true;
[L9007]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   COND FALSE  !(revert)
[L9205]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   COND FALSE  !(revert)
[L9209]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L9209]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9210]   COND FALSE  !(revert)
[L9213]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L9213]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9214]   COND FALSE  !(revert)
[L9217]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L9217]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9218]   COND FALSE  !(revert)
[L9221]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L9221]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9222]   COND FALSE  !(revert)
[L9225]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L9225]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9226]   COND FALSE  !(revert)
[L9229]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L9229]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9230]   COND FALSE  !(revert)
[L9233]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L9233]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9234]   COND FALSE  !(revert)
[L9237]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8792]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8792]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8793]   COND FALSE  !(revert)
[L8796]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L8796]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L8797]   COND FALSE  !(revert)
[L8800]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8800]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8801]   COND FALSE  !(revert)
[L8804]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L8804]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8805]   COND FALSE  !(revert)
[L8808]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L8808]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8809]   COND FALSE  !(revert)
[L8812]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8812]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8813]   COND FALSE  !(revert)
[L8816]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L8816]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8817]   COND FALSE  !(revert)
[L8820]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8749]               assume msgsender_MSG != null;
[L8750]               Balance[this] := 0;
[L8820]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8821]   COND FALSE  !(revert)
[L9237]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9238]   COND FALSE  !(revert)
[L9241]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8536]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8536]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8537]   COND FALSE  !(revert)
[L8540]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8540]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8541]   COND FALSE  !(revert)
[L8544]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8513]               assume msgsender_MSG != null;
[L8514]               Balance[this] := 0;
[L8544]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8545]   COND FALSE  !(revert)
[L9241]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9242]   COND FALSE  !(revert)
[L9245]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8662]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8662]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8663]   COND FALSE  !(revert)
[L8666]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8642]               assume msgsender_MSG != null;
[L8643]               Balance[this] := 0;
[L8644]               paused_Pausable[this] := false;
[L8666]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8667]   COND FALSE  !(revert)
[L9245]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9249]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9133]               assume msgsender_MSG != null;
[L9134]               Balance[this] := 0;
[L9135]               initialized_MainToken[this] := false;
[L9137]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9404]   COND FALSE  !(!!initialized_MainToken[this])
[L9408]               initialized_MainToken[this] := true;
[L9409]   COND FALSE  !(PAUSED_Consts[this])
[L9419]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9429]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9137]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   COND TRUE   DType[this] == MainToken
[L9142]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7055]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12332]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7055]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   COND TRUE   DType[this] == MainToken
[L7060]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7103]               __var_11 := null;
[L7104]   COND FALSE  !(!(_newOwner_s581 != null))
[L7108]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7109]               owner_Ownable[this] := _newOwner_s581;
[L7060]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7061]   COND FALSE  !(revert)
[L9142]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9143]   COND FALSE  !(revert)
[L9249]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9250]   COND FALSE  !(revert)
[L4222]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4223]               assume !revert && gas >= 0;
[L14384]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14385]              assume !revert && gas >= 0;
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND TRUE   choice == 36
[L14143]              gas := gas - 21000;
[L14144]  COND TRUE   gas >= 0
[L14145]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14146]              assume msgvalue_MSG == 0;
[L14147]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4599]               havoc __exception;
[L4600]               revert := false;
[L4601]   COND TRUE   __exception
[L4602]               __tmp__Balance := Balance;
[L4603]               __tmp__DType := DType;
[L4604]               __tmp__Alloc := Alloc;
[L4605]               __tmp__balance_ADDR := balance_ADDR;
[L4606]               __tmp__M_Ref_int := M_Ref_int;
[L4607]               __tmp__sum_balances0 := sum_balances0;
[L4608]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4609]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4610]               __tmp__sum_allowed1 := sum_allowed1;
[L4611]               __tmp__M_int_int := M_int_int;
[L4612]               __tmp__sum_chains2 := sum_chains2;
[L4613]               __tmp__sum_freezings3 := sum_freezings3;
[L4614]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4615]               __tmp__Length := Length;
[L4616]               __tmp__now := now;
[L4617]               __tmp__balances_BasicToken := balances_BasicToken;
[L4618]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4619]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4620]               __tmp__owner_Ownable := owner_Ownable;
[L4621]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4622]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4623]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4624]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4625]               __tmp__paused_Pausable := paused_Pausable;
[L4626]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4627]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4628]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4629]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4630]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4631]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4632]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4633]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4634]               __tmp__initialized_MainToken := initialized_MainToken;
[L4635]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9335]   COND TRUE   !!__tmp__paused_Pausable[this]
[L9336]               revert := true;
[L4635]   RET         call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4636]               assume revert || gas < 0;
[L14147]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14388]  RET         call CorralChoice_MainToken(this);

Loop:
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND TRUE   choice == 36
[L14143]              gas := gas - 21000;
[L14144]  COND TRUE   gas >= 0
[L14145]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14146]              assume msgvalue_MSG == 0;
[L14147]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4599]               havoc __exception;
[L4600]               revert := false;
[L4601]   COND TRUE   __exception
[L4602]               __tmp__Balance := Balance;
[L4603]               __tmp__DType := DType;
[L4604]               __tmp__Alloc := Alloc;
[L4605]               __tmp__balance_ADDR := balance_ADDR;
[L4606]               __tmp__M_Ref_int := M_Ref_int;
[L4607]               __tmp__sum_balances0 := sum_balances0;
[L4608]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4609]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4610]               __tmp__sum_allowed1 := sum_allowed1;
[L4611]               __tmp__M_int_int := M_int_int;
[L4612]               __tmp__sum_chains2 := sum_chains2;
[L4613]               __tmp__sum_freezings3 := sum_freezings3;
[L4614]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4615]               __tmp__Length := Length;
[L4616]               __tmp__now := now;
[L4617]               __tmp__balances_BasicToken := balances_BasicToken;
[L4618]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4619]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4620]               __tmp__owner_Ownable := owner_Ownable;
[L4621]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4622]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4623]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4624]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4625]               __tmp__paused_Pausable := paused_Pausable;
[L4626]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4627]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4628]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4629]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4630]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4631]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4632]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4633]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4634]               __tmp__initialized_MainToken := initialized_MainToken;
[L4635]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9335]   COND TRUE   !!__tmp__paused_Pausable[this]
[L9336]               revert := true;
[L4635]   RET         call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4636]               assume revert || gas < 0;
[L14147]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14388]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:28:59,098 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:28:59,098 INFO  L82        PathProgramCache]: Analyzing trace with hash -915154173, now seen corresponding path program 1 times
[2020-11-24 21:28:59,099 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:28:59,132 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:28:59,752 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9823 trivial. 0 not checked.
[2020-11-24 21:28:59,752 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:28:59,752 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [11] imperfect sequences [] total 11
[2020-11-24 21:28:59,753 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:28:59,754 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-24 21:28:59,754 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=111, Unknown=0, NotChecked=0, Total=132
[2020-11-24 21:28:59,754 INFO  L87              Difference]: Start difference. First operand 8202 states and 9115 transitions. cyclomatic complexity: 931 Second operand 12 states.
[2020-11-24 21:29:08,036 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:29:08,037 INFO  L93              Difference]: Finished difference Result 13196 states and 14773 transitions.
[2020-11-24 21:29:08,037 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-24 21:29:08,037 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 13196 states and 14773 transitions.
[2020-11-24 21:29:08,062 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 12
[2020-11-24 21:29:08,096 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 13196 states to 13158 states and 14728 transitions.
[2020-11-24 21:29:08,096 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3136
[2020-11-24 21:29:08,097 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3136
[2020-11-24 21:29:08,097 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 13158 states and 14728 transitions.
[2020-11-24 21:29:08,106 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:29:08,106 INFO  L728         BuchiCegarLoop]: Abstraction has 13158 states and 14728 transitions.
[2020-11-24 21:29:08,114 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 13158 states and 14728 transitions.
[2020-11-24 21:29:08,203 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 13158 to 11275.
[2020-11-24 21:29:08,203 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11275 states.
[2020-11-24 21:29:08,217 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11275 states to 11275 states and 12824 transitions.
[2020-11-24 21:29:08,217 INFO  L751         BuchiCegarLoop]: Abstraction has 11275 states and 12824 transitions.
[2020-11-24 21:29:08,217 INFO  L631         BuchiCegarLoop]: Abstraction has 11275 states and 12824 transitions.
[2020-11-24 21:29:08,217 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-24 21:29:08,217 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11275 states and 12824 transitions.
[2020-11-24 21:29:08,231 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-24 21:29:08,231 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:29:08,231 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:29:08,236 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:29:08,236 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_MainToken0 := false;
[L2]                  call_transfer_MainToken0 := false;
[L2]      CALL        call main();
[L14378]              assume null == 0;
[L14379]  CALL        call this := FreshRefGenerator__success();
[L6396]               havoc newRef;
[L6397]               assume Alloc[newRef] == false;
[L6398]               Alloc[newRef] := true;
[L6399]               assume newRef != null;
[L14379]  RET         call this := FreshRefGenerator__success();
[L14380]              assume now >= 0;
[L14381]              assume DType[this] == MainToken;
[L14382]              assume msgvalue_MSG == 0;
[L14383]              gas := gas - 53000;
[L14384]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4183]               havoc __exception;
[L4184]               revert := false;
[L4185]   COND FALSE  !(__exception)
[L4222]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9205]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9007]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8983]               assume msgsender_MSG != null;
[L8984]               Balance[this] := 0;
[L8985]               TOKEN_DECIMALS_Consts[this] := 18;
[L8986]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8987]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8988]               TOKEN_NAME_Consts[this] := -1051245219;
[L8989]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8990]               PAUSED_Consts[this] := false;
[L8991]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8992]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               CONTINUE_MINTING_Consts[this] := true;
[L9007]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   COND FALSE  !(revert)
[L9205]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   COND FALSE  !(revert)
[L9209]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L9209]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9210]   COND FALSE  !(revert)
[L9213]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L9213]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9214]   COND FALSE  !(revert)
[L9217]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L9217]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9218]   COND FALSE  !(revert)
[L9221]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L9221]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9222]   COND FALSE  !(revert)
[L9225]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L9225]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9226]   COND FALSE  !(revert)
[L9229]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L9229]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9230]   COND FALSE  !(revert)
[L9233]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L9233]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9234]   COND FALSE  !(revert)
[L9237]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8792]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8792]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8793]   COND FALSE  !(revert)
[L8796]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L8796]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L8797]   COND FALSE  !(revert)
[L8800]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8800]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8801]   COND FALSE  !(revert)
[L8804]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L8804]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8805]   COND FALSE  !(revert)
[L8808]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L8808]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8809]   COND FALSE  !(revert)
[L8812]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8812]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8813]   COND FALSE  !(revert)
[L8816]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L8816]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8817]   COND FALSE  !(revert)
[L8820]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8749]               assume msgsender_MSG != null;
[L8750]               Balance[this] := 0;
[L8820]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8821]   COND FALSE  !(revert)
[L9237]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9238]   COND FALSE  !(revert)
[L9241]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8536]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8536]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8537]   COND FALSE  !(revert)
[L8540]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8540]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8541]   COND FALSE  !(revert)
[L8544]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8513]               assume msgsender_MSG != null;
[L8514]               Balance[this] := 0;
[L8544]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8545]   COND FALSE  !(revert)
[L9241]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9242]   COND FALSE  !(revert)
[L9245]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8662]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8662]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8663]   COND FALSE  !(revert)
[L8666]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8642]               assume msgsender_MSG != null;
[L8643]               Balance[this] := 0;
[L8644]               paused_Pausable[this] := false;
[L8666]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8667]   COND FALSE  !(revert)
[L9245]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9249]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9133]               assume msgsender_MSG != null;
[L9134]               Balance[this] := 0;
[L9135]               initialized_MainToken[this] := false;
[L9137]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9404]   COND FALSE  !(!!initialized_MainToken[this])
[L9408]               initialized_MainToken[this] := true;
[L9409]   COND TRUE   PAUSED_Consts[this]
[L9410]   COND TRUE   DType[this] == MainToken
[L9411]   CALL        call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8687]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12332]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L8687]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8688]   COND FALSE  !(revert)
[L8691]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12380]  COND FALSE  !(!!paused_Pausable[this])
[L8691]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8692]   COND FALSE  !(revert)
[L8695]               paused_Pausable[this] := true;
[L8696]               assert { :EventEmitted "Pause_Pausable" } true;
[L9411]   RET         call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9412]   COND FALSE  !(revert)
[L9419]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9429]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9137]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   COND TRUE   DType[this] == MainToken
[L9142]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7055]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12332]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7055]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   COND TRUE   DType[this] == MainToken
[L7060]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7103]               __var_11 := null;
[L7104]   COND FALSE  !(!(_newOwner_s581 != null))
[L7108]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7109]               owner_Ownable[this] := _newOwner_s581;
[L7060]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7061]   COND FALSE  !(revert)
[L9142]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9143]   COND FALSE  !(revert)
[L9249]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9250]   COND FALSE  !(revert)
[L4222]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4223]               assume !revert && gas >= 0;
[L14384]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14385]              assume !revert && gas >= 0;
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND TRUE   choice == 36
[L14143]              gas := gas - 21000;
[L14144]  COND TRUE   gas >= 0
[L14145]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14146]              assume msgvalue_MSG == 0;
[L14147]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4599]               havoc __exception;
[L4600]               revert := false;
[L4601]   COND TRUE   __exception
[L4602]               __tmp__Balance := Balance;
[L4603]               __tmp__DType := DType;
[L4604]               __tmp__Alloc := Alloc;
[L4605]               __tmp__balance_ADDR := balance_ADDR;
[L4606]               __tmp__M_Ref_int := M_Ref_int;
[L4607]               __tmp__sum_balances0 := sum_balances0;
[L4608]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4609]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4610]               __tmp__sum_allowed1 := sum_allowed1;
[L4611]               __tmp__M_int_int := M_int_int;
[L4612]               __tmp__sum_chains2 := sum_chains2;
[L4613]               __tmp__sum_freezings3 := sum_freezings3;
[L4614]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4615]               __tmp__Length := Length;
[L4616]               __tmp__now := now;
[L4617]               __tmp__balances_BasicToken := balances_BasicToken;
[L4618]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4619]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4620]               __tmp__owner_Ownable := owner_Ownable;
[L4621]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4622]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4623]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4624]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4625]               __tmp__paused_Pausable := paused_Pausable;
[L4626]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4627]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4628]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4629]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4630]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4631]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4632]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4633]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4634]               __tmp__initialized_MainToken := initialized_MainToken;
[L4635]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9335]   COND TRUE   !!__tmp__paused_Pausable[this]
[L9336]               revert := true;
[L4635]   RET         call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4636]               assume revert || gas < 0;
[L14147]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14388]  RET         call CorralChoice_MainToken(this);

Loop:
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND TRUE   choice == 36
[L14143]              gas := gas - 21000;
[L14144]  COND TRUE   gas >= 0
[L14145]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14146]              assume msgvalue_MSG == 0;
[L14147]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4599]               havoc __exception;
[L4600]               revert := false;
[L4601]   COND TRUE   __exception
[L4602]               __tmp__Balance := Balance;
[L4603]               __tmp__DType := DType;
[L4604]               __tmp__Alloc := Alloc;
[L4605]               __tmp__balance_ADDR := balance_ADDR;
[L4606]               __tmp__M_Ref_int := M_Ref_int;
[L4607]               __tmp__sum_balances0 := sum_balances0;
[L4608]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4609]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4610]               __tmp__sum_allowed1 := sum_allowed1;
[L4611]               __tmp__M_int_int := M_int_int;
[L4612]               __tmp__sum_chains2 := sum_chains2;
[L4613]               __tmp__sum_freezings3 := sum_freezings3;
[L4614]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4615]               __tmp__Length := Length;
[L4616]               __tmp__now := now;
[L4617]               __tmp__balances_BasicToken := balances_BasicToken;
[L4618]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4619]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4620]               __tmp__owner_Ownable := owner_Ownable;
[L4621]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4622]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4623]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4624]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4625]               __tmp__paused_Pausable := paused_Pausable;
[L4626]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4627]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4628]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4629]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4630]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4631]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4632]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4633]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4634]               __tmp__initialized_MainToken := initialized_MainToken;
[L4635]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9335]   COND TRUE   !!__tmp__paused_Pausable[this]
[L9336]               revert := true;
[L4635]   RET         call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4636]               assume revert || gas < 0;
[L14147]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14388]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:29:08,249 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:29:08,249 INFO  L82        PathProgramCache]: Analyzing trace with hash 809962704, now seen corresponding path program 1 times
[2020-11-24 21:29:08,250 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:29:08,282 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:29:08,808 INFO  L134       CoverageAnalysis]: Checked inductivity of 9826 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9826 trivial. 0 not checked.
[2020-11-24 21:29:08,808 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:29:08,809 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 21:29:08,809 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:29:08,809 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 21:29:08,809 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 21:29:08,810 INFO  L87              Difference]: Start difference. First operand 11275 states and 12824 transitions. cyclomatic complexity: 1577 Second operand 7 states.
[2020-11-24 21:29:08,921 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:29:08,921 INFO  L93              Difference]: Finished difference Result 11269 states and 12817 transitions.
[2020-11-24 21:29:08,921 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 21:29:08,921 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11269 states and 12817 transitions.
[2020-11-24 21:29:08,943 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-24 21:29:08,973 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11269 states to 11248 states and 12792 transitions.
[2020-11-24 21:29:08,973 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2608
[2020-11-24 21:29:08,974 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2608
[2020-11-24 21:29:08,974 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11248 states and 12792 transitions.
[2020-11-24 21:29:08,982 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:29:08,982 INFO  L728         BuchiCegarLoop]: Abstraction has 11248 states and 12792 transitions.
[2020-11-24 21:29:08,989 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11248 states and 12792 transitions.
[2020-11-24 21:29:09,059 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11248 to 11248.
[2020-11-24 21:29:09,059 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11248 states.
[2020-11-24 21:29:09,074 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11248 states to 11248 states and 12792 transitions.
[2020-11-24 21:29:09,074 INFO  L751         BuchiCegarLoop]: Abstraction has 11248 states and 12792 transitions.
[2020-11-24 21:29:09,074 INFO  L631         BuchiCegarLoop]: Abstraction has 11248 states and 12792 transitions.
[2020-11-24 21:29:09,074 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-24 21:29:09,074 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11248 states and 12792 transitions.
[2020-11-24 21:29:09,087 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-24 21:29:09,087 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:29:09,087 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:29:09,090 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:29:09,090 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_MainToken0 := false;
[L2]                  call_transfer_MainToken0 := false;
[L2]      CALL        call main();
[L14378]              assume null == 0;
[L14379]  CALL        call this := FreshRefGenerator__success();
[L6396]               havoc newRef;
[L6397]               assume Alloc[newRef] == false;
[L6398]               Alloc[newRef] := true;
[L6399]               assume newRef != null;
[L14379]  RET         call this := FreshRefGenerator__success();
[L14380]              assume now >= 0;
[L14381]              assume DType[this] == MainToken;
[L14382]              assume msgvalue_MSG == 0;
[L14383]              gas := gas - 53000;
[L14384]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4183]               havoc __exception;
[L4184]               revert := false;
[L4185]   COND FALSE  !(__exception)
[L4222]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9205]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9007]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8983]               assume msgsender_MSG != null;
[L8984]               Balance[this] := 0;
[L8985]               TOKEN_DECIMALS_Consts[this] := 18;
[L8986]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8987]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8988]               TOKEN_NAME_Consts[this] := -1051245219;
[L8989]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8990]               PAUSED_Consts[this] := false;
[L8991]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8992]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               CONTINUE_MINTING_Consts[this] := true;
[L9007]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   COND FALSE  !(revert)
[L9205]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   COND FALSE  !(revert)
[L9209]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L9209]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9210]   COND FALSE  !(revert)
[L9213]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L9213]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9214]   COND FALSE  !(revert)
[L9217]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L9217]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9218]   COND FALSE  !(revert)
[L9221]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L9221]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9222]   COND FALSE  !(revert)
[L9225]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L9225]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9226]   COND FALSE  !(revert)
[L9229]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L9229]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9230]   COND FALSE  !(revert)
[L9233]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L9233]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9234]   COND FALSE  !(revert)
[L9237]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8792]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8792]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8793]   COND FALSE  !(revert)
[L8796]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L8796]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L8797]   COND FALSE  !(revert)
[L8800]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8800]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8801]   COND FALSE  !(revert)
[L8804]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L8804]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8805]   COND FALSE  !(revert)
[L8808]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L8808]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8809]   COND FALSE  !(revert)
[L8812]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8812]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8813]   COND FALSE  !(revert)
[L8816]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L8816]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8817]   COND FALSE  !(revert)
[L8820]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8749]               assume msgsender_MSG != null;
[L8750]               Balance[this] := 0;
[L8820]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8821]   COND FALSE  !(revert)
[L9237]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9238]   COND FALSE  !(revert)
[L9241]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8536]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8536]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8537]   COND FALSE  !(revert)
[L8540]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8540]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8541]   COND FALSE  !(revert)
[L8544]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8513]               assume msgsender_MSG != null;
[L8514]               Balance[this] := 0;
[L8544]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8545]   COND FALSE  !(revert)
[L9241]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9242]   COND FALSE  !(revert)
[L9245]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8662]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8662]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8663]   COND FALSE  !(revert)
[L8666]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8642]               assume msgsender_MSG != null;
[L8643]               Balance[this] := 0;
[L8644]               paused_Pausable[this] := false;
[L8666]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8667]   COND FALSE  !(revert)
[L9245]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9249]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9133]               assume msgsender_MSG != null;
[L9134]               Balance[this] := 0;
[L9135]               initialized_MainToken[this] := false;
[L9137]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9404]   COND FALSE  !(!!initialized_MainToken[this])
[L9408]               initialized_MainToken[this] := true;
[L9409]   COND FALSE  !(PAUSED_Consts[this])
[L9419]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9429]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9137]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   COND TRUE   DType[this] == MainToken
[L9142]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7055]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12332]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7055]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   COND TRUE   DType[this] == MainToken
[L7060]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7103]               __var_11 := null;
[L7104]   COND FALSE  !(!(_newOwner_s581 != null))
[L7108]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7109]               owner_Ownable[this] := _newOwner_s581;
[L7060]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7061]   COND FALSE  !(revert)
[L9142]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9143]   COND FALSE  !(revert)
[L9249]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9250]   COND FALSE  !(revert)
[L4222]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4223]               assume !revert && gas >= 0;
[L14384]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14385]              assume !revert && gas >= 0;
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND TRUE   choice == 36
[L14143]              gas := gas - 21000;
[L14144]  COND TRUE   gas >= 0
[L14145]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14146]              assume msgvalue_MSG == 0;
[L14147]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4599]               havoc __exception;
[L4600]               revert := false;
[L4601]   COND FALSE  !(__exception)
[L4638]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9355]   COND FALSE  !(!!paused_Pausable[this])
[L9359]   COND TRUE   DType[this] == MainToken
[L9360]   CALL        call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L6624]               __var_1 := null;
[L6625]   COND FALSE  !(!(_to_s202 != null))
[L6629]   COND FALSE  !(!(_value_s202 <= balances_BasicToken[this][msgsender_MSG]))
[L6633]   CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6509]               assert b_s98 <= a_s98;
[L6510]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6633]   RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6634]   COND FALSE  !(revert)
[L6637]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L6638]               balances_BasicToken[this][msgsender_MSG] := __var_2;
[L6639]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L6640]   CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6523]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6524]               assert c_s122 >= a_s122;
[L6525]               c_s122 := c_s122;
[L6640]   RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6641]   COND FALSE  !(revert)
[L6644]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s202];
[L6645]               balances_BasicToken[this][_to_s202] := __var_3;
[L6646]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s202];
[L6647]               assert { :EventEmitted "Transfer_BasicToken" } true;
[L6648]               __ret_0_ := true;
[L9360]   RET         call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9361]   COND FALSE  !(revert)
[L9367]               _success_s1572 := __var_55;
[L4638]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4639]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((_success_s1572 == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14147]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14388]  RET         call CorralChoice_MainToken(this);

Loop:
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND TRUE   choice == 36
[L14143]              gas := gas - 21000;
[L14144]  COND TRUE   gas >= 0
[L14145]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14146]              assume msgvalue_MSG == 0;
[L14147]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4599]               havoc __exception;
[L4600]               revert := false;
[L4601]   COND FALSE  !(__exception)
[L4638]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9355]   COND FALSE  !(!!paused_Pausable[this])
[L9359]   COND TRUE   DType[this] == MainToken
[L9360]   CALL        call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L6624]               __var_1 := null;
[L6625]   COND FALSE  !(!(_to_s202 != null))
[L6629]   COND FALSE  !(!(_value_s202 <= balances_BasicToken[this][msgsender_MSG]))
[L6633]   CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6509]               assert b_s98 <= a_s98;
[L6510]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6633]   RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6634]   COND FALSE  !(revert)
[L6637]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L6638]               balances_BasicToken[this][msgsender_MSG] := __var_2;
[L6639]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L6640]   CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6523]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6524]               assert c_s122 >= a_s122;
[L6525]               c_s122 := c_s122;
[L6640]   RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6641]   COND FALSE  !(revert)
[L6644]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s202];
[L6645]               balances_BasicToken[this][_to_s202] := __var_3;
[L6646]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s202];
[L6647]               assert { :EventEmitted "Transfer_BasicToken" } true;
[L6648]               __ret_0_ := true;
[L9360]   RET         call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9361]   COND FALSE  !(revert)
[L9367]               _success_s1572 := __var_55;
[L4638]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4639]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((_success_s1572 == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14147]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14388]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:29:09,098 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:29:09,098 INFO  L82        PathProgramCache]: Analyzing trace with hash 634161044, now seen corresponding path program 1 times
[2020-11-24 21:29:09,099 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:29:09,164 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:29:10,435 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 96 proven. 0 refuted. 0 times theorem prover too weak. 9727 trivial. 0 not checked.
[2020-11-24 21:29:10,435 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:29:10,435 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [24] imperfect sequences [] total 24
[2020-11-24 21:29:10,436 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:29:10,436 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 25 interpolants.
[2020-11-24 21:29:10,436 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=56, Invalid=544, Unknown=0, NotChecked=0, Total=600
[2020-11-24 21:29:10,436 INFO  L87              Difference]: Start difference. First operand 11248 states and 12792 transitions. cyclomatic complexity: 1572 Second operand 25 states.
[2020-11-24 21:29:32,003 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:29:32,003 INFO  L93              Difference]: Finished difference Result 11534 states and 13233 transitions.
[2020-11-24 21:29:32,003 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 26 states. 
[2020-11-24 21:29:32,004 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11534 states and 13233 transitions.
[2020-11-24 21:29:32,029 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 24
[2020-11-24 21:29:32,058 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11534 states to 11534 states and 13233 transitions.
[2020-11-24 21:29:32,058 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2692
[2020-11-24 21:29:32,059 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2692
[2020-11-24 21:29:32,059 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11534 states and 13233 transitions.
[2020-11-24 21:29:32,068 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:29:32,068 INFO  L728         BuchiCegarLoop]: Abstraction has 11534 states and 13233 transitions.
[2020-11-24 21:29:32,074 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11534 states and 13233 transitions.
[2020-11-24 21:29:32,150 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11534 to 11446.
[2020-11-24 21:29:32,150 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11446 states.
[2020-11-24 21:29:32,165 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11446 states to 11446 states and 13061 transitions.
[2020-11-24 21:29:32,166 INFO  L751         BuchiCegarLoop]: Abstraction has 11446 states and 13061 transitions.
[2020-11-24 21:29:32,166 INFO  L631         BuchiCegarLoop]: Abstraction has 11446 states and 13061 transitions.
[2020-11-24 21:29:32,166 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-24 21:29:32,166 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11446 states and 13061 transitions.
[2020-11-24 21:29:32,178 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-24 21:29:32,178 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:29:32,178 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:29:32,181 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:29:32,181 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_MainToken0 := false;
[L2]                  call_transfer_MainToken0 := false;
[L2]      CALL        call main();
[L14378]              assume null == 0;
[L14379]  CALL        call this := FreshRefGenerator__success();
[L6396]               havoc newRef;
[L6397]               assume Alloc[newRef] == false;
[L6398]               Alloc[newRef] := true;
[L6399]               assume newRef != null;
[L14379]  RET         call this := FreshRefGenerator__success();
[L14380]              assume now >= 0;
[L14381]              assume DType[this] == MainToken;
[L14382]              assume msgvalue_MSG == 0;
[L14383]              gas := gas - 53000;
[L14384]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4183]               havoc __exception;
[L4184]               revert := false;
[L4185]   COND FALSE  !(__exception)
[L4222]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9205]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9007]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8983]               assume msgsender_MSG != null;
[L8984]               Balance[this] := 0;
[L8985]               TOKEN_DECIMALS_Consts[this] := 18;
[L8986]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8987]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8988]               TOKEN_NAME_Consts[this] := -1051245219;
[L8989]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8990]               PAUSED_Consts[this] := false;
[L8991]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8992]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               CONTINUE_MINTING_Consts[this] := true;
[L9007]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   COND FALSE  !(revert)
[L9205]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   COND FALSE  !(revert)
[L9209]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L9209]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9210]   COND FALSE  !(revert)
[L9213]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L9213]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9214]   COND FALSE  !(revert)
[L9217]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L9217]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9218]   COND FALSE  !(revert)
[L9221]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L9221]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9222]   COND FALSE  !(revert)
[L9225]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L9225]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9226]   COND FALSE  !(revert)
[L9229]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L9229]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9230]   COND FALSE  !(revert)
[L9233]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L9233]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9234]   COND FALSE  !(revert)
[L9237]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8792]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8792]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8793]   COND FALSE  !(revert)
[L8796]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L8796]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L8797]   COND FALSE  !(revert)
[L8800]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8800]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8801]   COND FALSE  !(revert)
[L8804]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L8804]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8805]   COND FALSE  !(revert)
[L8808]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L8808]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8809]   COND FALSE  !(revert)
[L8812]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8812]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8813]   COND FALSE  !(revert)
[L8816]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L8816]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8817]   COND FALSE  !(revert)
[L8820]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8749]               assume msgsender_MSG != null;
[L8750]               Balance[this] := 0;
[L8820]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8821]   COND FALSE  !(revert)
[L9237]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9238]   COND FALSE  !(revert)
[L9241]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8536]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8536]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8537]   COND FALSE  !(revert)
[L8540]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8540]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8541]   COND FALSE  !(revert)
[L8544]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8513]               assume msgsender_MSG != null;
[L8514]               Balance[this] := 0;
[L8544]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8545]   COND FALSE  !(revert)
[L9241]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9242]   COND FALSE  !(revert)
[L9245]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8662]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8662]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8663]   COND FALSE  !(revert)
[L8666]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8642]               assume msgsender_MSG != null;
[L8643]               Balance[this] := 0;
[L8644]               paused_Pausable[this] := false;
[L8666]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8667]   COND FALSE  !(revert)
[L9245]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9249]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9133]               assume msgsender_MSG != null;
[L9134]               Balance[this] := 0;
[L9135]               initialized_MainToken[this] := false;
[L9137]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9404]   COND FALSE  !(!!initialized_MainToken[this])
[L9408]               initialized_MainToken[this] := true;
[L9409]   COND FALSE  !(PAUSED_Consts[this])
[L9419]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9429]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9137]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   COND TRUE   DType[this] == MainToken
[L9142]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7055]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12332]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7055]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   COND TRUE   DType[this] == MainToken
[L7060]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7103]               __var_11 := null;
[L7104]   COND FALSE  !(!(_newOwner_s581 != null))
[L7108]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7109]               owner_Ownable[this] := _newOwner_s581;
[L7060]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7061]   COND FALSE  !(revert)
[L9142]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9143]   COND FALSE  !(revert)
[L9249]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9250]   COND FALSE  !(revert)
[L4222]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4223]               assume !revert && gas >= 0;
[L14384]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14385]              assume !revert && gas >= 0;
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND TRUE   choice == 36
[L14143]              gas := gas - 21000;
[L14144]  COND TRUE   gas >= 0
[L14145]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14146]              assume msgvalue_MSG == 0;
[L14147]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4599]               havoc __exception;
[L4600]               revert := false;
[L4601]   COND TRUE   __exception
[L4602]               __tmp__Balance := Balance;
[L4603]               __tmp__DType := DType;
[L4604]               __tmp__Alloc := Alloc;
[L4605]               __tmp__balance_ADDR := balance_ADDR;
[L4606]               __tmp__M_Ref_int := M_Ref_int;
[L4607]               __tmp__sum_balances0 := sum_balances0;
[L4608]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4609]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4610]               __tmp__sum_allowed1 := sum_allowed1;
[L4611]               __tmp__M_int_int := M_int_int;
[L4612]               __tmp__sum_chains2 := sum_chains2;
[L4613]               __tmp__sum_freezings3 := sum_freezings3;
[L4614]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4615]               __tmp__Length := Length;
[L4616]               __tmp__now := now;
[L4617]               __tmp__balances_BasicToken := balances_BasicToken;
[L4618]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4619]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4620]               __tmp__owner_Ownable := owner_Ownable;
[L4621]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4622]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4623]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4624]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4625]               __tmp__paused_Pausable := paused_Pausable;
[L4626]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4627]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4628]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4629]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4630]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4631]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4632]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4633]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4634]               __tmp__initialized_MainToken := initialized_MainToken;
[L4635]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9335]   COND FALSE  !(!!__tmp__paused_Pausable[this])
[L9339]   COND TRUE   __tmp__DType[this] == MainToken
[L9340]   CALL        call __var_55 := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L6592]               __var_1 := null;
[L6593]   COND TRUE   !(_to_s202 != null)
[L6594]               revert := true;
[L9340]   RET         call __var_55 := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9341]   COND TRUE   revert
[L4635]   RET         call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4636]               assume revert || gas < 0;
[L14147]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14388]  RET         call CorralChoice_MainToken(this);

Loop:
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND TRUE   choice == 36
[L14143]              gas := gas - 21000;
[L14144]  COND TRUE   gas >= 0
[L14145]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14146]              assume msgvalue_MSG == 0;
[L14147]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4599]               havoc __exception;
[L4600]               revert := false;
[L4601]   COND TRUE   __exception
[L4602]               __tmp__Balance := Balance;
[L4603]               __tmp__DType := DType;
[L4604]               __tmp__Alloc := Alloc;
[L4605]               __tmp__balance_ADDR := balance_ADDR;
[L4606]               __tmp__M_Ref_int := M_Ref_int;
[L4607]               __tmp__sum_balances0 := sum_balances0;
[L4608]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4609]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4610]               __tmp__sum_allowed1 := sum_allowed1;
[L4611]               __tmp__M_int_int := M_int_int;
[L4612]               __tmp__sum_chains2 := sum_chains2;
[L4613]               __tmp__sum_freezings3 := sum_freezings3;
[L4614]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4615]               __tmp__Length := Length;
[L4616]               __tmp__now := now;
[L4617]               __tmp__balances_BasicToken := balances_BasicToken;
[L4618]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4619]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4620]               __tmp__owner_Ownable := owner_Ownable;
[L4621]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4622]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4623]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4624]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4625]               __tmp__paused_Pausable := paused_Pausable;
[L4626]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4627]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4628]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4629]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4630]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4631]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4632]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4633]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4634]               __tmp__initialized_MainToken := initialized_MainToken;
[L4635]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9335]   COND FALSE  !(!!__tmp__paused_Pausable[this])
[L9339]   COND TRUE   __tmp__DType[this] == MainToken
[L9340]   CALL        call __var_55 := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L6592]               __var_1 := null;
[L6593]   COND TRUE   !(_to_s202 != null)
[L6594]               revert := true;
[L9340]   RET         call __var_55 := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9341]   COND TRUE   revert
[L4635]   RET         call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4636]               assume revert || gas < 0;
[L14147]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14388]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:29:32,189 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:29:32,189 INFO  L82        PathProgramCache]: Analyzing trace with hash 109369924, now seen corresponding path program 1 times
[2020-11-24 21:29:32,190 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:29:32,218 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:29:32,712 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9823 trivial. 0 not checked.
[2020-11-24 21:29:32,712 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:29:32,712 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 21:29:32,713 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:29:32,713 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 21:29:32,713 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 21:29:32,713 INFO  L87              Difference]: Start difference. First operand 11446 states and 13061 transitions. cyclomatic complexity: 1647 Second operand 7 states.
[2020-11-24 21:29:32,804 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:29:32,804 INFO  L93              Difference]: Finished difference Result 11518 states and 13137 transitions.
[2020-11-24 21:29:32,805 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 21:29:32,805 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11518 states and 13137 transitions.
[2020-11-24 21:29:32,828 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-24 21:29:32,854 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11518 states to 11510 states and 13129 transitions.
[2020-11-24 21:29:32,855 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2690
[2020-11-24 21:29:32,856 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2690
[2020-11-24 21:29:32,856 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11510 states and 13129 transitions.
[2020-11-24 21:29:32,863 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:29:32,863 INFO  L728         BuchiCegarLoop]: Abstraction has 11510 states and 13129 transitions.
[2020-11-24 21:29:32,870 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11510 states and 13129 transitions.
[2020-11-24 21:29:32,962 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11510 to 11492.
[2020-11-24 21:29:32,962 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11492 states.
[2020-11-24 21:29:32,977 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11492 states to 11492 states and 13109 transitions.
[2020-11-24 21:29:32,977 INFO  L751         BuchiCegarLoop]: Abstraction has 11492 states and 13109 transitions.
[2020-11-24 21:29:32,977 INFO  L631         BuchiCegarLoop]: Abstraction has 11492 states and 13109 transitions.
[2020-11-24 21:29:32,977 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-24 21:29:32,977 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11492 states and 13109 transitions.
[2020-11-24 21:29:32,989 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-24 21:29:32,989 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:29:32,989 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:29:32,992 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:29:32,992 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_MainToken0 := false;
[L2]                  call_transfer_MainToken0 := false;
[L2]      CALL        call main();
[L14378]              assume null == 0;
[L14379]  CALL        call this := FreshRefGenerator__success();
[L6396]               havoc newRef;
[L6397]               assume Alloc[newRef] == false;
[L6398]               Alloc[newRef] := true;
[L6399]               assume newRef != null;
[L14379]  RET         call this := FreshRefGenerator__success();
[L14380]              assume now >= 0;
[L14381]              assume DType[this] == MainToken;
[L14382]              assume msgvalue_MSG == 0;
[L14383]              gas := gas - 53000;
[L14384]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4183]               havoc __exception;
[L4184]               revert := false;
[L4185]   COND FALSE  !(__exception)
[L4222]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9205]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9007]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8983]               assume msgsender_MSG != null;
[L8984]               Balance[this] := 0;
[L8985]               TOKEN_DECIMALS_Consts[this] := 18;
[L8986]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8987]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8988]               TOKEN_NAME_Consts[this] := -1051245219;
[L8989]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8990]               PAUSED_Consts[this] := false;
[L8991]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8992]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               CONTINUE_MINTING_Consts[this] := true;
[L9007]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   COND FALSE  !(revert)
[L9205]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   COND FALSE  !(revert)
[L9209]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L9209]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9210]   COND FALSE  !(revert)
[L9213]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L9213]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9214]   COND FALSE  !(revert)
[L9217]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L9217]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9218]   COND FALSE  !(revert)
[L9221]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L9221]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9222]   COND FALSE  !(revert)
[L9225]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L9225]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9226]   COND FALSE  !(revert)
[L9229]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L9229]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9230]   COND FALSE  !(revert)
[L9233]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L9233]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9234]   COND FALSE  !(revert)
[L9237]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8792]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8792]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8793]   COND FALSE  !(revert)
[L8796]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L8796]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L8797]   COND FALSE  !(revert)
[L8800]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8800]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8801]   COND FALSE  !(revert)
[L8804]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L8804]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8805]   COND FALSE  !(revert)
[L8808]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L8808]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8809]   COND FALSE  !(revert)
[L8812]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8812]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8813]   COND FALSE  !(revert)
[L8816]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L8816]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8817]   COND FALSE  !(revert)
[L8820]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8749]               assume msgsender_MSG != null;
[L8750]               Balance[this] := 0;
[L8820]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8821]   COND FALSE  !(revert)
[L9237]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9238]   COND FALSE  !(revert)
[L9241]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8536]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8536]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8537]   COND FALSE  !(revert)
[L8540]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8540]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8541]   COND FALSE  !(revert)
[L8544]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8513]               assume msgsender_MSG != null;
[L8514]               Balance[this] := 0;
[L8544]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8545]   COND FALSE  !(revert)
[L9241]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9242]   COND FALSE  !(revert)
[L9245]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8662]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8662]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8663]   COND FALSE  !(revert)
[L8666]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8642]               assume msgsender_MSG != null;
[L8643]               Balance[this] := 0;
[L8644]               paused_Pausable[this] := false;
[L8666]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8667]   COND FALSE  !(revert)
[L9245]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9249]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9133]               assume msgsender_MSG != null;
[L9134]               Balance[this] := 0;
[L9135]               initialized_MainToken[this] := false;
[L9137]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9404]   COND FALSE  !(!!initialized_MainToken[this])
[L9408]               initialized_MainToken[this] := true;
[L9409]   COND FALSE  !(PAUSED_Consts[this])
[L9419]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9429]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9137]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   COND TRUE   DType[this] == MainToken
[L9142]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7055]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12332]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7055]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   COND TRUE   DType[this] == MainToken
[L7060]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7103]               __var_11 := null;
[L7104]   COND FALSE  !(!(_newOwner_s581 != null))
[L7108]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7109]               owner_Ownable[this] := _newOwner_s581;
[L7060]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7061]   COND FALSE  !(revert)
[L9142]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9143]   COND FALSE  !(revert)
[L9249]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9250]   COND FALSE  !(revert)
[L4222]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4223]               assume !revert && gas >= 0;
[L14384]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14385]              assume !revert && gas >= 0;
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND TRUE   choice == 36
[L14143]              gas := gas - 21000;
[L14144]  COND TRUE   gas >= 0
[L14145]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14146]              assume msgvalue_MSG == 0;
[L14147]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4599]               havoc __exception;
[L4600]               revert := false;
[L4601]   COND TRUE   __exception
[L4602]               __tmp__Balance := Balance;
[L4603]               __tmp__DType := DType;
[L4604]               __tmp__Alloc := Alloc;
[L4605]               __tmp__balance_ADDR := balance_ADDR;
[L4606]               __tmp__M_Ref_int := M_Ref_int;
[L4607]               __tmp__sum_balances0 := sum_balances0;
[L4608]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4609]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4610]               __tmp__sum_allowed1 := sum_allowed1;
[L4611]               __tmp__M_int_int := M_int_int;
[L4612]               __tmp__sum_chains2 := sum_chains2;
[L4613]               __tmp__sum_freezings3 := sum_freezings3;
[L4614]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4615]               __tmp__Length := Length;
[L4616]               __tmp__now := now;
[L4617]               __tmp__balances_BasicToken := balances_BasicToken;
[L4618]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4619]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4620]               __tmp__owner_Ownable := owner_Ownable;
[L4621]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4622]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4623]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4624]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4625]               __tmp__paused_Pausable := paused_Pausable;
[L4626]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4627]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4628]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4629]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4630]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4631]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4632]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4633]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4634]               __tmp__initialized_MainToken := initialized_MainToken;
[L4635]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9335]   COND FALSE  !(!!__tmp__paused_Pausable[this])
[L9339]   COND TRUE   __tmp__DType[this] == MainToken
[L9340]   CALL        call __var_55 := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L6592]               __var_1 := null;
[L6593]   COND FALSE  !(!(_to_s202 != null))
[L6597]   COND TRUE   !(_value_s202 <= __tmp__balances_BasicToken[this][msgsender_MSG])
[L6598]               revert := true;
[L9340]   RET         call __var_55 := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9341]   COND TRUE   revert
[L4635]   RET         call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4636]               assume revert || gas < 0;
[L14147]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14388]  RET         call CorralChoice_MainToken(this);

Loop:
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND TRUE   choice == 36
[L14143]              gas := gas - 21000;
[L14144]  COND TRUE   gas >= 0
[L14145]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14146]              assume msgvalue_MSG == 0;
[L14147]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4599]               havoc __exception;
[L4600]               revert := false;
[L4601]   COND TRUE   __exception
[L4602]               __tmp__Balance := Balance;
[L4603]               __tmp__DType := DType;
[L4604]               __tmp__Alloc := Alloc;
[L4605]               __tmp__balance_ADDR := balance_ADDR;
[L4606]               __tmp__M_Ref_int := M_Ref_int;
[L4607]               __tmp__sum_balances0 := sum_balances0;
[L4608]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4609]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4610]               __tmp__sum_allowed1 := sum_allowed1;
[L4611]               __tmp__M_int_int := M_int_int;
[L4612]               __tmp__sum_chains2 := sum_chains2;
[L4613]               __tmp__sum_freezings3 := sum_freezings3;
[L4614]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4615]               __tmp__Length := Length;
[L4616]               __tmp__now := now;
[L4617]               __tmp__balances_BasicToken := balances_BasicToken;
[L4618]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4619]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4620]               __tmp__owner_Ownable := owner_Ownable;
[L4621]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4622]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4623]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4624]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4625]               __tmp__paused_Pausable := paused_Pausable;
[L4626]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4627]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4628]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4629]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4630]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4631]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4632]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4633]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4634]               __tmp__initialized_MainToken := initialized_MainToken;
[L4635]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9335]   COND FALSE  !(!!__tmp__paused_Pausable[this])
[L9339]   COND TRUE   __tmp__DType[this] == MainToken
[L9340]   CALL        call __var_55 := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L6592]               __var_1 := null;
[L6593]   COND FALSE  !(!(_to_s202 != null))
[L6597]   COND TRUE   !(_value_s202 <= __tmp__balances_BasicToken[this][msgsender_MSG])
[L6598]               revert := true;
[L9340]   RET         call __var_55 := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9341]   COND TRUE   revert
[L4635]   RET         call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4636]               assume revert || gas < 0;
[L14147]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14388]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:29:33,001 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:29:33,001 INFO  L82        PathProgramCache]: Analyzing trace with hash -335759092, now seen corresponding path program 1 times
[2020-11-24 21:29:33,002 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:29:33,028 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:29:33,527 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9823 trivial. 0 not checked.
[2020-11-24 21:29:33,527 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:29:33,527 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 21:29:33,528 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:29:33,528 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 21:29:33,528 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 21:29:33,528 INFO  L87              Difference]: Start difference. First operand 11492 states and 13109 transitions. cyclomatic complexity: 1649 Second operand 7 states.
[2020-11-24 21:29:35,776 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:29:35,776 INFO  L93              Difference]: Finished difference Result 11750 states and 13444 transitions.
[2020-11-24 21:29:35,776 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-24 21:29:35,777 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11750 states and 13444 transitions.
[2020-11-24 21:29:35,803 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 20
[2020-11-24 21:29:35,830 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11750 states to 11750 states and 13444 transitions.
[2020-11-24 21:29:35,830 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2806
[2020-11-24 21:29:35,831 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2806
[2020-11-24 21:29:35,831 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11750 states and 13444 transitions.
[2020-11-24 21:29:35,839 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:29:35,839 INFO  L728         BuchiCegarLoop]: Abstraction has 11750 states and 13444 transitions.
[2020-11-24 21:29:35,846 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11750 states and 13444 transitions.
[2020-11-24 21:29:35,906 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11750 to 11672.
[2020-11-24 21:29:35,906 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11672 states.
[2020-11-24 21:29:35,921 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11672 states to 11672 states and 13301 transitions.
[2020-11-24 21:29:35,921 INFO  L751         BuchiCegarLoop]: Abstraction has 11672 states and 13301 transitions.
[2020-11-24 21:29:35,921 INFO  L631         BuchiCegarLoop]: Abstraction has 11672 states and 13301 transitions.
[2020-11-24 21:29:35,921 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-24 21:29:35,921 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11672 states and 13301 transitions.
[2020-11-24 21:29:35,933 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-24 21:29:35,933 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:29:35,933 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:29:35,935 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:29:35,935 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_MainToken0 := false;
[L2]                  call_transfer_MainToken0 := false;
[L2]      CALL        call main();
[L14378]              assume null == 0;
[L14379]  CALL        call this := FreshRefGenerator__success();
[L6396]               havoc newRef;
[L6397]               assume Alloc[newRef] == false;
[L6398]               Alloc[newRef] := true;
[L6399]               assume newRef != null;
[L14379]  RET         call this := FreshRefGenerator__success();
[L14380]              assume now >= 0;
[L14381]              assume DType[this] == MainToken;
[L14382]              assume msgvalue_MSG == 0;
[L14383]              gas := gas - 53000;
[L14384]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4183]               havoc __exception;
[L4184]               revert := false;
[L4185]   COND FALSE  !(__exception)
[L4222]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9205]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9007]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8983]               assume msgsender_MSG != null;
[L8984]               Balance[this] := 0;
[L8985]               TOKEN_DECIMALS_Consts[this] := 18;
[L8986]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8987]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8988]               TOKEN_NAME_Consts[this] := -1051245219;
[L8989]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8990]               PAUSED_Consts[this] := false;
[L8991]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8992]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               CONTINUE_MINTING_Consts[this] := true;
[L9007]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   COND FALSE  !(revert)
[L9205]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   COND FALSE  !(revert)
[L9209]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L9209]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9210]   COND FALSE  !(revert)
[L9213]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L9213]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9214]   COND FALSE  !(revert)
[L9217]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L9217]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9218]   COND FALSE  !(revert)
[L9221]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L9221]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9222]   COND FALSE  !(revert)
[L9225]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L9225]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9226]   COND FALSE  !(revert)
[L9229]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L9229]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9230]   COND FALSE  !(revert)
[L9233]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L9233]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9234]   COND FALSE  !(revert)
[L9237]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8792]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8792]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8793]   COND FALSE  !(revert)
[L8796]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L8796]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L8797]   COND FALSE  !(revert)
[L8800]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8800]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8801]   COND FALSE  !(revert)
[L8804]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L8804]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8805]   COND FALSE  !(revert)
[L8808]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L8808]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8809]   COND FALSE  !(revert)
[L8812]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8812]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8813]   COND FALSE  !(revert)
[L8816]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L8816]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8817]   COND FALSE  !(revert)
[L8820]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8749]               assume msgsender_MSG != null;
[L8750]               Balance[this] := 0;
[L8820]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8821]   COND FALSE  !(revert)
[L9237]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9238]   COND FALSE  !(revert)
[L9241]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8536]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8536]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8537]   COND FALSE  !(revert)
[L8540]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8540]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8541]   COND FALSE  !(revert)
[L8544]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8513]               assume msgsender_MSG != null;
[L8514]               Balance[this] := 0;
[L8544]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8545]   COND FALSE  !(revert)
[L9241]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9242]   COND FALSE  !(revert)
[L9245]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8662]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8662]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8663]   COND FALSE  !(revert)
[L8666]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8642]               assume msgsender_MSG != null;
[L8643]               Balance[this] := 0;
[L8644]               paused_Pausable[this] := false;
[L8666]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8667]   COND FALSE  !(revert)
[L9245]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9249]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9133]               assume msgsender_MSG != null;
[L9134]               Balance[this] := 0;
[L9135]               initialized_MainToken[this] := false;
[L9137]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9404]   COND FALSE  !(!!initialized_MainToken[this])
[L9408]               initialized_MainToken[this] := true;
[L9409]   COND FALSE  !(PAUSED_Consts[this])
[L9419]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9429]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9137]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   COND TRUE   DType[this] == MainToken
[L9142]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7055]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12332]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7055]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   COND TRUE   DType[this] == MainToken
[L7060]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7103]               __var_11 := null;
[L7104]   COND FALSE  !(!(_newOwner_s581 != null))
[L7108]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7109]               owner_Ownable[this] := _newOwner_s581;
[L7060]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7061]   COND FALSE  !(revert)
[L9142]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9143]   COND FALSE  !(revert)
[L9249]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9250]   COND FALSE  !(revert)
[L4222]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4223]               assume !revert && gas >= 0;
[L14384]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14385]              assume !revert && gas >= 0;
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND TRUE   choice == 36
[L14143]              gas := gas - 21000;
[L14144]  COND TRUE   gas >= 0
[L14145]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14146]              assume msgvalue_MSG == 0;
[L14147]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4599]               havoc __exception;
[L4600]               revert := false;
[L4601]   COND TRUE   __exception
[L4602]               __tmp__Balance := Balance;
[L4603]               __tmp__DType := DType;
[L4604]               __tmp__Alloc := Alloc;
[L4605]               __tmp__balance_ADDR := balance_ADDR;
[L4606]               __tmp__M_Ref_int := M_Ref_int;
[L4607]               __tmp__sum_balances0 := sum_balances0;
[L4608]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4609]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4610]               __tmp__sum_allowed1 := sum_allowed1;
[L4611]               __tmp__M_int_int := M_int_int;
[L4612]               __tmp__sum_chains2 := sum_chains2;
[L4613]               __tmp__sum_freezings3 := sum_freezings3;
[L4614]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4615]               __tmp__Length := Length;
[L4616]               __tmp__now := now;
[L4617]               __tmp__balances_BasicToken := balances_BasicToken;
[L4618]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4619]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4620]               __tmp__owner_Ownable := owner_Ownable;
[L4621]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4622]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4623]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4624]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4625]               __tmp__paused_Pausable := paused_Pausable;
[L4626]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4627]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4628]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4629]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4630]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4631]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4632]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4633]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4634]               __tmp__initialized_MainToken := initialized_MainToken;
[L4635]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9335]   COND FALSE  !(!!__tmp__paused_Pausable[this])
[L9339]   COND TRUE   __tmp__DType[this] == MainToken
[L9340]   CALL        call __var_55 := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L6592]               __var_1 := null;
[L6593]   COND FALSE  !(!(_to_s202 != null))
[L6597]   COND FALSE  !(!(_value_s202 <= __tmp__balances_BasicToken[this][msgsender_MSG]))
[L6601]   CALL        call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6503]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6601]   RET         call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6602]   COND FALSE  !(revert)
[L6605]               __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_BasicToken[this][msgsender_MSG];
[L6606]               __tmp__balances_BasicToken[this][msgsender_MSG] := __var_2;
[L6607]               __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_BasicToken[this][msgsender_MSG];
[L6608]   CALL        call __var_3 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][_to_s202], _value_s202);
[L6516]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6517]               c_s122 := c_s122;
[L6608]   RET         call __var_3 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][_to_s202], _value_s202);
[L6609]   COND FALSE  !(revert)
[L6612]               __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_BasicToken[this][_to_s202];
[L6613]               __tmp__balances_BasicToken[this][_to_s202] := __var_3;
[L6614]               __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_BasicToken[this][_to_s202];
[L6615]               __ret_0_ := true;
[L9340]   RET         call __var_55 := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9341]   COND FALSE  !(revert)
[L9347]               _success_s1572 := __var_55;
[L4635]   RET         call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4636]               assume revert || gas < 0;
[L14147]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14388]  RET         call CorralChoice_MainToken(this);

Loop:
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND TRUE   choice == 38
[L14131]              gas := gas - 21000;
[L14132]  COND FALSE  !(gas >= 0)
[L14388]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:29:35,942 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:29:35,942 INFO  L82        PathProgramCache]: Analyzing trace with hash 468278320, now seen corresponding path program 1 times
[2020-11-24 21:29:35,943 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:29:35,970 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:29:36,415 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9823 trivial. 0 not checked.
[2020-11-24 21:29:36,416 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:29:36,416 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-24 21:29:36,416 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:29:36,417 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-24 21:29:36,417 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-24 21:29:36,417 INFO  L87              Difference]: Start difference. First operand 11672 states and 13301 transitions. cyclomatic complexity: 1661 Second operand 5 states.
[2020-11-24 21:29:37,693 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:29:37,693 INFO  L93              Difference]: Finished difference Result 13889 states and 16177 transitions.
[2020-11-24 21:29:37,693 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 21:29:37,693 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 13889 states and 16177 transitions.
[2020-11-24 21:29:37,726 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 44
[2020-11-24 21:29:37,755 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 13889 states to 10770 states and 12841 transitions.
[2020-11-24 21:29:37,755 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2066
[2020-11-24 21:29:37,757 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2253
[2020-11-24 21:29:37,757 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10770 states and 12841 transitions.
[2020-11-24 21:29:37,765 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:29:37,765 INFO  L728         BuchiCegarLoop]: Abstraction has 10770 states and 12841 transitions.
[2020-11-24 21:29:37,770 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10770 states and 12841 transitions.
[2020-11-24 21:29:37,820 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10770 to 8942.
[2020-11-24 21:29:37,820 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8942 states.
[2020-11-24 21:29:37,831 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8942 states to 8942 states and 10364 transitions.
[2020-11-24 21:29:37,831 INFO  L751         BuchiCegarLoop]: Abstraction has 8942 states and 10364 transitions.
[2020-11-24 21:29:37,831 INFO  L631         BuchiCegarLoop]: Abstraction has 8942 states and 10364 transitions.
[2020-11-24 21:29:37,831 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-24 21:29:37,831 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8942 states and 10364 transitions.
[2020-11-24 21:29:37,839 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-24 21:29:37,839 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:29:37,839 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:29:37,842 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:29:37,842 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_MainToken0 := false;
[L2]                  call_transfer_MainToken0 := false;
[L2]      CALL        call main();
[L14378]              assume null == 0;
[L14379]  CALL        call this := FreshRefGenerator__success();
[L6396]               havoc newRef;
[L6397]               assume Alloc[newRef] == false;
[L6398]               Alloc[newRef] := true;
[L6399]               assume newRef != null;
[L14379]  RET         call this := FreshRefGenerator__success();
[L14380]              assume now >= 0;
[L14381]              assume DType[this] == MainToken;
[L14382]              assume msgvalue_MSG == 0;
[L14383]              gas := gas - 53000;
[L14384]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4183]               havoc __exception;
[L4184]               revert := false;
[L4185]   COND FALSE  !(__exception)
[L4222]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9205]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9007]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8983]               assume msgsender_MSG != null;
[L8984]               Balance[this] := 0;
[L8985]               TOKEN_DECIMALS_Consts[this] := 18;
[L8986]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8987]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8988]               TOKEN_NAME_Consts[this] := -1051245219;
[L8989]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8990]               PAUSED_Consts[this] := false;
[L8991]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8992]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               CONTINUE_MINTING_Consts[this] := true;
[L9007]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   COND FALSE  !(revert)
[L9205]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   COND FALSE  !(revert)
[L9209]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L9209]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9210]   COND FALSE  !(revert)
[L9213]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L9213]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9214]   COND FALSE  !(revert)
[L9217]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L9217]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9218]   COND FALSE  !(revert)
[L9221]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L9221]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9222]   COND FALSE  !(revert)
[L9225]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L9225]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9226]   COND FALSE  !(revert)
[L9229]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L9229]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9230]   COND FALSE  !(revert)
[L9233]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L9233]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9234]   COND FALSE  !(revert)
[L9237]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8792]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8792]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8793]   COND FALSE  !(revert)
[L8796]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L8796]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L8797]   COND FALSE  !(revert)
[L8800]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8800]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8801]   COND FALSE  !(revert)
[L8804]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L8804]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8805]   COND FALSE  !(revert)
[L8808]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L8808]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8809]   COND FALSE  !(revert)
[L8812]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8812]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8813]   COND FALSE  !(revert)
[L8816]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L8816]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8817]   COND FALSE  !(revert)
[L8820]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8749]               assume msgsender_MSG != null;
[L8750]               Balance[this] := 0;
[L8820]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8821]   COND FALSE  !(revert)
[L9237]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9238]   COND FALSE  !(revert)
[L9241]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8536]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8536]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8537]   COND FALSE  !(revert)
[L8540]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8540]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8541]   COND FALSE  !(revert)
[L8544]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8513]               assume msgsender_MSG != null;
[L8514]               Balance[this] := 0;
[L8544]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8545]   COND FALSE  !(revert)
[L9241]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9242]   COND FALSE  !(revert)
[L9245]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8662]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8662]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8663]   COND FALSE  !(revert)
[L8666]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8642]               assume msgsender_MSG != null;
[L8643]               Balance[this] := 0;
[L8644]               paused_Pausable[this] := false;
[L8666]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8667]   COND FALSE  !(revert)
[L9245]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9249]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9133]               assume msgsender_MSG != null;
[L9134]               Balance[this] := 0;
[L9135]               initialized_MainToken[this] := false;
[L9137]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9404]   COND FALSE  !(!!initialized_MainToken[this])
[L9408]               initialized_MainToken[this] := true;
[L9409]   COND FALSE  !(PAUSED_Consts[this])
[L9419]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9429]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9137]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   COND TRUE   DType[this] == MainToken
[L9142]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7055]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12332]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7055]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   COND TRUE   DType[this] == MainToken
[L7060]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7103]               __var_11 := null;
[L7104]   COND FALSE  !(!(_newOwner_s581 != null))
[L7108]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7109]               owner_Ownable[this] := _newOwner_s581;
[L7060]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7061]   COND FALSE  !(revert)
[L9142]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9143]   COND FALSE  !(revert)
[L9249]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9250]   COND FALSE  !(revert)
[L4222]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4223]               assume !revert && gas >= 0;
[L14384]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14385]              assume !revert && gas >= 0;
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND FALSE  !(choice == 36)
[L14149]  COND FALSE  !(choice == 35)
[L14155]  COND FALSE  !(choice == 34)
[L14162]  COND FALSE  !(choice == 33)
[L14169]  COND FALSE  !(choice == 32)
[L14176]  COND FALSE  !(choice == 31)
[L14183]  COND FALSE  !(choice == 30)
[L14189]  COND FALSE  !(choice == 29)
[L14195]  COND FALSE  !(choice == 28)
[L14201]  COND FALSE  !(choice == 27)
[L14207]  COND FALSE  !(choice == 26)
[L14214]  COND FALSE  !(choice == 25)
[L14220]  COND FALSE  !(choice == 24)
[L14226]  COND FALSE  !(choice == 23)
[L14232]  COND FALSE  !(choice == 22)
[L14238]  COND FALSE  !(choice == 21)
[L14245]  COND FALSE  !(choice == 20)
[L14253]  COND FALSE  !(choice == 19)
[L14259]  COND FALSE  !(choice == 18)
[L14265]  COND TRUE   choice == 17
[L14266]              gas := gas - 21000;
[L14267]  COND TRUE   gas >= 0
[L14268]              assume _value_s1261 >= 0 && _value_s1261 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14269]              assume msgvalue_MSG == 0;
[L14270]  CALL        call burn~uint256_BurnableToken(this, msgsender_MSG, msgvalue_MSG, _value_s1261);
[L2775]               havoc __exception;
[L2776]               revert := false;
[L2777]   COND FALSE  !(__exception)
[L2814]   CALL        call burn~uint256_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG, _value_s1261);
[L8569]   COND TRUE   DType[this] == MainToken
[L8570]   CALL        call _burn~address~uint256_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s1261);
[L8610]   COND FALSE  !(!(_value_s1308 <= balances_BasicToken[this][_who_s1308]))
[L8614]   CALL        call __var_46 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_who_s1308], _value_s1308);
[L6509]               assert b_s98 <= a_s98;
[L6510]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8614]   RET         call __var_46 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_who_s1308], _value_s1308);
[L8615]   COND FALSE  !(revert)
[L8618]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_who_s1308];
[L8619]               balances_BasicToken[this][_who_s1308] := __var_46;
[L8620]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_who_s1308];
[L8621]   CALL        call __var_47 := sub~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _value_s1308);
[L6509]               assert b_s98 <= a_s98;
[L6510]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8621]   RET         call __var_47 := sub~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _value_s1308);
[L8622]   COND FALSE  !(revert)
[L8625]               totalSupply__BasicToken[this] := __var_47;
[L8626]               assert { :EventEmitted "Burn_BurnableToken" } true;
[L8627]               assert { :EventEmitted "Transfer_BurnableToken" } true;
[L8570]   RET         call _burn~address~uint256_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s1261);
[L8571]   COND FALSE  !(revert)
[L2814]   RET         call burn~uint256_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG, _value_s1261);
[L2815]               assume !revert && gas >= 0;
[L14270]  RET         call burn~uint256_BurnableToken(this, msgsender_MSG, msgvalue_MSG, _value_s1261);
[L14388]  RET         call CorralChoice_MainToken(this);
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND TRUE   choice == 36
[L14143]              gas := gas - 21000;
[L14144]  COND TRUE   gas >= 0
[L14145]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14146]              assume msgvalue_MSG == 0;
[L14147]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4599]               havoc __exception;
[L4600]               revert := false;
[L4601]   COND FALSE  !(__exception)
[L4638]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9355]   COND FALSE  !(!!paused_Pausable[this])
[L9359]   COND TRUE   DType[this] == MainToken
[L9360]   CALL        call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L6624]               __var_1 := null;
[L6625]   COND FALSE  !(!(_to_s202 != null))
[L6629]   COND FALSE  !(!(_value_s202 <= balances_BasicToken[this][msgsender_MSG]))
[L6633]   CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6509]               assert b_s98 <= a_s98;
[L6510]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6633]   RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6634]   COND FALSE  !(revert)
[L6637]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L6638]               balances_BasicToken[this][msgsender_MSG] := __var_2;
[L6639]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L6640]   CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6523]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6524]               assert c_s122 >= a_s122;
[L6525]               c_s122 := c_s122;
[L6640]   RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6641]   COND FALSE  !(revert)
[L6644]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s202];
[L6645]               balances_BasicToken[this][_to_s202] := __var_3;
[L6646]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s202];
[L6647]               assert { :EventEmitted "Transfer_BasicToken" } true;
[L6648]               __ret_0_ := true;
[L9360]   RET         call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9361]   COND FALSE  !(revert)
[L9367]               _success_s1572 := __var_55;
[L4638]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4639]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((_success_s1572 == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14147]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14388]  RET         call CorralChoice_MainToken(this);

Loop:
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND TRUE   choice == 36
[L14143]              gas := gas - 21000;
[L14144]  COND TRUE   gas >= 0
[L14145]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14146]              assume msgvalue_MSG == 0;
[L14147]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4599]               havoc __exception;
[L4600]               revert := false;
[L4601]   COND FALSE  !(__exception)
[L4638]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9355]   COND FALSE  !(!!paused_Pausable[this])
[L9359]   COND TRUE   DType[this] == MainToken
[L9360]   CALL        call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L6624]               __var_1 := null;
[L6625]   COND FALSE  !(!(_to_s202 != null))
[L6629]   COND FALSE  !(!(_value_s202 <= balances_BasicToken[this][msgsender_MSG]))
[L6633]   CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6509]               assert b_s98 <= a_s98;
[L6510]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6633]   RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6634]   COND FALSE  !(revert)
[L6637]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L6638]               balances_BasicToken[this][msgsender_MSG] := __var_2;
[L6639]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L6640]   CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6523]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6524]               assert c_s122 >= a_s122;
[L6525]               c_s122 := c_s122;
[L6640]   RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6641]   COND FALSE  !(revert)
[L6644]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s202];
[L6645]               balances_BasicToken[this][_to_s202] := __var_3;
[L6646]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s202];
[L6647]               assert { :EventEmitted "Transfer_BasicToken" } true;
[L6648]               __ret_0_ := true;
[L9360]   RET         call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9361]   COND FALSE  !(revert)
[L9367]               _success_s1572 := __var_55;
[L4638]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4639]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((_success_s1572 == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14147]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14388]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:29:37,850 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:29:37,850 INFO  L82        PathProgramCache]: Analyzing trace with hash 339850973, now seen corresponding path program 1 times
[2020-11-24 21:29:37,851 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:29:37,914 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:29:39,358 INFO  L134       CoverageAnalysis]: Checked inductivity of 9917 backedges. 96 proven. 3 refuted. 0 times theorem prover too weak. 9818 trivial. 0 not checked.
[2020-11-24 21:29:39,358 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 21:29:39,358 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [32] total 32
[2020-11-24 21:29:39,359 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:29:39,359 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 33 interpolants.
[2020-11-24 21:29:39,359 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=95, Invalid=961, Unknown=0, NotChecked=0, Total=1056
[2020-11-24 21:29:39,359 INFO  L87              Difference]: Start difference. First operand 8942 states and 10364 transitions. cyclomatic complexity: 1452 Second operand 33 states.
[2020-11-24 21:29:50,187 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:29:50,187 INFO  L93              Difference]: Finished difference Result 9000 states and 10521 transitions.
[2020-11-24 21:29:50,187 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 31 states. 
[2020-11-24 21:29:50,187 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9000 states and 10521 transitions.
[2020-11-24 21:29:50,207 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 20
[2020-11-24 21:29:50,227 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9000 states to 9000 states and 10521 transitions.
[2020-11-24 21:29:50,227 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1945
[2020-11-24 21:29:50,228 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1945
[2020-11-24 21:29:50,228 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9000 states and 10521 transitions.
[2020-11-24 21:29:50,234 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:29:50,234 INFO  L728         BuchiCegarLoop]: Abstraction has 9000 states and 10521 transitions.
[2020-11-24 21:29:50,239 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9000 states and 10521 transitions.
[2020-11-24 21:29:50,280 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9000 to 8942.
[2020-11-24 21:29:50,280 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8942 states.
[2020-11-24 21:29:50,290 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8942 states to 8942 states and 10364 transitions.
[2020-11-24 21:29:50,291 INFO  L751         BuchiCegarLoop]: Abstraction has 8942 states and 10364 transitions.
[2020-11-24 21:29:50,291 INFO  L631         BuchiCegarLoop]: Abstraction has 8942 states and 10364 transitions.
[2020-11-24 21:29:50,291 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-24 21:29:50,291 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8942 states and 10364 transitions.
[2020-11-24 21:29:50,299 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-24 21:29:50,299 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:29:50,299 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:29:50,301 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:29:50,301 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_MainToken0 := false;
[L2]                  call_transfer_MainToken0 := false;
[L2]      CALL        call main();
[L14378]              assume null == 0;
[L14379]  CALL        call this := FreshRefGenerator__success();
[L6396]               havoc newRef;
[L6397]               assume Alloc[newRef] == false;
[L6398]               Alloc[newRef] := true;
[L6399]               assume newRef != null;
[L14379]  RET         call this := FreshRefGenerator__success();
[L14380]              assume now >= 0;
[L14381]              assume DType[this] == MainToken;
[L14382]              assume msgvalue_MSG == 0;
[L14383]              gas := gas - 53000;
[L14384]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4183]               havoc __exception;
[L4184]               revert := false;
[L4185]   COND FALSE  !(__exception)
[L4222]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9205]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9007]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8983]               assume msgsender_MSG != null;
[L8984]               Balance[this] := 0;
[L8985]               TOKEN_DECIMALS_Consts[this] := 18;
[L8986]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8987]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8988]               TOKEN_NAME_Consts[this] := -1051245219;
[L8989]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8990]               PAUSED_Consts[this] := false;
[L8991]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8992]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               CONTINUE_MINTING_Consts[this] := true;
[L9007]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   COND FALSE  !(revert)
[L9205]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   COND FALSE  !(revert)
[L9209]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L9209]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9210]   COND FALSE  !(revert)
[L9213]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L9213]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9214]   COND FALSE  !(revert)
[L9217]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L9217]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9218]   COND FALSE  !(revert)
[L9221]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L9221]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9222]   COND FALSE  !(revert)
[L9225]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L9225]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9226]   COND FALSE  !(revert)
[L9229]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L9229]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9230]   COND FALSE  !(revert)
[L9233]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L9233]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9234]   COND FALSE  !(revert)
[L9237]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8792]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8792]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8793]   COND FALSE  !(revert)
[L8796]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L8796]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L8797]   COND FALSE  !(revert)
[L8800]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8800]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8801]   COND FALSE  !(revert)
[L8804]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L8804]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8805]   COND FALSE  !(revert)
[L8808]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L8808]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8809]   COND FALSE  !(revert)
[L8812]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8812]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8813]   COND FALSE  !(revert)
[L8816]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L8816]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8817]   COND FALSE  !(revert)
[L8820]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8749]               assume msgsender_MSG != null;
[L8750]               Balance[this] := 0;
[L8820]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8821]   COND FALSE  !(revert)
[L9237]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9238]   COND FALSE  !(revert)
[L9241]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8536]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8536]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8537]   COND FALSE  !(revert)
[L8540]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8540]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8541]   COND FALSE  !(revert)
[L8544]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8513]               assume msgsender_MSG != null;
[L8514]               Balance[this] := 0;
[L8544]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8545]   COND FALSE  !(revert)
[L9241]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9242]   COND FALSE  !(revert)
[L9245]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8662]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8662]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8663]   COND FALSE  !(revert)
[L8666]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8642]               assume msgsender_MSG != null;
[L8643]               Balance[this] := 0;
[L8644]               paused_Pausable[this] := false;
[L8666]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8667]   COND FALSE  !(revert)
[L9245]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9249]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9133]               assume msgsender_MSG != null;
[L9134]               Balance[this] := 0;
[L9135]               initialized_MainToken[this] := false;
[L9137]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9404]   COND FALSE  !(!!initialized_MainToken[this])
[L9408]               initialized_MainToken[this] := true;
[L9409]   COND FALSE  !(PAUSED_Consts[this])
[L9419]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9429]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9137]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   COND TRUE   DType[this] == MainToken
[L9142]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7055]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12332]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7055]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   COND TRUE   DType[this] == MainToken
[L7060]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7103]               __var_11 := null;
[L7104]   COND FALSE  !(!(_newOwner_s581 != null))
[L7108]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7109]               owner_Ownable[this] := _newOwner_s581;
[L7060]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7061]   COND FALSE  !(revert)
[L9142]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9143]   COND FALSE  !(revert)
[L9249]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9250]   COND FALSE  !(revert)
[L4222]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4223]               assume !revert && gas >= 0;
[L14384]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14385]              assume !revert && gas >= 0;
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND TRUE   choice == 36
[L14143]              gas := gas - 21000;
[L14144]  COND TRUE   gas >= 0
[L14145]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14146]              assume msgvalue_MSG == 0;
[L14147]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                  revert := revert_hold;
[L4599]               havoc __exception;
[L4600]               revert := false;
[L4601]   COND FALSE  !(__exception)
[L4638]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9355]   COND FALSE  !(!!paused_Pausable[this])
[L9359]   COND TRUE   DType[this] == MainToken
[L9360]   CALL        call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L6624]               __var_1 := null;
[L6625]   COND FALSE  !(!(_to_s202 != null))
[L6629]   COND FALSE  !(!(_value_s202 <= balances_BasicToken[this][msgsender_MSG]))
[L6633]   CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6509]               assert b_s98 <= a_s98;
[L6510]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6633]   RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6634]   COND FALSE  !(revert)
[L6637]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L6638]               balances_BasicToken[this][msgsender_MSG] := __var_2;
[L6639]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L6640]   CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6523]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6524]               assert c_s122 >= a_s122;
[L6525]               c_s122 := c_s122;
[L6640]   RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6641]   COND FALSE  !(revert)
[L6644]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s202];
[L6645]               balances_BasicToken[this][_to_s202] := __var_3;
[L6646]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s202];
[L6647]               assert { :EventEmitted "Transfer_BasicToken" } true;
[L6648]               __ret_0_ := true;
[L9360]   RET         call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9361]   COND FALSE  !(revert)
[L9367]               _success_s1572 := __var_55;
[L4638]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4639]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((_success_s1572 == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14147]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14388]  RET         call CorralChoice_MainToken(this);
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND TRUE   choice == 36
[L14143]              gas := gas - 21000;
[L14144]  COND TRUE   gas >= 0
[L14145]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14146]              assume msgvalue_MSG == 0;
[L14147]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4599]               havoc __exception;
[L4600]               revert := false;
[L4601]   COND FALSE  !(__exception)
[L4638]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9355]   COND FALSE  !(!!paused_Pausable[this])
[L9359]   COND TRUE   DType[this] == MainToken
[L9360]   CALL        call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L6624]               __var_1 := null;
[L6625]   COND FALSE  !(!(_to_s202 != null))
[L6629]   COND FALSE  !(!(_value_s202 <= balances_BasicToken[this][msgsender_MSG]))
[L6633]   CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6509]               assert b_s98 <= a_s98;
[L6510]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6633]   RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6634]   COND FALSE  !(revert)
[L6637]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L6638]               balances_BasicToken[this][msgsender_MSG] := __var_2;
[L6639]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L6640]   CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6523]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6524]               assert c_s122 >= a_s122;
[L6525]               c_s122 := c_s122;
[L6640]   RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6641]   COND FALSE  !(revert)
[L6644]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s202];
[L6645]               balances_BasicToken[this][_to_s202] := __var_3;
[L6646]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s202];
[L6647]               assert { :EventEmitted "Transfer_BasicToken" } true;
[L6648]               __ret_0_ := true;
[L9360]   RET         call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9361]   COND FALSE  !(revert)
[L9367]               _success_s1572 := __var_55;
[L4638]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4639]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((_success_s1572 == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14147]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14388]  RET         call CorralChoice_MainToken(this);

Loop:
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND TRUE   choice == 38
[L14131]              gas := gas - 21000;
[L14132]  COND FALSE  !(gas >= 0)
[L14388]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:29:50,308 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:29:50,308 INFO  L82        PathProgramCache]: Analyzing trace with hash 2073801194, now seen corresponding path program 1 times
[2020-11-24 21:29:50,309 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:29:50,364 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:29:51,473 INFO  L134       CoverageAnalysis]: Checked inductivity of 9922 backedges. 97 proven. 2 refuted. 0 times theorem prover too weak. 9823 trivial. 0 not checked.
[2020-11-24 21:29:51,473 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 21:29:51,473 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [27] total 27
[2020-11-24 21:29:51,474 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:29:51,474 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 27 interpolants.
[2020-11-24 21:29:51,474 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=67, Invalid=635, Unknown=0, NotChecked=0, Total=702
[2020-11-24 21:29:51,475 INFO  L87              Difference]: Start difference. First operand 8942 states and 10364 transitions. cyclomatic complexity: 1452 Second operand 27 states.
[2020-11-24 21:30:03,375 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:30:03,375 INFO  L93              Difference]: Finished difference Result 9012 states and 10542 transitions.
[2020-11-24 21:30:03,375 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 26 states. 
[2020-11-24 21:30:03,376 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9012 states and 10542 transitions.
[2020-11-24 21:30:03,400 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 20
[2020-11-24 21:30:03,424 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9012 states to 9012 states and 10542 transitions.
[2020-11-24 21:30:03,424 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1947
[2020-11-24 21:30:03,425 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1947
[2020-11-24 21:30:03,425 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9012 states and 10542 transitions.
[2020-11-24 21:30:03,474 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:30:03,475 INFO  L728         BuchiCegarLoop]: Abstraction has 9012 states and 10542 transitions.
[2020-11-24 21:30:03,483 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9012 states and 10542 transitions.
[2020-11-24 21:30:03,528 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9012 to 8976.
[2020-11-24 21:30:03,529 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8976 states.
[2020-11-24 21:30:03,540 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8976 states to 8976 states and 10463 transitions.
[2020-11-24 21:30:03,540 INFO  L751         BuchiCegarLoop]: Abstraction has 8976 states and 10463 transitions.
[2020-11-24 21:30:03,540 INFO  L631         BuchiCegarLoop]: Abstraction has 8976 states and 10463 transitions.
[2020-11-24 21:30:03,540 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-24 21:30:03,540 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8976 states and 10463 transitions.
[2020-11-24 21:30:03,549 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 20
[2020-11-24 21:30:03,549 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:30:03,549 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:30:03,551 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:30:03,551 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_MainToken0 := false;
[L2]                  call_transfer_MainToken0 := false;
[L2]      CALL        call main();
[L14378]              assume null == 0;
[L14379]  CALL        call this := FreshRefGenerator__success();
[L6396]               havoc newRef;
[L6397]               assume Alloc[newRef] == false;
[L6398]               Alloc[newRef] := true;
[L6399]               assume newRef != null;
[L14379]  RET         call this := FreshRefGenerator__success();
[L14380]              assume now >= 0;
[L14381]              assume DType[this] == MainToken;
[L14382]              assume msgvalue_MSG == 0;
[L14383]              gas := gas - 53000;
[L14384]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4183]               havoc __exception;
[L4184]               revert := false;
[L4185]   COND FALSE  !(__exception)
[L4222]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9205]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9007]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8983]               assume msgsender_MSG != null;
[L8984]               Balance[this] := 0;
[L8985]               TOKEN_DECIMALS_Consts[this] := 18;
[L8986]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8987]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8988]               TOKEN_NAME_Consts[this] := -1051245219;
[L8989]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8990]               PAUSED_Consts[this] := false;
[L8991]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8992]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               CONTINUE_MINTING_Consts[this] := true;
[L9007]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   COND FALSE  !(revert)
[L9205]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   COND FALSE  !(revert)
[L9209]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L9209]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9210]   COND FALSE  !(revert)
[L9213]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L9213]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9214]   COND FALSE  !(revert)
[L9217]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L9217]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9218]   COND FALSE  !(revert)
[L9221]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L9221]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9222]   COND FALSE  !(revert)
[L9225]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L9225]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9226]   COND FALSE  !(revert)
[L9229]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L9229]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9230]   COND FALSE  !(revert)
[L9233]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L9233]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9234]   COND FALSE  !(revert)
[L9237]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8792]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8792]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8793]   COND FALSE  !(revert)
[L8796]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L8796]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L8797]   COND FALSE  !(revert)
[L8800]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8800]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8801]   COND FALSE  !(revert)
[L8804]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L8804]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8805]   COND FALSE  !(revert)
[L8808]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L8808]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8809]   COND FALSE  !(revert)
[L8812]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8812]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8813]   COND FALSE  !(revert)
[L8816]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L8816]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8817]   COND FALSE  !(revert)
[L8820]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8749]               assume msgsender_MSG != null;
[L8750]               Balance[this] := 0;
[L8820]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8821]   COND FALSE  !(revert)
[L9237]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9238]   COND FALSE  !(revert)
[L9241]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8536]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8536]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8537]   COND FALSE  !(revert)
[L8540]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8540]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8541]   COND FALSE  !(revert)
[L8544]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8513]               assume msgsender_MSG != null;
[L8514]               Balance[this] := 0;
[L8544]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8545]   COND FALSE  !(revert)
[L9241]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9242]   COND FALSE  !(revert)
[L9245]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8662]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8662]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8663]   COND FALSE  !(revert)
[L8666]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8642]               assume msgsender_MSG != null;
[L8643]               Balance[this] := 0;
[L8644]               paused_Pausable[this] := false;
[L8666]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8667]   COND FALSE  !(revert)
[L9245]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9249]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9133]               assume msgsender_MSG != null;
[L9134]               Balance[this] := 0;
[L9135]               initialized_MainToken[this] := false;
[L9137]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9404]   COND FALSE  !(!!initialized_MainToken[this])
[L9408]               initialized_MainToken[this] := true;
[L9409]   COND FALSE  !(PAUSED_Consts[this])
[L9419]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9429]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9137]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   COND TRUE   DType[this] == MainToken
[L9142]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7055]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12332]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7055]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   COND TRUE   DType[this] == MainToken
[L7060]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7103]               __var_11 := null;
[L7104]   COND FALSE  !(!(_newOwner_s581 != null))
[L7108]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7109]               owner_Ownable[this] := _newOwner_s581;
[L7060]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7061]   COND FALSE  !(revert)
[L9142]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9143]   COND FALSE  !(revert)
[L9249]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9250]   COND FALSE  !(revert)
[L4222]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4223]               assume !revert && gas >= 0;
[L14384]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14385]              assume !revert && gas >= 0;
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND TRUE   choice == 36
[L14143]              gas := gas - 21000;
[L14144]  COND TRUE   gas >= 0
[L14145]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14146]              assume msgvalue_MSG == 0;
[L14147]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4599]               havoc __exception;
[L4600]               revert := false;
[L4601]   COND FALSE  !(__exception)
[L4638]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9355]   COND FALSE  !(!!paused_Pausable[this])
[L9359]   COND TRUE   DType[this] == MainToken
[L9360]   CALL        call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L6624]               __var_1 := null;
[L6625]   COND FALSE  !(!(_to_s202 != null))
[L6629]   COND FALSE  !(!(_value_s202 <= balances_BasicToken[this][msgsender_MSG]))
[L6633]   CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6509]               assert b_s98 <= a_s98;
[L6510]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6633]   RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6634]   COND FALSE  !(revert)
[L6637]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L6638]               balances_BasicToken[this][msgsender_MSG] := __var_2;
[L6639]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L6640]   CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6523]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6524]               assert c_s122 >= a_s122;
[L6525]               c_s122 := c_s122;
[L6640]   RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6641]   COND FALSE  !(revert)
[L6644]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s202];
[L6645]               balances_BasicToken[this][_to_s202] := __var_3;
[L6646]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s202];
[L6647]               assert { :EventEmitted "Transfer_BasicToken" } true;
[L6648]               __ret_0_ := true;
[L9360]   RET         call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9361]   COND FALSE  !(revert)
[L9367]               _success_s1572 := __var_55;
[L4638]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4639]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume (((((((((_success_s1572 == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]);
[L2]                  success_transfer_MainToken0 := true;
[L2]                  success_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L14147]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14388]  RET         call CorralChoice_MainToken(this);
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND TRUE   choice == 36
[L14143]              gas := gas - 21000;
[L14144]  COND TRUE   gas >= 0
[L14145]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14146]              assume msgvalue_MSG == 0;
[L14147]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4599]               havoc __exception;
[L4600]               revert := false;
[L4601]   COND FALSE  !(__exception)
[L4638]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9355]   COND FALSE  !(!!paused_Pausable[this])
[L9359]   COND TRUE   DType[this] == MainToken
[L9360]   CALL        call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L6624]               __var_1 := null;
[L6625]   COND FALSE  !(!(_to_s202 != null))
[L6629]   COND FALSE  !(!(_value_s202 <= balances_BasicToken[this][msgsender_MSG]))
[L6633]   CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6509]               assert b_s98 <= a_s98;
[L6510]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6633]   RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6634]   COND FALSE  !(revert)
[L6637]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L6638]               balances_BasicToken[this][msgsender_MSG] := __var_2;
[L6639]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L6640]   CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6523]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6524]               assert c_s122 >= a_s122;
[L6525]               c_s122 := c_s122;
[L6640]   RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6641]   COND FALSE  !(revert)
[L6644]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s202];
[L6645]               balances_BasicToken[this][_to_s202] := __var_3;
[L6646]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s202];
[L6647]               assert { :EventEmitted "Transfer_BasicToken" } true;
[L6648]               __ret_0_ := true;
[L9360]   RET         call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9361]   COND FALSE  !(revert)
[L9367]               _success_s1572 := __var_55;
[L4638]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4639]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((_success_s1572 == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14147]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14388]  RET         call CorralChoice_MainToken(this);

Loop:
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND TRUE   choice == 36
[L14143]              gas := gas - 21000;
[L14144]  COND TRUE   gas >= 0
[L14145]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14146]              assume msgvalue_MSG == 0;
[L14147]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4599]               havoc __exception;
[L4600]               revert := false;
[L4601]   COND FALSE  !(__exception)
[L4638]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9355]   COND FALSE  !(!!paused_Pausable[this])
[L9359]   COND TRUE   DType[this] == MainToken
[L9360]   CALL        call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L6624]               __var_1 := null;
[L6625]   COND FALSE  !(!(_to_s202 != null))
[L6629]   COND FALSE  !(!(_value_s202 <= balances_BasicToken[this][msgsender_MSG]))
[L6633]   CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6509]               assert b_s98 <= a_s98;
[L6510]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6633]   RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6634]   COND FALSE  !(revert)
[L6637]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L6638]               balances_BasicToken[this][msgsender_MSG] := __var_2;
[L6639]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L6640]   CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6523]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6524]               assert c_s122 >= a_s122;
[L6525]               c_s122 := c_s122;
[L6640]   RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6641]   COND FALSE  !(revert)
[L6644]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s202];
[L6645]               balances_BasicToken[this][_to_s202] := __var_3;
[L6646]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s202];
[L6647]               assert { :EventEmitted "Transfer_BasicToken" } true;
[L6648]               __ret_0_ := true;
[L9360]   RET         call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9361]   COND FALSE  !(revert)
[L9367]               _success_s1572 := __var_55;
[L4638]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4639]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((_success_s1572 == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14147]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14388]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:30:03,604 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:30:03,604 INFO  L82        PathProgramCache]: Analyzing trace with hash -2010767134, now seen corresponding path program 1 times
[2020-11-24 21:30:03,605 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:30:03,646 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:30:04,618 INFO  L134       CoverageAnalysis]: Checked inductivity of 9923 backedges. 101 proven. 0 refuted. 0 times theorem prover too weak. 9822 trivial. 0 not checked.
[2020-11-24 21:30:04,618 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:30:04,618 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [27] imperfect sequences [] total 27
[2020-11-24 21:30:04,619 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:30:04,619 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 28 interpolants.
[2020-11-24 21:30:04,619 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=68, Invalid=688, Unknown=0, NotChecked=0, Total=756
[2020-11-24 21:30:04,620 INFO  L87              Difference]: Start difference. First operand 8976 states and 10463 transitions. cyclomatic complexity: 1521 Second operand 28 states.
[2020-11-24 21:30:15,610 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:30:15,610 INFO  L93              Difference]: Finished difference Result 9022 states and 10602 transitions.
[2020-11-24 21:30:15,610 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 27 states. 
[2020-11-24 21:30:15,610 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9022 states and 10602 transitions.
[2020-11-24 21:30:15,629 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 24
[2020-11-24 21:30:15,649 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9022 states to 9022 states and 10602 transitions.
[2020-11-24 21:30:15,649 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1949
[2020-11-24 21:30:15,650 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1949
[2020-11-24 21:30:15,650 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9022 states and 10602 transitions.
[2020-11-24 21:30:15,656 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:30:15,656 INFO  L728         BuchiCegarLoop]: Abstraction has 9022 states and 10602 transitions.
[2020-11-24 21:30:15,660 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9022 states and 10602 transitions.
[2020-11-24 21:30:15,702 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9022 to 8994.
[2020-11-24 21:30:15,702 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8994 states.
[2020-11-24 21:30:15,714 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8994 states to 8994 states and 10553 transitions.
[2020-11-24 21:30:15,714 INFO  L751         BuchiCegarLoop]: Abstraction has 8994 states and 10553 transitions.
[2020-11-24 21:30:15,714 INFO  L631         BuchiCegarLoop]: Abstraction has 8994 states and 10553 transitions.
[2020-11-24 21:30:15,714 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-24 21:30:15,714 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8994 states and 10553 transitions.
[2020-11-24 21:30:15,722 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 24
[2020-11-24 21:30:15,722 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:30:15,722 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:30:15,724 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:30:15,724 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_MainToken0 := false;
[L2]                  call_transfer_MainToken0 := false;
[L2]      CALL        call main();
[L14378]              assume null == 0;
[L14379]  CALL        call this := FreshRefGenerator__success();
[L6396]               havoc newRef;
[L6397]               assume Alloc[newRef] == false;
[L6398]               Alloc[newRef] := true;
[L6399]               assume newRef != null;
[L14379]  RET         call this := FreshRefGenerator__success();
[L14380]              assume now >= 0;
[L14381]              assume DType[this] == MainToken;
[L14382]              assume msgvalue_MSG == 0;
[L14383]              gas := gas - 53000;
[L14384]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4183]               havoc __exception;
[L4184]               revert := false;
[L4185]   COND FALSE  !(__exception)
[L4222]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9205]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9007]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8983]               assume msgsender_MSG != null;
[L8984]               Balance[this] := 0;
[L8985]               TOKEN_DECIMALS_Consts[this] := 18;
[L8986]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8987]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8988]               TOKEN_NAME_Consts[this] := -1051245219;
[L8989]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8990]               PAUSED_Consts[this] := false;
[L8991]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8992]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               CONTINUE_MINTING_Consts[this] := true;
[L9007]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   COND FALSE  !(revert)
[L9205]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   COND FALSE  !(revert)
[L9209]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L9209]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9210]   COND FALSE  !(revert)
[L9213]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L9213]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9214]   COND FALSE  !(revert)
[L9217]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L9217]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9218]   COND FALSE  !(revert)
[L9221]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L9221]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9222]   COND FALSE  !(revert)
[L9225]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L9225]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9226]   COND FALSE  !(revert)
[L9229]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L9229]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9230]   COND FALSE  !(revert)
[L9233]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L9233]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9234]   COND FALSE  !(revert)
[L9237]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8792]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8792]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8793]   COND FALSE  !(revert)
[L8796]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L8796]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L8797]   COND FALSE  !(revert)
[L8800]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8800]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8801]   COND FALSE  !(revert)
[L8804]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L8804]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8805]   COND FALSE  !(revert)
[L8808]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L8808]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8809]   COND FALSE  !(revert)
[L8812]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8812]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8813]   COND FALSE  !(revert)
[L8816]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L8816]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8817]   COND FALSE  !(revert)
[L8820]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8749]               assume msgsender_MSG != null;
[L8750]               Balance[this] := 0;
[L8820]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8821]   COND FALSE  !(revert)
[L9237]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9238]   COND FALSE  !(revert)
[L9241]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8536]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8536]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8537]   COND FALSE  !(revert)
[L8540]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8540]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8541]   COND FALSE  !(revert)
[L8544]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8513]               assume msgsender_MSG != null;
[L8514]               Balance[this] := 0;
[L8544]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8545]   COND FALSE  !(revert)
[L9241]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9242]   COND FALSE  !(revert)
[L9245]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8662]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8662]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8663]   COND FALSE  !(revert)
[L8666]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8642]               assume msgsender_MSG != null;
[L8643]               Balance[this] := 0;
[L8644]               paused_Pausable[this] := false;
[L8666]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8667]   COND FALSE  !(revert)
[L9245]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9249]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9133]               assume msgsender_MSG != null;
[L9134]               Balance[this] := 0;
[L9135]               initialized_MainToken[this] := false;
[L9137]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9404]   COND FALSE  !(!!initialized_MainToken[this])
[L9408]               initialized_MainToken[this] := true;
[L9409]   COND FALSE  !(PAUSED_Consts[this])
[L9419]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9429]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9137]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   COND TRUE   DType[this] == MainToken
[L9142]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7055]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12332]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7055]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   COND TRUE   DType[this] == MainToken
[L7060]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7103]               __var_11 := null;
[L7104]   COND FALSE  !(!(_newOwner_s581 != null))
[L7108]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7109]               owner_Ownable[this] := _newOwner_s581;
[L7060]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7061]   COND FALSE  !(revert)
[L9142]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9143]   COND FALSE  !(revert)
[L9249]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9250]   COND FALSE  !(revert)
[L4222]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4223]               assume !revert && gas >= 0;
[L14384]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14385]              assume !revert && gas >= 0;
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND FALSE  !(choice == 36)
[L14149]  COND FALSE  !(choice == 35)
[L14155]  COND FALSE  !(choice == 34)
[L14162]  COND FALSE  !(choice == 33)
[L14169]  COND FALSE  !(choice == 32)
[L14176]  COND FALSE  !(choice == 31)
[L14183]  COND FALSE  !(choice == 30)
[L14189]  COND FALSE  !(choice == 29)
[L14195]  COND FALSE  !(choice == 28)
[L14201]  COND FALSE  !(choice == 27)
[L14207]  COND FALSE  !(choice == 26)
[L14214]  COND FALSE  !(choice == 25)
[L14220]  COND FALSE  !(choice == 24)
[L14226]  COND FALSE  !(choice == 23)
[L14232]  COND FALSE  !(choice == 22)
[L14238]  COND FALSE  !(choice == 21)
[L14245]  COND FALSE  !(choice == 20)
[L14253]  COND FALSE  !(choice == 19)
[L14259]  COND FALSE  !(choice == 18)
[L14265]  COND FALSE  !(choice == 17)
[L14272]  COND FALSE  !(choice == 16)
[L14278]  COND TRUE   choice == 15
[L14279]              gas := gas - 21000;
[L14280]  COND TRUE   gas >= 0
[L14281]              assume msgvalue_MSG == 0;
[L14282]  CALL        call pause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L2952]               havoc __exception;
[L2953]               revert := false;
[L2954]   COND FALSE  !(__exception)
[L2991]   CALL        call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8687]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12332]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L8687]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8688]   COND FALSE  !(revert)
[L8691]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12380]  COND FALSE  !(!!paused_Pausable[this])
[L8691]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8692]   COND FALSE  !(revert)
[L8695]               paused_Pausable[this] := true;
[L8696]               assert { :EventEmitted "Pause_Pausable" } true;
[L2991]   RET         call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L2992]               assume !revert && gas >= 0;
[L14282]  RET         call pause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L14388]  RET         call CorralChoice_MainToken(this);
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND TRUE   choice == 36
[L14143]              gas := gas - 21000;
[L14144]  COND TRUE   gas >= 0
[L14145]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14146]              assume msgvalue_MSG == 0;
[L14147]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4599]               havoc __exception;
[L4600]               revert := false;
[L4601]   COND TRUE   __exception
[L4602]               __tmp__Balance := Balance;
[L4603]               __tmp__DType := DType;
[L4604]               __tmp__Alloc := Alloc;
[L4605]               __tmp__balance_ADDR := balance_ADDR;
[L4606]               __tmp__M_Ref_int := M_Ref_int;
[L4607]               __tmp__sum_balances0 := sum_balances0;
[L4608]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4609]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4610]               __tmp__sum_allowed1 := sum_allowed1;
[L4611]               __tmp__M_int_int := M_int_int;
[L4612]               __tmp__sum_chains2 := sum_chains2;
[L4613]               __tmp__sum_freezings3 := sum_freezings3;
[L4614]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4615]               __tmp__Length := Length;
[L4616]               __tmp__now := now;
[L4617]               __tmp__balances_BasicToken := balances_BasicToken;
[L4618]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4619]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4620]               __tmp__owner_Ownable := owner_Ownable;
[L4621]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4622]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4623]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4624]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4625]               __tmp__paused_Pausable := paused_Pausable;
[L4626]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4627]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4628]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4629]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4630]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4631]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4632]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4633]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4634]               __tmp__initialized_MainToken := initialized_MainToken;
[L4635]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9335]   COND TRUE   !!__tmp__paused_Pausable[this]
[L9336]               revert := true;
[L4635]   RET         call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4636]               assume revert || gas < 0;
[L14147]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14388]  RET         call CorralChoice_MainToken(this);

Loop:
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND TRUE   choice == 38
[L14131]              gas := gas - 21000;
[L14132]  COND FALSE  !(gas >= 0)
[L14388]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:30:15,731 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:30:15,731 INFO  L82        PathProgramCache]: Analyzing trace with hash -1325230423, now seen corresponding path program 1 times
[2020-11-24 21:30:15,732 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:30:15,765 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 21:30:15,804 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 21:30:16,133 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:30:16,133 INFO  L82        PathProgramCache]: Analyzing trace with hash 1724029498, now seen corresponding path program 1 times
[2020-11-24 21:30:16,134 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:30:16,136 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:30:16,143 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 21:30:16,143 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:30:16,143 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 21:30:16,144 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-11-24 21:30:16,144 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 21:30:16,144 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-24 21:30:16,144 INFO  L87              Difference]: Start difference. First operand 8994 states and 10553 transitions. cyclomatic complexity: 1597 Second operand 4 states.
[2020-11-24 21:30:16,792 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:30:16,792 INFO  L93              Difference]: Finished difference Result 9532 states and 11166 transitions.
[2020-11-24 21:30:16,792 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 21:30:16,792 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9532 states and 11166 transitions.
[2020-11-24 21:30:16,847 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 48
[2020-11-24 21:30:16,890 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9532 states to 9532 states and 11166 transitions.
[2020-11-24 21:30:16,890 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1975
[2020-11-24 21:30:16,891 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1975
[2020-11-24 21:30:16,891 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9532 states and 11166 transitions.
[2020-11-24 21:30:16,903 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:30:16,903 INFO  L728         BuchiCegarLoop]: Abstraction has 9532 states and 11166 transitions.
[2020-11-24 21:30:16,910 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9532 states and 11166 transitions.
[2020-11-24 21:30:16,975 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9532 to 8842.
[2020-11-24 21:30:16,975 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8842 states.
[2020-11-24 21:30:16,987 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8842 states to 8842 states and 10173 transitions.
[2020-11-24 21:30:16,987 INFO  L751         BuchiCegarLoop]: Abstraction has 8842 states and 10173 transitions.
[2020-11-24 21:30:16,987 INFO  L631         BuchiCegarLoop]: Abstraction has 8842 states and 10173 transitions.
[2020-11-24 21:30:16,987 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-24 21:30:16,988 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8842 states and 10173 transitions.
[2020-11-24 21:30:16,996 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 24
[2020-11-24 21:30:16,996 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:30:16,996 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:30:16,998 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:30:16,998 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_MainToken0 := false;
[L2]                  call_transfer_MainToken0 := false;
[L2]      CALL        call main();
[L14378]              assume null == 0;
[L14379]  CALL        call this := FreshRefGenerator__success();
[L6396]               havoc newRef;
[L6397]               assume Alloc[newRef] == false;
[L6398]               Alloc[newRef] := true;
[L6399]               assume newRef != null;
[L14379]  RET         call this := FreshRefGenerator__success();
[L14380]              assume now >= 0;
[L14381]              assume DType[this] == MainToken;
[L14382]              assume msgvalue_MSG == 0;
[L14383]              gas := gas - 53000;
[L14384]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4183]               havoc __exception;
[L4184]               revert := false;
[L4185]   COND FALSE  !(__exception)
[L4222]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9205]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9007]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8983]               assume msgsender_MSG != null;
[L8984]               Balance[this] := 0;
[L8985]               TOKEN_DECIMALS_Consts[this] := 18;
[L8986]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8987]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8988]               TOKEN_NAME_Consts[this] := -1051245219;
[L8989]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8990]               PAUSED_Consts[this] := false;
[L8991]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8992]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               CONTINUE_MINTING_Consts[this] := true;
[L9007]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   COND FALSE  !(revert)
[L9205]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   COND FALSE  !(revert)
[L9209]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L9209]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9210]   COND FALSE  !(revert)
[L9213]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L9213]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9214]   COND FALSE  !(revert)
[L9217]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L9217]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9218]   COND FALSE  !(revert)
[L9221]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L9221]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9222]   COND FALSE  !(revert)
[L9225]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L9225]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9226]   COND FALSE  !(revert)
[L9229]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L9229]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9230]   COND FALSE  !(revert)
[L9233]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L9233]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9234]   COND FALSE  !(revert)
[L9237]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8792]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8792]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8793]   COND FALSE  !(revert)
[L8796]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L8796]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L8797]   COND FALSE  !(revert)
[L8800]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8800]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8801]   COND FALSE  !(revert)
[L8804]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L8804]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8805]   COND FALSE  !(revert)
[L8808]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L8808]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8809]   COND FALSE  !(revert)
[L8812]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8812]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8813]   COND FALSE  !(revert)
[L8816]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L8816]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8817]   COND FALSE  !(revert)
[L8820]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8749]               assume msgsender_MSG != null;
[L8750]               Balance[this] := 0;
[L8820]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8821]   COND FALSE  !(revert)
[L9237]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9238]   COND FALSE  !(revert)
[L9241]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8536]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8536]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8537]   COND FALSE  !(revert)
[L8540]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8540]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8541]   COND FALSE  !(revert)
[L8544]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8513]               assume msgsender_MSG != null;
[L8514]               Balance[this] := 0;
[L8544]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8545]   COND FALSE  !(revert)
[L9241]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9242]   COND FALSE  !(revert)
[L9245]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8662]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8662]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8663]   COND FALSE  !(revert)
[L8666]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8642]               assume msgsender_MSG != null;
[L8643]               Balance[this] := 0;
[L8644]               paused_Pausable[this] := false;
[L8666]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8667]   COND FALSE  !(revert)
[L9245]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9249]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9133]               assume msgsender_MSG != null;
[L9134]               Balance[this] := 0;
[L9135]               initialized_MainToken[this] := false;
[L9137]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9404]   COND FALSE  !(!!initialized_MainToken[this])
[L9408]               initialized_MainToken[this] := true;
[L9409]   COND FALSE  !(PAUSED_Consts[this])
[L9419]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9429]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9137]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   COND TRUE   DType[this] == MainToken
[L9142]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7055]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12332]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7055]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   COND TRUE   DType[this] == MainToken
[L7060]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7103]               __var_11 := null;
[L7104]   COND FALSE  !(!(_newOwner_s581 != null))
[L7108]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7109]               owner_Ownable[this] := _newOwner_s581;
[L7060]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7061]   COND FALSE  !(revert)
[L9142]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9143]   COND FALSE  !(revert)
[L9249]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9250]   COND FALSE  !(revert)
[L4222]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4223]               assume !revert && gas >= 0;
[L14384]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14385]              assume !revert && gas >= 0;
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND FALSE  !(choice == 36)
[L14149]  COND FALSE  !(choice == 35)
[L14155]  COND FALSE  !(choice == 34)
[L14162]  COND FALSE  !(choice == 33)
[L14169]  COND FALSE  !(choice == 32)
[L14176]  COND FALSE  !(choice == 31)
[L14183]  COND FALSE  !(choice == 30)
[L14189]  COND FALSE  !(choice == 29)
[L14195]  COND FALSE  !(choice == 28)
[L14201]  COND FALSE  !(choice == 27)
[L14207]  COND FALSE  !(choice == 26)
[L14214]  COND FALSE  !(choice == 25)
[L14220]  COND FALSE  !(choice == 24)
[L14226]  COND FALSE  !(choice == 23)
[L14232]  COND FALSE  !(choice == 22)
[L14238]  COND FALSE  !(choice == 21)
[L14245]  COND FALSE  !(choice == 20)
[L14253]  COND FALSE  !(choice == 19)
[L14259]  COND FALSE  !(choice == 18)
[L14265]  COND FALSE  !(choice == 17)
[L14272]  COND FALSE  !(choice == 16)
[L14278]  COND FALSE  !(choice == 15)
[L14284]  COND TRUE   choice == 14
[L14285]              gas := gas - 21000;
[L14286]  COND TRUE   gas >= 0
[L14287]              assume msgvalue_MSG == 0;
[L14288]  CALL        call unpause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L3035]               havoc __exception;
[L3036]               revert := false;
[L3037]   COND FALSE  !(__exception)
[L3074]   CALL        call unpause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8714]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12332]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L8714]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8715]   COND FALSE  !(revert)
[L8718]   CALL        call whenPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12396]  COND FALSE  !(!paused_Pausable[this])
[L8718]   RET         call whenPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8719]   COND FALSE  !(revert)
[L8722]               paused_Pausable[this] := false;
[L8723]               assert { :EventEmitted "Unpause_Pausable" } true;
[L3074]   RET         call unpause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3075]               assume !revert && gas >= 0;
[L14288]  RET         call unpause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L14388]  RET         call CorralChoice_MainToken(this);
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND TRUE   choice == 36
[L14143]              gas := gas - 21000;
[L14144]  COND TRUE   gas >= 0
[L14145]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14146]              assume msgvalue_MSG == 0;
[L14147]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4599]               havoc __exception;
[L4600]               revert := false;
[L4601]   COND TRUE   __exception
[L4602]               __tmp__Balance := Balance;
[L4603]               __tmp__DType := DType;
[L4604]               __tmp__Alloc := Alloc;
[L4605]               __tmp__balance_ADDR := balance_ADDR;
[L4606]               __tmp__M_Ref_int := M_Ref_int;
[L4607]               __tmp__sum_balances0 := sum_balances0;
[L4608]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4609]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4610]               __tmp__sum_allowed1 := sum_allowed1;
[L4611]               __tmp__M_int_int := M_int_int;
[L4612]               __tmp__sum_chains2 := sum_chains2;
[L4613]               __tmp__sum_freezings3 := sum_freezings3;
[L4614]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4615]               __tmp__Length := Length;
[L4616]               __tmp__now := now;
[L4617]               __tmp__balances_BasicToken := balances_BasicToken;
[L4618]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4619]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4620]               __tmp__owner_Ownable := owner_Ownable;
[L4621]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4622]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4623]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4624]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4625]               __tmp__paused_Pausable := paused_Pausable;
[L4626]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4627]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4628]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4629]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4630]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4631]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4632]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4633]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4634]               __tmp__initialized_MainToken := initialized_MainToken;
[L4635]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9335]   COND TRUE   !!__tmp__paused_Pausable[this]
[L9336]               revert := true;
[L4635]   RET         call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4636]               assume revert || gas < 0;
[L14147]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14388]  RET         call CorralChoice_MainToken(this);

Loop:
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND FALSE  !(choice == 36)
[L14149]  COND FALSE  !(choice == 35)
[L14155]  COND TRUE   choice == 34
[L14156]              gas := gas - 21000;
[L14157]  COND TRUE   gas >= 0
[L14158]              assume _value_s1551 >= 0 && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14159]              assume msgvalue_MSG == 0;
[L14160]  CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4515]               havoc __exception;
[L4516]               revert := false;
[L4517]   COND TRUE   __exception
[L4518]               __tmp__Balance := Balance;
[L4519]               __tmp__DType := DType;
[L4520]               __tmp__Alloc := Alloc;
[L4521]               __tmp__balance_ADDR := balance_ADDR;
[L4522]               __tmp__M_Ref_int := M_Ref_int;
[L4523]               __tmp__sum_balances0 := sum_balances0;
[L4524]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4525]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4526]               __tmp__sum_allowed1 := sum_allowed1;
[L4527]               __tmp__M_int_int := M_int_int;
[L4528]               __tmp__sum_chains2 := sum_chains2;
[L4529]               __tmp__sum_freezings3 := sum_freezings3;
[L4530]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4531]               __tmp__Length := Length;
[L4532]               __tmp__now := now;
[L4533]               __tmp__balances_BasicToken := balances_BasicToken;
[L4534]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4535]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4536]               __tmp__owner_Ownable := owner_Ownable;
[L4537]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4538]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4539]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4540]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4541]               __tmp__paused_Pausable := paused_Pausable;
[L4542]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4543]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4544]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4545]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4546]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4547]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4548]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4549]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4550]               __tmp__initialized_MainToken := initialized_MainToken;
[L4551]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9295]   COND TRUE   !!__tmp__paused_Pausable[this]
[L9296]               revert := true;
[L4551]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4552]               assume revert || gas < 0;
[L14160]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L14388]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:30:17,005 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:30:17,005 INFO  L82        PathProgramCache]: Analyzing trace with hash -769693745, now seen corresponding path program 1 times
[2020-11-24 21:30:17,006 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:30:17,042 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:30:17,640 INFO  L134       CoverageAnalysis]: Checked inductivity of 9916 backedges. 1 proven. 89 refuted. 0 times theorem prover too weak. 9826 trivial. 0 not checked.
[2020-11-24 21:30:17,640 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 21:30:17,640 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [13] total 13
[2020-11-24 21:30:17,641 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:30:17,641 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-11-24 21:30:17,641 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=131, Unknown=0, NotChecked=0, Total=156
[2020-11-24 21:30:17,641 INFO  L87              Difference]: Start difference. First operand 8842 states and 10173 transitions. cyclomatic complexity: 1369 Second operand 13 states.
[2020-11-24 21:30:21,638 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:30:21,638 INFO  L93              Difference]: Finished difference Result 8846 states and 10194 transitions.
[2020-11-24 21:30:21,638 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-11-24 21:30:21,638 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8846 states and 10194 transitions.
[2020-11-24 21:30:21,659 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 24
[2020-11-24 21:30:21,679 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8846 states to 8846 states and 10194 transitions.
[2020-11-24 21:30:21,679 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1907
[2020-11-24 21:30:21,680 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1907
[2020-11-24 21:30:21,680 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8846 states and 10194 transitions.
[2020-11-24 21:30:21,686 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:30:21,686 INFO  L728         BuchiCegarLoop]: Abstraction has 8846 states and 10194 transitions.
[2020-11-24 21:30:21,691 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8846 states and 10194 transitions.
[2020-11-24 21:30:21,733 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8846 to 8846.
[2020-11-24 21:30:21,733 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8846 states.
[2020-11-24 21:30:21,745 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8846 states to 8846 states and 10194 transitions.
[2020-11-24 21:30:21,745 INFO  L751         BuchiCegarLoop]: Abstraction has 8846 states and 10194 transitions.
[2020-11-24 21:30:21,745 INFO  L631         BuchiCegarLoop]: Abstraction has 8846 states and 10194 transitions.
[2020-11-24 21:30:21,745 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-24 21:30:21,745 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8846 states and 10194 transitions.
[2020-11-24 21:30:21,754 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 24
[2020-11-24 21:30:21,754 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:30:21,754 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:30:21,756 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:30:21,756 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_MainToken0 := false;
[L2]                  call_transfer_MainToken0 := false;
[L2]      CALL        call main();
[L14378]              assume null == 0;
[L14379]  CALL        call this := FreshRefGenerator__success();
[L6396]               havoc newRef;
[L6397]               assume Alloc[newRef] == false;
[L6398]               Alloc[newRef] := true;
[L6399]               assume newRef != null;
[L14379]  RET         call this := FreshRefGenerator__success();
[L14380]              assume now >= 0;
[L14381]              assume DType[this] == MainToken;
[L14382]              assume msgvalue_MSG == 0;
[L14383]              gas := gas - 53000;
[L14384]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4183]               havoc __exception;
[L4184]               revert := false;
[L4185]   COND FALSE  !(__exception)
[L4222]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9205]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9007]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8983]               assume msgsender_MSG != null;
[L8984]               Balance[this] := 0;
[L8985]               TOKEN_DECIMALS_Consts[this] := 18;
[L8986]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8987]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8988]               TOKEN_NAME_Consts[this] := -1051245219;
[L8989]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8990]               PAUSED_Consts[this] := false;
[L8991]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8992]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               CONTINUE_MINTING_Consts[this] := true;
[L9007]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   COND FALSE  !(revert)
[L9205]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   COND FALSE  !(revert)
[L9209]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L9209]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9210]   COND FALSE  !(revert)
[L9213]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L9213]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9214]   COND FALSE  !(revert)
[L9217]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L9217]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9218]   COND FALSE  !(revert)
[L9221]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L9221]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9222]   COND FALSE  !(revert)
[L9225]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L9225]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9226]   COND FALSE  !(revert)
[L9229]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L9229]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9230]   COND FALSE  !(revert)
[L9233]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L9233]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9234]   COND FALSE  !(revert)
[L9237]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8792]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8792]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8793]   COND FALSE  !(revert)
[L8796]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L8796]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L8797]   COND FALSE  !(revert)
[L8800]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8800]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8801]   COND FALSE  !(revert)
[L8804]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L8804]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8805]   COND FALSE  !(revert)
[L8808]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L8808]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8809]   COND FALSE  !(revert)
[L8812]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8812]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8813]   COND FALSE  !(revert)
[L8816]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L8816]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8817]   COND FALSE  !(revert)
[L8820]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8749]               assume msgsender_MSG != null;
[L8750]               Balance[this] := 0;
[L8820]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8821]   COND FALSE  !(revert)
[L9237]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9238]   COND FALSE  !(revert)
[L9241]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8536]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8536]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8537]   COND FALSE  !(revert)
[L8540]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8540]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8541]   COND FALSE  !(revert)
[L8544]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8513]               assume msgsender_MSG != null;
[L8514]               Balance[this] := 0;
[L8544]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8545]   COND FALSE  !(revert)
[L9241]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9242]   COND FALSE  !(revert)
[L9245]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8662]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8662]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8663]   COND FALSE  !(revert)
[L8666]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8642]               assume msgsender_MSG != null;
[L8643]               Balance[this] := 0;
[L8644]               paused_Pausable[this] := false;
[L8666]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8667]   COND FALSE  !(revert)
[L9245]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9249]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9133]               assume msgsender_MSG != null;
[L9134]               Balance[this] := 0;
[L9135]               initialized_MainToken[this] := false;
[L9137]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9404]   COND FALSE  !(!!initialized_MainToken[this])
[L9408]               initialized_MainToken[this] := true;
[L9409]   COND FALSE  !(PAUSED_Consts[this])
[L9419]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9429]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9137]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   COND TRUE   DType[this] == MainToken
[L9142]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7055]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12332]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7055]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   COND TRUE   DType[this] == MainToken
[L7060]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7103]               __var_11 := null;
[L7104]   COND FALSE  !(!(_newOwner_s581 != null))
[L7108]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7109]               owner_Ownable[this] := _newOwner_s581;
[L7060]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7061]   COND FALSE  !(revert)
[L9142]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9143]   COND FALSE  !(revert)
[L9249]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9250]   COND FALSE  !(revert)
[L4222]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4223]               assume !revert && gas >= 0;
[L14384]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14385]              assume !revert && gas >= 0;
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND FALSE  !(choice == 36)
[L14149]  COND FALSE  !(choice == 35)
[L14155]  COND FALSE  !(choice == 34)
[L14162]  COND FALSE  !(choice == 33)
[L14169]  COND FALSE  !(choice == 32)
[L14176]  COND FALSE  !(choice == 31)
[L14183]  COND FALSE  !(choice == 30)
[L14189]  COND FALSE  !(choice == 29)
[L14195]  COND FALSE  !(choice == 28)
[L14201]  COND FALSE  !(choice == 27)
[L14207]  COND FALSE  !(choice == 26)
[L14214]  COND FALSE  !(choice == 25)
[L14220]  COND FALSE  !(choice == 24)
[L14226]  COND FALSE  !(choice == 23)
[L14232]  COND FALSE  !(choice == 22)
[L14238]  COND FALSE  !(choice == 21)
[L14245]  COND FALSE  !(choice == 20)
[L14253]  COND FALSE  !(choice == 19)
[L14259]  COND FALSE  !(choice == 18)
[L14265]  COND FALSE  !(choice == 17)
[L14272]  COND FALSE  !(choice == 16)
[L14278]  COND TRUE   choice == 15
[L14279]              gas := gas - 21000;
[L14280]  COND TRUE   gas >= 0
[L14281]              assume msgvalue_MSG == 0;
[L14282]  CALL        call pause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L2952]               havoc __exception;
[L2953]               revert := false;
[L2954]   COND FALSE  !(__exception)
[L2991]   CALL        call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8687]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12332]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L8687]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8688]   COND FALSE  !(revert)
[L8691]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12380]  COND FALSE  !(!!paused_Pausable[this])
[L8691]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8692]   COND FALSE  !(revert)
[L8695]               paused_Pausable[this] := true;
[L8696]               assert { :EventEmitted "Pause_Pausable" } true;
[L2991]   RET         call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L2992]               assume !revert && gas >= 0;
[L14282]  RET         call pause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L14388]  RET         call CorralChoice_MainToken(this);
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND TRUE   choice == 36
[L14143]              gas := gas - 21000;
[L14144]  COND TRUE   gas >= 0
[L14145]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14146]              assume msgvalue_MSG == 0;
[L14147]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4599]               havoc __exception;
[L4600]               revert := false;
[L4601]   COND TRUE   __exception
[L4602]               __tmp__Balance := Balance;
[L4603]               __tmp__DType := DType;
[L4604]               __tmp__Alloc := Alloc;
[L4605]               __tmp__balance_ADDR := balance_ADDR;
[L4606]               __tmp__M_Ref_int := M_Ref_int;
[L4607]               __tmp__sum_balances0 := sum_balances0;
[L4608]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4609]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4610]               __tmp__sum_allowed1 := sum_allowed1;
[L4611]               __tmp__M_int_int := M_int_int;
[L4612]               __tmp__sum_chains2 := sum_chains2;
[L4613]               __tmp__sum_freezings3 := sum_freezings3;
[L4614]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4615]               __tmp__Length := Length;
[L4616]               __tmp__now := now;
[L4617]               __tmp__balances_BasicToken := balances_BasicToken;
[L4618]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4619]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4620]               __tmp__owner_Ownable := owner_Ownable;
[L4621]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4622]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4623]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4624]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4625]               __tmp__paused_Pausable := paused_Pausable;
[L4626]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4627]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4628]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4629]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4630]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4631]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4632]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4633]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4634]               __tmp__initialized_MainToken := initialized_MainToken;
[L4635]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9335]   COND TRUE   !!__tmp__paused_Pausable[this]
[L9336]               revert := true;
[L4635]   RET         call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4636]               assume revert || gas < 0;
[L14147]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14388]  RET         call CorralChoice_MainToken(this);

Loop:
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND TRUE   choice == 36
[L14143]              gas := gas - 21000;
[L14144]  COND TRUE   gas >= 0
[L14145]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14146]              assume msgvalue_MSG == 0;
[L14147]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4599]               havoc __exception;
[L4600]               revert := false;
[L4601]   COND TRUE   __exception
[L4602]               __tmp__Balance := Balance;
[L4603]               __tmp__DType := DType;
[L4604]               __tmp__Alloc := Alloc;
[L4605]               __tmp__balance_ADDR := balance_ADDR;
[L4606]               __tmp__M_Ref_int := M_Ref_int;
[L4607]               __tmp__sum_balances0 := sum_balances0;
[L4608]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4609]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4610]               __tmp__sum_allowed1 := sum_allowed1;
[L4611]               __tmp__M_int_int := M_int_int;
[L4612]               __tmp__sum_chains2 := sum_chains2;
[L4613]               __tmp__sum_freezings3 := sum_freezings3;
[L4614]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4615]               __tmp__Length := Length;
[L4616]               __tmp__now := now;
[L4617]               __tmp__balances_BasicToken := balances_BasicToken;
[L4618]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4619]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4620]               __tmp__owner_Ownable := owner_Ownable;
[L4621]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4622]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4623]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4624]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4625]               __tmp__paused_Pausable := paused_Pausable;
[L4626]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4627]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4628]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4629]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4630]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4631]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4632]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4633]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4634]               __tmp__initialized_MainToken := initialized_MainToken;
[L4635]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9335]   COND TRUE   !!__tmp__paused_Pausable[this]
[L9336]               revert := true;
[L4635]   RET         call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4636]               assume revert || gas < 0;
[L14147]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14388]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:30:21,763 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:30:21,763 INFO  L82        PathProgramCache]: Analyzing trace with hash -1325230423, now seen corresponding path program 2 times
[2020-11-24 21:30:21,764 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:30:21,796 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 21:30:21,833 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 21:30:22,048 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:30:22,048 INFO  L82        PathProgramCache]: Analyzing trace with hash -1470175194, now seen corresponding path program 1 times
[2020-11-24 21:30:22,049 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:30:22,053 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 21:30:22,057 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 21:30:22,065 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:30:22,065 INFO  L82        PathProgramCache]: Analyzing trace with hash -1516271922, now seen corresponding path program 1 times
[2020-11-24 21:30:22,066 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:30:22,101 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 21:30:22,143 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 139 to 277
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #1: 53 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.002s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 1571 to 3137
Garbage collection #7: 3137 nodes / 0 free / 0.001s / 0.004s total
Resizing node table from 3137 to 6271
[2020-11-24 21:30:22,725 WARN  L188               SmtUtils]: Spent 158.00 ms on a formula simplification that was a NOOP. DAG size: 336
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 4027 to 8053
[2020-11-24 21:30:22,920 WARN  L188               SmtUtils]: Spent 182.00 ms on a formula simplification that was a NOOP. DAG size: 262
[2020-11-24 21:30:23,478 WARN  L188               SmtUtils]: Spent 554.00 ms on a formula simplification. DAG size of input: 337 DAG size of output: 327
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.002s / 0.004s total
Resizing node table from 7933 to 15859
Garbage collection #1: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2179 to 4357
Garbage collection #7: 4357 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 4357 to 8713
Garbage collection #8: 8713 nodes / 0 free / 0.002s / 0.004s total
Resizing node table from 8713 to 17419
[2020-11-24 21:30:23,638 WARN  L188               SmtUtils]: Spent 135.00 ms on a formula simplification. DAG size of input: 195 DAG size of output: 191
[2020-11-24 21:30:23,995 WARN  L188               SmtUtils]: Spent 355.00 ms on a formula simplification that was a NOOP. DAG size: 446
Garbage collection #1: 179 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 179 to 353
Garbage collection #2: 353 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 353 to 701
Garbage collection #3: 701 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 701 to 1399
Garbage collection #4: 1399 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1399 to 2797
Garbage collection #5: 2797 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2797 to 5591
Garbage collection #6: 5591 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 5591 to 11177
[2020-11-24 21:30:24,214 WARN  L188               SmtUtils]: Spent 211.00 ms on a formula simplification that was a NOOP. DAG size: 361
[2020-11-24 21:30:24,421 WARN  L188               SmtUtils]: Spent 205.00 ms on a formula simplification that was a NOOP. DAG size: 361
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 4273 to 8543
Garbage collection #7: 8543 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 8543 to 17077
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
[2020-11-24 21:30:24,516 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 443 to 883
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
[2020-11-24 21:30:25,942 WARN  L188               SmtUtils]: Spent 233.00 ms on a formula simplification. DAG size of input: 264 DAG size of output: 250
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
[2020-11-24 21:30:28,706 WARN  L188               SmtUtils]: Spent 2.61 s on a formula simplification. DAG size of input: 501 DAG size of output: 473
Garbage collection #1: 191 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 191 to 379
Garbage collection #2: 379 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 379 to 757
Garbage collection #3: 757 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 757 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #7: 12073 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12073 to 24137
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #1: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
[2020-11-24 21:30:29,147 WARN  L188               SmtUtils]: Spent 171.00 ms on a formula simplification that was a NOOP. DAG size: 402
Garbage collection #1: 151 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 151 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
[2020-11-24 21:30:29,285 WARN  L188               SmtUtils]: Spent 135.00 ms on a formula simplification that was a NOOP. DAG size: 352
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
[2020-11-24 21:30:29,469 WARN  L188               SmtUtils]: Spent 110.00 ms on a formula simplification. DAG size of input: 331 DAG size of output: 261
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #1: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
[2020-11-24 21:30:29,615 WARN  L188               SmtUtils]: Spent 120.00 ms on a formula simplification that was a NOOP. DAG size: 413
Garbage collection #1: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #2: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #3: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #4: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #5: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #6: 5281 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5281 to 10559
Garbage collection #7: 10559 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 10559 to 21107
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #7: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
[2020-11-24 21:30:29,940 WARN  L188               SmtUtils]: Spent 125.00 ms on a formula simplification that was a NOOP. DAG size: 335
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
[2020-11-24 21:30:30,194 WARN  L188               SmtUtils]: Spent 248.00 ms on a formula simplification that was a NOOP. DAG size: 261
[2020-11-24 21:30:30,728 WARN  L188               SmtUtils]: Spent 530.00 ms on a formula simplification. DAG size of input: 335 DAG size of output: 326
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
Garbage collection #1: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #7: 4357 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4357 to 8713
[2020-11-24 21:30:30,858 WARN  L188               SmtUtils]: Spent 120.00 ms on a formula simplification. DAG size of input: 195 DAG size of output: 191
[2020-11-24 21:30:31,083 WARN  L188               SmtUtils]: Spent 223.00 ms on a formula simplification that was a NOOP. DAG size: 446
Garbage collection #1: 179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 179 to 353
Garbage collection #2: 353 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 353 to 701
Garbage collection #3: 701 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 701 to 1399
Garbage collection #4: 1399 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1399 to 2797
Garbage collection #5: 2797 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2797 to 5591
Garbage collection #6: 5591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5591 to 11177
Garbage collection #7: 11177 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11177 to 22349
[2020-11-24 21:30:31,293 WARN  L188               SmtUtils]: Spent 203.00 ms on a formula simplification that was a NOOP. DAG size: 361
[2020-11-24 21:30:33,699 WARN  L188               SmtUtils]: Spent 2.40 s on a formula simplification. DAG size of input: 929 DAG size of output: 916
Garbage collection #1: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #2: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #3: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #4: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #5: 6271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6271 to 12541
Garbage collection #6: 12541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12541 to 25073
Garbage collection #7: 25073 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 25073 to 50131
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
[2020-11-24 21:30:33,959 WARN  L188               SmtUtils]: Spent 229.00 ms on a formula simplification. DAG size of input: 301 DAG size of output: 298
[2020-11-24 21:30:34,240 WARN  L188               SmtUtils]: Spent 242.00 ms on a formula simplification that was a NOOP. DAG size: 462
Garbage collection #1: 167 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 167 to 331
Garbage collection #2: 331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 331 to 661
Garbage collection #3: 661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 661 to 1321
Garbage collection #4: 1321 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1321 to 2633
Garbage collection #5: 2633 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2633 to 5261
Garbage collection #6: 5261 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5261 to 10513
Garbage collection #7: 10513 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 10513 to 21023
Garbage collection #1: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
[2020-11-24 21:30:34,368 WARN  L188               SmtUtils]: Spent 120.00 ms on a formula simplification that was a NOOP. DAG size: 298
[2020-11-24 21:30:34,862 WARN  L188               SmtUtils]: Spent 492.00 ms on a formula simplification. DAG size of input: 464 DAG size of output: 463
Garbage collection #1: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #2: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #3: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #4: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #5: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #6: 5281 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 5281 to 10559
Garbage collection #7: 10559 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 10559 to 21107
Garbage collection #1: 167 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 167 to 331
Garbage collection #2: 331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 331 to 661
Garbage collection #3: 661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 661 to 1321
Garbage collection #4: 1321 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1321 to 2633
Garbage collection #5: 2633 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2633 to 5261
Garbage collection #6: 5261 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 5261 to 10513
Garbage collection #7: 10513 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 10513 to 21023
[2020-11-24 21:30:35,169 WARN  L188               SmtUtils]: Spent 303.00 ms on a formula simplification that was a NOOP. DAG size: 459
[2020-11-24 21:30:35,206 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 21:30:35,251 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 21:30:35,269 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 09:30:35 BasicIcfg
[2020-11-24 21:30:35,269 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-24 21:30:35,269 INFO  L168              Benchmark]: Toolchain (without parser) took 106511.39 ms. Allocated memory was 1.0 GB in the beginning and 5.9 GB in the end (delta: 4.9 GB). Free memory was 913.7 MB in the beginning and 5.3 GB in the end (delta: -4.4 GB). Peak memory consumption was 5.0 GB. Max. memory is 15.3 GB.
[2020-11-24 21:30:35,270 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 21:30:35,270 INFO  L168              Benchmark]: Boogie Preprocessor took 196.30 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 886.9 MB in the end (delta: 26.8 MB). Peak memory consumption was 26.8 MB. Max. memory is 15.3 GB.
[2020-11-24 21:30:35,271 INFO  L168              Benchmark]: UtopiaSpecLang took 100.69 ms. Allocated memory is still 1.0 GB. Free memory was 886.9 MB in the beginning and 870.8 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-24 21:30:35,271 INFO  L168              Benchmark]: Boogie Printer took 33.88 ms. Allocated memory is still 1.0 GB. Free memory was 870.8 MB in the beginning and 859.9 MB in the end (delta: 10.8 MB). Peak memory consumption was 10.8 MB. Max. memory is 15.3 GB.
[2020-11-24 21:30:35,271 INFO  L168              Benchmark]: RCFGBuilder took 1739.78 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 183.0 MB). Free memory was 859.9 MB in the beginning and 1.1 GB in the end (delta: -231.7 MB). Peak memory consumption was 248.3 MB. Max. memory is 15.3 GB.
[2020-11-24 21:30:35,272 INFO  L168              Benchmark]: UtopiaLTL2Aut took 43.38 ms. Allocated memory is still 1.2 GB. Free memory was 1.1 GB in the beginning and 1.1 GB in the end (delta: 8.1 MB). Peak memory consumption was 8.1 MB. Max. memory is 15.3 GB.
[2020-11-24 21:30:35,272 INFO  L168              Benchmark]: BÃ¼chi Program Product took 4057.36 ms. Allocated memory was 1.2 GB in the beginning and 1.6 GB in the end (delta: 349.2 MB). Free memory was 1.1 GB in the beginning and 870.1 MB in the end (delta: 213.5 MB). Peak memory consumption was 810.3 MB. Max. memory is 15.3 GB.
[2020-11-24 21:30:35,272 INFO  L168              Benchmark]: BlockEncodingV2 took 332.94 ms. Allocated memory is still 1.6 GB. Free memory was 870.1 MB in the beginning and 689.7 MB in the end (delta: 180.4 MB). Peak memory consumption was 180.4 MB. Max. memory is 15.3 GB.
[2020-11-24 21:30:35,273 INFO  L168              Benchmark]: BuchiAutomizer took 100003.95 ms. Allocated memory was 1.6 GB in the beginning and 5.9 GB in the end (delta: 4.3 GB). Free memory was 689.7 MB in the beginning and 5.3 GB in the end (delta: -4.6 GB). Peak memory consumption was 4.3 GB. Max. memory is 15.3 GB.
[2020-11-24 21:30:35,275 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    13180 locations, 24265 edges
  - StatisticsResult: Encoded RCFG
    12978 locations, 23703 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 196.30 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 886.9 MB in the end (delta: 26.8 MB). Peak memory consumption was 26.8 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 100.69 ms. Allocated memory is still 1.0 GB. Free memory was 886.9 MB in the beginning and 870.8 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 33.88 ms. Allocated memory is still 1.0 GB. Free memory was 870.8 MB in the beginning and 859.9 MB in the end (delta: 10.8 MB). Peak memory consumption was 10.8 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1739.78 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 183.0 MB). Free memory was 859.9 MB in the beginning and 1.1 GB in the end (delta: -231.7 MB). Peak memory consumption was 248.3 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 43.38 ms. Allocated memory is still 1.2 GB. Free memory was 1.1 GB in the beginning and 1.1 GB in the end (delta: 8.1 MB). Peak memory consumption was 8.1 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 4057.36 ms. Allocated memory was 1.2 GB in the beginning and 1.6 GB in the end (delta: 349.2 MB). Free memory was 1.1 GB in the beginning and 870.1 MB in the end (delta: 213.5 MB). Peak memory consumption was 810.3 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 332.94 ms. Allocated memory is still 1.6 GB. Free memory was 870.1 MB in the beginning and 689.7 MB in the end (delta: 180.4 MB). Peak memory consumption was 180.4 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 100003.95 ms. Allocated memory was 1.6 GB in the beginning and 5.9 GB in the end (delta: 4.3 GB). Free memory was 689.7 MB in the beginning and 5.3 GB in the end (delta: -4.6 GB). Peak memory consumption was 4.3 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    5258 locations, 7412 edges
  - StatisticsResult: BuchiProgram size
    13180 locations, 24265 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 14 terminating modules (14 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.14 modules have a trivial ranking function, the largest among these consists of 33 locations. The remainder module has 8846 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 99.9s and 15 iterations.  TraceHistogramMax:38. Analysis of lassos took 23.6s. Construction of modules took 59.5s. BÃ¼chi inclusion checks took 14.0s. Highest rank in rank-based complementation 0. Minimization of det autom 14. Minimization of nondet autom 0. Automata minimization 1.1s AutomataMinimizationTime, 14 MinimizatonAttempts, 6781 StatesRemovedByMinimization, 11 NontrivialMinimizations. Non-live state removal took 0.7s Buchi closure took 0.0s. Biggest automaton had 11672 states and ocurred in iteration 8.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 110300 SDtfs, 110087 SDslu, 340194 SDs, 0 SdLazy, 539035 SolverSat, 19575 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 59.5s Time	LassoAnalysisResults: nont1 unkn0 SFLI1 SFLT0 conc0 concLT0 SILN0 SILU13 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(3979012) = (new MainToken)({from : 3979014});
[L4183]               havoc __exception;
[L4184]               revert := false;
[L4185]   COND FALSE  !(__exception)
[L4222]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9205]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9007]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8983]               assume msgsender_MSG != null;
[L8984]               Balance[this] := 0;
[L8985]               TOKEN_DECIMALS_Consts[this] := 18;
[L8986]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8987]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8988]               TOKEN_NAME_Consts[this] := -1051245219;
[L8989]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8990]               PAUSED_Consts[this] := false;
[L8991]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8992]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               CONTINUE_MINTING_Consts[this] := true;
[L9007]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   COND FALSE  !(revert)
[L9205]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   COND FALSE  !(revert)
[L9209]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L9209]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9210]   COND FALSE  !(revert)
[L9213]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L9213]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9214]   COND FALSE  !(revert)
[L9217]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L9217]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9218]   COND FALSE  !(revert)
[L9221]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L9221]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9222]   COND FALSE  !(revert)
[L9225]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L9225]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9226]   COND FALSE  !(revert)
[L9229]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L9229]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9230]   COND FALSE  !(revert)
[L9233]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L9233]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9234]   COND FALSE  !(revert)
[L9237]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8792]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8792]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8793]   COND FALSE  !(revert)
[L8796]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L8796]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L8797]   COND FALSE  !(revert)
[L8800]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8800]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8801]   COND FALSE  !(revert)
[L8804]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L8804]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8805]   COND FALSE  !(revert)
[L8808]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L8808]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8809]   COND FALSE  !(revert)
[L8812]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8812]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8813]   COND FALSE  !(revert)
[L8816]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L8816]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8817]   COND FALSE  !(revert)
[L8820]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8749]               assume msgsender_MSG != null;
[L8750]               Balance[this] := 0;
[L8820]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8821]   COND FALSE  !(revert)
[L9237]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9238]   COND FALSE  !(revert)
[L9241]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8536]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8536]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8537]   COND FALSE  !(revert)
[L8540]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8540]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8541]   COND FALSE  !(revert)
[L8544]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8513]               assume msgsender_MSG != null;
[L8514]               Balance[this] := 0;
[L8544]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8545]   COND FALSE  !(revert)
[L9241]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9242]   COND FALSE  !(revert)
[L9245]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8662]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8662]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8663]   COND FALSE  !(revert)
[L8666]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8642]               assume msgsender_MSG != null;
[L8643]               Balance[this] := 0;
[L8644]               paused_Pausable[this] := false;
[L8666]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8667]   COND FALSE  !(revert)
[L9245]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9249]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9133]               assume msgsender_MSG != null;
[L9134]               Balance[this] := 0;
[L9135]               initialized_MainToken[this] := false;
[L9137]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9404]   COND FALSE  !(!!initialized_MainToken[this])
[L9408]               initialized_MainToken[this] := true;
[L9409]   COND FALSE  !(PAUSED_Consts[this])
[L9419]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9429]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9137]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   COND TRUE   DType[this] == MainToken
[L9142]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7055]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12332]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7055]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   COND TRUE   DType[this] == MainToken
[L7060]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7103]               __var_11 := null;
[L7104]   COND FALSE  !(!(_newOwner_s581 != null))
[L7108]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7109]               owner_Ownable[this] := _newOwner_s581;
[L7060]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7061]   COND FALSE  !(revert)
[L9142]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9143]   COND FALSE  !(revert)
[L9249]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9250]   COND FALSE  !(revert)
[L4222]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4223]               assume !revert && gas >= 0;
[L14384]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
Pausable(3979012).pause.gas(3979002)({from : (- 210822415442009814958929812751043848690848471787)});
[L2952]               havoc __exception;
[L2953]               revert := false;
[L2954]   COND FALSE  !(__exception)
[L2991]   CALL        call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8687]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12332]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L8687]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8688]   COND FALSE  !(revert)
[L8691]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12380]  COND FALSE  !(!!paused_Pausable[this])
[L8691]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8692]   COND FALSE  !(revert)
[L8695]               paused_Pausable[this] := true;
[L8696]               assert { :EventEmitted "Pause_Pausable" } true;
[L2991]   RET         call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L2992]               assume !revert && gas >= 0;
[L14282]  RET         call pause_Pausable(this, msgsender_MSG, msgvalue_MSG);
MainToken(3979012).transfer~address~uint256.gas(3979003)({from : 3979005, _to : 3979005, _value : 0});
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MainToken0 := true;
[L2]                 call_transfer_MainToken0 := false;
[L2]                 revert := revert_hold;
[L4599]              havoc __exception;
[L4600]              revert := false;
[L4601]   COND TRUE  __exception
[L4602]              __tmp__Balance := Balance;
[L4603]              __tmp__DType := DType;
[L4604]              __tmp__Alloc := Alloc;
[L4605]              __tmp__balance_ADDR := balance_ADDR;
[L4606]              __tmp__M_Ref_int := M_Ref_int;
[L4607]              __tmp__sum_balances0 := sum_balances0;
[L4608]              __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4609]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L4610]              __tmp__sum_allowed1 := sum_allowed1;
[L4611]              __tmp__M_int_int := M_int_int;
[L4612]              __tmp__sum_chains2 := sum_chains2;
[L4613]              __tmp__sum_freezings3 := sum_freezings3;
[L4614]              __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4615]              __tmp__Length := Length;
[L4616]              __tmp__now := now;
[L4617]              __tmp__balances_BasicToken := balances_BasicToken;
[L4618]              __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4619]              __tmp__allowed_StandardToken := allowed_StandardToken;
[L4620]              __tmp__owner_Ownable := owner_Ownable;
[L4621]              __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4622]              __tmp__chains_FreezableToken := chains_FreezableToken;
[L4623]              __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4624]              __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4625]              __tmp__paused_Pausable := paused_Pausable;
[L4626]              __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4627]              __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4628]              __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4629]              __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4630]              __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4631]              __tmp__PAUSED_Consts := PAUSED_Consts;
[L4632]              __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4633]              __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4634]              __tmp__initialized_MainToken := initialized_MainToken;
[L4635]   CALL       call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9335]   COND TRUE  !!__tmp__paused_Pausable[this]
[L9336]              revert := true;
[L4635]   RET        call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4636]              assume revert || gas < 0;
[L14147]  RET        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);

Loop:
MainToken(3979012).transfer~address~uint256.gas(3979001)({from : 3979021, _to : 3979021, _value : 0});
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MainToken0 := true;
[L2]                 call_transfer_MainToken0 := false;
[L2]                 revert := revert_hold;
[L4599]              havoc __exception;
[L4600]              revert := false;
[L4601]   COND TRUE  __exception
[L4602]              __tmp__Balance := Balance;
[L4603]              __tmp__DType := DType;
[L4604]              __tmp__Alloc := Alloc;
[L4605]              __tmp__balance_ADDR := balance_ADDR;
[L4606]              __tmp__M_Ref_int := M_Ref_int;
[L4607]              __tmp__sum_balances0 := sum_balances0;
[L4608]              __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4609]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L4610]              __tmp__sum_allowed1 := sum_allowed1;
[L4611]              __tmp__M_int_int := M_int_int;
[L4612]              __tmp__sum_chains2 := sum_chains2;
[L4613]              __tmp__sum_freezings3 := sum_freezings3;
[L4614]              __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4615]              __tmp__Length := Length;
[L4616]              __tmp__now := now;
[L4617]              __tmp__balances_BasicToken := balances_BasicToken;
[L4618]              __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4619]              __tmp__allowed_StandardToken := allowed_StandardToken;
[L4620]              __tmp__owner_Ownable := owner_Ownable;
[L4621]              __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4622]              __tmp__chains_FreezableToken := chains_FreezableToken;
[L4623]              __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4624]              __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4625]              __tmp__paused_Pausable := paused_Pausable;
[L4626]              __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4627]              __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4628]              __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4629]              __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4630]              __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4631]              __tmp__PAUSED_Consts := PAUSED_Consts;
[L4632]              __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4633]              __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4634]              __tmp__initialized_MainToken := initialized_MainToken;
[L4635]   CALL       call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9335]   COND TRUE  !!__tmp__paused_Pausable[this]
[L9336]              revert := true;
[L4635]   RET        call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4636]              assume revert || gas < 0;
[L14147]  RET        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
