This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 03:06:03,995 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 03:06:03,997 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 03:06:04,009 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 03:06:04,009 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 03:06:04,010 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 03:06:04,011 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 03:06:04,012 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 03:06:04,014 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 03:06:04,014 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 03:06:04,015 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 03:06:04,016 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 03:06:04,016 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 03:06:04,017 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 03:06:04,018 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 03:06:04,019 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 03:06:04,019 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 03:06:04,020 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 03:06:04,022 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 03:06:04,023 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 03:06:04,024 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 03:06:04,024 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 03:06:04,026 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 03:06:04,026 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 03:06:04,026 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 03:06:04,027 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 03:06:04,027 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 03:06:04,028 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 03:06:04,028 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 03:06:04,028 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 03:06:04,029 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 03:06:04,029 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 03:06:04,030 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 03:06:04,030 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 03:06:04,031 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 03:06:04,031 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 03:06:04,032 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 03:06:04,032 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 03:06:04,032 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 03:06:04,033 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 03:06:04,033 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 03:06:04,033 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 03:06:04,041 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 03:06:04,041 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 03:06:04,042 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 03:06:04,042 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 03:06:04,043 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 03:06:04,043 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 03:06:04,043 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 03:06:04,043 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 03:06:04,043 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 03:06:04,043 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 03:06:04,043 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 03:06:04,044 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 03:06:04,044 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 03:06:04,044 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 03:06:04,044 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 03:06:04,044 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 03:06:04,044 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 03:06:04,044 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 03:06:04,044 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 03:06:04,044 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 03:06:04,045 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 03:06:04,045 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 03:06:04,045 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 03:06:04,045 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 03:06:04,045 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 03:06:04,045 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 03:06:04,070 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 03:06:04,083 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 03:06:04,085 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 03:06:04,086 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 03:06:04,087 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 03:06:04,087 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_totalsupply.bpl
[2020-11-25 03:06:04,088 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_totalsupply.bpl'
[2020-11-25 03:06:04,195 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 03:06:04,196 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 03:06:04,197 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 03:06:04,197 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 03:06:04,197 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 03:06:04,213 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:06:04" (1/1) ...
[2020-11-25 03:06:04,215 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:06:04" (1/1) ...
[2020-11-25 03:06:04,267 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:06:04" (1/1) ...
[2020-11-25 03:06:04,269 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:06:04" (1/1) ...
[2020-11-25 03:06:04,295 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:06:04" (1/1) ...
[2020-11-25 03:06:04,311 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:06:04" (1/1) ...
[2020-11-25 03:06:04,322 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:06:04" (1/1) ...
[2020-11-25 03:06:04,337 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 03:06:04,338 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 03:06:04,338 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 03:06:04,340 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 03:06:04,344 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:06:04" (1/1) ...
[2020-11-25 03:06:04,364 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20.totalSupply, _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.totalSupply, return == _totalSupply_ERC20[this] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 03:06:04,370 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20.totalSupply, _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.totalSupply, return == _totalSupply_ERC20[this] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 03:06:04,377 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20.totalSupply, _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.totalSupply, return == _totalSupply_ERC20[this] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 03:06:04,383 INFO  L636   opiaSpecLangObserver]: Parsed ( _totalSupply_ERC20[this]>=0 && _totalSupply_ERC20[this]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[COMPGEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]],IntegerLiteral[0]],BinaryExpression[COMPLT,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 03:06:04,387 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( __ret_0_==_totalSupply_ERC20[this] && _totalSupply_ERC20[this]==( old(_totalSupply_ERC20[this]) ) ) && _balances_ERC20[this]==( old(_balances_ERC20[this]) ) ) && _allowances_ERC20[this]==( old(_allowances_ERC20[this]) ) ) && _cap_ERC20Capped[this]==( old(_cap_ERC20Capped[this]) ) ) && _minters_MinterRole[this]==( old(_minters_MinterRole[this]) ) ) && _name_ERC20Detailed[this]==( old(_name_ERC20Detailed[this]) ) ) && _symbol_ERC20Detailed[this]==( old(_symbol_ERC20Detailed[this]) ) ) && _decimals_ERC20Detailed[this]==( old(_decimals_ERC20Detailed[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,totalSupply_ERC20>],ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_cap_ERC20Capped,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_cap_ERC20Capped,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_minters_MinterRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_minters_MinterRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]]]]]
[2020-11-25 03:06:04,394 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20.totalSupply, _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.totalSupply, return == _totalSupply_ERC20[this] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 03:06:04,394 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_totalSupply_ERC200) ==> ( <>AP(success_totalSupply_ERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 03:06:04,409 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:06:04 PropertyContainer
[2020-11-25 03:06:04,410 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 03:06:04,410 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 03:06:04,410 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 03:06:04,410 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 03:06:04,411 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:06:04" (1/2) ...
[2020-11-25 03:06:04,411 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 03:06:04,412 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 03:06:04,443 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:06:04" (2/2) ...
[2020-11-25 03:06:04,443 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 03:06:04,444 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 03:06:04,444 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 03:06:04,444 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 03:06:04,445 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:06:04" (1/2) ...
[2020-11-25 03:06:04,500 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 03:06:04,500 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__success
[2020-11-25 03:06:04,500 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 03:06:04,500 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 03:06:04,500 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 03:06:04,500 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 03:06:04,501 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 03:06:04,501 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 03:06:04,501 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 03:06:04,501 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256~string_SafeMath__success
[2020-11-25 03:06:04,501 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__success
[2020-11-25 03:06:04,501 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context
[2020-11-25 03:06:04,501 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context
[2020-11-25 03:06:04,501 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__success
[2020-11-25 03:06:04,501 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 03:06:04,502 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 03:06:04,502 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 03:06:04,502 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 03:06:04,502 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 03:06:04,502 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 03:06:04,502 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 03:06:04,503 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 03:06:04,503 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 03:06:04,503 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 03:06:04,503 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 03:06:04,503 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 03:06:04,503 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 03:06:04,503 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 03:06:04,503 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 03:06:04,503 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 03:06:04,504 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 03:06:04,504 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 03:06:04,504 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 03:06:04,504 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 03:06:04,504 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 03:06:04,504 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 03:06:04,504 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 03:06:04,504 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 03:06:04,504 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 03:06:04,504 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 03:06:04,504 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 03:06:04,505 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 03:06:04,505 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 03:06:04,505 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 03:06:04,505 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 03:06:04,505 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 03:06:04,505 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 03:06:04,505 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 03:06:04,505 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles
[2020-11-25 03:06:04,505 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles
[2020-11-25 03:06:04,505 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__success
[2020-11-25 03:06:04,506 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__success
[2020-11-25 03:06:04,506 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__success
[2020-11-25 03:06:04,506 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 03:06:04,506 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole
[2020-11-25 03:06:04,506 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole
[2020-11-25 03:06:04,506 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole
[2020-11-25 03:06:04,506 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole
[2020-11-25 03:06:04,506 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole
[2020-11-25 03:06:04,506 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole
[2020-11-25 03:06:04,507 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole
[2020-11-25 03:06:04,507 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole
[2020-11-25 03:06:04,507 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__success
[2020-11-25 03:06:04,507 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__success
[2020-11-25 03:06:04,507 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 03:06:04,507 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 03:06:04,507 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 03:06:04,507 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 03:06:04,507 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 03:06:04,507 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 03:06:04,507 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 03:06:04,508 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 03:06:04,508 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 03:06:04,508 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 03:06:04,508 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 03:06:04,508 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 03:06:04,508 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 03:06:04,508 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 03:06:04,508 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped_NoBaseCtor__success
[2020-11-25 03:06:04,508 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped
[2020-11-25 03:06:04,508 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped
[2020-11-25 03:06:04,509 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_ERC20Capped
[2020-11-25 03:06:04,509 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_ERC20Capped
[2020-11-25 03:06:04,509 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20Capped__success
[2020-11-25 03:06:04,509 INFO  L130     BoogieDeclarations]: Found specification of procedure OrionToken_OrionToken_NoBaseCtor__success
[2020-11-25 03:06:04,509 INFO  L130     BoogieDeclarations]: Found specification of procedure OrionToken_OrionToken
[2020-11-25 03:06:04,509 INFO  L138     BoogieDeclarations]: Found implementation of procedure OrionToken_OrionToken
[2020-11-25 03:06:04,509 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 03:06:04,509 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 03:06:04,509 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 03:06:04,509 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__success
[2020-11-25 03:06:04,510 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 03:06:04,510 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 03:06:04,510 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Context
[2020-11-25 03:06:04,510 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Context
[2020-11-25 03:06:04,510 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 03:06:04,510 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 03:06:04,510 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 03:06:04,510 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 03:06:04,510 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Roles
[2020-11-25 03:06:04,510 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Roles
[2020-11-25 03:06:04,510 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MinterRole
[2020-11-25 03:06:04,511 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MinterRole
[2020-11-25 03:06:04,511 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Mintable
[2020-11-25 03:06:04,511 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Mintable
[2020-11-25 03:06:04,511 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 03:06:04,511 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 03:06:04,511 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Capped
[2020-11-25 03:06:04,511 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Capped
[2020-11-25 03:06:04,511 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_OrionToken
[2020-11-25 03:06:04,511 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 03:06:04,511 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 03:06:04,512 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__fail
[2020-11-25 03:06:04,512 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 03:06:04,512 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 03:06:04,512 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 03:06:04,512 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 03:06:04,512 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:06:04,512 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 03:06:04,512 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:06:04,512 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:06:04,512 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 03:06:04,513 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__success
[2020-11-25 03:06:04,513 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__fail
[2020-11-25 03:06:04,513 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__fail
[2020-11-25 03:06:04,513 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 03:06:04,513 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 03:06:04,513 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 03:06:04,513 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 03:06:04,513 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 03:06:04,513 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 03:06:04,514 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 03:06:04,514 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 03:06:04,514 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 03:06:04,514 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 03:06:04,514 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 03:06:04,514 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 03:06:04,514 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 03:06:04,514 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 03:06:04,514 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 03:06:04,514 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 03:06:04,514 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 03:06:04,515 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 03:06:04,515 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 03:06:04,515 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 03:06:04,515 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 03:06:04,515 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 03:06:04,515 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 03:06:04,515 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 03:06:04,516 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 03:06:04,516 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 03:06:04,516 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 03:06:04,516 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 03:06:04,516 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__success
[2020-11-25 03:06:04,516 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__fail
[2020-11-25 03:06:04,516 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__fail
[2020-11-25 03:06:04,516 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__fail
[2020-11-25 03:06:04,516 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__fail
[2020-11-25 03:06:04,517 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 03:06:04,517 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__success
[2020-11-25 03:06:04,517 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__fail
[2020-11-25 03:06:04,517 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__success
[2020-11-25 03:06:04,517 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__fail
[2020-11-25 03:06:04,517 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__success
[2020-11-25 03:06:04,517 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__fail
[2020-11-25 03:06:04,517 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__success
[2020-11-25 03:06:04,517 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__fail
[2020-11-25 03:06:04,517 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__fail
[2020-11-25 03:06:04,517 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 03:06:04,518 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 03:06:04,518 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 03:06:04,518 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 03:06:04,518 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 03:06:04,518 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 03:06:04,518 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 03:06:04,518 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 03:06:04,518 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 03:06:04,518 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 03:06:04,518 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 03:06:04,518 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 03:06:04,519 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 03:06:04,519 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 03:06:04,519 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 03:06:04,519 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped_NoBaseCtor__fail
[2020-11-25 03:06:04,519 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped__success
[2020-11-25 03:06:04,519 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped__fail
[2020-11-25 03:06:04,519 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_ERC20Capped__success
[2020-11-25 03:06:04,519 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_ERC20Capped__fail
[2020-11-25 03:06:04,519 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20Capped__fail
[2020-11-25 03:06:04,519 INFO  L130     BoogieDeclarations]: Found specification of procedure OrionToken_OrionToken_NoBaseCtor__fail
[2020-11-25 03:06:04,519 INFO  L130     BoogieDeclarations]: Found specification of procedure OrionToken_OrionToken__success
[2020-11-25 03:06:04,519 INFO  L130     BoogieDeclarations]: Found specification of procedure OrionToken_OrionToken__fail
[2020-11-25 03:06:04,520 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 03:06:04,520 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 03:06:04,520 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 03:06:04,520 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__fail
[2020-11-25 03:06:04,520 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 03:06:04,520 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 03:06:04,520 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__fail
[2020-11-25 03:06:04,520 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__success
[2020-11-25 03:06:04,520 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 03:06:04,520 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 03:06:04,520 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 03:06:04,520 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 03:06:04,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 03:06:04,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 03:06:04,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:06:04,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 03:06:04,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 03:06:04,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 03:06:04,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:06:04,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 03:06:04,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:06:04,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256~string_SafeMath__success
[2020-11-25 03:06:04,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 03:06:04,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__success
[2020-11-25 03:06:04,522 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__fail
[2020-11-25 03:06:04,522 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__success
[2020-11-25 03:06:04,522 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__fail
[2020-11-25 03:06:04,522 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__success
[2020-11-25 03:06:04,522 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 03:06:04,522 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 03:06:04,522 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 03:06:04,522 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 03:06:04,522 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 03:06:04,522 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 03:06:04,522 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 03:06:04,522 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 03:06:04,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 03:06:04,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 03:06:04,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 03:06:04,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 03:06:04,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 03:06:04,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 03:06:04,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 03:06:04,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 03:06:04,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 03:06:04,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 03:06:04,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 03:06:04,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 03:06:04,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 03:06:04,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 03:06:04,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 03:06:04,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 03:06:04,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 03:06:04,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 03:06:04,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 03:06:04,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 03:06:04,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 03:06:04,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 03:06:04,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 03:06:04,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 03:06:04,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 03:06:04,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 03:06:04,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 03:06:04,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 03:06:04,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__fail
[2020-11-25 03:06:04,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__success
[2020-11-25 03:06:04,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__fail
[2020-11-25 03:06:04,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__success
[2020-11-25 03:06:04,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__fail
[2020-11-25 03:06:04,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__success
[2020-11-25 03:06:04,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__fail
[2020-11-25 03:06:04,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__success
[2020-11-25 03:06:04,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 03:06:04,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 03:06:04,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__fail
[2020-11-25 03:06:04,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__success
[2020-11-25 03:06:04,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__fail
[2020-11-25 03:06:04,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__success
[2020-11-25 03:06:04,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__fail
[2020-11-25 03:06:04,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__success
[2020-11-25 03:06:04,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__fail
[2020-11-25 03:06:04,527 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__success
[2020-11-25 03:06:04,527 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__fail
[2020-11-25 03:06:04,527 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__success
[2020-11-25 03:06:04,527 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 03:06:04,527 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__success
[2020-11-25 03:06:04,527 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 03:06:04,527 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 03:06:04,527 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 03:06:04,527 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 03:06:04,527 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 03:06:04,527 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 03:06:04,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 03:06:04,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 03:06:04,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 03:06:04,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 03:06:04,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 03:06:04,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 03:06:04,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 03:06:04,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 03:06:04,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 03:06:04,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 03:06:04,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped_NoBaseCtor__fail
[2020-11-25 03:06:04,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped_NoBaseCtor__success
[2020-11-25 03:06:04,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped__fail
[2020-11-25 03:06:04,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped__success
[2020-11-25 03:06:04,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_ERC20Capped__fail
[2020-11-25 03:06:04,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_ERC20Capped__success
[2020-11-25 03:06:04,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20Capped__fail
[2020-11-25 03:06:04,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20Capped__success
[2020-11-25 03:06:04,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure OrionToken_OrionToken_NoBaseCtor__fail
[2020-11-25 03:06:04,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure OrionToken_OrionToken_NoBaseCtor__success
[2020-11-25 03:06:04,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure OrionToken_OrionToken__fail
[2020-11-25 03:06:04,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure OrionToken_OrionToken__success
[2020-11-25 03:06:04,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 03:06:04,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 03:06:04,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 03:06:04,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 03:06:04,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 03:06:04,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 03:06:04,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__fail
[2020-11-25 03:06:04,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__success
[2020-11-25 03:06:04,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 03:06:04,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 03:06:04,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Context
[2020-11-25 03:06:04,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Context
[2020-11-25 03:06:04,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 03:06:04,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 03:06:04,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 03:06:04,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 03:06:04,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Roles
[2020-11-25 03:06:04,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Roles
[2020-11-25 03:06:04,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MinterRole
[2020-11-25 03:06:04,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MinterRole
[2020-11-25 03:06:04,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Mintable
[2020-11-25 03:06:04,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Mintable
[2020-11-25 03:06:04,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 03:06:04,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 03:06:04,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Capped
[2020-11-25 03:06:04,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Capped
[2020-11-25 03:06:04,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_OrionToken
[2020-11-25 03:06:04,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 03:06:04,532 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 03:06:04,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 03:06:04,843 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 03:06:04,843 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 03:06:04,843 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 03:06:05,599 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 03:06:05,599 INFO  L286             CfgBuilder]: Removed 10 assue(true) statements.
[2020-11-25 03:06:05,601 INFO  L202        PluginConnector]: Adding new model OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_totalsupply.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:06:05 BoogieIcfgContainer
[2020-11-25 03:06:05,601 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:06:04" (2/2) ...
[2020-11-25 03:06:05,602 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 03:06:05,602 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@6846f81a and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:06:05, skipping insertion in model container
[2020-11-25 03:06:05,602 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 03:06:05,602 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 03:06:05,602 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 03:06:05,603 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 03:06:05,604 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:06:04" (1/3) ...
[2020-11-25 03:06:05,604 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@384d865d and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:06:05, skipping insertion in model container
[2020-11-25 03:06:05,604 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:06:04" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 03:06:05,638 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:06:05 NWAContainer
[2020-11-25 03:06:05,639 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 03:06:05,639 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 03:06:05,639 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 03:06:05,639 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 03:06:05,640 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_totalsupply.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:06:05" (3/4) ...
[2020-11-25 03:06:05,641 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@2a196adb and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:06:05, skipping insertion in model container
[2020-11-25 03:06:05,641 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:06:05" (4/4) ...
[2020-11-25 03:06:05,643 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 03:06:05,649 INFO  L110   BuchiProductObserver]: Initial RCFG 2932 locations, 4569 edges
[2020-11-25 03:06:05,649 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 03:06:05,662 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 03:06:07,791 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 03:06:07,802 INFO  L110   BuchiProductObserver]: BuchiProgram size 7816 locations, 15032 edges
[2020-11-25 03:06:07,802 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:06:07 BoogieIcfgContainer
[2020-11-25 03:06:07,802 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 03:06:07,802 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 03:06:07,802 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 03:06:07,803 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 03:06:07,804 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:06:07" (1/1) ...
[2020-11-25 03:06:07,934 INFO  L313           BlockEncoder]: Initial Icfg 7816 locations, 15032 edges
[2020-11-25 03:06:07,934 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 03:06:07,935 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 03:06:07,935 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 03:06:07,935 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 03:06:07,950 INFO  L70    emoveInfeasibleEdges]: Removed 246 edges and 23 locations because of local infeasibility
[2020-11-25 03:06:07,963 INFO  L70        RemoveSinkStates]: Removed 164 edges and 109 locations by removing sink states
[2020-11-25 03:06:07,979 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 03:06:07,984 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 03:06:07,988 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 03:06:07,989 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 03:06:07,993 INFO  L313           BlockEncoder]: Encoded RCFG 7652 locations, 14575 edges
[2020-11-25 03:06:07,993 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 03:06:07 BasicIcfg
[2020-11-25 03:06:07,993 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 03:06:07,994 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 03:06:07,994 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 03:06:07,995 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 03:06:07,996 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:06:07,996 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:06:04" (1/6) ...
[2020-11-25 03:06:07,997 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@328e2103 and model type OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_totalsupply.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:06:07, skipping insertion in model container
[2020-11-25 03:06:07,997 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:06:07,997 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:06:04" (2/6) ...
[2020-11-25 03:06:07,997 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@328e2103 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:06:07, skipping insertion in model container
[2020-11-25 03:06:07,997 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:06:07,997 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_totalsupply.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:06:05" (3/6) ...
[2020-11-25 03:06:07,997 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@328e2103 and model type OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_totalsupply.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 03:06:07, skipping insertion in model container
[2020-11-25 03:06:07,998 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:06:07,998 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:06:05" (4/6) ...
[2020-11-25 03:06:07,998 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@328e2103 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:06:07, skipping insertion in model container
[2020-11-25 03:06:07,998 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:06:07,998 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:06:07" (5/6) ...
[2020-11-25 03:06:07,998 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@328e2103 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 03:06:07, skipping insertion in model container
[2020-11-25 03:06:07,998 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:06:07,998 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 03:06:07" (6/6) ...
[2020-11-25 03:06:07,999 INFO  L404   chiAutomizerObserver]: Analyzing ICFG OrionToken_0x8fb00fdebb4e83f2c58b3bcd6732ac1b6a7b7221_totalsupply.bpl_BEv2
[2020-11-25 03:06:08,033 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 03:06:08,033 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 03:06:08,033 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 03:06:08,033 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 03:06:08,033 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 03:06:08,033 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 03:06:08,034 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 03:06:08,034 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 03:06:08,034 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 03:06:08,084 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7652 states.
[2020-11-25 03:06:08,143 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:06:08,143 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:06:08,143 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:06:08,149 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:06:08,150 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:06:08,150 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 03:06:08,150 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7652 states.
[2020-11-25 03:06:08,176 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:06:08,177 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:06:08,177 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:06:08,178 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:06:08,178 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_totalSupply_ERC200 := false;
[L2]                 call_totalSupply_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND FALSE  !(__exception)
[L1778]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L5093]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  COND TRUE   revert
[L1778]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1779]              assume !revert && gas >= 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND TRUE   choice == 16
[L7736]              gas := gas - 21000;
[L7737]  COND FALSE  !(gas >= 0)
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:06:08,191 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:06:08,191 INFO  L82        PathProgramCache]: Analyzing trace with hash -592180379, now seen corresponding path program 1 times
[2020-11-25 03:06:08,196 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:06:08,220 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:06:08,250 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 03:06:08,251 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:06:08,251 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:06:08,643 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:06:08,651 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:06:08,652 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:06:08,653 INFO  L87              Difference]: Start difference. First operand 7652 states. Second operand 3 states.
[2020-11-25 03:06:09,031 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:06:09,031 INFO  L93              Difference]: Finished difference Result 6216 states and 10652 transitions.
[2020-11-25 03:06:09,031 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:06:09,032 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6216 states and 10652 transitions.
[2020-11-25 03:06:09,077 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:06:09,136 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6216 states to 6216 states and 10652 transitions.
[2020-11-25 03:06:09,136 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 13
[2020-11-25 03:06:09,142 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1185
[2020-11-25 03:06:09,142 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6216 states and 10652 transitions.
[2020-11-25 03:06:09,162 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:06:09,162 INFO  L728         BuchiCegarLoop]: Abstraction has 6216 states and 10652 transitions.
[2020-11-25 03:06:09,180 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6216 states and 10652 transitions.
[2020-11-25 03:06:09,287 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6216 to 5604.
[2020-11-25 03:06:09,287 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5604 states.
[2020-11-25 03:06:09,301 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5604 states to 5604 states and 9603 transitions.
[2020-11-25 03:06:09,302 INFO  L751         BuchiCegarLoop]: Abstraction has 5604 states and 9603 transitions.
[2020-11-25 03:06:09,302 INFO  L631         BuchiCegarLoop]: Abstraction has 5604 states and 9603 transitions.
[2020-11-25 03:06:09,302 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 03:06:09,302 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5604 states and 9603 transitions.
[2020-11-25 03:06:09,317 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:06:09,318 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:06:09,318 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:06:09,321 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:06:09,321 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_totalSupply_ERC200 := false;
[L2]                 call_totalSupply_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND TRUE   __exception
[L1753]              __tmp__Balance := Balance;
[L1754]              __tmp__DType := DType;
[L1755]              __tmp__Alloc := Alloc;
[L1756]              __tmp__balance_ADDR := balance_ADDR;
[L1757]              __tmp__M_Ref_int := M_Ref_int;
[L1758]              __tmp__sum__balances0 := sum__balances0;
[L1759]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1760]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1761]              __tmp__sum__allowances1 := sum__allowances1;
[L1762]              __tmp__M_Ref_bool := M_Ref_bool;
[L1763]              __tmp__sum := sum;
[L1764]              __tmp__Length := Length;
[L1765]              __tmp__now := now;
[L1766]              __tmp___balances_ERC20 := _balances_ERC20;
[L1767]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1768]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1769]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1770]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1771]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1772]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1773]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1774]              __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L1775]  CALL        call OrionToken_OrionToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5057]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2859]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2844]              assume msgsender_MSG != null;
[L2845]              __tmp__Balance[this] := 0;
[L2859]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  COND FALSE  !(revert)
[L5057]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5058]  COND FALSE  !(revert)
[L5061]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2903]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2888]              assume msgsender_MSG != null;
[L2889]              __tmp__Balance[this] := 0;
[L2903]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2904]  COND FALSE  !(revert)
[L5061]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5062]  COND FALSE  !(revert)
[L5065]  CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4803]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2903]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2888]              assume msgsender_MSG != null;
[L2889]              __tmp__Balance[this] := 0;
[L2903]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2904]  COND FALSE  !(revert)
[L4803]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4804]  COND FALSE  !(revert)
[L4807]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4776]              assume msgsender_MSG != null;
[L4777]              __tmp__Balance[this] := 0;
[L4778]              __tmp___name_ERC20Detailed[this] := 1676231298;
[L4779]              __tmp___symbol_ERC20Detailed[this] := 1676231298;
[L4780]              __tmp___decimals_ERC20Detailed[this] := 0;
[L4782]              __tmp___name_ERC20Detailed[this] := name_s857;
[L4783]              __tmp___symbol_ERC20Detailed[this] := symbol_s857;
[L4784]              __tmp___decimals_ERC20Detailed[this] := decimals_s857;
[L4807]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4808]  COND FALSE  !(revert)
[L5065]  RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5066]  COND FALSE  !(revert)
[L5069]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2859]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2844]              assume msgsender_MSG != null;
[L2845]              __tmp__Balance[this] := 0;
[L2859]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  COND FALSE  !(revert)
[L2945]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2903]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2888]              assume msgsender_MSG != null;
[L2889]              __tmp__Balance[this] := 0;
[L2903]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2904]  COND FALSE  !(revert)
[L2949]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L2953]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2920]              assume msgsender_MSG != null;
[L2921]              __tmp__Balance[this] := 0;
[L2922]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L2923]              __tmp__sum__balances0[this] := 0;
[L2924]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L2925]              __tmp__sum__allowances1[this] := 0;
[L2926]              __tmp___totalSupply_ERC20[this] := 0;
[L2953]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L5069]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5070]  COND FALSE  !(revert)
[L5073]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4409]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2859]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2844]              assume msgsender_MSG != null;
[L2845]              __tmp__Balance[this] := 0;
[L2859]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  COND FALSE  !(revert)
[L4409]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4413]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4286]              assume msgsender_MSG != null;
[L4287]              __tmp__Balance[this] := 0;
[L4289]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2661]              havoc newRef;
[L2662]              assume __tmp__Alloc[newRef] == false;
[L2663]              __tmp__Alloc[newRef] := true;
[L2664]              assume newRef != null;
[L4289]  RET         call __var_31 := FreshRefGenerator__fail();
[L4290]  COND FALSE  !(revert)
[L4293]              __tmp___minters_MinterRole[this] := __var_31;
[L4295]  COND TRUE   __tmp__DType[this] == OrionToken
[L4296]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2875]              __ret_0_ := msgsender_MSG;
[L4296]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4297]  COND FALSE  !(revert)
[L4318]  COND TRUE   __tmp__DType[this] == OrionToken
[L4319]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4621]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s786);
[L4204]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4260]              __var_29 := null;
[L4261]  COND TRUE   !(account_s699 != null)
[L4262]              revert := true;
[L4204]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4205]  COND TRUE   revert
[L4621]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s786);
[L4622]  COND TRUE   revert
[L4319]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4320]  COND TRUE   revert
[L4413]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4414]  COND TRUE   revert
[L5073]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5074]  COND TRUE   revert
[L1775]  RET         call OrionToken_OrionToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L1776]              assume revert || gas < 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND TRUE   choice == 16
[L7736]              gas := gas - 21000;
[L7737]  COND FALSE  !(gas >= 0)
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:06:09,325 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:06:09,325 INFO  L82        PathProgramCache]: Analyzing trace with hash 661929668, now seen corresponding path program 1 times
[2020-11-25 03:06:09,327 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:06:09,338 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:06:09,374 INFO  L134       CoverageAnalysis]: Checked inductivity of 60 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 60 trivial. 0 not checked.
[2020-11-25 03:06:09,374 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:06:09,374 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 03:06:09,376 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:06:09,376 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 03:06:09,376 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 03:06:09,376 INFO  L87              Difference]: Start difference. First operand 5604 states and 9603 transitions. cyclomatic complexity: 4001 Second operand 4 states.
[2020-11-25 03:06:10,028 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:06:10,028 INFO  L93              Difference]: Finished difference Result 5032 states and 6261 transitions.
[2020-11-25 03:06:10,028 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 03:06:10,029 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5032 states and 6261 transitions.
[2020-11-25 03:06:10,041 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:06:10,056 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5032 states to 5032 states and 6261 transitions.
[2020-11-25 03:06:10,056 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 920
[2020-11-25 03:06:10,056 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 959
[2020-11-25 03:06:10,056 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5032 states and 6261 transitions.
[2020-11-25 03:06:10,060 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:06:10,061 INFO  L728         BuchiCegarLoop]: Abstraction has 5032 states and 6261 transitions.
[2020-11-25 03:06:10,065 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5032 states and 6261 transitions.
[2020-11-25 03:06:10,110 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5032 to 5032.
[2020-11-25 03:06:10,110 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5032 states.
[2020-11-25 03:06:10,118 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5032 states to 5032 states and 6261 transitions.
[2020-11-25 03:06:10,118 INFO  L751         BuchiCegarLoop]: Abstraction has 5032 states and 6261 transitions.
[2020-11-25 03:06:10,118 INFO  L631         BuchiCegarLoop]: Abstraction has 5032 states and 6261 transitions.
[2020-11-25 03:06:10,118 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 03:06:10,118 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5032 states and 6261 transitions.
[2020-11-25 03:06:10,126 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:06:10,126 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:06:10,126 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:06:10,129 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:06:10,129 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_totalSupply_ERC200 := false;
[L2]                 call_totalSupply_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND FALSE  !(__exception)
[L1778]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L5093]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  COND FALSE  !(revert)
[L5097]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L5097]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5098]  COND FALSE  !(revert)
[L5101]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4815]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4815]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4816]  COND FALSE  !(revert)
[L4819]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4790]              assume msgsender_MSG != null;
[L4791]              Balance[this] := 0;
[L4792]              _name_ERC20Detailed[this] := 1676231298;
[L4793]              _symbol_ERC20Detailed[this] := 1676231298;
[L4794]              _decimals_ERC20Detailed[this] := 0;
[L4796]              _name_ERC20Detailed[this] := name_s857;
[L4797]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4798]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4819]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4820]  COND FALSE  !(revert)
[L5101]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5102]  COND FALSE  !(revert)
[L5105]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L5105]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5106]  COND FALSE  !(revert)
[L5109]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND FALSE  !(DType[this] == OrionToken)
[L4362]  COND TRUE   DType[this] == ERC20Capped
[L4363]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4363]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4364]  COND FALSE  !(revert)
[L4380]  COND FALSE  !(DType[this] == OrionToken)
[L4385]  COND FALSE  !(DType[this] == ERC20Capped)
[L4390]  COND FALSE  !(DType[this] == ERC20Mintable)
[L4395]  COND TRUE   DType[this] == MinterRole
[L4396]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND TRUE   !(account_s699 != null)
[L4274]              revert := true;
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND TRUE   revert
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND TRUE   revert
[L4396]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4397]  COND TRUE   revert
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND TRUE   revert
[L5109]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5110]  COND TRUE   revert
[L1778]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1779]              assume !revert && gas >= 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND TRUE   choice == 16
[L7736]              gas := gas - 21000;
[L7737]  COND TRUE   gas >= 0
[L7738]              assume msgvalue_MSG == 0;
[L7739]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_ERC200 := true;
[L2]                 call_totalSupply_ERC200 := false;
[L2]                 revert := revert_hold;
[L361]               havoc __exception;
[L362]               revert := false;
[L363]   COND FALSE  !(__exception)
[L389]   CALL        call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2983]              __ret_0_ := _totalSupply_ERC20[this];
[L389]   RET         call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L390]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _totalSupply_ERC20[this] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7739]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L7855]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND TRUE   choice == 16
[L7736]              gas := gas - 21000;
[L7737]  COND TRUE   gas >= 0
[L7738]              assume msgvalue_MSG == 0;
[L7739]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_ERC200 := true;
[L2]                 call_totalSupply_ERC200 := false;
[L2]                 revert := revert_hold;
[L361]               havoc __exception;
[L362]               revert := false;
[L363]   COND FALSE  !(__exception)
[L389]   CALL        call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2983]              __ret_0_ := _totalSupply_ERC20[this];
[L389]   RET         call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L390]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _totalSupply_ERC20[this] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7739]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:06:10,133 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:06:10,133 INFO  L82        PathProgramCache]: Analyzing trace with hash -966096570, now seen corresponding path program 1 times
[2020-11-25 03:06:10,134 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:06:10,147 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:06:10,230 INFO  L134       CoverageAnalysis]: Checked inductivity of 66 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 66 trivial. 0 not checked.
[2020-11-25 03:06:10,231 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:06:10,231 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:06:10,231 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:06:10,231 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:06:10,232 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:06:10,232 INFO  L87              Difference]: Start difference. First operand 5032 states and 6261 transitions. cyclomatic complexity: 1231 Second operand 3 states.
[2020-11-25 03:06:10,313 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:06:10,313 INFO  L93              Difference]: Finished difference Result 5038 states and 6267 transitions.
[2020-11-25 03:06:10,313 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:06:10,313 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5038 states and 6267 transitions.
[2020-11-25 03:06:10,324 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:06:10,337 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5038 states to 5038 states and 6267 transitions.
[2020-11-25 03:06:10,337 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 959
[2020-11-25 03:06:10,338 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 959
[2020-11-25 03:06:10,338 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5038 states and 6267 transitions.
[2020-11-25 03:06:10,342 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:06:10,342 INFO  L728         BuchiCegarLoop]: Abstraction has 5038 states and 6267 transitions.
[2020-11-25 03:06:10,346 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5038 states and 6267 transitions.
[2020-11-25 03:06:10,382 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5038 to 5034.
[2020-11-25 03:06:10,382 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5034 states.
[2020-11-25 03:06:10,387 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5034 states to 5034 states and 6263 transitions.
[2020-11-25 03:06:10,387 INFO  L751         BuchiCegarLoop]: Abstraction has 5034 states and 6263 transitions.
[2020-11-25 03:06:10,387 INFO  L631         BuchiCegarLoop]: Abstraction has 5034 states and 6263 transitions.
[2020-11-25 03:06:10,387 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 03:06:10,387 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5034 states and 6263 transitions.
[2020-11-25 03:06:10,394 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:06:10,394 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:06:10,394 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:06:10,395 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:06:10,395 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_totalSupply_ERC200 := false;
[L2]                 call_totalSupply_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND FALSE  !(__exception)
[L1778]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L5093]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  COND FALSE  !(revert)
[L5097]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L5097]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5098]  COND FALSE  !(revert)
[L5101]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4815]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4815]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4816]  COND FALSE  !(revert)
[L4819]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4790]              assume msgsender_MSG != null;
[L4791]              Balance[this] := 0;
[L4792]              _name_ERC20Detailed[this] := 1676231298;
[L4793]              _symbol_ERC20Detailed[this] := 1676231298;
[L4794]              _decimals_ERC20Detailed[this] := 0;
[L4796]              _name_ERC20Detailed[this] := name_s857;
[L4797]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4798]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4819]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4820]  COND FALSE  !(revert)
[L5101]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5102]  COND FALSE  !(revert)
[L5105]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L5105]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5106]  COND FALSE  !(revert)
[L5109]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND FALSE  !(DType[this] == OrionToken)
[L4385]  COND TRUE   DType[this] == ERC20Capped
[L4386]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND TRUE   !(account_s699 != null)
[L4274]              revert := true;
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND TRUE   revert
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND TRUE   revert
[L4386]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4387]  COND TRUE   revert
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND TRUE   revert
[L5109]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5110]  COND TRUE   revert
[L1778]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1779]              assume !revert && gas >= 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND TRUE   choice == 16
[L7736]              gas := gas - 21000;
[L7737]  COND TRUE   gas >= 0
[L7738]              assume msgvalue_MSG == 0;
[L7739]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_ERC200 := true;
[L2]                 call_totalSupply_ERC200 := false;
[L2]                 revert := revert_hold;
[L361]               havoc __exception;
[L362]               revert := false;
[L363]   COND FALSE  !(__exception)
[L389]   CALL        call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2983]              __ret_0_ := _totalSupply_ERC20[this];
[L389]   RET         call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L390]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _totalSupply_ERC20[this] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7739]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L7855]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND TRUE   choice == 16
[L7736]              gas := gas - 21000;
[L7737]  COND TRUE   gas >= 0
[L7738]              assume msgvalue_MSG == 0;
[L7739]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_ERC200 := true;
[L2]                 call_totalSupply_ERC200 := false;
[L2]                 revert := revert_hold;
[L361]               havoc __exception;
[L362]               revert := false;
[L363]   COND FALSE  !(__exception)
[L389]   CALL        call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2983]              __ret_0_ := _totalSupply_ERC20[this];
[L389]   RET         call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L390]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _totalSupply_ERC20[this] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7739]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:06:10,399 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:06:10,399 INFO  L82        PathProgramCache]: Analyzing trace with hash -427847297, now seen corresponding path program 1 times
[2020-11-25 03:06:10,400 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:06:10,407 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:06:10,438 INFO  L134       CoverageAnalysis]: Checked inductivity of 66 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 66 trivial. 0 not checked.
[2020-11-25 03:06:10,439 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:06:10,439 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:06:10,439 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:06:10,439 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:06:10,439 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:06:10,439 INFO  L87              Difference]: Start difference. First operand 5034 states and 6263 transitions. cyclomatic complexity: 1231 Second operand 3 states.
[2020-11-25 03:06:10,486 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:06:10,486 INFO  L93              Difference]: Finished difference Result 5039 states and 6268 transitions.
[2020-11-25 03:06:10,486 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:06:10,486 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5039 states and 6268 transitions.
[2020-11-25 03:06:10,496 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:06:10,508 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5039 states to 5039 states and 6268 transitions.
[2020-11-25 03:06:10,508 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 959
[2020-11-25 03:06:10,509 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 959
[2020-11-25 03:06:10,509 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5039 states and 6268 transitions.
[2020-11-25 03:06:10,513 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:06:10,513 INFO  L728         BuchiCegarLoop]: Abstraction has 5039 states and 6268 transitions.
[2020-11-25 03:06:10,517 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5039 states and 6268 transitions.
[2020-11-25 03:06:10,549 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5039 to 5035.
[2020-11-25 03:06:10,549 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5035 states.
[2020-11-25 03:06:10,554 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5035 states to 5035 states and 6264 transitions.
[2020-11-25 03:06:10,554 INFO  L751         BuchiCegarLoop]: Abstraction has 5035 states and 6264 transitions.
[2020-11-25 03:06:10,554 INFO  L631         BuchiCegarLoop]: Abstraction has 5035 states and 6264 transitions.
[2020-11-25 03:06:10,554 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 03:06:10,555 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5035 states and 6264 transitions.
[2020-11-25 03:06:10,559 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:06:10,559 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:06:10,559 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:06:10,561 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:06:10,561 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_totalSupply_ERC200 := false;
[L2]                 call_totalSupply_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND FALSE  !(__exception)
[L1778]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L5093]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  COND FALSE  !(revert)
[L5097]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L5097]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5098]  COND FALSE  !(revert)
[L5101]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4815]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4815]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4816]  COND FALSE  !(revert)
[L4819]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4790]              assume msgsender_MSG != null;
[L4791]              Balance[this] := 0;
[L4792]              _name_ERC20Detailed[this] := 1676231298;
[L4793]              _symbol_ERC20Detailed[this] := 1676231298;
[L4794]              _decimals_ERC20Detailed[this] := 0;
[L4796]              _name_ERC20Detailed[this] := name_s857;
[L4797]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4798]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4819]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4820]  COND FALSE  !(revert)
[L5101]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5102]  COND FALSE  !(revert)
[L5105]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L5105]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5106]  COND FALSE  !(revert)
[L5109]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND FALSE  !(DType[this] == OrionToken)
[L4362]  COND TRUE   DType[this] == ERC20Capped
[L4363]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4363]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4364]  COND FALSE  !(revert)
[L4380]  COND FALSE  !(DType[this] == OrionToken)
[L4385]  COND TRUE   DType[this] == ERC20Capped
[L4386]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND TRUE   !(account_s699 != null)
[L4274]              revert := true;
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND TRUE   revert
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND TRUE   revert
[L4386]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4387]  COND TRUE   revert
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND TRUE   revert
[L5109]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5110]  COND TRUE   revert
[L1778]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1779]              assume !revert && gas >= 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND TRUE   choice == 16
[L7736]              gas := gas - 21000;
[L7737]  COND TRUE   gas >= 0
[L7738]              assume msgvalue_MSG == 0;
[L7739]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_ERC200 := true;
[L2]                 call_totalSupply_ERC200 := false;
[L2]                 revert := revert_hold;
[L361]               havoc __exception;
[L362]               revert := false;
[L363]   COND FALSE  !(__exception)
[L389]   CALL        call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2983]              __ret_0_ := _totalSupply_ERC20[this];
[L389]   RET         call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L390]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _totalSupply_ERC20[this] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7739]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L7855]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND TRUE   choice == 16
[L7736]              gas := gas - 21000;
[L7737]  COND TRUE   gas >= 0
[L7738]              assume msgvalue_MSG == 0;
[L7739]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_ERC200 := true;
[L2]                 call_totalSupply_ERC200 := false;
[L2]                 revert := revert_hold;
[L361]               havoc __exception;
[L362]               revert := false;
[L363]   COND FALSE  !(__exception)
[L389]   CALL        call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2983]              __ret_0_ := _totalSupply_ERC20[this];
[L389]   RET         call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L390]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _totalSupply_ERC20[this] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7739]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:06:10,565 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:06:10,565 INFO  L82        PathProgramCache]: Analyzing trace with hash 838138579, now seen corresponding path program 1 times
[2020-11-25 03:06:10,566 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:06:10,575 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:06:10,625 INFO  L134       CoverageAnalysis]: Checked inductivity of 66 backedges. 0 proven. 14 refuted. 0 times theorem prover too weak. 52 trivial. 0 not checked.
[2020-11-25 03:06:10,626 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 03:06:10,626 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-11-25 03:06:10,626 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:06:10,626 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 03:06:10,626 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=111, Unknown=0, NotChecked=0, Total=132
[2020-11-25 03:06:10,626 INFO  L87              Difference]: Start difference. First operand 5035 states and 6264 transitions. cyclomatic complexity: 1231 Second operand 12 states.
[2020-11-25 03:06:10,820 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:06:10,820 INFO  L93              Difference]: Finished difference Result 5095 states and 6355 transitions.
[2020-11-25 03:06:10,820 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-11-25 03:06:10,820 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5095 states and 6355 transitions.
[2020-11-25 03:06:10,830 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:06:10,845 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5095 states to 5095 states and 6355 transitions.
[2020-11-25 03:06:10,845 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 975
[2020-11-25 03:06:10,846 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 975
[2020-11-25 03:06:10,846 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5095 states and 6355 transitions.
[2020-11-25 03:06:10,850 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:06:10,850 INFO  L728         BuchiCegarLoop]: Abstraction has 5095 states and 6355 transitions.
[2020-11-25 03:06:10,854 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5095 states and 6355 transitions.
[2020-11-25 03:06:10,883 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5095 to 5079.
[2020-11-25 03:06:10,883 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5079 states.
[2020-11-25 03:06:10,888 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5079 states to 5079 states and 6331 transitions.
[2020-11-25 03:06:10,888 INFO  L751         BuchiCegarLoop]: Abstraction has 5079 states and 6331 transitions.
[2020-11-25 03:06:10,888 INFO  L631         BuchiCegarLoop]: Abstraction has 5079 states and 6331 transitions.
[2020-11-25 03:06:10,888 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 03:06:10,888 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5079 states and 6331 transitions.
[2020-11-25 03:06:10,893 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:06:10,893 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:06:10,893 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:06:10,894 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:06:10,894 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_totalSupply_ERC200 := false;
[L2]                 call_totalSupply_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND FALSE  !(__exception)
[L1778]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L5093]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  COND FALSE  !(revert)
[L5097]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L5097]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5098]  COND FALSE  !(revert)
[L5101]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4815]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4815]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4816]  COND FALSE  !(revert)
[L4819]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4790]              assume msgsender_MSG != null;
[L4791]              Balance[this] := 0;
[L4792]              _name_ERC20Detailed[this] := 1676231298;
[L4793]              _symbol_ERC20Detailed[this] := 1676231298;
[L4794]              _decimals_ERC20Detailed[this] := 0;
[L4796]              _name_ERC20Detailed[this] := name_s857;
[L4797]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4798]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4819]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4820]  COND FALSE  !(revert)
[L5101]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5102]  COND FALSE  !(revert)
[L5105]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L5105]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5106]  COND FALSE  !(revert)
[L5109]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND FALSE  !(DType[this] == OrionToken)
[L4362]  COND TRUE   DType[this] == ERC20Capped
[L4363]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4363]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4364]  COND FALSE  !(revert)
[L4380]  COND FALSE  !(DType[this] == OrionToken)
[L4385]  COND TRUE   DType[this] == ERC20Capped
[L4386]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND TRUE   !!__var_27
[L4223]              revert := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND TRUE   revert
[L4386]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4387]  COND TRUE   revert
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND TRUE   revert
[L5109]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5110]  COND TRUE   revert
[L1778]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1779]              assume !revert && gas >= 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND TRUE   choice == 16
[L7736]              gas := gas - 21000;
[L7737]  COND TRUE   gas >= 0
[L7738]              assume msgvalue_MSG == 0;
[L7739]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_ERC200 := true;
[L2]                 call_totalSupply_ERC200 := false;
[L2]                 revert := revert_hold;
[L361]               havoc __exception;
[L362]               revert := false;
[L363]   COND FALSE  !(__exception)
[L389]   CALL        call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2983]              __ret_0_ := _totalSupply_ERC20[this];
[L389]   RET         call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L390]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _totalSupply_ERC20[this] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7739]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L7855]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND TRUE   choice == 16
[L7736]              gas := gas - 21000;
[L7737]  COND TRUE   gas >= 0
[L7738]              assume msgvalue_MSG == 0;
[L7739]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_ERC200 := true;
[L2]                 call_totalSupply_ERC200 := false;
[L2]                 revert := revert_hold;
[L361]               havoc __exception;
[L362]               revert := false;
[L363]   COND FALSE  !(__exception)
[L389]   CALL        call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2983]              __ret_0_ := _totalSupply_ERC20[this];
[L389]   RET         call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L390]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _totalSupply_ERC20[this] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7739]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:06:10,897 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:06:10,897 INFO  L82        PathProgramCache]: Analyzing trace with hash 1128534149, now seen corresponding path program 1 times
[2020-11-25 03:06:10,898 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:06:10,905 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:06:10,964 INFO  L134       CoverageAnalysis]: Checked inductivity of 66 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 66 trivial. 0 not checked.
[2020-11-25 03:06:10,964 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:06:10,964 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 03:06:10,965 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:06:10,965 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 03:06:10,965 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 03:06:10,966 INFO  L87              Difference]: Start difference. First operand 5079 states and 6331 transitions. cyclomatic complexity: 1254 Second operand 7 states.
[2020-11-25 03:06:11,114 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:06:11,115 INFO  L93              Difference]: Finished difference Result 5126 states and 6393 transitions.
[2020-11-25 03:06:11,115 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 03:06:11,115 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5126 states and 6393 transitions.
[2020-11-25 03:06:11,124 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:06:11,137 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5126 states to 5103 states and 6361 transitions.
[2020-11-25 03:06:11,137 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 959
[2020-11-25 03:06:11,138 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 959
[2020-11-25 03:06:11,138 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5103 states and 6361 transitions.
[2020-11-25 03:06:11,141 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:06:11,141 INFO  L728         BuchiCegarLoop]: Abstraction has 5103 states and 6361 transitions.
[2020-11-25 03:06:11,145 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5103 states and 6361 transitions.
[2020-11-25 03:06:11,171 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5103 to 5075.
[2020-11-25 03:06:11,171 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5075 states.
[2020-11-25 03:06:11,176 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5075 states to 5075 states and 6326 transitions.
[2020-11-25 03:06:11,176 INFO  L751         BuchiCegarLoop]: Abstraction has 5075 states and 6326 transitions.
[2020-11-25 03:06:11,176 INFO  L631         BuchiCegarLoop]: Abstraction has 5075 states and 6326 transitions.
[2020-11-25 03:06:11,177 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 03:06:11,177 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5075 states and 6326 transitions.
[2020-11-25 03:06:11,182 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:06:11,182 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:06:11,182 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:06:11,183 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:06:11,183 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_totalSupply_ERC200 := false;
[L2]                 call_totalSupply_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND FALSE  !(__exception)
[L1778]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L5093]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  COND FALSE  !(revert)
[L5097]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L5097]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5098]  COND FALSE  !(revert)
[L5101]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4815]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4815]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4816]  COND FALSE  !(revert)
[L4819]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4790]              assume msgsender_MSG != null;
[L4791]              Balance[this] := 0;
[L4792]              _name_ERC20Detailed[this] := 1676231298;
[L4793]              _symbol_ERC20Detailed[this] := 1676231298;
[L4794]              _decimals_ERC20Detailed[this] := 0;
[L4796]              _name_ERC20Detailed[this] := name_s857;
[L4797]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4798]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4819]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4820]  COND FALSE  !(revert)
[L5101]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5102]  COND FALSE  !(revert)
[L5105]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L5105]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5106]  COND FALSE  !(revert)
[L5109]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND TRUE   !!__var_27
[L4223]              revert := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND TRUE   revert
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND TRUE   revert
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND TRUE   revert
[L5109]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5110]  COND TRUE   revert
[L1778]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1779]              assume !revert && gas >= 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND TRUE   choice == 16
[L7736]              gas := gas - 21000;
[L7737]  COND TRUE   gas >= 0
[L7738]              assume msgvalue_MSG == 0;
[L7739]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_ERC200 := true;
[L2]                 call_totalSupply_ERC200 := false;
[L2]                 revert := revert_hold;
[L361]               havoc __exception;
[L362]               revert := false;
[L363]   COND FALSE  !(__exception)
[L389]   CALL        call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2983]              __ret_0_ := _totalSupply_ERC20[this];
[L389]   RET         call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L390]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _totalSupply_ERC20[this] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7739]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L7855]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND TRUE   choice == 16
[L7736]              gas := gas - 21000;
[L7737]  COND TRUE   gas >= 0
[L7738]              assume msgvalue_MSG == 0;
[L7739]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_ERC200 := true;
[L2]                 call_totalSupply_ERC200 := false;
[L2]                 revert := revert_hold;
[L361]               havoc __exception;
[L362]               revert := false;
[L363]   COND FALSE  !(__exception)
[L389]   CALL        call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2983]              __ret_0_ := _totalSupply_ERC20[this];
[L389]   RET         call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L390]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _totalSupply_ERC20[this] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7739]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:06:11,186 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:06:11,186 INFO  L82        PathProgramCache]: Analyzing trace with hash -732015928, now seen corresponding path program 1 times
[2020-11-25 03:06:11,187 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:06:11,194 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:06:11,221 INFO  L134       CoverageAnalysis]: Checked inductivity of 66 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 66 trivial. 0 not checked.
[2020-11-25 03:06:11,222 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:06:11,222 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:06:11,222 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:06:11,222 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:06:11,222 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:06:11,222 INFO  L87              Difference]: Start difference. First operand 5075 states and 6326 transitions. cyclomatic complexity: 1253 Second operand 3 states.
[2020-11-25 03:06:11,295 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:06:11,295 INFO  L93              Difference]: Finished difference Result 5653 states and 6743 transitions.
[2020-11-25 03:06:11,295 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:06:11,296 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5653 states and 6743 transitions.
[2020-11-25 03:06:11,305 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:06:11,318 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5653 states to 5185 states and 6159 transitions.
[2020-11-25 03:06:11,318 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 975
[2020-11-25 03:06:11,319 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1023
[2020-11-25 03:06:11,319 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5185 states and 6159 transitions.
[2020-11-25 03:06:11,322 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:06:11,322 INFO  L728         BuchiCegarLoop]: Abstraction has 5185 states and 6159 transitions.
[2020-11-25 03:06:11,326 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5185 states and 6159 transitions.
[2020-11-25 03:06:11,353 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5185 to 4842.
[2020-11-25 03:06:11,353 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4842 states.
[2020-11-25 03:06:11,358 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4842 states to 4842 states and 5730 transitions.
[2020-11-25 03:06:11,358 INFO  L751         BuchiCegarLoop]: Abstraction has 4842 states and 5730 transitions.
[2020-11-25 03:06:11,358 INFO  L631         BuchiCegarLoop]: Abstraction has 4842 states and 5730 transitions.
[2020-11-25 03:06:11,358 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 03:06:11,358 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4842 states and 5730 transitions.
[2020-11-25 03:06:11,364 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:06:11,364 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:06:11,364 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:06:11,366 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:06:11,366 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_totalSupply_ERC200 := false;
[L2]                 call_totalSupply_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND FALSE  !(__exception)
[L1778]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L5093]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  COND FALSE  !(revert)
[L5097]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L5097]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5098]  COND FALSE  !(revert)
[L5101]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4815]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4815]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4816]  COND FALSE  !(revert)
[L4819]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4790]              assume msgsender_MSG != null;
[L4791]              Balance[this] := 0;
[L4792]              _name_ERC20Detailed[this] := 1676231298;
[L4793]              _symbol_ERC20Detailed[this] := 1676231298;
[L4794]              _decimals_ERC20Detailed[this] := 0;
[L4796]              _name_ERC20Detailed[this] := name_s857;
[L4797]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4798]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4819]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4820]  COND FALSE  !(revert)
[L5101]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5102]  COND FALSE  !(revert)
[L5105]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L5105]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5106]  COND FALSE  !(revert)
[L5109]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L5109]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5110]  COND FALSE  !(revert)
[L5113]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND FALSE  !(DType[this] == OrionToken)
[L4362]  COND TRUE   DType[this] == ERC20Capped
[L4363]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4363]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4364]  COND FALSE  !(revert)
[L4380]  COND FALSE  !(DType[this] == OrionToken)
[L4385]  COND TRUE   DType[this] == ERC20Capped
[L4386]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4386]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4387]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L5113]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5114]  COND FALSE  !(revert)
[L5117]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4919]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4919]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4920]  COND FALSE  !(revert)
[L4923]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4923]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4924]  COND FALSE  !(revert)
[L4927]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4927]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]  COND FALSE  !(revert)
[L4931]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND FALSE  !(DType[this] == OrionToken)
[L4362]  COND TRUE   DType[this] == ERC20Capped
[L4363]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4363]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4364]  COND FALSE  !(revert)
[L4380]  COND FALSE  !(DType[this] == OrionToken)
[L4385]  COND TRUE   DType[this] == ERC20Capped
[L4386]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4386]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4387]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4931]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]  COND FALSE  !(revert)
[L4935]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND FALSE  !(DType[this] == OrionToken)
[L4362]  COND TRUE   DType[this] == ERC20Capped
[L4363]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4363]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4364]  COND FALSE  !(revert)
[L4380]  COND FALSE  !(DType[this] == OrionToken)
[L4385]  COND TRUE   DType[this] == ERC20Capped
[L4386]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4386]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4387]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L4935]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4936]  COND FALSE  !(revert)
[L4939]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4878]              assume msgsender_MSG != null;
[L4879]              Balance[this] := 0;
[L4880]              _cap_ERC20Capped[this] := 0;
[L4882]  COND FALSE  !(!(cap_s903 > 0))
[L4886]              _cap_ERC20Capped[this] := cap_s903;
[L4939]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4940]  COND FALSE  !(revert)
[L5117]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5118]  COND FALSE  !(revert)
[L5121]  CALL        call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5050]              assume msgsender_MSG != null;
[L5051]              Balance[this] := 0;
[L5121]  RET         call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5122]  COND FALSE  !(revert)
[L1778]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1779]              assume !revert && gas >= 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND TRUE   choice == 16
[L7736]              gas := gas - 21000;
[L7737]  COND TRUE   gas >= 0
[L7738]              assume msgvalue_MSG == 0;
[L7739]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_ERC200 := true;
[L2]                 call_totalSupply_ERC200 := false;
[L2]                 revert := revert_hold;
[L361]               havoc __exception;
[L362]               revert := false;
[L363]   COND FALSE  !(__exception)
[L389]   CALL        call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2983]              __ret_0_ := _totalSupply_ERC20[this];
[L389]   RET         call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L390]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _totalSupply_ERC20[this] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7739]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L7855]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND TRUE   choice == 16
[L7736]              gas := gas - 21000;
[L7737]  COND TRUE   gas >= 0
[L7738]              assume msgvalue_MSG == 0;
[L7739]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_ERC200 := true;
[L2]                 call_totalSupply_ERC200 := false;
[L2]                 revert := revert_hold;
[L361]               havoc __exception;
[L362]               revert := false;
[L363]   COND FALSE  !(__exception)
[L389]   CALL        call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2983]              __ret_0_ := _totalSupply_ERC20[this];
[L389]   RET         call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L390]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _totalSupply_ERC20[this] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7739]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:06:11,371 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:06:11,371 INFO  L82        PathProgramCache]: Analyzing trace with hash -132960513, now seen corresponding path program 1 times
[2020-11-25 03:06:11,372 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:06:11,390 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:06:11,601 INFO  L134       CoverageAnalysis]: Checked inductivity of 1538 backedges. 7 proven. 35 refuted. 0 times theorem prover too weak. 1496 trivial. 0 not checked.
[2020-11-25 03:06:11,601 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 03:06:11,602 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 03:06:11,602 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:06:11,602 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 03:06:11,602 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 03:06:11,602 INFO  L87              Difference]: Start difference. First operand 4842 states and 5730 transitions. cyclomatic complexity: 890 Second operand 8 states.
[2020-11-25 03:06:11,731 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:06:11,731 INFO  L93              Difference]: Finished difference Result 4863 states and 5754 transitions.
[2020-11-25 03:06:11,731 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 03:06:11,731 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4863 states and 5754 transitions.
[2020-11-25 03:06:11,739 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:06:11,748 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4863 states to 4849 states and 5738 transitions.
[2020-11-25 03:06:11,748 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 988
[2020-11-25 03:06:11,748 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 988
[2020-11-25 03:06:11,748 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4849 states and 5738 transitions.
[2020-11-25 03:06:11,751 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:06:11,751 INFO  L728         BuchiCegarLoop]: Abstraction has 4849 states and 5738 transitions.
[2020-11-25 03:06:11,755 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4849 states and 5738 transitions.
[2020-11-25 03:06:11,779 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4849 to 4849.
[2020-11-25 03:06:11,779 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4849 states.
[2020-11-25 03:06:11,783 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4849 states to 4849 states and 5738 transitions.
[2020-11-25 03:06:11,784 INFO  L751         BuchiCegarLoop]: Abstraction has 4849 states and 5738 transitions.
[2020-11-25 03:06:11,784 INFO  L631         BuchiCegarLoop]: Abstraction has 4849 states and 5738 transitions.
[2020-11-25 03:06:11,784 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 03:06:11,784 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4849 states and 5738 transitions.
[2020-11-25 03:06:11,788 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:06:11,788 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:06:11,788 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:06:11,790 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:06:11,790 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_totalSupply_ERC200 := false;
[L2]                 call_totalSupply_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND TRUE   __exception
[L1753]              __tmp__Balance := Balance;
[L1754]              __tmp__DType := DType;
[L1755]              __tmp__Alloc := Alloc;
[L1756]              __tmp__balance_ADDR := balance_ADDR;
[L1757]              __tmp__M_Ref_int := M_Ref_int;
[L1758]              __tmp__sum__balances0 := sum__balances0;
[L1759]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1760]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1761]              __tmp__sum__allowances1 := sum__allowances1;
[L1762]              __tmp__M_Ref_bool := M_Ref_bool;
[L1763]              __tmp__sum := sum;
[L1764]              __tmp__Length := Length;
[L1765]              __tmp__now := now;
[L1766]              __tmp___balances_ERC20 := _balances_ERC20;
[L1767]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1768]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1769]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1770]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1771]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1772]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1773]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1774]              __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L1775]  CALL        call OrionToken_OrionToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5057]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2859]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2844]              assume msgsender_MSG != null;
[L2845]              __tmp__Balance[this] := 0;
[L2859]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  COND FALSE  !(revert)
[L5057]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5058]  COND FALSE  !(revert)
[L5061]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2903]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2888]              assume msgsender_MSG != null;
[L2889]              __tmp__Balance[this] := 0;
[L2903]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2904]  COND FALSE  !(revert)
[L5061]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5062]  COND FALSE  !(revert)
[L5065]  CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4803]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2903]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2888]              assume msgsender_MSG != null;
[L2889]              __tmp__Balance[this] := 0;
[L2903]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2904]  COND FALSE  !(revert)
[L4803]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4804]  COND FALSE  !(revert)
[L4807]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4776]              assume msgsender_MSG != null;
[L4777]              __tmp__Balance[this] := 0;
[L4778]              __tmp___name_ERC20Detailed[this] := 1676231298;
[L4779]              __tmp___symbol_ERC20Detailed[this] := 1676231298;
[L4780]              __tmp___decimals_ERC20Detailed[this] := 0;
[L4782]              __tmp___name_ERC20Detailed[this] := name_s857;
[L4783]              __tmp___symbol_ERC20Detailed[this] := symbol_s857;
[L4784]              __tmp___decimals_ERC20Detailed[this] := decimals_s857;
[L4807]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4808]  COND FALSE  !(revert)
[L5065]  RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5066]  COND FALSE  !(revert)
[L5069]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2859]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2844]              assume msgsender_MSG != null;
[L2845]              __tmp__Balance[this] := 0;
[L2859]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  COND FALSE  !(revert)
[L2945]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2903]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2888]              assume msgsender_MSG != null;
[L2889]              __tmp__Balance[this] := 0;
[L2903]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2904]  COND FALSE  !(revert)
[L2949]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L2953]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2920]              assume msgsender_MSG != null;
[L2921]              __tmp__Balance[this] := 0;
[L2922]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L2923]              __tmp__sum__balances0[this] := 0;
[L2924]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L2925]              __tmp__sum__allowances1[this] := 0;
[L2926]              __tmp___totalSupply_ERC20[this] := 0;
[L2953]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L5069]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5070]  COND FALSE  !(revert)
[L5073]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4409]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2859]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2844]              assume msgsender_MSG != null;
[L2845]              __tmp__Balance[this] := 0;
[L2859]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  COND FALSE  !(revert)
[L4409]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4413]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4286]              assume msgsender_MSG != null;
[L4287]              __tmp__Balance[this] := 0;
[L4289]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2661]              havoc newRef;
[L2662]              assume __tmp__Alloc[newRef] == false;
[L2663]              __tmp__Alloc[newRef] := true;
[L2664]              assume newRef != null;
[L4289]  RET         call __var_31 := FreshRefGenerator__fail();
[L4290]  COND FALSE  !(revert)
[L4293]              __tmp___minters_MinterRole[this] := __var_31;
[L4295]  COND TRUE   __tmp__DType[this] == OrionToken
[L4296]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2875]              __ret_0_ := msgsender_MSG;
[L4296]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4297]  COND FALSE  !(revert)
[L4318]  COND FALSE  !(__tmp__DType[this] == OrionToken)
[L4323]  COND FALSE  !(__tmp__DType[this] == ERC20Capped)
[L4328]  COND FALSE  !(__tmp__DType[this] == ERC20Mintable)
[L4333]  COND TRUE   __tmp__DType[this] == MinterRole
[L4334]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4621]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s786);
[L4204]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4260]              __var_29 := null;
[L4261]  COND FALSE  !(!(account_s699 != null))
[L4265]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s699]][account_s699];
[L4204]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4205]  COND FALSE  !(revert)
[L4208]  COND FALSE  !(!!__var_27)
[L4212]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s651]][account_s651] := true;
[L4621]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s786);
[L4622]  COND FALSE  !(revert)
[L4334]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4335]  COND FALSE  !(revert)
[L4413]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4414]  COND FALSE  !(revert)
[L5073]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5074]  COND FALSE  !(revert)
[L5077]  CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2859]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2844]              assume msgsender_MSG != null;
[L2845]              __tmp__Balance[this] := 0;
[L2859]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2903]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2888]              assume msgsender_MSG != null;
[L2889]              __tmp__Balance[this] := 0;
[L2903]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2904]  COND FALSE  !(revert)
[L4675]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4679]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2859]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2844]              assume msgsender_MSG != null;
[L2845]              __tmp__Balance[this] := 0;
[L2859]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  COND FALSE  !(revert)
[L2945]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2903]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2888]              assume msgsender_MSG != null;
[L2889]              __tmp__Balance[this] := 0;
[L2903]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2904]  COND FALSE  !(revert)
[L2949]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L2953]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2920]              assume msgsender_MSG != null;
[L2921]              __tmp__Balance[this] := 0;
[L2922]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L2923]              __tmp__sum__balances0[this] := 0;
[L2924]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L2925]              __tmp__sum__allowances1[this] := 0;
[L2926]              __tmp___totalSupply_ERC20[this] := 0;
[L2953]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L4679]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4680]  COND FALSE  !(revert)
[L4683]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4409]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2859]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2844]              assume msgsender_MSG != null;
[L2845]              __tmp__Balance[this] := 0;
[L2859]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  COND FALSE  !(revert)
[L4409]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4413]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4286]              assume msgsender_MSG != null;
[L4287]              __tmp__Balance[this] := 0;
[L4289]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2661]              havoc newRef;
[L2662]              assume __tmp__Alloc[newRef] == false;
[L2663]              __tmp__Alloc[newRef] := true;
[L2664]              assume newRef != null;
[L4289]  RET         call __var_31 := FreshRefGenerator__fail();
[L4290]  COND FALSE  !(revert)
[L4293]              __tmp___minters_MinterRole[this] := __var_31;
[L4295]  COND TRUE   __tmp__DType[this] == OrionToken
[L4296]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2875]              __ret_0_ := msgsender_MSG;
[L4296]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4297]  COND FALSE  !(revert)
[L4318]  COND FALSE  !(__tmp__DType[this] == OrionToken)
[L4323]  COND FALSE  !(__tmp__DType[this] == ERC20Capped)
[L4328]  COND FALSE  !(__tmp__DType[this] == ERC20Mintable)
[L4333]  COND TRUE   __tmp__DType[this] == MinterRole
[L4334]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4621]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s786);
[L4204]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4260]              __var_29 := null;
[L4261]  COND FALSE  !(!(account_s699 != null))
[L4265]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s699]][account_s699];
[L4204]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4205]  COND FALSE  !(revert)
[L4208]  COND FALSE  !(!!__var_27)
[L4212]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s651]][account_s651] := true;
[L4621]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s786);
[L4622]  COND FALSE  !(revert)
[L4334]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4335]  COND FALSE  !(revert)
[L4413]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4414]  COND FALSE  !(revert)
[L4683]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4684]  COND FALSE  !(revert)
[L4687]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4656]              assume msgsender_MSG != null;
[L4657]              __tmp__Balance[this] := 0;
[L4687]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]  COND FALSE  !(revert)
[L5077]  RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5078]  COND FALSE  !(revert)
[L5081]  CALL        call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4891]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2859]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2844]              assume msgsender_MSG != null;
[L2845]              __tmp__Balance[this] := 0;
[L2859]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  COND FALSE  !(revert)
[L4891]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4892]  COND FALSE  !(revert)
[L4895]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2903]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2888]              assume msgsender_MSG != null;
[L2889]              __tmp__Balance[this] := 0;
[L2903]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2904]  COND FALSE  !(revert)
[L4895]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]  COND FALSE  !(revert)
[L4899]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2859]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2844]              assume msgsender_MSG != null;
[L2845]              __tmp__Balance[this] := 0;
[L2859]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  COND FALSE  !(revert)
[L2945]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2903]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2888]              assume msgsender_MSG != null;
[L2889]              __tmp__Balance[this] := 0;
[L2903]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2904]  COND FALSE  !(revert)
[L2949]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L2953]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2920]              assume msgsender_MSG != null;
[L2921]              __tmp__Balance[this] := 0;
[L2922]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L2923]              __tmp__sum__balances0[this] := 0;
[L2924]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L2925]              __tmp__sum__allowances1[this] := 0;
[L2926]              __tmp___totalSupply_ERC20[this] := 0;
[L2953]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L4899]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4900]  COND FALSE  !(revert)
[L4903]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4409]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2859]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2844]              assume msgsender_MSG != null;
[L2845]              __tmp__Balance[this] := 0;
[L2859]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  COND FALSE  !(revert)
[L4409]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4413]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4286]              assume msgsender_MSG != null;
[L4287]              __tmp__Balance[this] := 0;
[L4289]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2661]              havoc newRef;
[L2662]              assume __tmp__Alloc[newRef] == false;
[L2663]              __tmp__Alloc[newRef] := true;
[L2664]              assume newRef != null;
[L4289]  RET         call __var_31 := FreshRefGenerator__fail();
[L4290]  COND FALSE  !(revert)
[L4293]              __tmp___minters_MinterRole[this] := __var_31;
[L4295]  COND TRUE   __tmp__DType[this] == OrionToken
[L4296]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2875]              __ret_0_ := msgsender_MSG;
[L4296]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4297]  COND FALSE  !(revert)
[L4318]  COND FALSE  !(__tmp__DType[this] == OrionToken)
[L4323]  COND FALSE  !(__tmp__DType[this] == ERC20Capped)
[L4328]  COND FALSE  !(__tmp__DType[this] == ERC20Mintable)
[L4333]  COND TRUE   __tmp__DType[this] == MinterRole
[L4334]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4621]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s786);
[L4204]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4260]              __var_29 := null;
[L4261]  COND FALSE  !(!(account_s699 != null))
[L4265]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s699]][account_s699];
[L4204]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4205]  COND FALSE  !(revert)
[L4208]  COND FALSE  !(!!__var_27)
[L4212]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s651]][account_s651] := true;
[L4621]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s786);
[L4622]  COND FALSE  !(revert)
[L4334]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4335]  COND FALSE  !(revert)
[L4413]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4414]  COND FALSE  !(revert)
[L4903]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4904]  COND FALSE  !(revert)
[L4907]  CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2859]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2844]              assume msgsender_MSG != null;
[L2845]              __tmp__Balance[this] := 0;
[L2859]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2903]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2888]              assume msgsender_MSG != null;
[L2889]              __tmp__Balance[this] := 0;
[L2903]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2904]  COND FALSE  !(revert)
[L4675]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4679]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2859]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2844]              assume msgsender_MSG != null;
[L2845]              __tmp__Balance[this] := 0;
[L2859]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  COND FALSE  !(revert)
[L2945]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2903]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2888]              assume msgsender_MSG != null;
[L2889]              __tmp__Balance[this] := 0;
[L2903]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2904]  COND FALSE  !(revert)
[L2949]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L2953]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2920]              assume msgsender_MSG != null;
[L2921]              __tmp__Balance[this] := 0;
[L2922]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L2923]              __tmp__sum__balances0[this] := 0;
[L2924]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L2925]              __tmp__sum__allowances1[this] := 0;
[L2926]              __tmp___totalSupply_ERC20[this] := 0;
[L2953]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L4679]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4680]  COND FALSE  !(revert)
[L4683]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4409]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2859]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2844]              assume msgsender_MSG != null;
[L2845]              __tmp__Balance[this] := 0;
[L2859]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2860]  COND FALSE  !(revert)
[L4409]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4413]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4286]              assume msgsender_MSG != null;
[L4287]              __tmp__Balance[this] := 0;
[L4289]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2661]              havoc newRef;
[L2662]              assume __tmp__Alloc[newRef] == false;
[L2663]              __tmp__Alloc[newRef] := true;
[L2664]              assume newRef != null;
[L4289]  RET         call __var_31 := FreshRefGenerator__fail();
[L4290]  COND FALSE  !(revert)
[L4293]              __tmp___minters_MinterRole[this] := __var_31;
[L4295]  COND TRUE   __tmp__DType[this] == OrionToken
[L4296]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2875]              __ret_0_ := msgsender_MSG;
[L4296]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4297]  COND FALSE  !(revert)
[L4318]  COND FALSE  !(__tmp__DType[this] == OrionToken)
[L4323]  COND FALSE  !(__tmp__DType[this] == ERC20Capped)
[L4328]  COND FALSE  !(__tmp__DType[this] == ERC20Mintable)
[L4333]  COND TRUE   __tmp__DType[this] == MinterRole
[L4334]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4621]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s786);
[L4204]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4260]              __var_29 := null;
[L4261]  COND FALSE  !(!(account_s699 != null))
[L4265]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s699]][account_s699];
[L4204]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4205]  COND FALSE  !(revert)
[L4208]  COND FALSE  !(!!__var_27)
[L4212]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s651]][account_s651] := true;
[L4621]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s786);
[L4622]  COND FALSE  !(revert)
[L4334]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4335]  COND FALSE  !(revert)
[L4413]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4414]  COND FALSE  !(revert)
[L4683]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4684]  COND FALSE  !(revert)
[L4687]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4656]              assume msgsender_MSG != null;
[L4657]              __tmp__Balance[this] := 0;
[L4687]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]  COND FALSE  !(revert)
[L4907]  RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4908]  COND FALSE  !(revert)
[L4911]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4864]              assume msgsender_MSG != null;
[L4865]              __tmp__Balance[this] := 0;
[L4866]              __tmp___cap_ERC20Capped[this] := 0;
[L4868]  COND FALSE  !(!(cap_s903 > 0))
[L4872]              __tmp___cap_ERC20Capped[this] := cap_s903;
[L4911]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4912]  COND FALSE  !(revert)
[L5081]  RET         call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5082]  COND FALSE  !(revert)
[L5085]  CALL        call OrionToken_OrionToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5042]              assume msgsender_MSG != null;
[L5043]              __tmp__Balance[this] := 0;
[L5085]  RET         call OrionToken_OrionToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5086]  COND FALSE  !(revert)
[L1775]  RET         call OrionToken_OrionToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L1776]              assume revert || gas < 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND TRUE   choice == 16
[L7736]              gas := gas - 21000;
[L7737]  COND TRUE   gas >= 0
[L7738]              assume msgvalue_MSG == 0;
[L7739]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_ERC200 := true;
[L2]                 call_totalSupply_ERC200 := false;
[L2]                 revert := revert_hold;
[L361]               havoc __exception;
[L362]               revert := false;
[L363]   COND FALSE  !(__exception)
[L389]   CALL        call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2983]              __ret_0_ := _totalSupply_ERC20[this];
[L389]   RET         call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L390]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _totalSupply_ERC20[this] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7739]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L7855]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND TRUE   choice == 16
[L7736]              gas := gas - 21000;
[L7737]  COND TRUE   gas >= 0
[L7738]              assume msgvalue_MSG == 0;
[L7739]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_ERC200 := true;
[L2]                 call_totalSupply_ERC200 := false;
[L2]                 revert := revert_hold;
[L361]               havoc __exception;
[L362]               revert := false;
[L363]   COND FALSE  !(__exception)
[L389]   CALL        call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2983]              __ret_0_ := _totalSupply_ERC20[this];
[L389]   RET         call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L390]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _totalSupply_ERC20[this] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7739]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:06:11,795 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:06:11,795 INFO  L82        PathProgramCache]: Analyzing trace with hash -167364796, now seen corresponding path program 1 times
[2020-11-25 03:06:11,796 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:06:11,807 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:06:11,963 INFO  L134       CoverageAnalysis]: Checked inductivity of 1544 backedges. 0 proven. 48 refuted. 0 times theorem prover too weak. 1496 trivial. 0 not checked.
[2020-11-25 03:06:11,963 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 03:06:11,963 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [3] total 3
[2020-11-25 03:06:11,963 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:06:11,964 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:06:11,964 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:06:11,964 INFO  L87              Difference]: Start difference. First operand 4849 states and 5738 transitions. cyclomatic complexity: 891 Second operand 3 states.
[2020-11-25 03:06:11,999 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:06:11,999 INFO  L93              Difference]: Finished difference Result 4852 states and 5741 transitions.
[2020-11-25 03:06:11,999 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:06:11,999 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4852 states and 5741 transitions.
[2020-11-25 03:06:12,007 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:06:12,016 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4852 states to 4852 states and 5741 transitions.
[2020-11-25 03:06:12,016 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 988
[2020-11-25 03:06:12,016 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 988
[2020-11-25 03:06:12,016 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4852 states and 5741 transitions.
[2020-11-25 03:06:12,020 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:06:12,020 INFO  L728         BuchiCegarLoop]: Abstraction has 4852 states and 5741 transitions.
[2020-11-25 03:06:12,023 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4852 states and 5741 transitions.
[2020-11-25 03:06:12,046 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4852 to 4850.
[2020-11-25 03:06:12,046 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4850 states.
[2020-11-25 03:06:12,051 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4850 states to 4850 states and 5739 transitions.
[2020-11-25 03:06:12,051 INFO  L751         BuchiCegarLoop]: Abstraction has 4850 states and 5739 transitions.
[2020-11-25 03:06:12,051 INFO  L631         BuchiCegarLoop]: Abstraction has 4850 states and 5739 transitions.
[2020-11-25 03:06:12,051 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 03:06:12,051 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4850 states and 5739 transitions.
[2020-11-25 03:06:12,056 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:06:12,056 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:06:12,056 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:06:12,058 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:06:12,059 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_totalSupply_ERC200 := false;
[L2]                 call_totalSupply_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND FALSE  !(__exception)
[L1778]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L5093]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  COND FALSE  !(revert)
[L5097]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L5097]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5098]  COND FALSE  !(revert)
[L5101]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4815]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4815]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4816]  COND FALSE  !(revert)
[L4819]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4790]              assume msgsender_MSG != null;
[L4791]              Balance[this] := 0;
[L4792]              _name_ERC20Detailed[this] := 1676231298;
[L4793]              _symbol_ERC20Detailed[this] := 1676231298;
[L4794]              _decimals_ERC20Detailed[this] := 0;
[L4796]              _name_ERC20Detailed[this] := name_s857;
[L4797]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4798]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4819]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4820]  COND FALSE  !(revert)
[L5101]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5102]  COND FALSE  !(revert)
[L5105]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L5105]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5106]  COND FALSE  !(revert)
[L5109]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L5109]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5110]  COND FALSE  !(revert)
[L5113]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L5113]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5114]  COND FALSE  !(revert)
[L5117]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4919]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4919]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4920]  COND FALSE  !(revert)
[L4923]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4923]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4924]  COND FALSE  !(revert)
[L4927]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4927]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]  COND FALSE  !(revert)
[L4931]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4931]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]  COND FALSE  !(revert)
[L4935]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L4935]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4936]  COND FALSE  !(revert)
[L4939]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4878]              assume msgsender_MSG != null;
[L4879]              Balance[this] := 0;
[L4880]              _cap_ERC20Capped[this] := 0;
[L4882]  COND FALSE  !(!(cap_s903 > 0))
[L4886]              _cap_ERC20Capped[this] := cap_s903;
[L4939]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4940]  COND FALSE  !(revert)
[L5117]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5118]  COND FALSE  !(revert)
[L5121]  CALL        call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5050]              assume msgsender_MSG != null;
[L5051]              Balance[this] := 0;
[L5121]  RET         call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5122]  COND FALSE  !(revert)
[L1778]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1779]              assume !revert && gas >= 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND TRUE   choice == 16
[L7736]              gas := gas - 21000;
[L7737]  COND TRUE   gas >= 0
[L7738]              assume msgvalue_MSG == 0;
[L7739]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_ERC200 := true;
[L2]                 call_totalSupply_ERC200 := false;
[L2]                 revert := revert_hold;
[L361]               havoc __exception;
[L362]               revert := false;
[L363]   COND FALSE  !(__exception)
[L389]   CALL        call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2983]              __ret_0_ := _totalSupply_ERC20[this];
[L389]   RET         call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L390]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _totalSupply_ERC20[this] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7739]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L7855]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND TRUE   choice == 16
[L7736]              gas := gas - 21000;
[L7737]  COND TRUE   gas >= 0
[L7738]              assume msgvalue_MSG == 0;
[L7739]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_ERC200 := true;
[L2]                 call_totalSupply_ERC200 := false;
[L2]                 revert := revert_hold;
[L361]               havoc __exception;
[L362]               revert := false;
[L363]   COND FALSE  !(__exception)
[L389]   CALL        call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2983]              __ret_0_ := _totalSupply_ERC20[this];
[L389]   RET         call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L390]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _totalSupply_ERC20[this] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L7739]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L7855]  RET         call CorralChoice_OrionToken(this);

[2020-11-25 03:06:12,063 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:06:12,063 INFO  L82        PathProgramCache]: Analyzing trace with hash -1551251796, now seen corresponding path program 1 times
[2020-11-25 03:06:12,064 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:06:12,080 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:06:12,229 INFO  L134       CoverageAnalysis]: Checked inductivity of 1556 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1556 trivial. 0 not checked.
[2020-11-25 03:06:12,229 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:06:12,229 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 03:06:12,230 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:06:12,230 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 03:06:12,230 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 03:06:12,230 INFO  L87              Difference]: Start difference. First operand 4850 states and 5739 transitions. cyclomatic complexity: 891 Second operand 4 states.
[2020-11-25 03:06:12,264 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:06:12,265 INFO  L93              Difference]: Finished difference Result 4851 states and 5738 transitions.
[2020-11-25 03:06:12,265 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 03:06:12,265 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4851 states and 5738 transitions.
[2020-11-25 03:06:12,274 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:06:12,284 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4851 states to 4844 states and 5730 transitions.
[2020-11-25 03:06:12,284 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 982
[2020-11-25 03:06:12,284 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 982
[2020-11-25 03:06:12,284 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4844 states and 5730 transitions.
[2020-11-25 03:06:12,287 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:06:12,287 INFO  L728         BuchiCegarLoop]: Abstraction has 4844 states and 5730 transitions.
[2020-11-25 03:06:12,290 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4844 states and 5730 transitions.
[2020-11-25 03:06:12,318 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4844 to 4842.
[2020-11-25 03:06:12,318 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4842 states.
[2020-11-25 03:06:12,322 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4842 states to 4842 states and 5728 transitions.
[2020-11-25 03:06:12,322 INFO  L751         BuchiCegarLoop]: Abstraction has 4842 states and 5728 transitions.
[2020-11-25 03:06:12,322 INFO  L631         BuchiCegarLoop]: Abstraction has 4842 states and 5728 transitions.
[2020-11-25 03:06:12,322 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 03:06:12,322 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4842 states and 5728 transitions.
[2020-11-25 03:06:12,327 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:06:12,327 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:06:12,328 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:06:12,330 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:06:12,330 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_totalSupply_ERC200 := false;
[L2]                 call_totalSupply_ERC200 := false;
[L2]     CALL        call main();
[L7845]              assume null == 0;
[L7846]  CALL        call this := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L7846]  RET         call this := FreshRefGenerator__success();
[L7847]              assume now >= 0;
[L7848]              assume DType[this] == OrionToken;
[L7849]              assume msgvalue_MSG == 0;
[L7850]              gas := gas - 53000;
[L7851]  CALL        call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L1750]              havoc __exception;
[L1751]              revert := false;
[L1752]  COND FALSE  !(__exception)
[L1778]  CALL        call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L5093]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5094]  COND FALSE  !(revert)
[L5097]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L5097]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5098]  COND FALSE  !(revert)
[L5101]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L4815]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4815]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4816]  COND FALSE  !(revert)
[L4819]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4790]              assume msgsender_MSG != null;
[L4791]              Balance[this] := 0;
[L4792]              _name_ERC20Detailed[this] := 1676231298;
[L4793]              _symbol_ERC20Detailed[this] := 1676231298;
[L4794]              _decimals_ERC20Detailed[this] := 0;
[L4796]              _name_ERC20Detailed[this] := name_s857;
[L4797]              _symbol_ERC20Detailed[this] := symbol_s857;
[L4798]              _decimals_ERC20Detailed[this] := decimals_s857;
[L4819]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s857, symbol_s857, decimals_s857);
[L4820]  COND FALSE  !(revert)
[L5101]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -2041904824, 935364311, 8);
[L5102]  COND FALSE  !(revert)
[L5105]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L5105]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5106]  COND FALSE  !(revert)
[L5109]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L5109]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5110]  COND FALSE  !(revert)
[L5113]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L5113]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5114]  COND FALSE  !(revert)
[L5117]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4919]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4919]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4920]  COND FALSE  !(revert)
[L4923]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4923]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4924]  COND FALSE  !(revert)
[L4927]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4927]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]  COND FALSE  !(revert)
[L4931]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND FALSE  !(DType[this] == OrionToken)
[L4362]  COND TRUE   DType[this] == ERC20Capped
[L4363]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4363]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4364]  COND FALSE  !(revert)
[L4380]  COND FALSE  !(DType[this] == OrionToken)
[L4385]  COND TRUE   DType[this] == ERC20Capped
[L4386]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4386]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4387]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4931]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]  COND FALSE  !(revert)
[L4935]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4695]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]  COND FALSE  !(revert)
[L4699]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L4699]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  COND FALSE  !(revert)
[L4703]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2961]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L2961]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2911]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2896]              assume msgsender_MSG != null;
[L2897]              Balance[this] := 0;
[L2911]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2912]  COND FALSE  !(revert)
[L2965]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2933]              assume msgsender_MSG != null;
[L2934]              Balance[this] := 0;
[L2935]              _balances_ERC20[this] := zeroRefintArr();
[L2936]              sum__balances0[this] := 0;
[L2937]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2938]              sum__allowances1[this] := 0;
[L2939]              _totalSupply_ERC20[this] := 0;
[L2969]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L4703]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4704]  COND FALSE  !(revert)
[L4707]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4423]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2867]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2867]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2868]  COND FALSE  !(revert)
[L4423]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4424]  COND FALSE  !(revert)
[L4427]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4348]              assume msgsender_MSG != null;
[L4349]              Balance[this] := 0;
[L4351]  CALL        call __var_31 := FreshRefGenerator__success();
[L2669]              havoc newRef;
[L2670]              assume Alloc[newRef] == false;
[L2671]              Alloc[newRef] := true;
[L2672]              assume newRef != null;
[L4351]  RET         call __var_31 := FreshRefGenerator__success();
[L4352]  COND FALSE  !(revert)
[L4355]              _minters_MinterRole[this] := __var_31;
[L4357]  COND TRUE   DType[this] == OrionToken
[L4358]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2881]              __ret_0_ := msgsender_MSG;
[L4358]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]  COND FALSE  !(revert)
[L4380]  COND TRUE   DType[this] == OrionToken
[L4381]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4629]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4218]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4272]              __var_29 := null;
[L4273]  COND FALSE  !(!(account_s699 != null))
[L4277]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s699]][account_s699];
[L4218]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s651, account_s651);
[L4219]  COND FALSE  !(revert)
[L4222]  COND FALSE  !(!!__var_27)
[L4226]              M_Ref_bool[bearer_Roles.Role[role_s651]][account_s651] := true;
[L4629]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s786);
[L4630]  COND FALSE  !(revert)
[L4633]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4381]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4382]  COND FALSE  !(revert)
[L4427]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]  COND FALSE  !(revert)
[L4707]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4708]  COND FALSE  !(revert)
[L4711]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4664]              assume msgsender_MSG != null;
[L4665]              Balance[this] := 0;
[L4711]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]  COND FALSE  !(revert)
[L4935]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4936]  COND FALSE  !(revert)
[L4939]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4878]              assume msgsender_MSG != null;
[L4879]              Balance[this] := 0;
[L4880]              _cap_ERC20Capped[this] := 0;
[L4882]  COND FALSE  !(!(cap_s903 > 0))
[L4886]              _cap_ERC20Capped[this] := cap_s903;
[L4939]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s903);
[L4940]  COND FALSE  !(revert)
[L5117]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, 100000000 * 100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5118]  COND FALSE  !(revert)
[L5121]  CALL        call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5050]              assume msgsender_MSG != null;
[L5051]              Balance[this] := 0;
[L5121]  RET         call OrionToken_OrionToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5122]  COND FALSE  !(revert)
[L1778]  RET         call OrionToken_OrionToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1779]              assume !revert && gas >= 0;
[L7851]  RET         call OrionToken_OrionToken(this, msgsender_MSG, msgvalue_MSG);
[L7852]              assume !revert && gas >= 0;
[L7855]  CALL        call CorralChoice_OrionToken(this);
[L7678]              havoc msgsender_MSG;
[L7679]              havoc msgvalue_MSG;
[L7680]              havoc choice;
[L7681]              havoc __ret_0_totalSupply;
[L7682]              havoc account_s258;
[L7683]              havoc __ret_0_balanceOf;
[L7684]              havoc recipient_s277;
[L7685]              havoc amount_s277;
[L7686]              havoc __ret_0_transfer;
[L7687]              havoc owner_s293;
[L7688]              havoc spender_s293;
[L7689]              havoc __ret_0_allowance;
[L7690]              havoc spender_s312;
[L7691]              havoc amount_s312;
[L7692]              havoc __ret_0_approve;
[L7693]              havoc sender_s348;
[L7694]              havoc recipient_s348;
[L7695]              havoc amount_s348;
[L7696]              havoc __ret_0_transferFrom;
[L7697]              havoc spender_s375;
[L7698]              havoc addedValue_s375;
[L7699]              havoc __ret_0_increaseAllowance;
[L7700]              havoc spender_s403;
[L7701]              havoc subtractedValue_s403;
[L7702]              havoc __ret_0_decreaseAllowance;
[L7703]              havoc account_s749;
[L7704]              havoc __ret_0_isMinter;
[L7705]              havoc account_s761;
[L7706]              havoc account_s826;
[L7707]              havoc amount_s826;
[L7708]              havoc __ret_0_mint;
[L7709]              havoc name_s857;
[L7710]              havoc symbol_s857;
[L7711]              havoc decimals_s857;
[L7712]              havoc __ret_0_name;
[L7713]              havoc __ret_0_symbol;
[L7714]              havoc __ret_0_decimals;
[L7715]              havoc cap_s903;
[L7716]              havoc __ret_0_cap;
[L7717]              havoc tmpNow;
[L7718]              havoc gas;
[L7719]              assume gas > 4000000 && gas <= 8000000;
[L7720]              tmpNow := now;
[L7721]              havoc now;
[L7722]              assume now > tmpNow;
[L7723]              assume msgsender_MSG != null;
[L7724]              assume DType[msgsender_MSG] != SafeMath;
[L7725]              assume DType[msgsender_MSG] != Context;
[L7726]              assume DType[msgsender_MSG] != IERC20;
[L7727]              assume DType[msgsender_MSG] != ERC20;
[L7728]              assume DType[msgsender_MSG] != Roles;
[L7729]              assume DType[msgsender_MSG] != MinterRole;
[L7730]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]              assume DType[msgsender_MSG] != ERC20Capped;
[L7733]              assume DType[msgsender_MSG] != OrionToken;
[L7734]              Alloc[msgsender_MSG] := true;
[L7735]  COND TRUE   choice == 16
[L7736]              gas := gas - 21000;
[L7737]  COND TRUE   gas >= 0
[L7738]              assume msgvalue_MSG == 0;
[L7739]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_ERC200 := true;
[L2]                 call_totalSupply_ERC200 := false;
[L2]                 revert := revert_hold;
[L361]               havoc __exception;
[L362]               revert := false;
[L363]   COND TRUE   __exception
[L364]               __tmp__Balance := Balance;
[L365]               __tmp__DType := DType;
[L366]               __tmp__Alloc := Alloc;
[L367]               __tmp__balance_ADDR := balance_ADDR;
[L368]               __tmp__M_Ref_int := M_Ref_int;
[L369]               __tmp__sum__balances0 := sum__balances0;
[L370]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L371]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L372]               __tmp__sum__allowances1 := sum__allowances1;
[L373]               __tmp__M_Ref_bool := M_Ref_bool;
[L374]               __tmp__sum := sum;
[L375]               __tmp__Length := Length;
[L376]               __tmp__now := now;
[L377]               __tmp___balances_ERC20 := _balances_ERC20;
[L378]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L379]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L380]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L381]               __tmp___minters_MinterRole := _minters_MinterRole;
[L382]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L383]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L384]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L385]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L386]   CALL        call __ret_0_ := totalSupply_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2977]              __ret_0_ := __tmp___totalSupply_ERC20[this];
[L386]   RET         call __ret_0_ := totalSupply_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L387]               assume revert || gas < 0;
[L7739]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L7855]  RET         call CorralChoice_OrionToken(this);

Loop:
[L7855]  CALL       call CorralChoice_OrionToken(this);
[L7678]             havoc msgsender_MSG;
[L7679]             havoc msgvalue_MSG;
[L7680]             havoc choice;
[L7681]             havoc __ret_0_totalSupply;
[L7682]             havoc account_s258;
[L7683]             havoc __ret_0_balanceOf;
[L7684]             havoc recipient_s277;
[L7685]             havoc amount_s277;
[L7686]             havoc __ret_0_transfer;
[L7687]             havoc owner_s293;
[L7688]             havoc spender_s293;
[L7689]             havoc __ret_0_allowance;
[L7690]             havoc spender_s312;
[L7691]             havoc amount_s312;
[L7692]             havoc __ret_0_approve;
[L7693]             havoc sender_s348;
[L7694]             havoc recipient_s348;
[L7695]             havoc amount_s348;
[L7696]             havoc __ret_0_transferFrom;
[L7697]             havoc spender_s375;
[L7698]             havoc addedValue_s375;
[L7699]             havoc __ret_0_increaseAllowance;
[L7700]             havoc spender_s403;
[L7701]             havoc subtractedValue_s403;
[L7702]             havoc __ret_0_decreaseAllowance;
[L7703]             havoc account_s749;
[L7704]             havoc __ret_0_isMinter;
[L7705]             havoc account_s761;
[L7706]             havoc account_s826;
[L7707]             havoc amount_s826;
[L7708]             havoc __ret_0_mint;
[L7709]             havoc name_s857;
[L7710]             havoc symbol_s857;
[L7711]             havoc decimals_s857;
[L7712]             havoc __ret_0_name;
[L7713]             havoc __ret_0_symbol;
[L7714]             havoc __ret_0_decimals;
[L7715]             havoc cap_s903;
[L7716]             havoc __ret_0_cap;
[L7717]             havoc tmpNow;
[L7718]             havoc gas;
[L7719]             assume gas > 4000000 && gas <= 8000000;
[L7720]             tmpNow := now;
[L7721]             havoc now;
[L7722]             assume now > tmpNow;
[L7723]             assume msgsender_MSG != null;
[L7724]             assume DType[msgsender_MSG] != SafeMath;
[L7725]             assume DType[msgsender_MSG] != Context;
[L7726]             assume DType[msgsender_MSG] != IERC20;
[L7727]             assume DType[msgsender_MSG] != ERC20;
[L7728]             assume DType[msgsender_MSG] != Roles;
[L7729]             assume DType[msgsender_MSG] != MinterRole;
[L7730]             assume DType[msgsender_MSG] != ERC20Mintable;
[L7731]             assume DType[msgsender_MSG] != ERC20Detailed;
[L7732]             assume DType[msgsender_MSG] != ERC20Capped;
[L7733]             assume DType[msgsender_MSG] != OrionToken;
[L7734]             Alloc[msgsender_MSG] := true;
[L7735]  COND TRUE  choice == 16
[L7736]             gas := gas - 21000;
[L7737]  COND TRUE  gas >= 0
[L7738]             assume msgvalue_MSG == 0;
[L7739]  CALL       call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                revert_hold := revert;
[L2]                revert := false;
[L2]                assume _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                call_totalSupply_ERC200 := true;
[L2]                call_totalSupply_ERC200 := false;
[L2]                revert := revert_hold;
[L361]              havoc __exception;
[L362]              revert := false;
[L363]   COND TRUE  __exception
[L364]              __tmp__Balance := Balance;
[L365]              __tmp__DType := DType;
[L366]              __tmp__Alloc := Alloc;
[L367]              __tmp__balance_ADDR := balance_ADDR;
[L368]              __tmp__M_Ref_int := M_Ref_int;
[L369]              __tmp__sum__balances0 := sum__balances0;
[L370]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L371]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L372]              __tmp__sum__allowances1 := sum__allowances1;
[L373]              __tmp__M_Ref_bool := M_Ref_bool;
[L374]              __tmp__sum := sum;
[L375]              __tmp__Length := Length;
[L376]              __tmp__now := now;
[L377]              __tmp___balances_ERC20 := _balances_ERC20;
[L378]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L379]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L380]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L381]              __tmp___minters_MinterRole := _minters_MinterRole;
[L382]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L383]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L384]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L385]              __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L386]   CALL       call __ret_0_ := totalSupply_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2977]             __ret_0_ := __tmp___totalSupply_ERC20[this];
[L386]   RET        call __ret_0_ := totalSupply_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L387]              assume revert || gas < 0;
[L7739]  RET        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L7855]  RET        call CorralChoice_OrionToken(this);

[2020-11-25 03:06:12,335 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:06:12,335 INFO  L82        PathProgramCache]: Analyzing trace with hash 890465818, now seen corresponding path program 1 times
[2020-11-25 03:06:12,336 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:06:12,357 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:06:12,528 INFO  L134       CoverageAnalysis]: Checked inductivity of 1532 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1532 trivial. 0 not checked.
[2020-11-25 03:06:12,528 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:06:12,528 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 03:06:12,528 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:06:12,529 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 03:06:12,529 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 03:06:12,529 INFO  L87              Difference]: Start difference. First operand 4842 states and 5728 transitions. cyclomatic complexity: 888 Second operand 5 states.
[2020-11-25 03:06:12,874 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:06:12,874 INFO  L93              Difference]: Finished difference Result 3046 states and 3545 transitions.
[2020-11-25 03:06:12,874 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 03:06:12,874 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3046 states and 3545 transitions.
[2020-11-25 03:06:12,880 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 03:06:12,880 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3046 states to 0 states and 0 transitions.
[2020-11-25 03:06:12,880 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 03:06:12,880 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 03:06:12,880 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 03:06:12,880 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:06:12,880 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 03:06:12,880 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 03:06:12,880 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 03:06:12,880 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 03:06:12,880 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 03:06:12,880 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 03:06:12,880 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 03:06:12,883 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 03:06:12 BasicIcfg
[2020-11-25 03:06:12,883 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 03:06:12,884 INFO  L168              Benchmark]: Toolchain (without parser) took 8688.05 ms. Allocated memory was 1.0 GB in the beginning and 2.2 GB in the end (delta: 1.1 GB). Free memory was 929.8 MB in the beginning and 1.1 GB in the end (delta: -129.3 MB). Peak memory consumption was 1.0 GB. Max. memory is 15.3 GB.
[2020-11-25 03:06:12,885 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.23 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 03:06:12,885 INFO  L168              Benchmark]: Boogie Preprocessor took 140.46 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.7 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-25 03:06:12,885 INFO  L168              Benchmark]: UtopiaSpecLang took 71.98 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 903.0 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 03:06:12,886 INFO  L168              Benchmark]: Boogie Printer took 33.35 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 03:06:12,886 INFO  L168              Benchmark]: RCFGBuilder took 1158.23 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 69.7 MB). Free memory was 897.6 MB in the beginning and 933.1 MB in the end (delta: -35.5 MB). Peak memory consumption was 185.3 MB. Max. memory is 15.3 GB.
[2020-11-25 03:06:12,886 INFO  L168              Benchmark]: UtopiaLTL2Aut took 36.43 ms. Allocated memory is still 1.1 GB. Free memory was 933.1 MB in the beginning and 926.1 MB in the end (delta: 7.1 MB). Peak memory consumption was 7.1 MB. Max. memory is 15.3 GB.
[2020-11-25 03:06:12,887 INFO  L168              Benchmark]: BÃ¼chi Program Product took 2163.17 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 184.0 MB). Free memory was 926.1 MB in the beginning and 1.1 GB in the end (delta: -163.0 MB). Peak memory consumption was 493.2 MB. Max. memory is 15.3 GB.
[2020-11-25 03:06:12,887 INFO  L168              Benchmark]: BlockEncodingV2 took 191.37 ms. Allocated memory is still 1.3 GB. Free memory was 1.1 GB in the beginning and 967.9 MB in the end (delta: 118.9 MB). Peak memory consumption was 118.9 MB. Max. memory is 15.3 GB.
[2020-11-25 03:06:12,887 INFO  L168              Benchmark]: BuchiAutomizer took 4889.78 ms. Allocated memory was 1.3 GB in the beginning and 2.2 GB in the end (delta: 880.8 MB). Free memory was 967.9 MB in the beginning and 1.1 GB in the end (delta: -91.2 MB). Peak memory consumption was 789.6 MB. Max. memory is 15.3 GB.
[2020-11-25 03:06:12,890 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    7816 locations, 15032 edges
  - StatisticsResult: Encoded RCFG
    7652 locations, 14575 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.23 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 140.46 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.7 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 71.98 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 903.0 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 33.35 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1158.23 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 69.7 MB). Free memory was 897.6 MB in the beginning and 933.1 MB in the end (delta: -35.5 MB). Peak memory consumption was 185.3 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 36.43 ms. Allocated memory is still 1.1 GB. Free memory was 933.1 MB in the beginning and 926.1 MB in the end (delta: 7.1 MB). Peak memory consumption was 7.1 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 2163.17 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 184.0 MB). Free memory was 926.1 MB in the beginning and 1.1 GB in the end (delta: -163.0 MB). Peak memory consumption was 493.2 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 191.37 ms. Allocated memory is still 1.3 GB. Free memory was 1.1 GB in the beginning and 967.9 MB in the end (delta: 118.9 MB). Peak memory consumption was 118.9 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 4889.78 ms. Allocated memory was 1.3 GB in the beginning and 2.2 GB in the end (delta: 880.8 MB). Free memory was 967.9 MB in the beginning and 1.1 GB in the end (delta: -91.2 MB). Peak memory consumption was 789.6 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2932 locations, 4569 edges
  - StatisticsResult: BuchiProgram size
    7816 locations, 15032 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 11 terminating modules (11 trivial, 0 deterministic, 0 nondeterministic). 11 modules have a trivial ranking function, the largest among these consists of 12 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 4.8s and 12 iterations.  TraceHistogramMax:12. Analysis of lassos took 1.6s. Construction of modules took 1.2s. BÃ¼chi inclusion checks took 0.8s. Highest rank in rank-based complementation 0. Minimization of det autom 11. Minimization of nondet autom 0. Automata minimization 0.4s AutomataMinimizationTime, 10 MinimizatonAttempts, 1011 StatesRemovedByMinimization, 8 NontrivialMinimizations. Non-live state removal took 0.3s Buchi closure took 0.0s. Biggest automaton had 5604 states and ocurred in iteration 1.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 60367 SDtfs, 18940 SDslu, 147191 SDs, 0 SdLazy, 11808 SolverSat, 4803 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 1.2s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU11 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_totalSupply_ERC200) ==> ( <>(success_totalSupply_ERC200) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
